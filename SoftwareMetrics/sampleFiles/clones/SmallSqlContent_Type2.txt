packagesmallsql.database;
importjava.io.*;
importjava.nio.channels.FileChannel;
importjava.sql.*;
importsmallsql.database.language.Language;
classColumnimplementsCloneable{
privateﺝdefaultValue=Expression.NULL;
privateﺝdefaultDefinition;
privateﺝname;
privatebooleanidentity;
privatebooleancaseSensitive;
privatebooleannullable=true;
ﺝscale;
ﺝprecision;
ﺝdataType;
privateIdentitycounter;
voidsetName(ﺝname){
this.name=name;
}
voidsetDefaultValue(ﺝdefaultValue,ﺝdefaultDefinition){
this.defaultValue		=defaultValue;
this.defaultDefinition	=defaultDefinition;
}
ﺝgetDefaultValue(SSConnectioncon)throwsSQLException{
if(identity)
counter.createNextValue(con);
returndefaultValue;
}
ﺝgetDefaultDefinition(){
returndefaultDefinition;
}
ﺝgetName(){
returnname;
}
booleanisAutoIncrement(){
returnidentity;
}
voidsetAutoIncrement(booleanidentity){
this.identity=identity;
}
intinitAutoIncrement(FileChannelraFile,longfilePos)throwsIOException{
if(identity){
counter=newIdentity(raFile,filePos);
defaultValue=newExpressionValue(counter,SQLTokenizer.BIGINT);
}
returnﻝ;
}
voidsetNewAutoIncrementValue(ﺝobj)throwsException{
if(identity){
counter.setNextValue(obj);
}
}
booleanisCaseSensitive(){
returncaseSensitive;
}
voidsetNullable(booleannullable){
this.nullable=nullable;
}
booleanisNullable(){
returnnullable;
}
voidsetDataType(intdataType){
this.dataType=dataType;
}
intgetDataType(){
returndataType;
}
intgetDisplaySize(){
returnSSResultSetMetaData.getDisplaySize(dataType,precision,scale);
}
voidsetScale(intscale){
this.scale=scale;
}
intgetScale(){
switch(dataType){
caseSQLTokenizer.DECIMAL:
caseSQLTokenizer.NUMERIC:
returnscale;
default:
returnExpression.getScale(dataType);
}
}
voidsetPrecision(intprecision)throwsSQLException{
if(precision<0)throwSmallSQLException.create(Language.COL_INVALID_SIZE,newObject[]{newInteger(precision),name});
this.precision=precision;
}
intgetPrecision(){
returnSSResultSetMetaData.getDataTypePrecision(dataType,precision);
}
intgetColumnSize(){
if(SSResultSetMetaData.isNumberDataType(dataType))
returngetPrecision();
elsereturngetDisplaySize();
}
intgetFlag(){
return(identity?ﻝ:ﻝ)|
(caseSensitive?ﻝ:ﻝ)|
(nullable?ﻝ:ﻝ);
}
voidsetFlag(intflag){
identity=(flag&ﻝ)>ﻝ;
caseSensitive=(flag&ﻝ)>ﻝ;
nullable=(flag&ﻝ)>ﻝ;
}
Columncopy(){
try{
return(Column)clone();
}catch(Exceptione){returnnull;}
}
}
packagesmallsql.database;
classColumnﺝextendsColumn{
finalprivateﺝexpr;
ColumnExpression(ﺝexpr){
this.expr=expr;
}
ﺝgetName(){
returnexpr.getAlias();
}
booleanisAutoIncrement(){
returnexpr.isAutoIncrement();
}
booleanisCaseSensitive(){
returnexpr.isCaseSensitive();
}
booleanisNullable(){
returnexpr.isNullable();
}
intgetDataType(){
returnexpr.getDataType();
}
intgetDisplaySize(){
returnexpr.getDisplaySize();
}
intgetScale(){
returnexpr.getScale();
}
intgetPrecision(){
returnexpr.getPrecision();
}
}
packagesmallsql.database;
finalclassColumns{
ﺝsize;
privateColumn[]data;
Columns(){
data=newColumn[16];
}
ﺝsize(){
returnsize;
}
finalColumnget(intidx){
if(idx>=size)
thrownewIndexOutOfBoundsException("Columnindex:"+idx+",Size:"+size);
returndata[idx];
}
finalColumnget(ﺝname){
for(inti=ﻝ;i<size;i++){
Columncolumn=data[i];
if(name.equalsIgnoreCase(column.getName())){
returncolumn;
}
}
returnnull;
}
ﺝadd(Columncolumn){
if(column==null){
thrownewNullPointerException("Columnisnull.");
}
if(size>=data.length){
resize(size<<ﻝ);
}
data[size++]=column;
}
Columnscopy(){
Columnscopy=newColumns();
Column[]cols=copy.data=(Column[])data.clone();
for(inti=ﻝ;i<size;i++){
cols[i]=cols[i].copy();
}
copy.size=size;
returncopy;
}
privateﺝresize(intnewSize){
Column[]dataNew=newColumn[newSize];
System.arraycopy(data,0,dataNew,0,size);
data=dataNew;
}
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
abstractclassCommand{
inttype;
ﺝcatalog;
ﺝname;
ﺝrs;
intupdateCount=-1;
finalExpressionscolumnExpressions;
Expressionsparams=newExpressions();
finalLoggerlog;
Command(Loggerlog){
this.log=log;
this.columnExpressions=newExpressions();
}
Command(Loggerlog,ExpressionscolumnExpressions){
this.log=log;
this.columnExpressions=columnExpressions;
}
voidaddColumnExpression(ﺝcolumn)throwsSQLException{
columnExpressions.add(column);
}
voidaddParameter(ExpressionValueparam){
params.add(param);
}
voidverifyParams()throwsSQLException{
for(intp=ﻝ;p<params.size();p++){
if(((ExpressionValue)params.get(p)).isEmpty())
throwSmallSQLException.create(Language.PARAM_EMPTY,newInteger(p+1));
}
}
voidclearParams(){
for(intp=ﻝ;p<params.size();p++){
((ExpressionValue)params.get(p)).clear();
}
}
privateExpressionValuegetParam(intidx)throwsSQLException{
if(idx<ﻝ||idx>params.size())
throwSmallSQLException.create(Language.PARAM_IDX_OUT_RANGE,newObject[]{newInteger(idx),newInteger(params.size())});
return((ExpressionValue)params.get(idx-1));
}
voidsetParamValue(intidx,Objectvalue,intdataType)throwsSQLException{
getParam(idx).set(value,dataType);
if(log.isLogging()){
log.println("param"+idx+'='+value+";type="+dataType);
}
}
voidsetParamValue(intidx,Objectvalue,intdataType,intlength)throwsSQLException{
getParam(idx).set(value,dataType,length);
if(log.isLogging()){
log.println("param"+idx+'='+value+";type="+dataType+";length="+length);
}
}
ﺝexecute(SSConnectioncon,SSStatementst)throwsSQLException{
intsavepoint=con.getSavepoint();
try{
executeImpl(con,st);
}catch(Throwablee){
con.rollback(savepoint);
throwSmallSQLException.createFromException(e);
}finally{
if(con.getAutoCommit())con.commit();
}
}
abstractvoidexecuteImpl(SSConnectioncon,SSStatementst)throwsException;
ﺝgetQueryResult()throwsSQLException{
if(rs==null)
throwSmallSQLException.create(Language.RSET_NOT_PRODUCED);
returnrs;
}
ﺝgetResultSet(){
returnrs;
}
intgetUpdateCount(){
returnupdateCount;
}
booleangetMoreResults(){
rs=null;
updateCount=-1;
ﺝ
}
voidsetMaxRows(intmax){}
intgetMaxRows(){return-1;}
}
packagesmallsql.database;
importjava.io.*;
importsmallsql.database.language.Language;
publicclassCommandCreateDatabaseextendsCommand{
CommandCreateDatabase(Loggerlog,ﺝname){
super(log);
this.type=SQLTokenizer.DATABASE;
if(name.startsWith("file:"))
name=name.substring(5);
this.name=name;
}
@Override
voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{
if(con.isReadOnly()){
throwSmallSQLException.create(Language.DB_READONLY);
}
Filedir=newFile(name);
dir.mkdirs();
if(!newFile(dir,Utils.MASTER_FILENAME).createNewFile()){
throwSmallSQLException.create(Language.DB_EXISTENT,name);
}
}
}
packagesmallsql.database;
publicclassCommandCreateViewextendsCommand{
privateColumnscolumns=newColumns();
ﺝsql;
CommandCreateView(Loggerlog,ﺝname){
super(log);
this.type=SQLTokenizer.VIEW;
this.name=name;
}
voidaddColumn(Columncolumn){
columns.add(column);
}
voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{
con.getDatabase(false).createView(con,name,sql);
}
}
packagesmallsql.database;
classCommandDeleteextendsCommandSelect{
CommandDelete(Loggerlog){
super(log);
}
voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{
compile(con);
TableViewResultresult=TableViewResult.getTableViewResult(from);
updateCount=ﻝ;
from.execute();
while(next()){
result.deleteRow();
updateCount++;
}
}
}
packagesmallsql.database;
importjava.io.*;
importsmallsql.database.language.Language;
publicclassCommandDropextendsCommand{
CommandDrop(Loggerlog,ﺝcatalog,ﺝname,inttype){
super(log);
this.type		=type;
this.catalog	=catalog;
this.name		=name;
}
voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{
switch(type){
caseSQLTokenizer.DATABASE:
if(name.startsWith("file:"))
name=name.substring(5);
Filedir=newFile(name);
if(!dir.isDirectory()||
!newFile(dir,Utils.MASTER_FILENAME).exists())
throwSmallSQLException.create(Language.DB_NONEXISTENT,name);
Filefiles[]=dir.listFiles();
if(files!=null)
for(inti=ﻝ;i<files.length;i++){
files[i].delete();
}
dir.delete();
break;
caseSQLTokenizer.TABLE:
Database.dropTable(con,catalog,name);
break;
caseSQLTokenizer.VIEW:
Database.dropView(con,catalog,name);
break;
caseSQLTokenizer.INDEX:
caseSQLTokenizer.PROCEDURE:
thrownewjava.lang.UnsupportedOperationException();
default:
thrownewError();
}
}
}
packagesmallsql.database;
importjava.sql.SQLException;
importjava.util.ArrayList;
importsmallsql.database.language.Language;
publicclassCommandInsertextendsCommand{
booleannoColumns;
privateCommandSelectcmdSel;
privateTabletable;
privatelongtableTimestamp;
privateint[]matrix;
CommandInsert(Loggerlog,ﺝname){
super(log);
this.name=name;
}
voidaddColumnExpression(ﺝcolumn)throwsSQLException{
if(columnExpressions.indexOf(column)>=ﻝ){
throwSmallSQLException.create(Language.COL_DUPLICATE,column);
}
super.addColumnExpression(column);
}
voidaddValues(Expressionsvalues){
this.cmdSel=newCommandSelect(log,values);
}
voidaddValues(CommandSelectcmdSel){
this.cmdSel=cmdSel;
}
privatevoidcompile(SSConnectioncon)throwsException{
TableViewtableView=con.getDatabase(false).getTableView(con,name);
if(!(tableViewinstanceofTable))
throwSmallSQLException.create(Language.VIEW_INSERT);
table=(Table)tableView;
tableTimestamp=table.getTimestamp();
cmdSel.compile(con);
intcount=table.columns.size();
matrix=newint[count];
if(noColumns){
columnExpressions.clear();
for(inti=ﻝ;i<count;i++){
matrix[i]=i;
}
if(count!=cmdSel.columnExpressions.size())
throwSmallSQLException.create(Language.COL_VAL_UNMATCH);
}else{
for(inti=ﻝ;i<count;i++)matrix[i]=-ﻝ;
for(intc=ﻝ;c<columnExpressions.size();c++){
ﺝsqlCol=columnExpressions.get(c);
ﺝsqlColName=sqlCol.getName();
intidx=table.findColumnIdx(sqlColName);
if(idx>=ﻝ){
matrix[idx]=c;
}else{
throwSmallSQLException.create(Language.COL_MISSING,sqlColName);
}
}
if(columnExpressions.size()!=cmdSel.columnExpressions.size())
throwSmallSQLException.create(Language.COL_VAL_UNMATCH);
}
}
voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{
if(table==null||tableTimestamp!=table.getTimestamp())compile(con);
finalIndexDescriptionsindexes=table.indexes;
updateCount=ﻝ;
cmdSel.from.execute();
cmdSel.beforeFirst();
StringskeyColumnNames=null;
ArrayListkeys=null;
booleanneedGeneratedKeys=st.needGeneratedKeys();
intgeneratedKeysType=ﻝ;
while(cmdSel.next()){
if(needGeneratedKeys){
keyColumnNames=newStrings();
keys=newArrayList();
if(st.getGeneratedKeyNames()!=null)
generatedKeysType=ﻝ;
if(st.getGeneratedKeyIndexes()!=null)
generatedKeysType=ﻝ;
}
StoreImplstore=table.getStoreInsert(con);
for(intc=ﻝ;c<matrix.length;c++){
Columncolumn=table.columns.get(c);
intidx=matrix[c];
ﺝvalueExpress;
if(idx>=ﻝ){
valueExpress=cmdSel.columnExpressions.get(idx);
}else{
valueExpress=column.getDefaultValue(con);
if(needGeneratedKeys&&generatedKeysType==ﻝ&&valueExpress!=Expression.NULL){
keyColumnNames.add(column.getName());
keys.add(valueExpress.getObject());
}
}
if(needGeneratedKeys&&generatedKeysType==ﻝ){
String[]keyNames=st.getGeneratedKeyNames();
for(inti=ﻝ;i<keyNames.length;i++){
if(column.getName().equalsIgnoreCase(keyNames[i])){
keyColumnNames.add(column.getName());
keys.add(valueExpress.getObject());
break;
}
}
}
if(needGeneratedKeys&&generatedKeysType==ﻝ){
int[]keyIndexes=st.getGeneratedKeyIndexes();
for(inti=ﻝ;i<keyIndexes.length;i++){
if(c+1==keyIndexes[i]){
keyColumnNames.add(column.getName());
keys.add(valueExpress.getObject());
break;
}
}
}
store.writeExpression(valueExpress,column);
for(inti=ﻝ;i<indexes.size();i++){
indexes.get(i).writeExpression(c,valueExpress);
}
}
store.writeFinsh(con);
for(inti=ﻝ;i<indexes.size();i++){
indexes.get(i).writeFinish(con);
}
updateCount++;
if(needGeneratedKeys){
Object[][]data=newObject[1][keys.size()];
keys.toArray(data[0]);
st.setGeneratedKeys(newSSResultSet(st,Utils.createMemoryCommandSelect(con,keyColumnNames.toArray(),data)));
}
}
}
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
classCommandSelectextendsCommand{
privateDataSourcestables;
privateﺝwhere;
RowSourcefrom;
privateExpressionsgroupBy;
privateﺝhaving;
privateExpressionsorderBy;
privatebooleanisAggregateFunction;
ﺝmaxRows=-1;
privatebooleanisDistinct;
CommandSelect(Loggerlog){
super(log);
}
CommandSelect(Loggerlog,ExpressionscolumnExpressions){
super(log,columnExpressions);
}
booleancompile(SSConnectioncon)throwsException{
booleanneedCompile=false;
if(tables!=null){
for(inti=ﻝ;i<tables.size();i++){
DataSourcefromEntry=tables.get(i);
needCompile|=fromEntry.init(con);
}
}
if(from==null){
from=newNoFromResult();
tables=newDataSources();
needCompile=true;
}
if(!needCompile)ﺝ
for(inti=ﻝ;i<columnExpressions.size();i++){
ﺝcol=columnExpressions.get(i);
if(col.getAlias()==null){
col.setAlias("col"+(i+1));
}
if(col.getType()!=Expression.NAME){
compileLinkExpressionParams(col);
continue;
}
ﺝexpr=(ExpressionName)col;
if("*".equals(expr.getName())){
ﺝtableAlias=expr.getTableAlias();
if(tableAlias!=null){
intt=ﻝ;
for(;t<tables.size();t++){
DataSourcefromEntry=tables.get(t);
if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){
TableViewtable=fromEntry.getTableView();
columnExpressions.remove(i);
i=compileAdd_All_Table_Columns(fromEntry,table,i)-ﻝ;
break;
}
}
if(t==tables.size())throwSmallSQLException.create(Language.COL_WRONG_PREFIX,newObject[]{tableAlias});
}else{
columnExpressions.remove(i);
for(intt=ﻝ;t<tables.size();t++){
DataSourcefromEntry=tables.get(t);
TableViewtable=fromEntry.getTableView();
i=compileAdd_All_Table_Columns(fromEntry,table,i);
}
i--;
}
}else{
compileLinkExpressionName(expr);
}
}
if(where!=null)compileLinkExpression(where);
if(having!=null)compileLinkExpression(having);
if(orderBy!=null){
for(inti=ﻝ;i<orderBy.size();i++){
compileLinkExpression(orderBy.get(i));
}
}
if(groupBy!=null){
for(inti=ﻝ;i<groupBy.size();i++){
compileLinkExpression(groupBy.get(i));
}
}
if(frominstanceofJoin){
compileJoin((Join)from);
}
if(where!=null){
from=newWhere(from,where);
}
if(isGroupResult()){
from=newGroupResult(this,from,groupBy,having,orderBy);
if(having!=null){
from=newWhere(from,having);
}
}
if(isDistinct){
from=newDistinct(from,columnExpressions);
}
if(orderBy!=null){
from=newSortedResult(from,orderBy);
}
ﺝ
}
finalbooleanisGroupResult(){
returngroupBy!=null||having!=null||isAggregateFunction;
}
privatevoidcompileJoin(JoinsingleJoin)throwsException{
if(singleJoin.condition!=null)compileLinkExpressionParams(singleJoin.condition);
if(singleJoin.leftinstanceofJoin){
compileJoin((Join)singleJoin.left);
}
if(singleJoin.rightinstanceofJoin){
compileJoin((Join)singleJoin.right);
}
}
privatevoidcompileLinkExpression(ﺝexpr)throwsException{
if(expr.getType()==Expression.NAME)
compileLinkExpressionName((ExpressionName)expr);
elsecompileLinkExpressionParams(expr);
}
privatevoidcompileLinkExpressionName(ﺝexpr)throwsException{
ﺝtableAlias=expr.getTableAlias();
if(tableAlias!=null){
intt=ﻝ;
for(;t<tables.size();t++){
DataSourcefromEntry=tables.get(t);
if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){
TableViewtable=fromEntry.getTableView();
intcolIdx=table.findColumnIdx(expr.getName());
if(colIdx>=ﻝ){
expr.setFrom(fromEntry,colIdx,table);
break;
}else
throwSmallSQLException.create(Language.COL_INVALID_NAME,newObject[]{expr.getName()});
}
}
if(t==tables.size())
throwSmallSQLException.create(Language.COL_WRONG_PREFIX,tableAlias);
}else{
booleanisSetFrom=false;
for(intt=ﻝ;t<tables.size();t++){
DataSourcefromEntry=tables.get(t);
TableViewtable=fromEntry.getTableView();
intcolIdx=table.findColumnIdx(expr.getName());
if(colIdx>=ﻝ){
if(isSetFrom){
throwSmallSQLException.create(Language.COL_AMBIGUOUS,expr.getName());
}
isSetFrom=true;
expr.setFrom(fromEntry,colIdx,table);
}
}
if(!isSetFrom){
throwSmallSQLException.create(Language.COL_INVALID_NAME,expr.getName());
}
}
compileLinkExpressionParams(expr);
}
privatevoidcompileLinkExpressionParams(ﺝexpr)throwsException{
Expression[]expParams=expr.getParams();
isAggregateFunction=isAggregateFunction||expr.getType()>=Expression.GROUP_BEGIN;
if(expParams!=null){
for(intk=ﻝ;k<expParams.length;k++){
ﺝparam=expParams[k];
intparamType=param.getType();
isAggregateFunction=isAggregateFunction||paramType>=Expression.GROUP_BEGIN;
if(paramType==Expression.NAME)
compileLinkExpressionName((ExpressionName)param);
elsecompileLinkExpressionParams(param);
}
}
expr.optimize();
}
privateﺝcompileAdd_All_Table_Columns(DataSourcefromEntry,TableViewtable,intposition){
for(intk=ﻝ;k<table.columns.size();k++){
ﺝexpr=newExpressionName(table.columns.get(k).getName());
expr.setFrom(fromEntry,k,table);
columnExpressions.add(position++,expr);
}
returnposition;
}
voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{
compile(con);
if((st.rsType==ResultSet.TYPE_SCROLL_INSENSITIVE||st.rsType==ResultSet.TYPE_SCROLL_SENSITIVE)&&
!from.isScrollable()){
from=newScrollable(from);
}
from.execute();
rs=newSSResultSet(st,this);
}
voidbeforeFirst()throwsException{
from.beforeFirst();
}
booleanisBeforeFirst()throwsSQLException{
returnfrom.isBeforeFirst();
}
booleanisFirst()throwsSQLException{
returnfrom.isFirst();
}
booleanfirst()throwsException{
returnfrom.first();
}
booleanprevious()throwsException{
returnfrom.previous();
}
booleannext()throwsException{
if(maxRows>=ﻝ&&from.getRow()>=maxRows){
from.afterLast();
ﺝ
}
returnfrom.next();
}
finalbooleanlast()throwsException{
if(maxRows>=ﻝ){
if(maxRows==ﻝ){
from.beforeFirst();
ﺝ
}
returnfrom.absolute(maxRows);
}
returnfrom.last();
}
ﺝafterLast()throwsException{
from.afterLast();
}
booleanisLast()throwsException{
returnfrom.isLast();
}
booleanisAfterLast()throwsException{
returnfrom.isAfterLast();
}
finalbooleanabsolute(introw)throwsException{
returnfrom.absolute(row);
}
finalbooleanrelative(introws)throwsException{
returnfrom.relative(rows);
}
ﺝgetRow()throwsException{
introw=from.getRow();
if(maxRows>=ﻝ&&row>maxRows)returnﻝ;
returnrow;
}
ﺝupdateRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{
intsavepoint=con.getSavepoint();
try{
for(intt=ﻝ;t<tables.size();t++){
TableViewResultresult=TableViewResult.getTableViewResult(tables.get(t));
TableViewtable=result.getTableView();
ColumnstableColumns=table.columns;
intcount=tableColumns.size();
Expression[]updateValues=newExpression[count];
booleanisUpdateNeeded=false;
for(inti=ﻝ;i<columnExpressions.size();i++){
ﺝsrc=newRowSources[i];
if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){
ﺝcol=columnExpressions.get(i);
if(!col.isDefinitelyWritable())
throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));
ﺝexp=(ExpressionName)col;
if(table==exp.getTable()){
updateValues[exp.getColumnIndex()]=src;
isUpdateNeeded=true;
continue;
}
}
}
if(isUpdateNeeded){
result.updateRow(updateValues);
}
}
}catch(Throwablee){
con.rollback(savepoint);
throwSmallSQLException.createFromException(e);
}finally{
if(con.getAutoCommit())con.commit();
}
}
ﺝinsertRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{
if(tables.size()>ﻝ)
throwSmallSQLException.create(Language.JOIN_INSERT);
if(tables.size()==ﻝ)
throwSmallSQLException.create(Language.INSERT_WO_FROM);
intsavepoint=con.getSavepoint();
try{
TableViewResultresult=TableViewResult.getTableViewResult(tables.get(0));
TableViewtable=result.getTableView();
ColumnstabColumns=table.columns;
intcount=tabColumns.size();
Expression[]updateValues=newExpression[count];
if(newRowSources!=null){
for(inti=ﻝ;i<columnExpressions.size();i++){
ﺝsrc=newRowSources[i];
if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){
ﺝrsColumn=columnExpressions.get(i);
if(!rsColumn.isDefinitelyWritable())
throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));
ﺝexp=(ExpressionName)rsColumn;
if(table==exp.getTable()){
updateValues[exp.getColumnIndex()]=src;
continue;
}
}
updateValues[i]=null;
}
}
result.insertRow(updateValues);
}catch(Throwablee){
con.rollback(savepoint);
throwSmallSQLException.createFromException(e);
}finally{
if(con.getAutoCommit())con.commit();
}
}
ﺝdeleteRow(SSConnectioncon)throwsSQLException{
intsavepoint=con.getSavepoint();
try{
if(tables.size()>ﻝ)
throwSmallSQLException.create(Language.JOIN_DELETE);
if(tables.size()==ﻝ)
throwSmallSQLException.create(Language.DELETE_WO_FROM);
TableViewResult.getTableViewResult(tables.get(0)).deleteRow();
}catch(Throwablee){
con.rollback(savepoint);
throwSmallSQLException.createFromException(e);
}finally{
if(con.getAutoCommit())con.commit();
}
}
publicintfindColumn(ﺝcolumnName)throwsSQLException{
Expressionscolumns=columnExpressions;
for(inti=ﻝ;i<columns.size();i++){
if(columnName.equalsIgnoreCase(columns.get(i).getAlias()))
returni;
}
throwSmallSQLException.create(Language.COL_MISSING,columnName);
}
ﺝsetDistinct(booleandistinct){
this.isDistinct=distinct;
}
ﺝsetSource(RowSourcejoin){
this.from=join;
}
ﺝsetTables(DataSourcesfrom){
this.tables=from;
}
ﺝsetWhere(ﺝwhere){
this.where=where;
}
ﺝsetGroup(Expressionsgroup){
this.groupBy=group;
}
ﺝsetHaving(ﺝhaving){
this.having=having;
}
ﺝsetOrder(Expressionsorder){
this.orderBy=order;
}
ﺝsetMaxRows(intmax){
maxRows=max;
}
ﺝgetMaxRows(){
returnmaxRows;
}
}
packagesmallsql.database;
publicclassCommandSetextendsCommand{
intisolationLevel;
CommandSet(Loggerlog,inttype){
super(log);
this.type=type;
}
voidexecuteImpl(SSConnectioncon,SSStatementst)throwsjava.sql.SQLException{
switch(type){
caseSQLTokenizer.LEVEL:
con.isolationLevel=isolationLevel;
break;
caseSQLTokenizer.USE:
con.setCatalog(name);
break;
default:
thrownewError();
}
}
}
packagesmallsql.database;
importjava.sql.SQLException;
importsmallsql.database.language.Language;
finalclassCommandTableextendsCommand{
finalprivateColumnscolumns=newColumns();
finalprivateIndexDescriptionsindexes=newIndexDescriptions();
finalprivateForeignKeysforeignKeys=newForeignKeys();
finalﺝtableCommandType;
CommandTable(Loggerlog,ﺝcatalog,ﺝname,inttableCommandType){
super(log);
this.type=SQLTokenizer.TABLE;
this.catalog=catalog;
this.name=name;
this.tableCommandType=tableCommandType;
}
voidaddColumn(Columncolumn)throwsSQLException{
addColumn(columns,column);
}
voidaddIndex(IndexDescriptionindexDescription)throwsSQLException{
indexes.add(indexDescription);
}
voidaddForeingnKey(ForeignKeykey){
foreignKeys.add(key);
}
voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{
Databasedatabase=catalog==null?
con.getDatabase(false):
Database.getDatabase(catalog,con,false);
switch(tableCommandType){
caseSQLTokenizer.CREATE:
database.createTable(con,name,columns,indexes,foreignKeys);
break;
caseSQLTokenizer.ADD:
con=newSSConnection(con);
TableoldTable=(Table)database.getTableView(con,name);
TableStorePagetableLock=oldTable.requestLock(con,SQLTokenizer.ALTER,-1);
ﺝnewName="#"+System.currentTimeMillis()+this.hashCode();
try{
ColumnsoldColumns=oldTable.columns;
ColumnsnewColumns=oldColumns.copy();
for(inti=ﻝ;i<columns.size();i++){
addColumn(newColumns,columns.get(i));
}
TablenewTable=database.createTable(con,newName,newColumns,oldTable.indexes,indexes,foreignKeys);
StringBufferbuffer=newStringBuffer(256);
buffer.append("INSERTINTO").append(newName).append('(');
for(intc=ﻝ;c<oldColumns.size();c++){
if(c!=ﻝ){
buffer.append(',');
}
buffer.append(oldColumns.get(c).getName());
}
buffer.append(")SELECT*FROM").append(name);
con.createStatement().execute(buffer.toString());
database.replaceTable(oldTable,newTable);
}catch(Exceptionex){
try{
database.dropTable(con,newName);
}catch(Exceptionex1){}
try{
indexes.drop(database);
}catch(Exceptionex1){}
throwex;
}finally{
tableLock.freeLock();
}
break;
default:
thrownewError();
}
}
privatevoidaddColumn(Columnscols,Columncolumn)throwsSQLException{
if(cols.get(column.getName())!=null){
throwSmallSQLException.create(Language.COL_DUPLICATE,column.getName());
}
cols.add(column);
}
}
packagesmallsql.database;
classCommandUpdateextendsCommandSelect{
privateExpressionssources=newExpressions();
privateExpression[]newRowSources;
CommandUpdate(Loggerlog){
super(log);
}
voidaddSetting(ﺝdest,ﺝsource){
columnExpressions.add(dest);
sources.add(source);
}
voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{
intcount=columnExpressions.size();
columnExpressions.addAll(sources);
compile(con);
columnExpressions.setSize(count);
newRowSources=sources.toArray();
updateCount=ﻝ;
from.execute();
for(inti=ﻝ;i<columnExpressions.size();i++){
ﺝexpr=(ExpressionName)columnExpressions.get(i);
DataSourceds=expr.getDataSource();
TableResulttableResult=(TableResult)ds;
tableResult.lock=SQLTokenizer.UPDATE;
}
while(true){
synchronized(con.getMonitor()){
if(!next()){
return;
}
updateRow(con,newRowSources);
}
updateCount++;
}
}
}
packagesmallsql.database;
importjava.io.File;
importjava.nio.channels.FileChannel;
importjava.sql.SQLException;
importsmallsql.database.language.Language;
publicclassCreateFileextendsTransactionStep{
privatefinalFilefile;
privatefinalSSConnectioncon;
privatefinalDatabasedatabase;
CreateFile(Filefile,FileChannelraFile,SSConnectioncon,Databasedatabase){
super(raFile);
this.file=file;
this.con=con;
this.database=database;
}
@Override
longcommit(){
raFile=null;
return-1;
}
@Override
voidrollback()throwsSQLException{
FileChannelcurrentRaFile=raFile;
if(raFile==null){
return;
}
raFile=null;
try{
currentRaFile.close();
}catch(Throwableex){
}
con.rollbackFile(currentRaFile);
if(!file.delete()){
file.deleteOnExit();
throwSmallSQLException.create(Language.FILE_CANT_DELETE,file.getPath());
}
ﺝname=file.getName();
name=name.substring(0,name.lastIndexOf('.'));
database.removeTableView(name);
}
}
packagesmallsql.database;
abstractclassDataSourceextendsRowSource{
abstractbooleanisNull(intcolIdx)throwsException;
abstractbooleangetBoolean(intcolIdx)throwsException;
abstractintgetInt(intcolIdx)throwsException;
abstractlonggetLong(intcolIdx)throwsException;
abstractfloatgetFloat(intcolIdx)throwsException;
abstractdoublegetDouble(intcolIdx)throwsException;
abstractlonggetMoney(intcolIdx)throwsException;
abstractMutableNumericgetNumeric(intcolIdx)throwsException;
abstractObjectgetObject(intcolIdx)throwsException;
abstractﺝgetString(intcolIdx)throwsException;
abstractbyte[]getBytes(intcolIdx)throwsException;
abstractintgetDataType(intcolIdx);
booleaninit(SSConnectioncon)throwsException{ﺝ}
ﺝgetAlias(){returnnull;}
abstractTableViewgetTableView();
booleanisExpressionsFromThisRowSource(Expressionscolumns){
for(inti=ﻝ;i<columns.size();i++){
ﺝexpr=(ExpressionName)columns.get(i);
if(this!=expr.getDataSource()){
ﺝ
}
}
ﺝ
}
}
packagesmallsql.database;
finalclassDataSources{
ﺝsize;
privateDataSource[]data=newDataSource[4];
ﺝsize(){
returnsize;
}
finalDataSourceget(intidx){
if(idx>=size)
thrownewIndexOutOfBoundsException("Index:"+idx+",Size:"+size);
returndata[idx];
}
ﺝadd(DataSourcetable){
if(size>=data.length){
DataSource[]dataNew=newDataSource[size<<1];
System.arraycopy(data,0,dataNew,0,size);
data=dataNew;
}
data[size++]=table;
}
}
packagesmallsql.database;
importjava.util.*;
importjava.io.*;
importjava.nio.channels.FileChannel;
importjava.sql.*;
importsmallsql.database.language.Language;
finalclassDatabase{
staticprivateHashMapdatabases=newHashMap();
privatefinalTableViewMaptableViews=newTableViewMap();
privatefinalﺝname;
privatefinalbooleanreadonly;
privatefinalFiledirectory;
privatefinalFileChannelmaster;
privatefinalWeakHashMapconnections=newWeakHashMap();
staticDatabasegetDatabase(ﺝname,SSConnectioncon,booleancreate)throwsSQLException{
if(name==null){
returnnull;
}
if(name.startsWith("file:")){
name=name.substring(5);
}
Filefile;
try{
file=newFile(name).getCanonicalFile();
}catch(Throwableth){
throwSmallSQLException.createFromException(th);
}
ﺝdbKey=file.getName()+";readonly="+con.isReadOnly();
synchronized(databases){
Databasedb=(Database)databases.get(dbKey);
if(db==null){
if(create&&!file.isDirectory()){
CommandCreateDatabasecommand=newCommandCreateDatabase(con.log,name);
command.execute(con,null);
}
db=newDatabase(name,file,con.isReadOnly());
databases.put(dbKey,db);
}
db.connections.put(con,null);
returndb;
}
}
privatestaticDatabasegetDatabase(SSConnectioncon,ﺝname)throwsSQLException{
returnname==null?
con.getDatabase(false):
getDatabase(name,con,false);
}
privateDatabase(ﺝname,FilecanonicalFile,booleanreadonly)throwsSQLException{
try{
this.name=name;
this.readonly=readonly;
directory=canonicalFile;
if(!directory.isDirectory()){
throwSmallSQLException.create(Language.DB_NONEXISTENT,name);
}
Filefile=newFile(directory,Utils.MASTER_FILENAME);
if(!file.exists())
throwSmallSQLException.create(Language.DB_NOT_DIRECTORY,name);
master=Utils.openRaFile(file,readonly);
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
ﺝgetName(){
returnname;
}
booleanisReadOnly(){
returnreadonly;
}
staticﺝcloseConnection(SSConnectioncon)throwsSQLException{
synchronized(databases){
Iteratoriterator=databases.values().iterator();
while(iterator.hasNext()){
Databasedatabase=(Database)iterator.next();
WeakHashMapconnections=database.connections;
connections.remove(con);
if(connections.size()==ﻝ){
try{
iterator.remove();
database.close();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
}
}
}
privateﺝclose()throwsException{
synchronized(tableViews){
Iteratoriterator=tableViews.values().iterator();
while(iterator.hasNext()){
TableViewtableView=(TableView)iterator.next();
tableView.close();
iterator.remove();
}
}
master.close();
}
staticTableViewgetTableView(SSConnectioncon,ﺝcatalog,ﺝtableName)throwsSQLException{
returngetDatabase(con,catalog).getTableView(con,tableName);
}
TableViewgetTableView(SSConnectioncon,ﺝtableName)throwsSQLException{
synchronized(tableViews){
TableViewtableView=tableViews.get(tableName);
if(tableView==null){
tableView=TableView.load(con,this,tableName);
tableViews.put(tableName,tableView);
}
returntableView;
}
}
staticvoiddropTable(SSConnectioncon,ﺝcatalog,ﺝtableName)throwsException{
getDatabase(con,catalog).dropTable(con,tableName);
}
voiddropTable(SSConnectioncon,ﺝtableName)throwsException{
synchronized(tableViews){
Tabletable=(Table)tableViews.get(tableName);
if(table!=null){
tableViews.remove(tableName);
table.drop(con);
}else{
Table.drop(this,tableName);
}
}
}
voidremoveTableView(ﺝtableViewName){
synchronized(tableViews){
tableViews.remove(tableViewName);
}
}
voidreplaceTable(TableoldTable,TablenewTable)throwsException{
synchronized(tableViews){
tableViews.remove(oldTable.name);
tableViews.remove(newTable.name);
oldTable.close();
newTable.close();
FileoldFile=oldTable.getFile(this);
FilenewFile=newTable.getFile(this);
FiletmpFile=newFile(Utils.createTableViewFileName(this,"#"+System.currentTimeMillis()+this.hashCode()));
if(!oldFile.renameTo(tmpFile)){
throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);
}
if(!newFile.renameTo(oldFile)){
tmpFile.renameTo(oldFile);
throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);
}
tmpFile.delete();
}
}
staticvoiddropView(SSConnectioncon,ﺝcatalog,ﺝtableName)throwsException{
getDatabase(con,catalog).dropView(tableName);
}
voiddropView(ﺝviewName)throwsException{
synchronized(tableViews){
Objectview=tableViews.remove(viewName);
if(view!=null&&!(viewinstanceofView))
throwSmallSQLException.create(Language.VIEWDROP_NOT_VIEW,viewName);
View.drop(this,viewName);
}
}
privatevoidcheckForeignKeys(SSConnectioncon,ForeignKeysforeignKeys)throwsSQLException{
for(inti=ﻝ;i<foreignKeys.size();i++){
ForeignKeyforeignKey=foreignKeys.get(i);
TableViewpkTable=getTableView(con,foreignKey.pkTable);
if(!(pkTableinstanceofTable)){
throwSmallSQLException.create(Language.FK_NOT_TABLE,foreignKey.pkTable);
}
}
}
voidcreateTable(SSConnectioncon,ﺝname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{
checkForeignKeys(con,foreignKeys);
Tabletable=newTable(this,con,name,columns,indexes,foreignKeys);
synchronized(tableViews){
tableViews.put(name,table);
}
}
TablecreateTable(SSConnectioncon,ﺝtableName,Columnscolumns,IndexDescriptionsoldIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{
checkForeignKeys(con,foreignKeys);
Tabletable=newTable(this,con,tableName,columns,oldIndexes,newIndexes,foreignKeys);
synchronized(tableViews){
tableViews.put(tableName,table);
}
returntable;
}
voidcreateView(SSConnectioncon,ﺝviewName,ﺝsql)throwsException{
newView(this,con,viewName,sql);
}
staticObject[][]getCatalogs(Databasedatabase){
Listcatalogs=newArrayList();
FilebaseDir=(database!=null)?
database.directory.getParentFile():
newFile(".");
Filedirs[]=baseDir.listFiles();
if(dirs!=null)
for(inti=ﻝ;i<dirs.length;i++){
if(dirs[i].isDirectory()){
if(newFile(dirs[i],Utils.MASTER_FILENAME).exists()){
Object[]catalog=newObject[1];
catalog[0]=dirs[i].getPath();
catalogs.add(catalog);
}
}
}
Object[][]result=newObject[catalogs.size()][];
catalogs.toArray(result);
returnresult;
}
StringsgetTables(ﺝtablePattern){
Stringslist=newStrings();
Filedirs[]=directory.listFiles();
if(dirs!=null)
if(tablePattern==null)tablePattern="%";
tablePattern+=Utils.TABLE_VIEW_EXTENTION;
for(inti=ﻝ;i<dirs.length;i++){
ﺝname=dirs[i].getName();
if(Utils.like(name,tablePattern)){
list.add(name.substring(0,name.length()-Utils.TABLE_VIEW_EXTENTION.length()));
}
}
returnlist;
}
Object[][]getColumns(SSConnectioncon,ﺝtablePattern,ﺝcolPattern)throwsException{
Listrows=newArrayList();
Stringstables=getTables(tablePattern);
for(inti=ﻝ;i<tables.size();i++){
ﺝtableName=tables.get(i);
try{
TableViewtab=getTableView(con,tableName);
Columnscols=tab.columns;
for(intc=ﻝ;c<cols.size();c++){
Columncol=cols.get(c);
Object[]row=newObject[18];
row[0]=getName();
row[2]=tableName;
row[3]=col.getName();
row[4]=Utils.getShort(SQLTokenizer.getSQLDataType(col.getDataType()));
row[5]=SQLTokenizer.getKeyWord(col.getDataType());
row[6]=Utils.getInteger(col.getColumnSize());
row[8]=Utils.getInteger(col.getScale());
row[9]=Utils.getInteger(10);
row[10]=Utils.getInteger(col.isNullable()?DatabaseMetaData.columnNullable:DatabaseMetaData.columnNoNulls);
row[12]=col.getDefaultDefinition();
row[15]=row[6];
row[16]=Utils.getInteger(i);
row[17]=col.isNullable()?"YES":"NO";
rows.add(row);
}
}catch(Exceptione){
}
}
Object[][]result=newObject[rows.size()][];
rows.toArray(result);
returnresult;
}
Object[][]getReferenceKeys(SSConnectioncon,ﺝpkTable,ﺝfkTable)throwsSQLException{
Listrows=newArrayList();
Stringstables=(pkTable!=null)?getTables(pkTable):getTables(fkTable);
for(intt=ﻝ;t<tables.size();t++){
ﺝtableName=tables.get(t);
TableViewtab=getTableView(con,tableName);
if(!(tabinstanceofTable))continue;
ForeignKeysreferences=((Table)tab).references;
for(inti=ﻝ;i<references.size();i++){
ForeignKeyforeignKey=references.get(i);
IndexDescriptionpk=foreignKey.pk;
IndexDescriptionfk=foreignKey.fk;
if((pkTable==null||pkTable.equals(foreignKey.pkTable))&&
(fkTable==null||fkTable.equals(foreignKey.fkTable))){
StringscolumnsPk=pk.getColumns();
StringscolumnsFk=fk.getColumns();
for(intc=ﻝ;c<columnsPk.size();c++){
Object[]row=newObject[14];
row[0]=getName();
row[2]=foreignKey.pkTable;
row[3]=columnsPk.get(c);
row[4]=getName();
row[6]=foreignKey.fkTable;
row[7]=columnsFk.get(c);
row[8]=Utils.getShort(c+1);
row[9]=Utils.getShort(foreignKey.updateRule);
row[10]=Utils.getShort(foreignKey.deleteRule);
row[11]=fk.getName();
row[12]=pk.getName();
row[13]=Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable);
rows.add(row);
}
}
}
}
Object[][]result=newObject[rows.size()][];
rows.toArray(result);
returnresult;
}
Object[][]getBestRowIdentifier(SSConnectioncon,ﺝtable)throwsSQLException{
Listrows=newArrayList();
Stringstables=getTables(table);
for(intt=ﻝ;t<tables.size();t++){
ﺝtableName=tables.get(t);
TableViewtab=getTableView(con,tableName);
if(!(tabinstanceofTable))continue;
IndexDescriptionsindexes=((Table)tab).indexes;
for(inti=ﻝ;i<indexes.size();i++){
IndexDescriptionindex=indexes.get(i);
if(index.isUnique()){
Stringscolumns=index.getColumns();
for(intc=ﻝ;c<columns.size();c++){
ﺝcolumnName=columns.get(c);
Columncolumn=tab.findColumn(columnName);
Object[]row=newObject[8];
row[0]=Utils.getShort(DatabaseMetaData.bestRowSession);
row[1]=columnName;
ﺝdataType=column.getDataType();
row[2]=Utils.getInteger(dataType);
row[3]=SQLTokenizer.getKeyWord(dataType);
row[4]=Utils.getInteger(column.getPrecision());
row[6]=Utils.getShort(column.getScale());
row[7]=Utils.getShort(DatabaseMetaData.bestRowNotPseudo);
rows.add(row);
}
}
}
}
Object[][]result=newObject[rows.size()][];
rows.toArray(result);
returnresult;
}
Object[][]getPrimaryKeys(SSConnectioncon,ﺝtable)throwsSQLException{
Listrows=newArrayList();
Stringstables=getTables(table);
for(intt=ﻝ;t<tables.size();t++){
ﺝtableName=tables.get(t);
TableViewtab=getTableView(con,tableName);
if(!(tabinstanceofTable))continue;
IndexDescriptionsindexes=((Table)tab).indexes;
for(inti=ﻝ;i<indexes.size();i++){
IndexDescriptionindex=indexes.get(i);
if(index.isPrimary()){
Stringscolumns=index.getColumns();
for(intc=ﻝ;c<columns.size();c++){
Object[]row=newObject[6];
row[0]=getName();
row[2]=tableName;
row[3]=columns.get(c);
row[4]=Utils.getShort(c+1);
row[5]=index.getName();
rows.add(row);
}
}
}
}
Object[][]result=newObject[rows.size()][];
rows.toArray(result);
returnresult;
}
Object[][]getIndexInfo(SSConnectioncon,ﺝtable,booleanunique)throwsSQLException{
Listrows=newArrayList();
Stringstables=getTables(table);
Shorttype=Utils.getShort(DatabaseMetaData.tableIndexOther);
for(intt=ﻝ;t<tables.size();t++){
ﺝtableName=tables.get(t);
TableViewtab=getTableView(con,tableName);
if(!(tabinstanceofTable))continue;
IndexDescriptionsindexes=((Table)tab).indexes;
for(inti=ﻝ;i<indexes.size();i++){
IndexDescriptionindex=indexes.get(i);
Stringscolumns=index.getColumns();
for(intc=ﻝ;c<columns.size();c++){
Object[]row=newObject[13];
row[0]=getName();
row[2]=tableName;
row[3]=Boolean.valueOf(!index.isUnique());
row[5]=index.getName();
row[6]=type;
row[7]=Utils.getShort(c+1);
row[8]=columns.get(c);
rows.add(row);
}
}
}
Object[][]result=newObject[rows.size()][];
rows.toArray(result);
returnresult;
}
}
packagesmallsql.database;
importjava.sql.*;
importjava.text.DateFormatSymbols;
importjava.util.Calendar;
importjava.util.TimeZone;
importsmallsql.database.language.Language;
publicfinalclassDateTimeimplementsMutable{
longtime;
ﺝdataType=SQLTokenizer.TIMESTAMP;
staticfinalint[]MONTH_DAYS={0,31,59,90,120,151,181,212,243,273,304,334};
privatestaticfinalString[]SHORT_MONTHS=newDateFormatSymbols().getShortMonths();
DateTime(longtime,intdataType){
switch(dataType){
caseSQLTokenizer.SMALLDATETIME:
intseconds=(int)(time%ﻝ);
if(seconds<ﻝ){
seconds+=ﻝ;
}
time-=seconds;
break;
caseSQLTokenizer.TIME:
time%=ﻝ;
break;
caseSQLTokenizer.DATE:
intmillis=(int)(time%ﻝ);
if(millis<ﻝ)
millis+=ﻝ;
time-=millis;
break;
}
this.time=time;
this.dataType=dataType;
}
staticlongcalcMillis(Detailsdetails){
returncalcMillis(details.year,details.month,details.day,details.hour,details.minute,details.second,details.millis);
}
staticlongcalcMillis(intyear,intmonth,ﺝday,ﺝhour,ﺝminute,ﺝsecond,ﺝmillis){
longresult=millis;
result+=second*ﻝ;
result+=minute*ﻝ;
result+=hour*ﻝ;
result+=(day-1)*86400000L;
if(month>ﻝ){
year+=month/ﻝ;
month%=ﻝ;
}
result+=MONTH_DAYS[month]*86400000L;
result+=(year-ﻝ)*ﻝL;
result+=((year/ﻝ)-(year/ﻝ)+(year/ﻝ)-ﻝ)*ﻝL;
if(month<ﻝ&&year%ﻝ==ﻝ&&(year%ﻝ!=ﻝ||year%ﻝ==ﻝ))
result-=86400000L;
returnresult;
}
staticlongnow(){
returnremoveDateTimeOffset(System.currentTimeMillis());
}
staticintdayOfWeek(longtime){
return(int)((time/ﻝ+ﻝ)%ﻝ);
}
staticlongparse(java.util.Datedate){
longt=date.getTime();
returnremoveDateTimeOffset(t);
}
staticDateTimevalueOf(java.util.Datedate){
if(date==null)returnnull;
inttype;
if(dateinstanceofjava.sql.Date)
type=SQLTokenizer.DATE;
else
if(dateinstanceofjava.sql.Time)
type=SQLTokenizer.TIME;
else
type=SQLTokenizer.TIMESTAMP;
returnnewDateTime(parse(date),type);
}
staticDateTimevalueOf(java.sql.Datedate){
if(date==null)returnnull;
returnnewDateTime(parse(date),SQLTokenizer.DATE);
}
staticDateTimevalueOf(java.sql.Timedate){
if(date==null)returnnull;
returnnewDateTime(parse(date),SQLTokenizer.TIME);
}
staticDateTimevalueOf(java.sql.Timestampdate){
if(date==null)returnnull;
returnnewDateTime(parse(date),SQLTokenizer.TIMESTAMP);
}
staticDateTimevalueOf(ﺝdate,intdataType)throwsSQLException{
if(date==null)returnnull;
returnnewDateTime(parse(date),dataType);
}
staticlongparse(finalﺝdatetime)throwsSQLException{
try{
ﺝlength=datetime.length();
ﺝyear;
ﺝmonth;
ﺝday;
ﺝhour;
ﺝminute;
ﺝsecond;
ﺝmillis;
intidxﻝ=ﻝ;
intidx2=datetime.indexOf('-');
if(idxﻝ>ﻝ){
year=Integer.parseInt(datetime.substring(idx1,idx2).trim());
idx1=idx2+1;
idx2=datetime.indexOf('-',idx1);
month=Integer.parseInt(datetime.substring(idx1,idx2).trim())-1;
idx1=idx2+1;
idx2=datetime.indexOf('',idx1);
if(idxﻝ<ﻝ)idxﻝ=datetime.length();
day=Integer.parseInt(datetime.substring(idx1,idx2).trim());
}else{
year=ﻝ;
month=ﻝ;
day=ﻝ;
}
idx1=idx2+1;
idx2=datetime.indexOf(':',idx1);
if(idx2>0){
hour=Integer.parseInt(datetime.substring(idx1,idx2).trim());
idx1=idx2+1;
idx2=datetime.indexOf(':',idx1);
minute=Integer.parseInt(datetime.substring(idx1,idx2).trim());
idx1=idx2+1;
idx2=datetime.indexOf('.',idx1);
if(idxﻝ<ﻝ)idxﻝ=datetime.length();
second=Integer.parseInt(datetime.substring(idx1,idx2).trim());
idx1=idx2+1;
if(idx1<length){
ﺝstrMillis=datetime.substring(idx1).trim();
switch(strMillis.length()){
case1:
millis=Integer.parseInt(strMillis)*ﻝ;
break;
case2:
millis=Integer.parseInt(strMillis)*ﻝ;
break;
case3:
millis=Integer.parseInt(strMillis);
break;
default:
millis=Integer.parseInt(strMillis.substring(0,3));
}
}else
millis=ﻝ;
}else{
hour=ﻝ;
minute=ﻝ;
second=ﻝ;
millis=ﻝ;
}
if(idxﻝ==ﻝ&&length>ﻝ){
throwSmallSQLException.create(Language.DATETIME_INVALID);
}
if(month>=ﻝ){
throwSmallSQLException.create(Language.MONTH_TOOLARGE,datetime);
}
if(day>=ﻝ){
throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);
}
if(day==ﻝ){
switch(month){
case1:
case3:
case5:
case8:
case10:
throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);
}
}
if(month==ﻝ){
if(day==ﻝ){
throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);
}
if(day==ﻝ){
if(!isLeapYear(year)){
throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);
}
}
}
if(hour>=ﻝ){
throwSmallSQLException.create(Language.HOURS_TOOLARGE,datetime);
}
if(minute>=ﻝ){
throwSmallSQLException.create(Language.MINUTES_TOOLARGE,datetime);
}
if(second>=ﻝ){
throwSmallSQLException.create(Language.SECS_TOOLARGE,datetime);
}
if(millis>=ﻝ){
throwSmallSQLException.create(Language.MILLIS_TOOLARGE,datetime);
}
returncalcMillis(year,month,day,hour,minute,second,millis);
}catch(SQLExceptionex){
throwex;
}catch(Throwableex){
throwSmallSQLException.createFromException(Language.DATETIME_INVALID,datetime,ex);
}
}
longgetTimeMillis(){
returntime;
}
intgetDataType(){
returndataType;
}
publicﺝtoString(){
Detailsdetails=newDetails(time);
StringBufferbuf=newStringBuffer();
if(dataType!=SQLTokenizer.TIME){
formatNumber(details.year,4,buf);
buf.append('-');
formatNumber(details.month+1,2,buf);
buf.append('-');
formatNumber(details.day,2,buf);
}
if(dataType!=SQLTokenizer.DATE){
if(buf.length()>ﻝ)buf.append('');
formatNumber(details.hour,2,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
}
switch(dataType){
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
buf.append('.');
formatMillis(details.millis,buf);
}
returnbuf.toString();
}
publicbooleanequals(Objectobj){
if(!(objinstanceofDateTime))ﺝ
DateTimevalue=(DateTime)obj;
returnvalue.time==time&&value.dataType==dataType;
}
ﺝtoString(intstyle){
if(style<ﻝ)
returntoString();
Detailsdetails=newDetails(time);
StringBufferbuf=newStringBuffer();
switch(style){
case0:
case100:
buf.append(SHORT_MONTHS[details.month]);
buf.append('');
formatNumber(details.day,2,buf);
buf.append('');
formatNumber(details.year,4,buf);
buf.append('');
formatHour12(details.hour,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(details.hour<ﻝ?"AM":"PM");
returnbuf.toString();
case1:
formatNumber(details.month+1,2,buf);
buf.append('/');
formatNumber(details.day,2,buf);
buf.append('/');
formatNumber(details.year%100,2,buf);
returnbuf.toString();
case101:
formatNumber(details.month+1,2,buf);
buf.append('/');
formatNumber(details.day,2,buf);
buf.append('/');
formatNumber(details.year,4,buf);
returnbuf.toString();
case2:
formatNumber(details.year%100,2,buf);
buf.append('.');
formatNumber(details.month+1,2,buf);
buf.append('.');
formatNumber(details.day,2,buf);
returnbuf.toString();
case102:
formatNumber(details.year,4,buf);
buf.append('.');
formatNumber(details.month+1,2,buf);
buf.append('.');
formatNumber(details.day,2,buf);
returnbuf.toString();
case3:
formatNumber(details.day,2,buf);
buf.append('/');
formatNumber(details.month+1,2,buf);
buf.append('/');
formatNumber(details.year%100,2,buf);
returnbuf.toString();
case103:
formatNumber(details.day,2,buf);
buf.append('/');
formatNumber(details.month+1,2,buf);
buf.append('/');
formatNumber(details.year,4,buf);
returnbuf.toString();
case4:
formatNumber(details.day,2,buf);
buf.append('.');
formatNumber(details.month+1,2,buf);
buf.append('.');
formatNumber(details.year%100,2,buf);
returnbuf.toString();
case104:
formatNumber(details.day,2,buf);
buf.append('.');
formatNumber(details.month+1,2,buf);
buf.append('.');
formatNumber(details.year,4,buf);
returnbuf.toString();
case5:
formatNumber(details.day,2,buf);
buf.append('-');
formatNumber(details.month+1,2,buf);
buf.append('-');
formatNumber(details.year%100,2,buf);
returnbuf.toString();
case105:
formatNumber(details.day,2,buf);
buf.append('-');
formatNumber(details.month+1,2,buf);
buf.append('-');
formatNumber(details.year,4,buf);
returnbuf.toString();
case6:
formatNumber(details.day,2,buf);
buf.append('');
buf.append(SHORT_MONTHS[details.month]);
buf.append('');
formatNumber(details.year%100,2,buf);
returnbuf.toString();
case106:
formatNumber(details.day,2,buf);
buf.append('');
buf.append(SHORT_MONTHS[details.month]);
buf.append('');
formatNumber(details.year,4,buf);
returnbuf.toString();
case7:
buf.append(SHORT_MONTHS[details.month]);
buf.append('');
formatNumber(details.day,2,buf);
buf.append(',');
buf.append('');
formatNumber(details.year%100,2,buf);
returnbuf.toString();
case107:
buf.append(SHORT_MONTHS[details.month]);
buf.append('');
formatNumber(details.day,2,buf);
buf.append(',');
buf.append('');
formatNumber(details.year,4,buf);
returnbuf.toString();
case8:
case108:
formatNumber(details.hour,2,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
returnbuf.toString();
case9:
case109:
buf.append(SHORT_MONTHS[details.month]);
buf.append('');
formatNumber(details.day,2,buf);
buf.append('');
formatNumber(details.year,4,buf);
buf.append('');
formatHour12(details.hour,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
buf.append(':');
formatMillis(details.millis,buf);
buf.append(details.hour<ﻝ?"AM":"PM");
returnbuf.toString();
case10:
formatNumber(details.month+1,2,buf);
buf.append('-');
formatNumber(details.day,2,buf);
buf.append('-');
formatNumber(details.year%100,2,buf);
returnbuf.toString();
case110:
formatNumber(details.month+1,2,buf);
buf.append('-');
formatNumber(details.day,2,buf);
buf.append('-');
formatNumber(details.year,4,buf);
returnbuf.toString();
case11:
formatNumber(details.year%100,2,buf);
buf.append('/');
formatNumber(details.month+1,2,buf);
buf.append('/');
formatNumber(details.day,2,buf);
returnbuf.toString();
case111:
formatNumber(details.year,4,buf);
buf.append('/');
formatNumber(details.month+1,2,buf);
buf.append('/');
formatNumber(details.day,2,buf);
returnbuf.toString();
case12:
formatNumber(details.year%100,2,buf);
formatNumber(details.month+1,2,buf);
formatNumber(details.day,2,buf);
returnbuf.toString();
case112:
formatNumber(details.year,4,buf);
formatNumber(details.month+1,2,buf);
formatNumber(details.day,2,buf);
returnbuf.toString();
case13:
case113:
formatNumber(details.day,2,buf);
buf.append('');
buf.append(SHORT_MONTHS[details.month]);
buf.append('');
formatNumber(details.year,4,buf);
buf.append('');
formatNumber(details.hour,2,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
buf.append(':');
formatMillis(details.millis,buf);
returnbuf.toString();
case14:
case114:
formatNumber(details.hour,2,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
buf.append(':');
formatMillis(details.millis,buf);
returnbuf.toString();
case20:
case120:
formatNumber(details.year,4,buf);
buf.append('-');
formatNumber(details.month+1,2,buf);
buf.append('-');
formatNumber(details.day,2,buf);
buf.append('');
formatNumber(details.hour,2,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
returnbuf.toString();
case21:
case121:
formatNumber(details.year,4,buf);
buf.append('-');
formatNumber(details.month+1,2,buf);
buf.append('-');
formatNumber(details.day,2,buf);
buf.append('');
formatNumber(details.hour,2,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
buf.append('.');
formatMillis(details.millis,buf);
returnbuf.toString();
case26:
case126:
formatNumber(details.year,4,buf);
buf.append('-');
formatNumber(details.month+1,2,buf);
buf.append('-');
formatNumber(details.day,2,buf);
buf.append('T');
formatNumber(details.hour,2,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
buf.append('.');
formatMillis(details.millis,buf);
returnbuf.toString();
case130:
formatNumber(details.day,2,buf);
buf.append('');
buf.append(SHORT_MONTHS[details.month]);
buf.append('');
formatNumber(details.year,4,buf);
buf.append('');
formatHour12(details.hour,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
buf.append(':');
formatMillis(details.millis,buf);
buf.append(details.hour<ﻝ?"AM":"PM");
returnbuf.toString();
case131:
formatNumber(details.day,2,buf);
buf.append('/');
formatNumber(details.month+1,2,buf);
buf.append('/');
formatNumber(details.year%100,2,buf);
buf.append('');
formatNumber(details.hour,2,buf);
buf.append(':');
formatNumber(details.minute,2,buf);
buf.append(':');
formatNumber(details.second,2,buf);
buf.append(':');
formatMillis(details.millis,buf);
returnbuf.toString();
default:
returntoString();
}
}
privatefinalstaticvoidformatNumber(intvalue,intdigitCount,StringBufferbuf){
buf.setLength(buf.length()+digitCount);
if(value<ﻝ)value=-value;
for(inti=ﻝ;i<=digitCount;i++){
buf.setCharAt(buf.length()-i,Utils.digits[value%ﻝ]);
value/=ﻝ;
}
}
privatefinalstaticvoidformatMillis(intmillis,StringBufferbuf){
buf.append(Utils.digits[(millis/ﻝ)%ﻝ]);
intvalue=millis%ﻝ;
if(value!=ﻝ){
buf.append(Utils.digits[value/ﻝ]);
value%=ﻝ;
if(value!=ﻝ)
buf.append(Utils.digits[value]);
}
}
privatefinalstaticvoidformatHour12(inthour,StringBufferbuf){
hour%=ﻝ;
if(hour==ﻝ)hour=ﻝ;
formatNumber(hour,2,buf);
}
privatefinalstaticlongaddDateTimeOffset(longdatetime){
returnaddDateTimeOffset(datetime,TimeZone.getDefault());
}
finalstaticlongaddDateTimeOffset(longdatetime,TimeZonetimezone){
intt=(int)(datetime%ﻝ);
intd=(int)(datetime/ﻝ);
if(t<0){
t+=ﻝ;
d--;
}
intmillis=t%ﻝ;
t/=ﻝ;
synchronized(cal){
cal.setTimeZone(timezone);
cal.set(1970,0,d+1,0,0,t);
cal.set(Calendar.MILLISECOND,millis);
returncal.getTimeInMillis();
}
}
privatestaticlongremoveDateTimeOffset(longdatetime){
synchronized(cal){
cal.setTimeZone(TimeZone.getDefault());
cal.setTimeInMillis(datetime);
returndatetime+cal.get(Calendar.ZONE_OFFSET)+cal.get(Calendar.DST_OFFSET);
}
}
staticTimestampgetTimestamp(longtime){
returnnewTimestamp(DateTime.addDateTimeOffset(time));
}
staticTimegetTime(longtime){
returnnewTime(DateTime.addDateTimeOffset(time));
}
staticDategetDate(longtime){
returnnewDate(DateTime.addDateTimeOffset(time));
}
publicObjectgetImmutableObject(){
switch(dataType){
caseSQLTokenizer.DATE:
returngetDate(time);
caseSQLTokenizer.TIME:
returngetTime(time);
default:
returngetTimestamp(time);
}
}
staticclassDetails{
intyear;
intmonth;
intdayofyear;
intday;
inthour;
intminute;
intsecond;
intmillis;
Details(longtime){
intt=(int)(time%ﻝ);
intd=(int)(time/ﻝ);
if(t<0){
t+=ﻝ;
d--;
}
millis=t%ﻝ;
t/=ﻝ;
second=t%ﻝ;
t/=ﻝ;
minute=t%ﻝ;
t/=ﻝ;
hour=t%ﻝ;
year=ﻝ-(int)(t/ﻝ.ﻝ);
booleanisLeap;
do{
isLeap=false;
dayofyear=day=d-((year-ﻝ)*ﻝ+(year/ﻝ)-(year/ﻝ)+(year/ﻝ)-ﻝ);
if(isLeapYear(year)){
if(day<ﻝ){
day++;
isLeap=true;
}
dayofyear++;
}
if(day<ﻝ){
year--;
continue;
}else
if(day>=ﻝ){
year++;
continue;
}
break;
}while(true);
if(isLeap&&day==ﻝ){
month=ﻝ;
day=ﻝ;
}else{
for(intm=ﻝ;m>=ﻝ;m--){
if(MONTH_DAYS[m]<=day){
month=m;
day=day-MONTH_DAYS[m]+ﻝ;
break;
}
}
}
}
}
staticbooleanisLeapYear(intyear){
returnyear%ﻝ==ﻝ&&(year%ﻝ!=ﻝ||year%ﻝ==ﻝ);
}
privatestaticfinalCalendarcal=Calendar.getInstance();
}
packagesmallsql.database;
finalclassDistinctextendsRowSource{
finalprivateExpressionsdistinctColumns;
finalprivateRowSourcerowSource;
privateIndexindex;
ﺝrow;
Distinct(RowSourcerowSource,Expressionscolumns){
this.rowSource=rowSource;
this.distinctColumns=columns;
}
ﺝexecute()throwsException{
rowSource.execute();
index=newIndex(true);
}
finalbooleanisScrollable(){
ﺝ
}
ﺝbeforeFirst()throwsException{
rowSource.beforeFirst();
row=ﻝ;
}
finalbooleanfirst()throwsException{
beforeFirst();
returnnext();
}
finalbooleannext()throwsException{
while(true){
booleanisNext=rowSource.next();
if(!isNext)ﺝ
LongoldRowOffset=(Long)index.findRows(distinctColumns,true,null);
longnewRowOffset=rowSource.getRowPosition();
if(oldRowOffset==null){
index.addValues(newRowOffset,distinctColumns);
row++;
ﺝ
}else
if(oldRowOffset.longValue()==newRowOffset){
row++;
ﺝ
}
}
}
ﺝafterLast()throwsException{
rowSource.afterLast();
row=ﻝ;
}
ﺝgetRow()throwsException{
returnrow;
}
finallonggetRowPosition(){
returnrowSource.getRowPosition();
}
ﺝsetRowPosition(longrowPosition)throwsException{
rowSource.setRowPosition(rowPosition);
}
ﺝnullRow(){
rowSource.nullRow();
row=ﻝ;
}
ﺝnoRow(){
rowSource.noRow();
row=ﻝ;
}
finalbooleanrowInserted(){
returnrowSource.rowInserted();
}
finalbooleanrowDeleted(){
returnrowSource.rowDeleted();
}
booleanisExpressionsFromThisRowSource(Expressionscolumns){
returnrowSource.isExpressionsFromThisRowSource(columns);
}
}
packagesmallsql.database;
importjava.sql.SQLException;
abstractclassﺝimplementsCloneable{
staticfinalﺝNULL=newExpressionValue(null,SQLTokenizer.NULL);
finalﺝtype;
privateﺝname;
privateﺝalias;
privateExpression[]params;
Expression(inttype){
this.type=type;
}
protectedObjectclone()throwsCloneNotSupportedException{
returnsuper.clone();
}
finalﺝgetName(){
returnname;
}
ﺝsetName(ﺝname){
this.alias=this.name=name;
}
finalﺝgetAlias(){
returnalias;
}
ﺝsetAlias(ﺝalias){
this.alias=alias;
}
voidsetParams(Expression[]params){
this.params=params;
}
voidsetParamAt(ﺝparam,intidx){
params[idx]=param;
}
finalExpression[]getParams(){returnparams;}
voidoptimize()throwsSQLException{
if(params!=null){
for(intp=ﻝ;p<params.length;p++){
params[p].optimize();
}
}
}
publicbooleanequals(Objectexpr){
if(!(exprinstanceofExpression))ﺝ
if(((Expression)expr).type==type){
Expression[]p1=((Expression)expr).params;
Expression[]p2=params;
if(p1!=null&&p2!=null){
if(p1==null)ﺝ
for(inti=ﻝ;i<pﻝ.length;i++){
if(!p2[i].equals(p1[i]))ﺝ
}
}
ﺝname1=((Expression)expr).name;
ﺝname2=name;
if(name1==name2)ﺝ
if(name1==null)ﺝ
if(name1.equalsIgnoreCase(name2))ﺝ
}
ﺝ
}
abstractbooleanisNull()throwsException;
abstractbooleangetBoolean()throwsException;
abstractintgetInt()throwsException;
abstractlonggetLong()throwsException;
abstractfloatgetFloat()throwsException;
abstractdoublegetDouble()throwsException;
abstractlonggetMoney()throwsException;
abstractMutableNumericgetNumeric()throwsException;
abstractObjectgetObject()throwsException;
finalObjectgetApiObject()throwsException{
Objectobj=getObject();
if(objinstanceofMutable){
return((Mutable)obj).getImmutableObject();
}
returnobj;
}
abstractﺝgetString()throwsException;
abstractbyte[]getBytes()throwsException;
abstractintgetDataType();
ﺝgetType(){returntype;}
ﺝgetTableName(){
returnnull;
}
intgetPrecision(){
returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);
}
intgetScale(){
returngetScale(getDataType());
}
finalstaticintgetScale(intdataType){
switch(dataType){
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
returnﻝ;
caseSQLTokenizer.TIMESTAMP:
returnﻝ;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnﻝ;
default:returnﻝ;
}
}
intgetDisplaySize(){
returnSSResultSetMetaData.getDisplaySize(getDataType(),getPrecision(),getScale());
}
booleanisDefinitelyWritable(){
ﺝ
}
booleanisAutoIncrement(){
ﺝ
}
booleanisCaseSensitive(){
ﺝ
}
booleanisNullable(){
ﺝ
}
staticﺝVALUE=ﻝ;
staticﺝNAME=ﻝ;
staticﺝFUNCTION=ﻝ;
staticﺝGROUP_BY=ﻝ;
staticﺝCOUNT	=ﻝ;
staticﺝSUM	=ﻝ;
staticﺝFIRST		=ﻝ;
staticﺝLAST		=ﻝ;
staticﺝMIN		=ﻝ;
staticﺝMAX		=ﻝ;
staticﺝGROUP_BEGIN=GROUP_BY;
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
publicclassExpressionArithmeticextendsﺝ{
privateﺝleft;
privateﺝright;
privateﺝright2;
privateExpression[]inList;
finalﺝoperation;
ExpressionArithmetic(ﺝleft,intoperation){
super(FUNCTION);
this.left=left;
this.operation=operation;
super.setParams(newExpression[]{left});
}
ExpressionArithmetic(ﺝleft,ﺝright,intoperation){
super(FUNCTION);
this.left=left;
this.right=right;
this.operation=operation;
super.setParams(newExpression[]{left,right});
}
ExpressionArithmetic(ﺝleft,ﺝright,ﺝright2,intoperation){
super(FUNCTION);
this.left=left;
this.right=right;
this.right2=right2;
this.operation=operation;
super.setParams(newExpression[]{left,right,right2});
}
ExpressionArithmetic(ﺝleft,ExpressionsinList,intoperation){
super(FUNCTION);
this.left=left;
this.operation=operation;
Expression[]params;
if(inList!=null){
this.inList=inList.toArray();
params=newExpression[this.inList.length+1];
params[0]=left;
System.arraycopy(this.inList,0,params,1,this.inList.length);
}else{
params=newExpression[]{left};
}
super.setParams(params);
}
intgetOperation(){
returnoperation;
}
privateﺝconvertExpressionIfNeeded(ﺝexpr,ﺝother){
if(expr==null||other==null){
returnexpr;
}
switch(expr.getDataType()){
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.BINARY:
switch(other.getDataType()){
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.VARBINARY:
ExpressionFunctionRTrimtrim=newExpressionFunctionRTrim();
trim.setParams(newExpression[]{expr});
returntrim;
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.BINARY:
if(other.getPrecision()>expr.getPrecision()){
returnnewExpressionFunctionConvert(newColumnExpression(other),expr,null);
}
break;
}
break;
}
returnexpr;
}
ﺝsetParamAt(ﺝparam,intidx){
switch(idx){
case0:
left=param;
break;
case1:
if(right!=null){
right=param;
}
break;
case2:
if(right!=null){
right2=param;
}
break;
}
if(inList!=null&&idx>0&&idx<=inList.length){
inList[idx-1]=param;
}
super.setParamAt(param,idx);
}
publicbooleanequals(Objectexpr){
if(!super.equals(expr))ﺝ
if(!(exprinstanceofExpressionArithmetic))ﺝ
if(((ExpressionArithmetic)expr).operation!=operation)ﺝ
ﺝ
}
intgetInt()throwsjava.lang.Exception{
if(isNull())returnﻝ;
intdataType=getDataType();
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returngetBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
returngetIntImpl();
caseSQLTokenizer.BIGINT:
return(int)getLongImpl();
caseSQLTokenizer.REAL:
return(int)getFloatImpl();
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
return(int)getDoubleImpl();
}
throwcreateUnspportedConversion(SQLTokenizer.INT);
}
ﺝgetIntImpl()throwsjava.lang.Exception{
switch(operation){
caseADD:returnleft.getInt()+right.getInt();
caseSUB:returnleft.getInt()-right.getInt();
caseMUL:returnleft.getInt()*right.getInt();
caseDIV:returnleft.getInt()/right.getInt();
caseNEGATIVE:return-left.getInt();
caseMOD:		returnleft.getInt()%right.getInt();
caseBIT_NOT:return~left.getInt();
}
throwcreateUnspportedConversion(SQLTokenizer.INT);
}
longgetLong()throwsjava.lang.Exception{
if(isNull())returnﻝ;
intdataType=getDataType();
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returngetBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
returngetIntImpl();
caseSQLTokenizer.BIGINT:
returngetLongImpl();
caseSQLTokenizer.REAL:
return(long)getFloatImpl();
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
return(long)getDoubleImpl();
}
throwcreateUnspportedConversion(SQLTokenizer.LONG);
}
privatelonggetLongImpl()throwsjava.lang.Exception{
if(isNull())returnﻝ;
switch(operation){
caseADD:returnleft.getLong()+right.getLong();
caseSUB:returnleft.getLong()-right.getLong();
caseMUL:returnleft.getLong()*right.getLong();
caseDIV:returnleft.getLong()/right.getLong();
caseNEGATIVE:return-left.getLong();
caseMOD:		returnleft.getLong()%right.getLong();
caseBIT_NOT:return~right.getInt();
}
throwcreateUnspportedConversion(SQLTokenizer.LONG);
}
doublegetDouble()throwsjava.lang.Exception{
if(isNull())returnﻝ;
intdataType=getDataType();
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returngetBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
returngetIntImpl();
caseSQLTokenizer.BIGINT:
returngetLongImpl();
caseSQLTokenizer.REAL:
returngetFloatImpl();
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returngetDoubleImpl();
}
throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);
}
privatedoublegetDoubleImpl()throwsjava.lang.Exception{
if(operation==NEGATIVE)
returngetDoubleImpl(0,left.getDouble());
returngetDoubleImpl(left.getDouble(),right.getDouble());
}
privatedoublegetDoubleImpl(doublelVal,doublerVal)throwsjava.lang.Exception{
switch(operation){
caseADD:returnlVal+rVal;
caseSUB:returnlVal-rVal;
caseMUL:returnlVal*rVal;
caseDIV:returnlVal/rVal;
caseNEGATIVE:return-rVal;
caseMOD:		returnlVal%rVal;
}
throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);
}
floatgetFloat()throwsjava.lang.Exception{
if(isNull())returnﻝ;
intdataType=getDataType();
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returngetBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
returngetIntImpl();
caseSQLTokenizer.BIGINT:
returngetLongImpl();
caseSQLTokenizer.REAL:
returngetFloatImpl();
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
return(float)getDoubleImpl();
}
throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);
}
privatefloatgetFloatImpl()throwsjava.lang.Exception{
switch(operation){
caseADD:returnleft.getFloat()+right.getFloat();
caseSUB:returnleft.getFloat()-right.getFloat();
caseMUL:returnleft.getFloat()*right.getFloat();
caseDIV:returnleft.getFloat()/right.getFloat();
caseNEGATIVE:return-left.getFloat();
caseMOD:		returnleft.getFloat()%right.getFloat();
}
throwcreateUnspportedConversion(SQLTokenizer.REAL);
}
longgetMoney()throwsjava.lang.Exception{
if(isNull())returnﻝ;
intdataType=getDataType();
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returngetBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
returngetIntImpl()*ﻝ;
caseSQLTokenizer.BIGINT:
returngetLongImpl()*ﻝ;
caseSQLTokenizer.REAL:
returnUtils.doubleToMoney(getFloatImpl());
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnUtils.doubleToMoney(getDoubleImpl());
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
returngetMoneyImpl();
}
throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);
}
privatelonggetMoneyImpl()throwsjava.lang.Exception{
switch(operation){
caseADD:returnleft.getMoney()+right.getMoney();
caseSUB:returnleft.getMoney()-right.getMoney();
caseMUL:returnleft.getMoney()*right.getMoney()/ﻝ;
caseDIV:returnleft.getMoney()*ﻝ/right.getMoney();
caseNEGATIVE:return			-left.getMoney();
}
throwcreateUnspportedConversion(SQLTokenizer.MONEY);
}
MutableNumericgetNumeric()throwsjava.lang.Exception{
if(isNull())returnnull;
intdataType=getDataType();
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnnewMutableNumeric(getBoolean()?ﻝ:ﻝ);
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
returnnewMutableNumeric(getIntImpl());
caseSQLTokenizer.BIGINT:
returnnewMutableNumeric(getLongImpl());
caseSQLTokenizer.REAL:
returnnewMutableNumeric(getFloatImpl());
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnnewMutableNumeric(getDoubleImpl());
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returngetNumericImpl();
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
returnnewMutableNumeric(getMoneyImpl(),4);
}
throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);
}
privateMutableNumericgetNumericImpl()throwsjava.lang.Exception{
switch(operation){
caseADD:
{
MutableNumericnum=left.getNumeric();
num.add(right.getNumeric());
returnnum;
}
caseSUB:
{
MutableNumericnum=left.getNumeric();
num.sub(right.getNumeric());
returnnum;
}
caseMUL:
if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){
MutableNumericnum=left.getNumeric();
num.mul(right.getInt());
returnnum;
}else
if(getDataType(left.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){
MutableNumericnum=right.getNumeric();
num.mul(left.getInt());
returnnum;
}else{
MutableNumericnum=left.getNumeric();
num.mul(right.getNumeric());
returnnum;
}
caseDIV:
{
MutableNumericnum=left.getNumeric();
if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)
num.div(right.getInt());
else
num.div(right.getNumeric());
returnnum;
}
caseNEGATIVE:
{
MutableNumericnum=left.getNumeric();
num.setSignum(-num.getSignum());
returnnum;
}
caseMOD:
{
if(getDataType(getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)
returnnewMutableNumeric(getInt());
MutableNumericnum=left.getNumeric();
num.mod(right.getNumeric());
returnnum;
}
default:throwcreateUnspportedConversion(SQLTokenizer.NUMERIC);
}
}
ObjectgetObject()throwsjava.lang.Exception{
if(isNull())returnnull;
intdataType=getDataType();
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returngetBoolean()?Boolean.TRUE:Boolean.FALSE;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returngetBytes();
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
returnnewInteger(getInt());
caseSQLTokenizer.BIGINT:
returnnewLong(getLong());
caseSQLTokenizer.REAL:
returnnewFloat(getFloat());
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnnewDouble(getDouble());
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
returnMoney.createFromUnscaledValue(getMoney());
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returngetNumeric();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returngetString(left.getString(),right.getString());
caseSQLTokenizer.JAVA_OBJECT:
ObjectlObj=left.getObject();
ObjectrObj=right.getObject();
if(lObjinstanceofNumber&&rObjinstanceofNumber)
returnnewDouble(getDoubleImpl(((Number)lObj).doubleValue(),((Number)rObj).doubleValue()));
else
returngetString(lObj.toString(),rObj.toString());
caseSQLTokenizer.LONGVARBINARY:
returngetBytes();
caseSQLTokenizer.DATE:
caseSQLTokenizer.TIME:
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
returnnewDateTime(getLong(),dataType);
caseSQLTokenizer.UNIQUEIDENTIFIER:
returngetBytes();
default:throwcreateUnspportedDataType();
}
}
booleangetBoolean()throwsjava.lang.Exception{
switch(operation){
caseOR:returnleft.getBoolean()||right.getBoolean();
caseAND:returnleft.getBoolean()&&right.getBoolean();
caseNOT:return!left.getBoolean();
caseLIKE:returnUtils.like(left.getString(),right.getString());
caseISNULL:return						left.isNull();
caseISNOTNULL:	return					!left.isNull();
caseIN:	if(right==null)
returnisInList();
break;
}
finalbooleanleftIsNull=left.isNull();
intdataType;
if(operation==NEGATIVE||operation==BIT_NOT){
if(leftIsNull)ﺝ
dataType=left.getDataType();
}else{
finalbooleanrightIsNull=right.isNull();
if(operation==EQUALS_NULL&&leftIsNull&&rightIsNull)ﺝ
if(leftIsNull||rightIsNull)ﺝ
dataType=getDataType(left,right);
}
switch(dataType){
caseSQLTokenizer.BOOLEAN:
switch(operation){
caseIN:
caseEQUALS_NULL:
caseEQUALS:returnleft.getBoolean()==right.getBoolean();
caseUNEQUALS:returnleft.getBoolean()!=right.getBoolean();
}
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
caseSQLTokenizer.BIT:
switch(operation){
caseIN:
caseEQUALS_NULL:
caseEQUALS:returnleft.getInt()==right.getInt();
caseGREATER:returnleft.getInt()>right.getInt();
caseGRE_EQU:returnleft.getInt()>=right.getInt();
caseLESSER:returnleft.getInt()<right.getInt();
caseLES_EQU:returnleft.getInt()<=right.getInt();
caseUNEQUALS:returnleft.getInt()!=right.getInt();
caseBETWEEN:
int_left=left.getInt();
return_left>=right.getInt()&&right2.getInt()>=_left;
default:
returngetInt()!=ﻝ;
}
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
switch(operation){
caseIN:
caseEQUALS_NULL:
caseEQUALS:returnleft.getLong()==right.getLong();
caseGREATER:returnleft.getLong()>right.getLong();
caseGRE_EQU:returnleft.getLong()>=right.getLong();
caseLESSER:returnleft.getLong()<right.getLong();
caseLES_EQU:returnleft.getLong()<=right.getLong();
caseUNEQUALS:returnleft.getLong()!=right.getLong();
caseBETWEEN:
long_left=left.getLong();
return_left>=right.getLong()&&right2.getLong()>=_left;
default:
returngetLong()!=ﻝ;
}
caseSQLTokenizer.REAL:
switch(operation){
caseIN:
caseEQUALS_NULL:
caseEQUALS:returnleft.getFloat()==right.getFloat();
caseGREATER:returnleft.getFloat()>right.getFloat();
caseGRE_EQU:returnleft.getFloat()>=right.getFloat();
caseLESSER:returnleft.getFloat()<right.getFloat();
caseLES_EQU:returnleft.getFloat()<=right.getFloat();
caseUNEQUALS:returnleft.getFloat()!=right.getFloat();
caseBETWEEN:
float_left=left.getFloat();
return_left>=right.getFloat()&&right2.getFloat()>=_left;
default:
returngetFloat()!=ﻝ;
}
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
switch(operation){
caseIN:
caseEQUALS_NULL:
caseEQUALS:returnleft.getDouble()==right.getDouble();
caseGREATER:returnleft.getDouble()>right.getDouble();
caseGRE_EQU:returnleft.getDouble()>=right.getDouble();
caseLESSER:returnleft.getDouble()<right.getDouble();
caseLES_EQU:returnleft.getDouble()<=right.getDouble();
caseUNEQUALS:returnleft.getDouble()!=right.getDouble();
caseBETWEEN:
double_left=left.getDouble();
return_left>=right.getDouble()&&right2.getDouble()>=_left;
default:
returngetDouble()!=ﻝ;
}
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
switch(operation){
caseIN:
caseEQUALS_NULL:
caseEQUALS:returnleft.getMoney()==right.getMoney();
caseGREATER:returnleft.getMoney()>right.getMoney();
caseGRE_EQU:returnleft.getMoney()>=right.getMoney();
caseLESSER:returnleft.getMoney()<right.getMoney();
caseLES_EQU:returnleft.getMoney()<=right.getMoney();
caseUNEQUALS:returnleft.getMoney()!=right.getMoney();
caseBETWEEN:
long_left=left.getMoney();
return_left>=right.getMoney()&&right2.getMoney()>=_left;
default:
returngetMoney()!=ﻝ;
}
caseSQLTokenizer.DECIMAL:
caseSQLTokenizer.NUMERIC:{
if(operation==NEGATIVE)
returnleft.getNumeric().getSignum()!=ﻝ;
intcomp=left.getNumeric().compareTo(right.getNumeric());
switch(operation){
caseIN:
caseEQUALS_NULL:
caseEQUALS:returncomp==ﻝ;
caseGREATER:returncomp>ﻝ;
caseGRE_EQU:returncomp>=ﻝ;
caseLESSER:returncomp<ﻝ;
caseLES_EQU:returncomp<=ﻝ;
caseUNEQUALS:returncomp!=ﻝ;
caseBETWEEN:
returncomp>=ﻝ&&ﻝ>=left.getNumeric().compareTo(rightﻝ.getNumeric());
default:
returngetNumeric().getSignum()!=ﻝ;
}
}
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.CLOB:{
finalﺝleftStr=left.getString();
finalﺝrightStr=right.getString();
intcomp=String.CASE_INSENSITIVE_ORDER.compare(leftStr,rightStr);
switch(operation){
caseIN:
caseEQUALS_NULL:
caseEQUALS:returncomp==ﻝ;
caseGREATER:returncomp>ﻝ;
caseGRE_EQU:returncomp>=ﻝ;
caseLESSER:returncomp<ﻝ;
caseLES_EQU:returncomp<=ﻝ;
caseUNEQUALS:returncomp!=ﻝ;
caseBETWEEN:
returncomp>=ﻝ&&ﻝ>=String.CASE_INSENSITIVE_ORDER.compare(leftStr,rightﻝ.getString());
caseADD:returnUtils.string2boolean(leftStr+rightStr);
}
break;}
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
caseSQLTokenizer.UNIQUEIDENTIFIER:{
byte[]leftBytes=left.getBytes();
byte[]rightBytes=right.getBytes();
intcomp=Utils.compareBytes(leftBytes,rightBytes);
switch(operation){
caseIN:
caseEQUALS_NULL:
caseEQUALS:returncomp==ﻝ;
caseGREATER:returncomp>ﻝ;
caseGRE_EQU:returncomp>=ﻝ;
caseLESSER:returncomp<ﻝ;
caseLES_EQU:returncomp<=ﻝ;
caseUNEQUALS:returncomp!=ﻝ;
caseBETWEEN:
returncomp>=ﻝ&&ﻝ>=Utils.compareBytes(leftBytes,rightﻝ.getBytes());
}
break;}
}
throwcreateUnspportedDataType();
}
ﺝgetString()throwsjava.lang.Exception{
if(isNull())returnnull;
returngetObject().toString();
}
finalprivateﺝgetString(ﺝlVal,ﺝrVal)throwsjava.lang.Exception{
switch(operation){
caseADD:returnlVal+rVal;
}
throwcreateUnspportedConversion(SQLTokenizer.VARCHAR);
}
intgetDataType(){
switch(operation){
caseNEGATIVE:
caseBIT_NOT:
returnleft.getDataType();
caseEQUALS:
caseEQUALS_NULL:
caseGREATER:
caseGRE_EQU:
caseLESSER:
caseLES_EQU:
caseUNEQUALS:
caseBETWEEN:
caseOR:
caseAND:
caseNOT:
caseLIKE:
caseISNULL:
caseISNOTNULL:
returnSQLTokenizer.BOOLEAN;
default:
returngetDataType(left,right);
}
}
intgetScale(){
intdataType=getDataType();
switch(dataType){
caseSQLTokenizer.DECIMAL:
caseSQLTokenizer.NUMERIC:
switch(operation){
caseADD:
caseSUB:
returnMath.max(left.getScale(),right.getScale());
caseMUL:
returnleft.getScale()+right.getScale();
caseDIV:
returnMath.max(left.getScale()+5,right.getScale()+4);
caseNEGATIVE:
returnleft.getScale();
caseMOD:
returnﻝ;
}
}
returngetScale(dataType);
}
booleanisNull()throwsException{
switch(operation){
caseOR:
caseAND:
caseNOT:
caseLIKE:
caseISNULL:
caseISNOTNULL:
caseIN:
ﺝ
caseNEGATIVE:
caseBIT_NOT:
returnleft.isNull();
default:returnleft.isNull()||right.isNull();
}
}
byte[]getBytes()throwsjava.lang.Exception{
throwcreateUnspportedConversion(SQLTokenizer.BINARY);
}
booleanisInList()throwsException{
if(left.isNull())ﺝ
try{
for(inti=ﻝ;i<inList.length;i++){
right=inList[i];
if(getBoolean())ﺝ
}
}finally{
right=null;
}
ﺝ
}
SQLExceptioncreateUnspportedDataType(){
Object[]params={
SQLTokenizer.getKeyWord(getDataType(left,right)),
getKeywordFromOperation(operation)
};
returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER,params);
}
SQLExceptioncreateUnspportedConversion(intdataType){
inttype=left==null?right.getDataType():getDataType(left,right);
Object[]params=newObject[]{
SQLTokenizer.getKeyWord(dataType),
SQLTokenizer.getKeyWord(type),
getKeywordFromOperation(operation)
};
returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER,params);
}
voidoptimize()throwsSQLException{
super.optimize();
Expression[]params=getParams();
if(params.length==ﻝ){
return;
}
setParamAt(convertExpressionIfNeeded(params[ﻝ],params[ﻝ]),ﻝ);
for(intp=ﻝ;p<params.length;p++){
setParamAt(convertExpressionIfNeeded(params[p],left),p);
}
}
privatestaticﺝgetKeywordFromOperation(intoperation){
inttoken=ﻝ;
for(inti=ﻝ;i<ﻝ;i++){
if(getOperationFromToken(i)==operation){
token=i;
break;
}
}
if(operation==NEGATIVE)token=SQLTokenizer.MINUS;
if(operation==ISNOTNULL)token=SQLTokenizer.IS;
ﺝkeyword=SQLTokenizer.getKeyWord(token);
if(keyword==null)keyword=""+(char)token;
returnkeyword;
}
staticintgetOperationFromToken(intvalue){
switch(value){
caseSQLTokenizer.PLUS:returnADD;
caseSQLTokenizer.MINUS:returnSUB;
caseSQLTokenizer.ASTERISK:returnMUL;
caseSQLTokenizer.SLACH:returnDIV;
caseSQLTokenizer.PERCENT:returnMOD;
caseSQLTokenizer.EQUALS:returnEQUALS;
caseSQLTokenizer.GREATER:returnGREATER;
caseSQLTokenizer.GREATER_EQU:returnGRE_EQU;
caseSQLTokenizer.LESSER:returnLESSER;
caseSQLTokenizer.LESSER_EQU:returnLES_EQU;
caseSQLTokenizer.UNEQUALS:returnUNEQUALS;
caseSQLTokenizer.BETWEEN:returnBETWEEN;
caseSQLTokenizer.LIKE:returnLIKE;
caseSQLTokenizer.IN:returnIN;
caseSQLTokenizer.IS:returnISNULL;
caseSQLTokenizer.OR:returnOR;
caseSQLTokenizer.AND:returnAND;
caseSQLTokenizer.NOT:returnNOT;
caseSQLTokenizer.BIT_OR:returnBIT_OR;
caseSQLTokenizer.BIT_AND:returnBIT_AND;
caseSQLTokenizer.BIT_XOR:returnBIT_XOR;
caseSQLTokenizer.TILDE:returnBIT_NOT;
default:returnﻝ;
}
}
staticintgetDataType(ﺝleft,ﺝright){
inttypeLeft=left.getDataType();
inttypeRight=right.getDataType();
returngetDataType(typeLeft,typeRight);
}
staticintgetBestNumberDataType(intparamDataType){
intdataTypeIdx=Utils.indexOf(paramDataType,DatatypeRange);
if(dataTypeIdx>=NVARCHAR_IDX)
returnSQLTokenizer.DOUBLE;
if(dataTypeIdx>=INT_IDX)
returnSQLTokenizer.INT;
if(dataTypeIdx>=BIGINT_IDX)
returnSQLTokenizer.BIGINT;
if(dataTypeIdx>=MONEY_IDX)
returnSQLTokenizer.MONEY;
if(dataTypeIdx>=DECIMAL_IDX)
returnSQLTokenizer.DECIMAL;
returnSQLTokenizer.DOUBLE;
}
staticintgetDataType(inttypeLeft,inttypeRight){
if(typeLeft==typeRight)returntypeLeft;
intdataTypeIdx=Math.min(Utils.indexOf(typeLeft,DatatypeRange),Utils.indexOf(typeRight,DatatypeRange));
if(dataTypeIdx<ﻝ)thrownewError("getDataType():"+typeLeft+","+typeRight);
returnDatatypeRange[dataTypeIdx];
}
staticﺝOR=ﻝ;
staticﺝAND=ﻝ;
staticﺝNOT=ﻝ;
staticﺝBIT_OR=ﻝ;
staticﺝBIT_AND=ﻝ;
staticﺝBIT_XOR=ﻝ;
staticﺝEQUALS=ﻝ;
staticﺝEQUALS_NULL=ﻝ;
staticﺝGREATER=ﻝ;
staticﺝGRE_EQU=ﻝ;
staticﺝLESSER=ﻝ;
staticﺝLES_EQU=ﻝ;
staticﺝUNEQUALS=ﻝ;
staticﺝIN=ﻝ;
staticﺝBETWEEN=ﻝ;
staticﺝLIKE=ﻝ;
staticﺝISNULL=ﻝ;
staticﺝISNOTNULL=ISNULL+1;
staticﺝADD=ﻝ;
staticﺝSUB=ﻝ;
staticﺝMUL=ﻝ;
staticﺝDIV=ﻝ;
staticﺝMOD=ﻝ;
staticﺝBIT_NOT=ﻝ;
staticﺝNEGATIVE=ﻝ;
privatestaticfinalint[]DatatypeRange={
SQLTokenizer.TIMESTAMP,
SQLTokenizer.SMALLDATETIME,
SQLTokenizer.DATE,
SQLTokenizer.TIME,
SQLTokenizer.DOUBLE,
SQLTokenizer.FLOAT,
SQLTokenizer.REAL,
SQLTokenizer.DECIMAL,
SQLTokenizer.NUMERIC,
SQLTokenizer.MONEY,
SQLTokenizer.SMALLMONEY,
SQLTokenizer.BIGINT,
SQLTokenizer.INT,
SQLTokenizer.SMALLINT,
SQLTokenizer.TINYINT,
SQLTokenizer.BIT,
SQLTokenizer.BOOLEAN,
SQLTokenizer.LONGNVARCHAR,
SQLTokenizer.UNIQUEIDENTIFIER,
SQLTokenizer.NVARCHAR,
SQLTokenizer.NCHAR,
SQLTokenizer.VARCHAR,
SQLTokenizer.CHAR,
SQLTokenizer.LONGVARCHAR,
SQLTokenizer.CLOB,
SQLTokenizer.VARBINARY,
SQLTokenizer.BINARY,
SQLTokenizer.LONGVARBINARY,
SQLTokenizer.BLOB,
SQLTokenizer.NULL};
privatestaticintNVARCHAR_IDX=Utils.indexOf(SQLTokenizer.NVARCHAR,DatatypeRange);
privatestaticintINT_IDX=Utils.indexOf(SQLTokenizer.INT,DatatypeRange);
privatestaticintBIGINT_IDX=Utils.indexOf(SQLTokenizer.BIGINT,DatatypeRange);
privatestaticintMONEY_IDX=Utils.indexOf(SQLTokenizer.MONEY,DatatypeRange);
privatestaticintDECIMAL_IDX=Utils.indexOf(SQLTokenizer.DECIMAL,DatatypeRange);
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
abstractclassExpressionFunctionextendsﺝ{
ﺝparam1;
ﺝparam2;
ﺝparam3;
ﺝparam4;
ExpressionFunction(){
super(FUNCTION);
}
abstractintgetFunction();
byte[]getBytes()throwsException{
returnExpressionValue.getBytes(getObject(),getDataType());
}
voidsetParams(Expression[]params){
super.setParams(params);
if(params.length>0)param1=params[0];
if(params.length>1)param2=params[1];
if(params.length>2)param3=params[2];
if(params.length>3)param4=params[3];
}
ﺝsetParamAt(ﺝparam,intidx){
switch(idx){
case0:
param1=param;
break;
case1:
param2=param;
break;
case2:
param3=param;
break;
case3:
param4=param;
break;
}
super.setParamAt(param,idx);
}
publicbooleanequals(Objectexpr){
if(!super.equals(expr))ﺝ
if(!(exprinstanceofExpressionFunction))ﺝ
return((ExpressionFunction)expr).getFunction()==getFunction();
}
SQLExceptioncreateUnspportedDataType(intdataType){
Object[]params={
SQLTokenizer.getKeyWord(dataType),
SQLTokenizer.getKeyWord(getFunction())
};
returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC,params);
}
SQLExceptioncreateUnspportedConversion(intdataType){
Object[]params={
SQLTokenizer.getKeyWord(dataType),
SQLTokenizer.getKeyWord(getFunction())
};
returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION_FUNC,params);
}
}
packagesmallsql.database;
finalclassExpressionFunctionACosextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.ACOS;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.acos(param1.getDouble());
}
}
packagesmallsql.database;
finalclassExpressionFunctionASinextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.ASIN;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.asin(param1.getDouble());
}
}
packagesmallsql.database;
finalclassExpressionFunctionATanextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.ATAN;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.atan(param1.getDouble());
}
}
packagesmallsql.database;
finalclassExpressionFunctionATan2extendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.ATAN2;}
booleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.atan2(param1.getDouble(),param2.getDouble());
}
}
packagesmallsql.database;
classExpressionFunctionAbsextendsExpressionFunctionReturnP1{
intgetFunction(){returnSQLTokenizer.ABS;}
booleangetBoolean()throwsException{
returngetDouble()!=ﻝ;
}
intgetInt()throwsException{
returnMath.abs(param1.getInt());
}
longgetLong()throwsException{
returnMath.abs(param1.getLong());
}
floatgetFloat()throwsException{
returnMath.abs(param1.getFloat());
}
doublegetDouble()throwsException{
returnMath.abs(param1.getDouble());
}
longgetMoney()throwsException{
returnMath.abs(param1.getMoney());
}
MutableNumericgetNumeric()throwsException{
if(param1.isNull())returnnull;
MutableNumericnum=param1.getNumeric();
if(num.getSignum()<ﻝ)num.setSignum(ﻝ);
returnnum;
}
ObjectgetObject()throwsException{
if(param1.isNull())returnnull;
Objectpara1=param1.getObject();
switch(param1.getDataType()){
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
doubledValue=((Double)para1).doubleValue();
return(dValue<0)?newDouble(-dValue):para1;
caseSQLTokenizer.REAL:
doublefValue=((Float)para1).floatValue();
return(fValue<0)?newFloat(-fValue):para1;
caseSQLTokenizer.BIGINT:
longlValue=((Number)para1).longValue();
return(lValue<0)?newLong(-lValue):para1;
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
intiValue=((Number)para1).intValue();
return(iValue<0)?newInteger(-iValue):para1;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
MutableNumericnValue=(MutableNumeric)para1;
if(nValue.getSignum()<0)nValue.setSignum(1);
returnnValue;
caseSQLTokenizer.MONEY:
MoneymValue=(Money)para1;
if(mValue.value<0)mValue.value=-mValue.value;
returnmValue;
default:throwcreateUnspportedDataType(param1.getDataType());
}
}
ﺝgetString()throwsException{
Objectobj=getObject();
if(obj==null)returnnull;
returnobj.toString();
}
}
packagesmallsql.database;
finalclassExpressionFunctionAsciiextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.ASCII;
}
finalbooleanisNull()throwsException{
returnparamﻝ.isNull()||paramﻝ.getString().length()==ﻝ;
}
ﺝgetInt()throwsException{
ﺝstr=param1.getString();
if(str==null||str.length()==ﻝ)returnﻝ;
returnstr.charAt(0);
}
finalObjectgetObject()throwsException{
ﺝstr=param1.getString();
if(str==null||str.length()==ﻝ)returnnull;
returnUtils.getInteger(str.charAt(0));
}
}
packagesmallsql.database;
finalclassExpressionFunctionBitLenextendsExpressionFunctionReturnInt{
privatestaticﺝBYTES_PER_CHAR=ﻝ;
ﺝgetFunction(){
returnSQLTokenizer.BITLEN;
}
booleanisNull()throwsException{
returnparam1.isNull();
}
ﺝgetInt()throwsException{
if(isNull())returnﻝ;
ﺝstr=param1.getString();
returnstr.length()*BYTES_PER_CHAR*ﻝ;
}
}
packagesmallsql.database;
finalclassExpressionFunctionCaseextendsﺝ{
ExpressionFunctionCase(){
super(FUNCTION);
}
privatefinalExpressionscases=newExpressions();
privatefinalExpressionsresults=newExpressions();
privateﺝelseResult=Expression.NULL;
ﺝdataType=-1;
ﺝaddCase(ﺝcondition,ﺝresult){
cases.add(condition);
results.add(result);
}
ﺝsetElseResult(ﺝexpr){
elseResult=expr;
}
ﺝsetEnd(){
Expression[]params=newExpression[cases.size()*ﻝ+(elseResult!=null?ﻝ:ﻝ)];
inti=ﻝ;
for(intp=ﻝ;p<cases.size();p++){
params[i++]=cases.get(p);
params[i++]=results.get(p);
}
if(i<params.length)
params[i]=elseResult;
super.setParams(params);
}
ﺝsetParams(Expression[]params){
super.setParams(params);
inti=ﻝ;
for(intp=ﻝ;p<cases.size();p++){
cases.set(p,params[i++]);
results.set(p,params[i++]);
}
if(i<params.length)
elseResult=params[i];
}
voidsetParamAt(ﺝparam,intidx){
super.setParamAt(param,idx);
intp=idx/ﻝ;
if(p>=cases.size()){
elseResult=param;
return;
}
if(idx%ﻝ>ﻝ){
results.set(p,param);
}else{
cases.set(p,param);
}
}
ﺝgetFunction(){
returnSQLTokenizer.CASE;
}
finalbooleanisNull()throwsException{
returngetResult().isNull();
}
finalbooleangetBoolean()throwsException{
returngetResult().getBoolean();
}
ﺝgetInt()throwsException{
returngetResult().getInt();
}
finallonggetLong()throwsException{
returngetResult().getLong();
}
finalfloatgetFloat()throwsException{
returngetResult().getFloat();
}
finaldoublegetDouble()throwsException{
returngetResult().getDouble();
}
finallonggetMoney()throwsException{
returngetResult().getMoney();
}
finalMutableNumericgetNumeric()throwsException{
returngetResult().getNumeric();
}
finalObjectgetObject()throwsException{
returngetResult().getObject();
}
finalﺝgetString()throwsException{
returngetResult().getString();
}
finalbyte[]getBytes()throwsException{
returngetResult().getBytes();
}
ﺝgetDataType(){
if(dataType<ﻝ){
dataType=elseResult.getDataType();
for(inti=ﻝ;i<results.size();i++){
dataType=ExpressionArithmetic.getDataType(dataType,results.get(i).getDataType());
}
}
returndataType;
}
ﺝgetPrecision(){
intprecision=ﻝ;
for(inti=results.size()-ﻝ;i>=ﻝ;i--){
precision=Math.max(precision,results.get(i).getPrecision());
}
returnprecision;
}
ﺝgetScale(){
intprecision=ﻝ;
for(inti=results.size()-ﻝ;i>=ﻝ;i--){
precision=Math.max(precision,results.get(i).getScale());
}
returnprecision;
}
finalprivateﺝgetResult()throwsException{
for(inti=ﻝ;i<cases.size();i++){
if(cases.get(i).getBoolean())returnresults.get(i);
}
returnelseResult;
}
}
packagesmallsql.database;
finalclassExpressionFunctionCeilingextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.CEILING;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.ceil(param1.getDouble());
}
}
packagesmallsql.database;
publicclassExpressionFunctionCharextendsExpressionFunctionReturnﺝ{
ﺝgetFunction(){
returnSQLTokenizer.CHAR;
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
charchr=(char)param1.getInt();
returnString.valueOf(chr);
}
ﺝgetDataType(){
returnSQLTokenizer.CHAR;
}
ﺝgetPrecision(){
returnﻝ;
}
}
packagesmallsql.database;
finalclassExpressionFunctionCharLenextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.CHARLEN;
}
booleanisNull()throwsException{
returnparam1.isNull();
}
ﺝgetInt()throwsException{
if(isNull())returnﻝ;
ﺝstr=param1.getString();
returnstr.length();
}
}
packagesmallsql.database;
importjava.util.Arrays;
importsmallsql.database.language.Language;
publicclassExpressionFunctionConvertextendsExpressionFunction{
finalprivateColumndatatype;
publicExpressionFunctionConvert(Columndatatype,ﺝvalue,ﺝstyle){
super();
this.datatype=datatype;
Expression[]params=(style==null)?newExpression[]{value}:newExpression[]{value,style};
setParams(params);
}
intgetFunction(){
returnSQLTokenizer.CONVERT;
}
booleanisNull()throwsException{
returnparam1.isNull();
}
booleangetBoolean()throwsException{
returnExpressionValue.getBoolean(getObject(),getDataType());
}
intgetInt()throwsException{
returnExpressionValue.getInt(getObject(),getDataType());
}
longgetLong()throwsException{
returnExpressionValue.getLong(getObject(),getDataType());
}
floatgetFloat()throwsException{
returnExpressionValue.getFloat(getObject(),getDataType());
}
doublegetDouble()throwsException{
returnExpressionValue.getDouble(getObject(),getDataType());
}
longgetMoney()throwsException{
returnExpressionValue.getMoney(getObject(),getDataType());
}
MutableNumericgetNumeric()throwsException{
returnExpressionValue.getNumeric(getObject(),getDataType());
}
ﺝgetString()throwsException{
Objectobj=getObject();
if(obj==null)returnnull;
switch(datatype.getDataType()){
caseSQLTokenizer.BIT:
return((Boolean)obj).booleanValue()?"1":"0";
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.LONGVARBINARY:
returnnewString((byte[])obj);
}
returnobj.toString();
}
ObjectgetObject()throwsException{
if(param1.isNull())returnnull;
ﺝdataType=getDataType();
switch(dataType){
caseSQLTokenizer.LONGVARCHAR:
returnconvertToString();
caseSQLTokenizer.VARCHAR:{
ﺝstr=convertToString();
intlength=datatype.getDisplaySize();
if(length>str.length())
returnstr;
returnstr.substring(0,length);
}
caseSQLTokenizer.CHAR:{
ﺝstr=convertToString();
intlength=datatype.getDisplaySize();
if(length>str.length()){
char[]buffer=newchar[length-str.length()];
Arrays.fill(buffer,'');
returnstr+newString(buffer);
}
returnstr.substring(0,length);
}
caseSQLTokenizer.LONGVARBINARY:
returnparam1.getBytes();
caseSQLTokenizer.VARBINARY:{
byte[]bytes=param1.getBytes();
intlength=datatype.getPrecision();
if(length<bytes.length){
byte[]buffer=newbyte[length];
System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));
returnbuffer;
}
returnbytes;
}
caseSQLTokenizer.BINARY:{
byte[]bytes=param1.getBytes();
intlength=datatype.getPrecision();
if(length!=bytes.length){
byte[]buffer=newbyte[length];
System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));
returnbuffer;
}
returnbytes;
}
caseSQLTokenizer.BOOLEAN:
caseSQLTokenizer.BIT:
returnparam1.getBoolean()?Boolean.TRUE:Boolean.FALSE;
caseSQLTokenizer.TINYINT:
returnUtils.getInteger(param1.getInt()&0xFF);
caseSQLTokenizer.SMALLINT:
returnUtils.getInteger((short)param1.getInt());
caseSQLTokenizer.INT:
returnUtils.getInteger(param1.getInt());
caseSQLTokenizer.BIGINT:
returnnewLong(param1.getLong());
caseSQLTokenizer.REAL:
returnnewFloat(param1.getFloat());
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnnewDouble(param1.getDouble());
caseSQLTokenizer.DATE:
caseSQLTokenizer.TIME:
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
returnnewDateTime(getDateTimeLong(),dataType);
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
MutableNumericnum=param1.getNumeric();
if(num!=null&&(dataType==SQLTokenizer.NUMERIC||dataType==SQLTokenizer.DECIMAL))
num.setScale(getScale());
returnnum;
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
returnMoney.createFromUnscaledValue(param1.getMoney());
caseSQLTokenizer.UNIQUEIDENTIFIER:
switch(param1.getDataType()){
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.CHAR:
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.CLOB:
returnUtils.bytesﻝunique(Utils.uniqueﻝbytes(paramﻝ.getString()),ﻝ);
}
returnUtils.bytesﻝunique(paramﻝ.getBytes(),ﻝ);
}
Object[]param={SQLTokenizer.getKeyWord(dataType)};
throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV,param);
}
finalprivateﺝconvertToString()throwsException{
if(param2!=null){
inttype=param1.getDataType();
switch(type){
caseSQLTokenizer.SMALLDATETIME:
type=SQLTokenizer.TIMESTAMP;
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.DATE:
caseSQLTokenizer.TIME:
returnnewDateTime(param1.getLong(),type).toString(param2.getInt());
default:
returnparam1.getString();
}
}else
returnparam1.getString();
}
finalprivatelonggetDateTimeLong()throwsException{
switch(param1.getDataType()){
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.CHAR:
returnDateTime.parse(param1.getString());
}
returnparam1.getLong();
}
ﺝgetDataType(){
returndatatype.getDataType();
}
ﺝgetPrecision(){
ﺝdataType=getDataType();
switch(dataType){
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.BINARY:
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returndatatype.getPrecision();
default:
returnsuper.getPrecision();
}
}
ﺝgetScale(){
returndatatype.getScale();
}
}
packagesmallsql.database;
finalclassExpressionFunctionCosextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.COS;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.cos(param1.getDouble());
}
}
packagesmallsql.database;
finalclassExpressionFunctionCotextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.COT;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
return1/Math.tan(param1.getDouble());
}
}
packagesmallsql.database;
finalclassExpressionFunctionDayOfMonthextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.DAYOFMONTH;
}
ﺝgetInt()throwsException{
if(paramﻝ.isNull())returnﻝ;
DateTime.Detailsdetails=newDateTime.Details(param1.getLong());
returndetails.day;
}
}
packagesmallsql.database;
finalclassExpressionFunctionDayOfWeekextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.DAYOFWEEK;
}
ﺝgetInt()throwsException{
if(paramﻝ.isNull())returnﻝ;
returnDateTime.dayOfWeek(param1.getLong())+1;
}
}
packagesmallsql.database;
finalclassExpressionFunctionDayOfYearextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.DAYOFYEAR;
}
ﺝgetInt()throwsException{
if(paramﻝ.isNull())returnﻝ;
DateTime.Detailsdetails=newDateTime.Details(param1.getLong());
returndetails.dayofyear+1;
}
}
packagesmallsql.database;
finalclassExpressionFunctionDegreesextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.DEGREES;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.toDegrees(param1.getDouble());
}
}
packagesmallsql.database;
finalclassExpressionFunctionDifferenceextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.DIFFERENCE;
}
booleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
ﺝgetInt()throwsException{
if(isNull())returnﻝ;
ﺝstr1=ExpressionFunctionSoundex.getString(param1.getString());
ﺝstr2=ExpressionFunctionSoundex.getString(param2.getString());
intdiff=ﻝ;
for(inti=ﻝ;i<ﻝ;i++){
if(str1.charAt(i)==str2.charAt(i)){
diff++;
}
}
returndiff;
}
}
packagesmallsql.database;
finalclassExpressionFunctionExpextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.EXP;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.exp(param1.getDouble());
}
}
packagesmallsql.database;
classExpressionFunctionFloorextendsExpressionFunctionReturnP1Number{
intgetFunction(){returnSQLTokenizer.FLOOR;}
doublegetDouble()throwsException{
returnMath.floor(param1.getDouble());
}
ﺝgetString()throwsException{
Objectobj=getObject();
if(obj==null)returnnull;
returnobj.toString();
}
}
packagesmallsql.database;
finalclassExpressionFunctionHourextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.HOUR;
}
ﺝgetInt()throwsException{
if(paramﻝ.isNull())returnﻝ;
DateTime.Detailsdetails=newDateTime.Details(param1.getLong());
returndetails.hour;
}
}
packagesmallsql.database;
finalclassExpressionFunctionIIFextendsExpressionFunction{
intgetFunction(){
returnSQLTokenizer.IIF;
}
booleanisNull()throwsException{
if(param1.getBoolean())
returnparam2.isNull();
returnparam3.isNull();
}
booleangetBoolean()throwsException{
if(param1.getBoolean())
returnparam2.getBoolean();
returnparam3.getBoolean();
}
intgetInt()throwsException{
if(param1.getBoolean())
returnparam2.getInt();
returnparam3.getInt();
}
longgetLong()throwsException{
if(param1.getBoolean())
returnparam2.getLong();
returnparam3.getLong();
}
floatgetFloat()throwsException{
if(param1.getBoolean())
returnparam2.getFloat();
returnparam3.getFloat();
}
doublegetDouble()throwsException{
if(param1.getBoolean())
returnparam2.getDouble();
returnparam3.getDouble();
}
longgetMoney()throwsException{
if(param1.getBoolean())
returnparam2.getMoney();
returnparam3.getMoney();
}
MutableNumericgetNumeric()throwsException{
if(param1.getBoolean())
returnparam2.getNumeric();
returnparam3.getNumeric();
}
ObjectgetObject()throwsException{
if(param1.getBoolean())
returnparam2.getObject();
returnparam3.getObject();
}
ﺝgetString()throwsException{
if(param1.getBoolean())
returnparam2.getString();
returnparam3.getString();
}
ﺝgetDataType(){
returnExpressionArithmetic.getDataType(param2,param3);
}
ﺝgetPrecision(){
returnMath.max(param2.getPrecision(),param3.getPrecision());
}
ﺝgetScale(){
returnMath.max(param2.getScale(),param3.getScale());
}
}
packagesmallsql.database;
importjava.io.ByteArrayOutputStream;
importsmallsql.database.language.Language;
publicclassExpressionFunctionInsertextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.INSERT;
}
finalbooleanisNull()throwsException{
returnparam1.isNull()||param2.isNull()||param3.isNull()||param4.isNull();
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
byte[]bytes=param1.getBytes();
intstart=Math.min(Math.max(ﻝ,paramﻝ.getInt()-ﻝ),bytes.length);
intlength=Math.min(param3.getInt(),bytes.length);
ByteArrayOutputStreambuffer=newByteArrayOutputStream();
buffer.write(bytes,0,start);
buffer.write(param4.getBytes());
if(length<ﻝ)
throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));
buffer.write(bytes,start+length,bytes.length-start-length);
returnbuffer.toByteArray();
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
ﺝstr=param1.getString();
intstart=Math.min(Math.max(ﻝ,paramﻝ.getInt()-ﻝ),str.length());
intlength=Math.min(param3.getInt(),str.length());
StringBufferbuffer=newStringBuffer();
buffer.append(str.substring(0,start));
buffer.append(param4.getString());
if(length<ﻝ)
throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));
buffer.append(str.substring(start+length));
returnbuffer.toString();
}
intgetPrecision(){
returnparam1.getPrecision()+param2.getPrecision();
}
}
packagesmallsql.database;
publicclassExpressionFunctionLCaseextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.LCASE;
}
finalbooleanisNull()throwsException{
returnparam1.isNull();
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
returngetString().getBytes();
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
returnparam1.getString().toLowerCase();
}
}
packagesmallsql.database;
publicclassExpressionFunctionLTrimextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.LTRIM;
}
finalbooleanisNull()throwsException{
returnparam1.isNull();
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
byte[]bytes=param1.getBytes();
intstart=ﻝ;
intlength=bytes.length;
while(start<length&&bytes[start]==ﻝ){
start++;
}
length-=start;
byte[]b=newbyte[length];
System.arraycopy(bytes,start,b,0,length);
returnb;
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
ﺝstr=param1.getString();
intstart=ﻝ;
while(start<str.length()&&str.charAt(start)==''){
start++;
}
returnstr.substring(start);
}
}
packagesmallsql.database;
publicclassExpressionFunctionLeftextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.LEFT;
}
finalbooleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
byte[]bytes=param1.getBytes();
intlength=param2.getInt();
if(bytes.length<=length)returnbytes;
byte[]b=newbyte[length];
System.arraycopy(bytes,0,b,0,length);
returnb;
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
ﺝstr=param1.getString();
intlength=param2.getInt();
length=Math.min(length,str.length());
returnstr.substring(0,length);
}
}
packagesmallsql.database;
finalclassExpressionFunctionLengthextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.LENGTH;
}
ﺝgetInt()throwsException{
ﺝstr=param1.getString();
if(str==null)returnﻝ;
intlength=str.length();
while(length>=ﻝ&&str.charAt(length-ﻝ)=='')length--;
returnlength;
}
}
packagesmallsql.database;
publicclassExpressionFunctionLocateextendsExpressionFunctionReturnInt{
intgetFunction(){
returnSQLTokenizer.LOCATE;
}
booleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
intgetInt()throwsException{
ﺝsuchstr=param1.getString();
ﺝvalue=param2.getString();
if(suchstr==null||value==null||suchstr.length()==ﻝ||value.length()==ﻝ)returnﻝ;
intstart=ﻝ;
if(param3!=null){
start=param3.getInt()-1;
}
returnvalue.toUpperCase().indexOf(suchstr.toUpperCase(),start)+1;
}
}
packagesmallsql.database;
finalclassExpressionFunctionLogextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.LOG;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.log(param1.getDouble());
}
}
packagesmallsql.database;
finalclassExpressionFunctionLog10extendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.LOG10;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.log(param1.getDouble())/divisor;
}
privatestaticfinaldoubledivisor=Math.log(10);
}
packagesmallsql.database;
finalclassExpressionFunctionMinuteextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.MINUTE;
}
ﺝgetInt()throwsException{
if(paramﻝ.isNull())returnﻝ;
DateTime.Detailsdetails=newDateTime.Details(param1.getLong());
returndetails.minute;
}
}
packagesmallsql.database;
finalclassExpressionFunctionModextendsExpressionFunctionReturnInt{
ﺝgetFunction(){returnSQLTokenizer.MOD;}
booleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
ﺝgetInt()throwsException{
if(isNull())returnﻝ;
returnparam1.getInt()%param2.getInt();
}
}
packagesmallsql.database;
finalclassExpressionFunctionMonthextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.MONTH;
}
ﺝgetInt()throwsException{
if(paramﻝ.isNull())returnﻝ;
DateTime.Detailsdetails=newDateTime.Details(param1.getLong());
returndetails.month+1;
}
}
packagesmallsql.database;
finalclassExpressionFunctionOctetLenextendsExpressionFunctionReturnInt{
privatestaticﺝBYTES_PER_CHAR=ﻝ;
ﺝgetFunction(){
returnSQLTokenizer.OCTETLEN;
}
booleanisNull()throwsException{
returnparam1.isNull();
}
ﺝgetInt()throwsException{
if(isNull())returnﻝ;
ﺝstr=param1.getString();
returnstr.length()*BYTES_PER_CHAR;
}
}
packagesmallsql.database;
finalclassExpressionFunctionPIextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.PI;}
booleanisNull()throwsException{
ﺝ
}
finaldoublegetDouble()throwsException{
returnMath.PI;
}
}
packagesmallsql.database;
finalclassExpressionFunctionPowerextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.POWER;}
booleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.pow(param1.getDouble(),param2.getDouble());
}
}
packagesmallsql.database;
publicclassExpressionFunctionRTrimextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.RTRIM;
}
finalbooleanisNull()throwsException{
returnparam1.isNull();
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
byte[]bytes=param1.getBytes();
intlength=bytes.length;
while(length>ﻝ&&bytes[length-ﻝ]==ﻝ){
length--;
}
byte[]b=newbyte[length];
System.arraycopy(bytes,0,b,0,length);
returnb;
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
ﺝstr=param1.getString();
intlength=str.length();
while(length>0&&str.charAt(length-1)==''){
length--;
}
returnstr.substring(0,length);
}
}
packagesmallsql.database;
finalclassExpressionFunctionRadiansextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.RADIANS;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.toRadians(param1.getDouble());
}
}
packagesmallsql.database;
importjava.util.Random;
finalclassExpressionFunctionRandextendsExpressionFunctionReturnFloat{
finalstaticprivateRandomrandom=newRandom();
ﺝgetFunction(){returnSQLTokenizer.RAND;}
booleanisNull()throwsException{
returngetParams().length==ﻝ&&paramﻝ.isNull();
}
finaldoublegetDouble()throwsException{
if(getParams().length==ﻝ)
returnrandom.nextDouble();
if(isNull())returnﻝ;
returnnewRandom(param1.getLong()).nextDouble();
}
}
packagesmallsql.database;
importjava.io.ByteArrayOutputStream;
publicclassExpressionFunctionRepeatextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.REPEAT;
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
byte[]bytes=param1.getBytes();
intcount=param2.getInt();
ByteArrayOutputStreambuffer=newByteArrayOutputStream();
for(inti=ﻝ;i<count;i++){
buffer.write(bytes);
}
returnbuffer.toByteArray();
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
ﺝstr=param1.getString();
intcount=param2.getInt();
StringBufferbuffer=newStringBuffer();
for(inti=ﻝ;i<count;i++){
buffer.append(str);
}
returnbuffer.toString();
}
intgetPrecision(){
returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);
}
}
packagesmallsql.database;
importjava.io.ByteArrayOutputStream;
publicclassExpressionFunctionReplaceextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.REPLACE;
}
finalbooleanisNull()throwsException{
returnparam1.isNull()||param2.isNull()||param3.isNull();
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
byte[]str1=param1.getBytes();
byte[]str2=param2.getBytes();
intlength=str2.length;
if(length==ﻝ){
returnstr1;
}
byte[]str3=param3.getBytes();
ByteArrayOutputStreambuffer=newByteArrayOutputStream();
intidxﻝ=ﻝ;
intidx2=Utils.indexOf(str2,str1,idx1);
while(idxﻝ>ﻝ){
buffer.write(str1,idx1,idx2-idx1);
buffer.write(str3);
idx1=idx2+length;
idx2=Utils.indexOf(str2,str1,idx1);
}
if(idxﻝ>ﻝ){
buffer.write(str1,idx1,str1.length-idx1);
returnbuffer.toByteArray();
}
returnstr1;
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
ﺝstr1=param1.getString();
ﺝstr2=param2.getString();
intlength=str2.length();
if(length==ﻝ){
returnstr1;
}
ﺝstr3=param3.getString();
StringBufferbuffer=newStringBuffer();
intidxﻝ=ﻝ;
intidx2=str1.indexOf(str2,idx1);
while(idxﻝ>=ﻝ){
buffer.append(str1.substring(idx1,idx2));
buffer.append(str3);
idx1=idx2+length;
idx2=str1.indexOf(str2,idx1);
}
if(idxﻝ>ﻝ){
buffer.append(str1.substring(idx1));
returnbuffer.toString();
}
returnstr1;
}
intgetPrecision(){
returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);
}
}
packagesmallsql.database;
abstractclassExpressionFunctionReturnFloatextendsExpressionFunction{
booleanisNull()throwsException{
returnparam1.isNull();
}
finalbooleangetBoolean()throwsException{
returngetDouble()!=ﻝ;
}
ﺝgetInt()throwsException{
return(int)getDouble();
}
finallonggetLong()throwsException{
return(long)getDouble();
}
finalfloatgetFloat()throwsException{
return(float)getDouble();
}
longgetMoney()throwsException{
returnUtils.doubleToMoney(getDouble());
}
finalMutableNumericgetNumeric()throwsException{
if(isNull())returnnull;
doublevalue=getDouble();
if(Double.isInfinite(value)||Double.isNaN(value))
returnnull;
returnnewMutableNumeric(value);
}
finalObjectgetObject()throwsException{
if(isNull())returnnull;
returnnewDouble(getDouble());
}
finalﺝgetString()throwsException{
Objectobj=getObject();
if(obj==null)returnnull;
returnobj.toString();
}
ﺝgetDataType(){
returnSQLTokenizer.FLOAT;
}
}
packagesmallsql.database;
abstractclassExpressionFunctionReturnIntextendsExpressionFunction{
booleanisNull()throwsException{
returnparam1.isNull();
}
finalbooleangetBoolean()throwsException{
returngetInt()!=ﻝ;
}
finallonggetLong()throwsException{
returngetInt();
}
finalfloatgetFloat()throwsException{
returngetInt();
}
finaldoublegetDouble()throwsException{
returngetInt();
}
finallonggetMoney()throwsException{
returngetInt()*ﻝ;
}
finalMutableNumericgetNumeric()throwsException{
if(isNull())returnnull;
returnnewMutableNumeric(getInt());
}
ObjectgetObject()throwsException{
if(isNull())returnnull;
returnUtils.getInteger(getInt());
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
returnString.valueOf(getInt());
}
ﺝgetDataType(){
returnSQLTokenizer.INT;
}
}
packagesmallsql.database;
abstractclassExpressionFunctionReturnP1extendsExpressionFunction{
booleanisNull()throwsException{
returnparam1.isNull();
}
ObjectgetObject()throwsException{
if(isNull())returnnull;
intdataType=getDataType();
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returngetBoolean()?Boolean.TRUE:Boolean.FALSE;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returngetBytes();
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
returnnewInteger(getInt());
caseSQLTokenizer.BIGINT:
returnnewLong(getLong());
caseSQLTokenizer.REAL:
returnnewFloat(getFloat());
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnnewDouble(getDouble());
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
returnMoney.createFromUnscaledValue(getMoney());
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returngetNumeric();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returngetString();
caseSQLTokenizer.LONGVARBINARY:
returngetBytes();
caseSQLTokenizer.DATE:
caseSQLTokenizer.TIME:
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
returnnewDateTime(getLong(),dataType);
caseSQLTokenizer.UNIQUEIDENTIFIER:
returngetBytes();
default:throwcreateUnspportedDataType(param1.getDataType());
}
}
intgetDataType(){
returnparam1.getDataType();
}
intgetPrecision(){
returnparam1.getPrecision();
}
ﺝgetScale(){
returnparam1.getScale();
}
}
packagesmallsql.database;
abstractclassExpressionFunctionReturnP1NumberextendsExpressionFunctionReturnP1{
finalbooleangetBoolean()throwsException{
returngetDouble()!=ﻝ;
}
ﺝgetInt()throwsException{
returnUtils.long2int(getLong());
}
finallonggetLong()throwsException{
returnUtils.double2long(getDouble());
}
finalfloatgetFloat()throwsException{
return(float)getDouble();
}
MutableNumericgetNumeric()throwsException{
if(param1.isNull())returnnull;
switch(getDataType()){
caseSQLTokenizer.INT:
returnnewMutableNumeric(getInt());
caseSQLTokenizer.BIGINT:
returnnewMutableNumeric(getLong());
caseSQLTokenizer.MONEY:
returnnewMutableNumeric(getMoney(),ﻝ);
caseSQLTokenizer.DECIMAL:
MutableNumericnum=param1.getNumeric();
num.floor();
returnnum;
caseSQLTokenizer.DOUBLE:
returnnewMutableNumeric(getDouble());
default:
thrownewError();
}
}
longgetMoney()throwsException{
returnUtils.doubleToMoney(getDouble());
}
ﺝgetString()throwsException{
if(isNull())returnnull;
returngetObject().toString();
}
ﺝgetDataType(){
returnExpressionArithmetic.getBestNumberDataType(param1.getDataType());
}
}
packagesmallsql.database;
abstractclassExpressionFunctionReturnP1StringAndBinaryextendsExpressionFunctionReturnP1{
finalbooleangetBoolean()throwsException{
if(isNull())ﺝ
returnUtils.string2boolean(getString().trim());
}
ﺝgetInt()throwsException{
if(isNull())returnﻝ;
returnInteger.parseInt(getString().trim());
}
finallonggetLong()throwsException{
if(isNull())returnﻝ;
returnLong.parseLong(getString().trim());
}
finalfloatgetFloat()throwsException{
if(isNull())returnﻝ;
returnFloat.parseFloat(getString().trim());
}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnDouble.parseDouble(getString().trim());
}
finallonggetMoney()throwsException{
if(isNull())returnﻝ;
returnMoney.parseMoney(getString().trim());
}
finalMutableNumericgetNumeric()throwsException{
if(isNull())returnnull;
returnnewMutableNumeric(getString().trim());
}
finalObjectgetObject()throwsException{
if(SSResultSetMetaData.isBinaryDataType(param1.getDataType()))
returngetBytes();
returngetString();
}
}
packagesmallsql.database;
abstractclassExpressionFunctionReturnﺝextendsExpressionFunction{
booleanisNull()throwsException{
returnparam1.isNull();
}
finalbooleangetBoolean()throwsException{
if(isNull())ﺝ
returnUtils.string2boolean(getString().trim());
}
ﺝgetInt()throwsException{
if(isNull())returnﻝ;
returnInteger.parseInt(getString().trim());
}
finallonggetLong()throwsException{
if(isNull())returnﻝ;
returnLong.parseLong(getString().trim());
}
finalfloatgetFloat()throwsException{
if(isNull())returnﻝ;
returnFloat.parseFloat(getString().trim());
}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnDouble.parseDouble(getString().trim());
}
finallonggetMoney()throwsException{
if(isNull())returnﻝ;
returnMoney.parseMoney(getString().trim());
}
finalMutableNumericgetNumeric()throwsException{
if(isNull())returnnull;
returnnewMutableNumeric(getString().trim());
}
finalObjectgetObject()throwsException{
returngetString();
}
}
packagesmallsql.database;
publicclassExpressionFunctionRightextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.RIGHT;
}
finalbooleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
byte[]bytes=param1.getBytes();
intlength=param2.getInt();
if(bytes.length<=length)returnbytes;
byte[]b=newbyte[length];
System.arraycopy(bytes,bytes.length-length,b,0,length);
returnb;
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
ﺝstr=param1.getString();
intlength=param2.getInt();
intstart=str.length()-Math.min(length,str.length());
returnstr.substring(start);
}
}
packagesmallsql.database;
finalclassExpressionFunctionRoundextendsExpressionFunctionReturnP1Number{
ﺝgetFunction(){returnSQLTokenizer.ROUND;}
booleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
ﺝplaces=param2.getInt();
doublevalue=param1.getDouble();
longfactor=ﻝ;
if(places>ﻝ){
for(inti=ﻝ;i<places;i++){
factor*=ﻝ;
}
value*=factor;
}else{
for(inti=ﻝ;i>places;i--){
factor*=ﻝ;
}
value/=factor;
}
value=Math.rint(value);
if(places>ﻝ){
value/=factor;
}else{
value*=factor;
}
returnvalue;
}
}
packagesmallsql.database;
finalclassExpressionFunctionSignextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.SIGN;
}
ﺝgetInt()throwsException{
if(paramﻝ.isNull())returnﻝ;
switch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){
caseSQLTokenizer.INT:
intintValue=param1.getInt();
if(intValue<ﻝ)
return-1;
if(intValue>ﻝ)
returnﻝ;
returnﻝ;
caseSQLTokenizer.BIGINT:
longlongValue=param1.getLong();
if(longValue<ﻝ)
return-1;
if(longValue>ﻝ)
returnﻝ;
returnﻝ;
caseSQLTokenizer.MONEY:
longValue=param1.getMoney();
if(longValue<ﻝ)
return-1;
if(longValue>ﻝ)
returnﻝ;
returnﻝ;
caseSQLTokenizer.DECIMAL:
returnparam1.getNumeric().getSignum();
caseSQLTokenizer.DOUBLE:
doubledoubleValue=param1.getDouble();
if(doubleValue<ﻝ)
return-1;
if(doubleValue>ﻝ)
returnﻝ;
returnﻝ;
default:
thrownewError();
}
}
}
packagesmallsql.database;
finalclassExpressionFunctionSinextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.SIN;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.sin(param1.getDouble());
}
}
packagesmallsql.database;
publicclassExpressionFunctionSoundexextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.SOUNDEX;
}
finalbooleanisNull()throwsException{
returnparam1.isNull();
}
finalbyte[]getBytes()throwsException{
throwcreateUnspportedConversion(SQLTokenizer.BINARY);
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
ﺝinput=param1.getString();
returngetString(input);
}
staticﺝgetString(ﺝinput){
char[]output=newchar[4];
intidx=ﻝ;
input=input.toUpperCase();
if(input.length()>0){
output[idx++]=input.charAt(0);
}
charlast='0';
for(inti=ﻝ;idx<ﻝ&&i<input.length();i++){
charc=input.charAt(i);
switch(c){
case'B':
case'F':
case'P':
case'V':
c='1';
break;
case'C':
case'G':
case'J':
case'K':
case'Q':
case'S':
case'X':
case'Z':
c='2';
break;
case'D':
case'T':
c='3';
break;
case'L':
c='4';
break;
case'M':
case'N':
c='5';
break;
case'R':
c='6';
break;
default:
c='0';
break;
}
if(c>'0'&&last!=c){
output[idx++]=c;
}
last=c;
}
for(;idx<4;){
output[idx++]='0';
}
returnnewString(output);
}
intgetPrecision(){
returnﻝ;
}
}
packagesmallsql.database;
publicclassExpressionFunctionSpaceextendsExpressionFunctionReturnﺝ{
ﺝgetFunction(){
returnSQLTokenizer.SPACE;
}
booleanisNull()throwsException{
returnparam1.isNull()||param1.getInt()<0;
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
intsize=param1.getInt();
if(size<ﻝ){
returnnull;
}
char[]buffer=newchar[size];
for(inti=ﻝ;i<size;i++){
buffer[i]='';
}
returnnewString(buffer);
}
ﺝgetDataType(){
returnSQLTokenizer.VARCHAR;
}
}
packagesmallsql.database;
finalclassExpressionFunctionSqrtextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.SQRT;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.sqrt(param1.getDouble());
}
}
packagesmallsql.database;
importsmallsql.database.language.Language;
finalclassExpressionFunctionSubstringextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.SUBSTRING;
}
finalbooleanisNull()throwsException{
returnparam1.isNull()||param2.isNull()||param3.isNull();
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
byte[]bytes=param1.getBytes();
intbyteLen=bytes.length;
intstart=Math.min(Math.max(ﻝ,paramﻝ.getInt()-ﻝ),byteLen);
intlength=param3.getInt();
if(length<ﻝ)
throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));
if(start==ﻝ&&byteLen==length)returnbytes;
if(byteLen>length+start){
byte[]b=newbyte[length];
System.arraycopy(bytes,start,b,0,length);
returnb;
}else{
byte[]b=newbyte[byteLen-start];
System.arraycopy(bytes,start,b,0,b.length);
returnb;
}
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
ﺝstr=param1.getString();
intstrLen=str.length();
intstart=Math.min(Math.max(ﻝ,paramﻝ.getInt()-ﻝ),strLen);
intlength=param3.getInt();
if(length<ﻝ)
throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));
length=Math.min(length,strLen-start);
returnstr.substring(start,start+length);
}
}
packagesmallsql.database;
finalclassExpressionFunctionTanextendsExpressionFunctionReturnFloat{
ﺝgetFunction(){returnSQLTokenizer.TAN;}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
returnMath.tan(param1.getDouble());
}
}
packagesmallsql.database;
publicclassExpressionFunctionTimestampAddextendsExpressionFunction{
finalﺝinterval;
ExpressionFunctionTimestampAdd(intintervalType,ﺝp1,ﺝp2){
interval=ExpressionFunctionTimestampDiff.mapIntervalType(intervalType);
setParams(newExpression[]{p1,p2});
}
intgetFunction(){
returnSQLTokenizer.TIMESTAMPADD;
}
booleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
booleangetBoolean()throwsException{
returngetLong()!=ﻝ;
}
intgetInt()throwsException{
return(int)getLong();
}
longgetLong()throwsException{
if(isNull())returnﻝ;
switch(interval){
caseSQLTokenizer.SQL_TSI_FRAC_SECOND:
returnparam2.getLong()+param1.getLong();
caseSQLTokenizer.SQL_TSI_SECOND:
returnparamﻝ.getLong()+paramﻝ.getLong()*ﻝ;
caseSQLTokenizer.SQL_TSI_MINUTE:
returnparamﻝ.getLong()+paramﻝ.getLong()*ﻝ;
caseSQLTokenizer.SQL_TSI_HOUR:
returnparamﻝ.getLong()+paramﻝ.getLong()*ﻝ;
caseSQLTokenizer.SQL_TSI_DAY:
returnparamﻝ.getLong()+paramﻝ.getLong()*ﻝ;
caseSQLTokenizer.SQL_TSI_WEEK:{
returnparamﻝ.getLong()+paramﻝ.getLong()*ﻝ;
}caseSQLTokenizer.SQL_TSI_MONTH:{
DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());
details2.month+=param1.getLong();
returnDateTime.calcMillis(details2);
}
caseSQLTokenizer.SQL_TSI_QUARTER:{
DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());
detailsﻝ.month+=paramﻝ.getLong()*ﻝ;
returnDateTime.calcMillis(details2);
}
caseSQLTokenizer.SQL_TSI_YEAR:{
DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());
details2.year+=param1.getLong();
returnDateTime.calcMillis(details2);
}
default:thrownewError();
}
}
floatgetFloat()throwsException{
returngetLong();
}
doublegetDouble()throwsException{
returngetLong();
}
longgetMoney()throwsException{
returngetLong()*ﻝ;
}
MutableNumericgetNumeric()throwsException{
if(isNull())returnnull;
returnnewMutableNumeric(getLong());
}
ObjectgetObject()throwsException{
if(isNull())returnnull;
returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP);
}
ﺝgetString()throwsException{
if(isNull())returnnull;
returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP).toString();
}
intgetDataType(){
returnSQLTokenizer.TIMESTAMP;
}
}
packagesmallsql.database;
publicclassExpressionFunctionTimestampDiffextendsExpressionFunction{
finalﺝinterval;
staticﺝmapIntervalType(intintervalType){
switch(intervalType){
caseSQLTokenizer.MILLISECOND:
returnSQLTokenizer.SQL_TSI_FRAC_SECOND;
caseSQLTokenizer.SECOND:
returnSQLTokenizer.SQL_TSI_SECOND;
caseSQLTokenizer.MINUTE:
returnSQLTokenizer.SQL_TSI_MINUTE;
caseSQLTokenizer.HOUR:
returnSQLTokenizer.SQL_TSI_HOUR;
caseSQLTokenizer.D:
caseSQLTokenizer.DAY:
returnSQLTokenizer.SQL_TSI_DAY;
caseSQLTokenizer.WEEK:
returnSQLTokenizer.SQL_TSI_WEEK;
caseSQLTokenizer.MONTH:
returnSQLTokenizer.SQL_TSI_MONTH;
caseSQLTokenizer.QUARTER:
returnSQLTokenizer.SQL_TSI_QUARTER;
caseSQLTokenizer.YEAR:
returnSQLTokenizer.SQL_TSI_YEAR;
default:
returnintervalType;
}
}
ExpressionFunctionTimestampDiff(intintervalType,ﺝp1,ﺝp2){
interval=mapIntervalType(intervalType);
setParams(newExpression[]{p1,p2});
}
intgetFunction(){
returnSQLTokenizer.TIMESTAMPDIFF;
}
booleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
booleangetBoolean()throwsException{
returngetInt()!=ﻝ;
}
intgetInt()throwsException{
if(isNull())returnﻝ;
switch(interval){
caseSQLTokenizer.SQL_TSI_FRAC_SECOND:
return(int)(param2.getLong()-param1.getLong());
caseSQLTokenizer.SQL_TSI_SECOND:
return(int)(param2.getLong()/1000-param1.getLong()/1000);
caseSQLTokenizer.SQL_TSI_MINUTE:
return(int)(param2.getLong()/60000-param1.getLong()/60000);
caseSQLTokenizer.SQL_TSI_HOUR:
return(int)(param2.getLong()/3600000-param1.getLong()/3600000);
caseSQLTokenizer.SQL_TSI_DAY:
return(int)(param2.getLong()/86400000-param1.getLong()/86400000);
caseSQLTokenizer.SQL_TSI_WEEK:{
longday2=param2.getLong()/86400000;
longday1=param1.getLong()/86400000;
return(int)((dayﻝ+ﻝ)/ﻝ-(dayﻝ+ﻝ)/ﻝ);
}caseSQLTokenizer.SQL_TSI_MONTH:{
DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());
DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());
return(detailsﻝ.year*ﻝ+detailsﻝ.month)-(detailsﻝ.year*ﻝ+detailsﻝ.month);
}
caseSQLTokenizer.SQL_TSI_QUARTER:{
DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());
DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());
return(detailsﻝ.year*ﻝ+detailsﻝ.month/ﻝ)-(detailsﻝ.year*ﻝ+detailsﻝ.month/ﻝ);
}
caseSQLTokenizer.SQL_TSI_YEAR:{
DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());
DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());
returndetails2.year-details1.year;
}
default:thrownewError();
}
}
longgetLong()throwsException{
returngetInt();
}
floatgetFloat()throwsException{
returngetInt();
}
doublegetDouble()throwsException{
returngetInt();
}
longgetMoney()throwsException{
returngetInt()*10000L;
}
MutableNumericgetNumeric()throwsException{
if(isNull())returnnull;
returnnewMutableNumeric(getInt());
}
ObjectgetObject()throwsException{
if(isNull())returnnull;
returnUtils.getInteger(getInt());
}
ﺝgetString()throwsException{
if(isNull())returnnull;
returnString.valueOf(getInt());
}
intgetDataType(){
returnSQLTokenizer.INT;
}
}
packagesmallsql.database;
finalclassExpressionFunctionTruncateextendsExpressionFunctionReturnP1Number{
ﺝgetFunction(){returnSQLTokenizer.TRUNCATE;}
booleanisNull()throwsException{
returnparam1.isNull()||param2.isNull();
}
finaldoublegetDouble()throwsException{
if(isNull())returnﻝ;
ﺝplaces=param2.getInt();
doublevalue=param1.getDouble();
longfactor=ﻝ;
if(places>ﻝ){
for(inti=ﻝ;i<places;i++){
factor*=ﻝ;
}
value*=factor;
}else{
for(inti=ﻝ;i>places;i--){
factor*=ﻝ;
}
value/=factor;
}
value-=value%ﻝ;
if(places>ﻝ){
value/=factor;
}else{
value*=factor;
}
returnvalue;
}
}
packagesmallsql.database;
publicclassExpressionFunctionUCaseextendsExpressionFunctionReturnP1StringAndBinary{
ﺝgetFunction(){
returnSQLTokenizer.UCASE;
}
finalbooleanisNull()throwsException{
returnparam1.isNull();
}
finalbyte[]getBytes()throwsException{
if(isNull())returnnull;
returngetString().getBytes();
}
finalﺝgetString()throwsException{
if(isNull())returnnull;
returnparam1.getString().toUpperCase();
}
}
packagesmallsql.database;
finalclassExpressionFunctionYearextendsExpressionFunctionReturnInt{
ﺝgetFunction(){
returnSQLTokenizer.YEAR;
}
ﺝgetInt()throwsException{
if(paramﻝ.isNull())returnﻝ;
DateTime.Detailsdetails=newDateTime.Details(param1.getLong());
returndetails.year;
}
}
packagesmallsql.database;
importsmallsql.database.language.Language;
classExpressionInSelectextendsExpressionArithmetic{
finalprivateCommandSelectcmdSel;
finalprivateIndexindex=newIndex(true);
finalprivateSSConnectioncon;
ExpressionInSelect(SSConnectioncon,ﺝleft,CommandSelectcmdSel,intoperation){
super(left,(Expressions)null,operation);
this.cmdSel=cmdSel;
this.con=con;
}
privatevoidloadInList()throwsException{
if(cmdSel.compile(con)){
cmdSel.from.execute();
if(cmdSel.columnExpressions.size()!=ﻝ)
throwSmallSQLException.create(Language.SUBQUERY_COL_COUNT,newInteger(cmdSel.columnExpressions.size()));
index.clear();
while(cmdSel.next()){
try{
index.addValues(0,cmdSel.columnExpressions);
}catch(Exceptione){
}
}
}
}
booleanisInList()throwsException{
loadInList();
returnindex.findRows(getParams(),false,null)!=null;
}
}
packagesmallsql.database;
publicclassﺝextendsﺝ{
privateﺝtableAlias;
privateDataSourcefromEntry;
ﺝcolIdx;
privateTableViewtable;
privateColumncolumn;
ExpressionName(ﺝname){
super(NAME);
setName(name);
}
ExpressionName(inttype){
super(type);
}
voidsetNameAfterTableAlias(ﺝname){
tableAlias=getName();
setName(name);
}
publicbooleanequals(Objectexpr){
if(!super.equals(expr))ﺝ
if(!(exprinstanceofExpressionName))ﺝ
if(((ExpressionName)expr).fromEntry!=fromEntry)ﺝ
ﺝ
}
booleanisNull()throwsException{
returnfromEntry.isNull(colIdx);
}
booleangetBoolean()throwsException{
returnfromEntry.getBoolean(colIdx);
}
intgetInt()throwsException{
returnfromEntry.getInt(colIdx);
}
longgetLong()throwsException{
returnfromEntry.getLong(colIdx);
}
floatgetFloat()throwsException{
returnfromEntry.getFloat(colIdx);
}
doublegetDouble()throwsException{
returnfromEntry.getDouble(colIdx);
}
longgetMoney()throwsException{
returnfromEntry.getMoney(colIdx);
}
MutableNumericgetNumeric()throwsException{
returnfromEntry.getNumeric(colIdx);
}
ObjectgetObject()throwsException{
returnfromEntry.getObject(colIdx);
}
ﺝgetString()throwsException{
returnfromEntry.getString(colIdx);
}
byte[]getBytes()throwsException{
returnfromEntry.getBytes(colIdx);
}
intgetDataType(){
switch(getType()){
caseNAME:
caseGROUP_BY:
returnfromEntry.getDataType(colIdx);
caseFIRST:
caseLAST:
caseMAX:
caseMIN:
caseSUM:
returngetParams()[0].getDataType();
caseCOUNT:
returnSQLTokenizer.INT;
default:thrownewError();
}
}
voidsetFrom(DataSourcefromEntry,intcolIdx,TableViewtable){
this.fromEntry=fromEntry;
this.colIdx=colIdx;
this.table=table;
this.column		=table.columns.get(colIdx);
}
voidsetFrom(DataSourcefromEntry,intcolIdx,Columncolumn){
this.fromEntry=fromEntry;
this.colIdx=colIdx;
this.column		=column;
}
DataSourcegetDataSource(){
returnfromEntry;
}
ﺝgetTableAlias(){returntableAlias;}
finalTableViewgetTable(){
returntable;
}
ﺝgetColumnIndex(){
returncolIdx;
}
finalColumngetColumn(){
returncolumn;
}
finalpublicﺝtoString(){
if(tableAlias==null)returnString.valueOf(getAlias());
returntableAlias+"."+getAlias();
}
ﺝgetTableName(){
if(table!=null){
returntable.getName();
}
returnnull;
}
intgetPrecision(){
returncolumn.getPrecision();
}
intgetScale(){
returncolumn.getScale();
}
intgetDisplaySize(){
returncolumn.getDisplaySize();
}
booleanisAutoIncrement(){
returncolumn.isAutoIncrement();
}
booleanisCaseSensitive(){
returncolumn.isCaseSensitive();
}
booleanisNullable(){
returncolumn.isNullable();
}
booleanisDefinitelyWritable(){
ﺝ
}
}
packagesmallsql.database;
importjava.math.BigDecimal;
importjava.sql.*;
importsmallsql.database.language.Language;
publicclassExpressionValueextendsﺝ{
privateObjectvalue;
ﺝdataType;
ﺝlength;
ExpressionValue(){
super(VALUE);
clear();
}
ExpressionValue(inttype){
super(type);
switch(type){
caseGROUP_BY:
caseSUM:
caseFIRST:
caseLAST:
clear();
break;
caseMIN:
caseMAX:
break;
caseCOUNT:
value=newMutableInteger(0);
dataType=SQLTokenizer.INT;
break;
default:thrownewError();
}
}
ExpressionValue(Objectvalue,intdataType){
super(VALUE);
this.value=value;
this.dataType=dataType;
}
publicbooleanequals(Objectexpr){
if(!super.equals(expr))ﺝ
if(!(exprinstanceofExpressionValue))ﺝ
Objectv=((ExpressionValue)expr).value;
if(v==value)ﺝ
if(value==null)ﺝ
returnvalue.equals(v);
}
voidaccumulate(ﺝexpr)throwsException{
inttype=getType();
if(type!=GROUP_BY)expr=expr.getParams()[0];
switch(type){
caseGROUP_BY:
caseFIRST:
if(isEmpty())set(expr.getObject(),expr.getDataType());
break;
caseLAST:
set(expr.getObject(),expr.getDataType());
break;
caseCOUNT:
if(!expr.isNull())((MutableInteger)value).value++;
break;
caseSUM:
if(isEmpty()){
initValue(expr);
}else
switch(dataType){
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
((MutableInteger)value).value+=expr.getInt();
break;
caseSQLTokenizer.BIGINT:
((MutableLong)value).value+=expr.getLong();
break;
caseSQLTokenizer.REAL:
((MutableFloat)value).value+=expr.getFloat();
break;
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
((MutableDouble)value).value+=expr.getDouble();
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
MutableNumericnewValue=expr.getNumeric();
if(newValue!=null)
((MutableNumeric)value).add(newValue);
break;
caseSQLTokenizer.MONEY:
((Money)value).value+=expr.getMoney();
break;
default:throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM,SQLTokenizer.getKeyWord(dataType));
}
break;
caseMAX:
if(value==null){
if(expr.isNull())
dataType=expr.getDataType();
else
initValue(expr);
}elseif(!expr.isNull()){
switch(dataType){
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
((MutableInteger)value).value=Math.max(((MutableInteger)value).value,expr.getInt());
break;
caseSQLTokenizer.BIGINT:
((MutableLong)value).value=Math.max(((MutableLong)value).value,expr.getLong());
break;
caseSQLTokenizer.REAL:
((MutableFloat)value).value=Math.max(((MutableFloat)value).value,expr.getFloat());
break;
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
((MutableDouble)value).value=Math.max(((MutableDouble)value).value,expr.getDouble());
break;
caseSQLTokenizer.CHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.LONGVARCHAR:
ﺝstr=expr.getString();
if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)<ﻝ)
value=str;
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
MutableNumericnewValue=expr.getNumeric();
if(((MutableNumeric)value).compareTo(newValue)<ﻝ)
value=newValue;
break;
caseSQLTokenizer.MONEY:
((Money)value).value=Math.max(((Money)value).value,expr.getMoney());
break;
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.TIME:
((DateTime)value).time=Math.max(((DateTime)value).time,expr.getLong());
break;
caseSQLTokenizer.UNIQUEIDENTIFIER:
ﺝuuidStr=expr.getString();
if(uuidStr.compareTo((String)value)>ﻝ)value=uuidStr;
break;
default:
ﺝkeyword=SQLTokenizer.getKeyWord(dataType);
throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX,keyword);
}
}
break;
caseMIN:
if(value==null){
if(expr.isNull())
dataType=expr.getDataType();
else
initValue(expr);
}elseif(!expr.isNull()){
switch(dataType){
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
((MutableInteger)value).value=Math.min(((MutableInteger)value).value,expr.getInt());
break;
caseSQLTokenizer.BIGINT:
((MutableLong)value).value=Math.min(((MutableLong)value).value,expr.getLong());
break;
caseSQLTokenizer.REAL:
((MutableFloat)value).value=Math.min(((MutableFloat)value).value,expr.getFloat());
break;
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
((MutableDouble)value).value=Math.min(((MutableDouble)value).value,expr.getDouble());
break;
caseSQLTokenizer.CHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.LONGVARCHAR:
ﺝstr=expr.getString();
if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)>ﻝ)
value=str;
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
MutableNumericnewValue=expr.getNumeric();
if(((MutableNumeric)value).compareTo(newValue)>ﻝ)
value=newValue;
break;
caseSQLTokenizer.MONEY:
((Money)value).value=Math.min(((Money)value).value,expr.getMoney());
break;
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.TIME:
((DateTime)value).time=Math.min(((DateTime)value).time,expr.getLong());
break;
default:thrownewError(""+dataType);
}
}
break;
default:thrownewError();
}
}
privatevoidinitValue(ﺝexpr)throwsException{
dataType=expr.getDataType();
switch(dataType){
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
value=newMutableInteger(expr.getInt());
break;
caseSQLTokenizer.BIGINT:
value=newMutableLong(expr.getLong());
break;
caseSQLTokenizer.REAL:
value=newMutableFloat(expr.getFloat());
break;
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
value=newMutableDouble(expr.getDouble());
break;
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.MONEY:
value=Money.createFromUnscaledValue(expr.getMoney());
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
value=newMutableNumeric(expr.getNumeric());
break;
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.TIME:
value=newDateTime(expr.getLong(),dataType);
break;
default:
value=expr.getObject();
}
}
privatestaticfinalObjectEMPTY=newObject();
finalbooleanisEmpty(){
returnvalue==EMPTY;
}
ﺝclear(){
value=EMPTY;
}
ﺝset(Objectvalue,int_dataType,intlength)throwsSQLException{
set(value,_dataType);
this.length=length;
}
ﺝset(ObjectnewValue,intnewDataType)throwsSQLException{
this.value=newValue;
this.dataType=newDataType;
if(dataType<ﻝ){
if(newValue==null)
this.dataType=SQLTokenizer.NULL;
else
if(newValueinstanceofString)
this.dataType=SQLTokenizer.VARCHAR;
else
if(newValueinstanceofByte)
this.dataType=SQLTokenizer.TINYINT;
else
if(newValueinstanceofShort)
this.dataType=SQLTokenizer.SMALLINT;
else
if(newValueinstanceofInteger)
this.dataType=SQLTokenizer.INT;
else
if(newValueinstanceofLong||newValueinstanceofIdentity)
this.dataType=SQLTokenizer.BIGINT;
else
if(newValueinstanceofFloat)
this.dataType=SQLTokenizer.REAL;
else
if(newValueinstanceofDouble)
this.dataType=SQLTokenizer.DOUBLE;
else
if(newValueinstanceofNumber)
this.dataType=SQLTokenizer.DECIMAL;
else
if(newValueinstanceofjava.util.Date){
DateTimedateTime;
this.value=dateTime=DateTime.valueOf((java.util.Date)newValue);
this.dataType=dateTime.getDataType();
}else
if(newValueinstanceofbyte[])
this.dataType=SQLTokenizer.VARBINARY;
else
if(newValueinstanceofBoolean)
this.dataType=SQLTokenizer.BOOLEAN;
else
if(newValueinstanceofMoney)
this.dataType=SQLTokenizer.MONEY;
else
throwSmallSQLException.create(Language.PARAM_CLASS_UNKNOWN,newValue.getClass().getName());
}
}
ﺝset(ExpressionValueval){
this.value		=val.value;
this.dataType	=val.dataType;
this.length		=val.length;
}
booleanisNull(){
returngetObject()==null;
}
booleangetBoolean()throwsException{
returngetBoolean(getObject(),dataType);
}
staticbooleangetBoolean(Objectobj,intdataType)throwsException{
if(obj==null)ﺝ
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
return(obj.equals(Boolean.TRUE));
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
caseSQLTokenizer.BIGINT:
return((Number)obj).intValue()!=ﻝ;
caseSQLTokenizer.REAL:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
return((Number)obj).doubleValue()!=ﻝ;
default:returnUtils.string2boolean(obj.toString());
}
}
intgetInt()throwsException{
returngetInt(getObject(),dataType);
}
staticintgetInt(Objectobj,intdataType)throwsException{
if(obj==null)returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
return(obj==Boolean.TRUE)?ﻝ:ﻝ;
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.REAL:
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.DECIMAL:
caseSQLTokenizer.NUMERIC:
return((Number)obj).intValue();
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
return(int)((DateTime)obj).getTimeMillis();
default:
ﺝstr=obj.toString().trim();
try{
returnInteger.parseInt(str);
}catch(Throwableth){}
return(int)Double.parseDouble(str);
}
}
longgetLong()throwsException{
returngetLong(getObject(),dataType);
}
staticlonggetLong(Objectobj,intdataType)throwsException{
if(obj==null)returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
return(obj==Boolean.TRUE)?ﻝ:ﻝ;
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
return((Number)obj).longValue();
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
return((DateTime)obj).getTimeMillis();
default:
ﺝstr=obj.toString();
if(str.indexOf('-')>ﻝ||str.indexOf(':')>ﻝ)
returnDateTime.parse(str);
try{
returnLong.parseLong(str);
}catch(NumberFormatExceptione){
return(long)Double.parseDouble(str);
}
}
}
floatgetFloat()throwsException{
returngetFloat(getObject(),dataType);
}
staticfloatgetFloat(Objectobj,intdataType)throwsException{
if(obj==null)returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
return(obj.equals(Boolean.TRUE))?ﻝ:ﻝ;
caseSQLTokenizer.INT:
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.REAL:
caseSQLTokenizer.MONEY:
return((Number)obj).floatValue();
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
return((DateTime)obj).getTimeMillis();
default:returnFloat.parseFloat(obj.toString());
}
}
doublegetDouble()throwsException{
returngetDouble(getObject(),dataType);
}
staticdoublegetDouble(Objectobj,intdataType)throwsException{
if(obj==null)returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
return(obj.equals(Boolean.TRUE))?ﻝ:ﻝ;
caseSQLTokenizer.INT:
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
return((Number)obj).doubleValue();
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
return((DateTime)obj).getTimeMillis();
default:returnDouble.parseDouble(obj.toString());
}
}
longgetMoney()throwsException{
returngetMoney(getObject(),dataType);
}
staticlonggetMoney(Objectobj,intdataType)throwsException{
if(obj==null)returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
return(obj==Boolean.TRUE)?ﻝ:ﻝ;
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
caseSQLTokenizer.BIGINT:
return((Number)obj).longValue()*ﻝ;
caseSQLTokenizer.REAL:
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnUtils.doubleToMoney(((Number)obj).doubleValue());
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
return((Money)obj).value;
default:returnMoney.parseMoney(obj.toString());
}
}
MutableNumericgetNumeric(){
returngetNumeric(getObject(),dataType);
}
staticMutableNumericgetNumeric(Objectobj,intdataType){
if(obj==null)returnnull;
switch(dataType){
caseSQLTokenizer.BIT:
returnnewMutableNumeric((obj==Boolean.TRUE)?ﻝ:ﻝ);
caseSQLTokenizer.INT:
returnnewMutableNumeric(((Number)obj).intValue());
caseSQLTokenizer.BIGINT:
returnnewMutableNumeric(((Number)obj).longValue());
caseSQLTokenizer.REAL:
floatfValue=((Number)obj).floatValue();
if(Float.isInfinite(fValue)||Float.isNaN(fValue))
returnnull;
returnnewMutableNumeric(fValue);
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
doubledValue=((Number)obj).doubleValue();
if(Double.isInfinite(dValue)||Double.isNaN(dValue))
returnnull;
returnnewMutableNumeric(dValue);
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
returnnewMutableNumeric(((Money)obj).value,ﻝ);
caseSQLTokenizer.DECIMAL:
caseSQLTokenizer.NUMERIC:
if(objinstanceofMutableNumeric)
return(MutableNumeric)obj;
returnnewMutableNumeric((BigDecimal)obj);
default:returnnewMutableNumeric(obj.toString());
}
}
ObjectgetObject(){
if(isEmpty()){
returnnull;
}
returnvalue;
}
ﺝgetString(){
Objectobj=getObject();
if(obj==null)returnnull;
if(dataType==SQLTokenizer.BIT){
return(obj==Boolean.TRUE)?"1":"0";
}
returnobj.toString();
}
byte[]getBytes()throwsException{
returngetBytes(getObject(),dataType);
}
staticbyte[]getBytes(Objectobj,intdataType)throwsException{
if(obj==null)returnnull;
switch(dataType){
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.LONGVARBINARY:
return(byte[])obj;
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NVARCHAR:
caseSQLTokenizer.NCHAR:
return((String)obj).getBytes();
caseSQLTokenizer.UNIQUEIDENTIFIER:
returnUtils.unique2bytes((String)obj);
caseSQLTokenizer.INT:
returnUtils.int2bytes(((Number)obj).intValue());
caseSQLTokenizer.DOUBLE:
returnUtils.double2bytes(((Number)obj).doubleValue());
caseSQLTokenizer.REAL:
returnUtils.float2bytes(((Number)obj).floatValue());
default:throwcreateUnsupportedConversion(dataType,obj,SQLTokenizer.VARBINARY);
}
}
ﺝgetDataType(){
returndataType;
}
ﺝgetTableName(){
returnnull;
}
ﺝgetPrecision(){
switch(dataType){
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.CHAR:
return((String)value).length();
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.BINARY:
return((byte[])value).length;
default:
returnsuper.getPrecision();
}
}
intgetScale(){
switch(dataType){
caseSQLTokenizer.DECIMAL:
caseSQLTokenizer.NUMERIC:
MutableNumericobj=getNumeric();
return(obj==null)?0:obj.getScale();
default:
returngetScale(dataType);
}
}
staticSQLExceptioncreateUnsupportedConversion(intfromDataType,Objectobj,inttoDataType){
Object[]params={
SQLTokenizer.getKeyWord(fromDataType),
obj,
SQLTokenizer.getKeyWord(toDataType)
};
returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION,params);
}
}
packagesmallsql.database;
finalclassExpressions{
ﺝsize;
privateExpression[]data;
Expressions(){
data=newExpression[16];
}
Expressions(intinitSize){
data=newExpression[initSize];
}
ﺝsize(){
returnsize;
}
ﺝsetSize(intnewSize){
for(inti=newSize;i<size;i++)data[i]=null;
size=newSize;
if(size>data.length)resize(newSize);
}
finalﺝget(intidx){
if(idx>=size)
thrownewIndexOutOfBoundsException("Index:"+idx+",Size:"+size);
returndata[idx];
}
ﺝadd(ﺝexpr){
if(size>=data.length){
resize(size<<ﻝ);
}
data[size++]=expr;
}
ﺝadd(intidx,ﺝexpr){
if(size>=data.length){
resize(size<<ﻝ);
}
System.arraycopy(data,idx,data,idx+1,(size++)-idx);
data[idx]=expr;
}
ﺝaddAll(Expressionscols){
intcount=cols.size();
if(size+count>=data.length){
resize(size+count);
}
System.arraycopy(cols.data,0,data,size,count);
size+=count;
}
ﺝclear(){
size=ﻝ;
}
ﺝremove(intidx){
System.arraycopy(data,idx+1,data,idx,(--size)-idx);
}
ﺝset(intidx,ﺝexpr){
data[idx]=expr;
}
ﺝindexOf(ﺝexpr){
if(expr==null){
for(inti=ﻝ;i<size;i++)
if(data[i]==null)
returni;
}else{
for(inti=ﻝ;i<size;i++)
if(expr.equals(data[i]))
returni;
}
return-1;
}
ﺝtoArray(Expression[]array){
System.arraycopy(data,0,array,0,size);
}
finalExpression[]toArray(){
Expression[]array=newExpression[size];
System.arraycopy(data,0,array,0,size);
returnarray;
}
privateﺝresize(intnewSize){
Expression[]dataNew=newExpression[newSize];
System.arraycopy(data,0,dataNew,0,size);
data=dataNew;
}
}
packagesmallsql.database;
importjava.io.*;
importjava.nio.ByteBuffer;
importjava.nio.channels.FileChannel;
classFileIndexextendsIndex{
staticvoidprint(Indexindex,Expressionsexpressions){
IndexScrollStatusscroll=index.createScrollStatus(expressions);
longl;
while((l=scroll.getRowOffset(true))>=ﻝ){
System.out.println(l);
}
System.out.println("============================");
}
privatefinalFileChannelraFile;
FileIndex(booleanunique,FileChannelraFile){
this(newFileIndexNode(unique,(char)-1,raFile),raFile);
}
FileIndex(FileIndexNoderoot,FileChannelraFile){
super(root);
this.raFile=raFile;
}
staticFileIndexload(FileChannelraFile)throwsException{
ByteBufferbuffer=ByteBuffer.allocate(1);
raFile.read(buffer);
buffer.position(0);
booleanunique=buffer.get()!=ﻝ;
FileIndexNoderoot=FileIndexNode.loadRootNode(unique,raFile,raFile.position());
returnnewFileIndex(root,raFile);
}
voidsave()throwsException{
ByteBufferbuffer=ByteBuffer.allocate(1);
buffer.put(rootPage.getUnique()?(byte)1:(byte)0);
buffer.position(0);
raFile.write(buffer);
((FileIndexNode)rootPage).save();
}
voidclose()throwsIOException{
raFile.close();
}
}
packagesmallsql.database;
importjava.io.*;
importjava.nio.channels.FileChannel;
importjava.sql.SQLException;
publicclassFileIndexNodeextendsIndexNode{
privatefinalFileChannelfile;
privatelongfileOffset;
FileIndexNode(booleanunique,chardigit,FileChannelfile){
super(unique,digit);
this.file=file;
fileOffset=-1;
}
@Override
protectedIndexNodecreateIndexNode(booleanunique,chardigit){
returnnewFileIndexNode(unique,digit,file);
}
voidsave()throwsSQLException{
StorePagestorePage=newStorePage(null,-1,file,fileOffset);
StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);
save(store);
fileOffset=store.writeFinsh(null);
}
@Override
voidsaveRef(StoreImploutput)throwsSQLException{
if(fileOffset<ﻝ){
save();
}
output.writeLong(fileOffset);
}
@Override
IndexNodeloadRef(longoffset)throwsSQLException{
StorePagestorePage=newStorePage(null,-1,file,offset);
StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);
MemoryStreaminput=newMemoryStream();
FileIndexNodenode=newFileIndexNode(getUnique(),(char)input.readShort(),file);
node.fileOffset=offset;
node.load(store);
returnnode;
}
staticFileIndexNodeloadRootNode(booleanunique,FileChannelfile,longoffset)throwsException{
StorePagestorePage=newStorePage(null,-1,file,offset);
StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);
FileIndexNodenode=newFileIndexNode(unique,(char)store.readShort(),file);
node.fileOffset=offset;
node.load(store);
returnnode;
}
}
packagesmallsql.database;
importjava.sql.*;
classForeignKey{
finalﺝpkTable;
finalﺝfkTable;
finalIndexDescriptionpk;
finalIndexDescriptionfk;
ﺝupdateRule=DatabaseMetaData.importedKeyNoAction;
ﺝdeleteRule=DatabaseMetaData.importedKeyNoAction;
ForeignKey(ﺝpkTable,IndexDescriptionpk,ﺝfkTable,IndexDescriptionfk){
this.pkTable=pkTable;
this.fkTable=fkTable;
this.pk=pk;
this.fk=fk;
}
}
packagesmallsql.database;
classForeignKeys{
ﺝsize;
privateForeignKey[]data;
ForeignKeys(){
data=newForeignKey[16];
}
ﺝsize(){
returnsize;
}
finalForeignKeyget(intidx){
if(idx>=size)
thrownewIndexOutOfBoundsException("Columnindex:"+idx+",Size:"+size);
returndata[idx];
}
ﺝadd(ForeignKeyforeignKey){
if(size>=data.length){
resize(size<<ﻝ);
}
data[size++]=foreignKey;
}
privateﺝresize(intnewSize){
ForeignKey[]dataNew=newForeignKey[newSize];
System.arraycopy(data,0,dataNew,0,size);
data=dataNew;
}
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
classGroupResultextendsMemoryResult{
privateﺝcurrentGroup;
privateRowSourcefrom;
privateExpressionsgroupBy;
privateExpressionsexpressions=newExpressions();
privateExpressionsinternalExpressions=newExpressions();
GroupResult(CommandSelectcmd,RowSourcefrom,ExpressionsgroupBy,ﺝhaving,ExpressionsorderBy)throwsSQLException{
this.from=from;
this.groupBy=groupBy;
if(groupBy!=null){
for(inti=ﻝ;i<groupBy.size();i++){
ﺝleft=groupBy.get(i);
intidx=addInternalExpressionFromGroupBy(left);
ﺝright=newExpressionName(null);
right.setFrom(this,idx,newColumnExpression(left));
ﺝexpr=newExpressionArithmetic(left,right,ExpressionArithmetic.EQUALS_NULL);
currentGroup=(currentGroup==null)?
expr:
newExpressionArithmetic(currentGroup,expr,ExpressionArithmetic.AND);
}
}
expressions=internalExpressions;
for(intc=ﻝ;c<expressions.size();c++){
addColumn(newColumnExpression(expressions.get(c)));
}
patchExpressions(cmd.columnExpressions);
if(having!=null)having=patchExpression(having);
patchExpressions(orderBy);
}
finalﺝaddInternalExpressionFromGroupBy(ﺝexpr)throwsSQLException{
inttype=expr.getType();
if(type>=Expression.GROUP_BEGIN){
throwSmallSQLException.create(Language.GROUP_AGGR_INVALID,expr);
}else{
intidx=internalExpressions.indexOf(expr);
if(idx>=ﻝ)returnidx;
internalExpressions.add(expr);
returninternalExpressions.size()-1;
}
}
finalﺝaddInternalExpressionFromSelect(ﺝexpr)throwsSQLException{
inttype=expr.getType();
if(type==Expression.NAME){
intidx=internalExpressions.indexOf(expr);
if(idx>=ﻝ)returnidx;
throwSmallSQLException.create(Language.GROUP_AGGR_NOTPART,expr);
}else
if(type>=Expression.GROUP_BEGIN){
intidx=internalExpressions.indexOf(expr);
if(idx>=ﻝ)returnidx;
internalExpressions.add(expr);
returninternalExpressions.size()-1;
}else{
intidx=internalExpressions.indexOf(expr);
if(idx>=ﻝ)returnidx;
Expression[]params=expr.getParams();
if(params!=null){
for(intp=ﻝ;p<params.length;p++){
addInternalExpressionFromSelect(params[p]);
}
}
return-1;
}
}
finalprivatevoidpatchExpressions(Expressionsexprs)throwsSQLException{
if(exprs==null)return;
for(inti=ﻝ;i<exprs.size();i++){
exprs.set(i,patchExpression(exprs.get(i)));
}
}
finalprivatevoidpatchExpressions(ﺝexpression)throwsSQLException{
Expression[]params=expression.getParams();
if(params==null)return;
for(inti=ﻝ;i<params.length;i++){
expression.setParamAt(patchExpression(params[i]),i);
}
}
finalprivateﺝpatchExpression(ﺝexpr)throwsSQLException{
intidx=addInternalExpressionFromSelect(expr);
if(idx>=ﻝ){
ﺝorigﺝ=expr;
ﺝexprName;
if(exprinstanceofExpressionName){
exprName=(ExpressionName)expr;
}else{
expr=exprName=newExpressionName(expr.getAlias());
}
Columncolumn=exprName.getColumn();
if(column==null){
column=newColumn();
exprName.setFrom(this,idx,column);
switch(exprName.getType()){
caseExpression.MAX:
caseExpression.MIN:
caseExpression.FIRST:
caseExpression.LAST:
caseExpression.SUM:
ﺝbaseﺝ=exprName.getParams()[0];
column.setPrecision(baseExpression.getPrecision());
column.setScale(baseExpression.getScale());
break;
default:
column.setPrecision(origExpression.getPrecision());
column.setScale(origExpression.getScale());
}
column.setDataType(exprName.getDataType());
}else{
exprName.setFrom(this,idx,column);
}
}else{
patchExpressions(expr);
}
returnexpr;
}
ﺝexecute()throwsException{
super.execute();
from.execute();
NextRow:
while(from.next()){
beforeFirst();
while(next()){
if(currentGroup==null||currentGroup.getBoolean()){
accumulateRow();
continueNextRow;
}
}
addGroupRow();
accumulateRow();
}
if(getRowCount()==ﻝ&&groupBy==null){
addGroupRow();
}
beforeFirst();
}
finalprivatevoidaddGroupRow(){
ExpressionValue[]newRow=currentRow=newExpressionValue[expressions.size()];
for(inti=ﻝ;i<newRow.length;i++){
ﺝexpr=expressions.get(i);
inttype=expr.getType();
if(type<Expression.GROUP_BEGIN)type=Expression.GROUP_BY;
newRow[i]=newExpressionValue(type);
}
addRow(newRow);
}
finalprivatevoidaccumulateRow()throwsException{
for(inti=ﻝ;i<currentRow.length;i++){
ﺝsrc=expressions.get(i);
currentRow[i].accumulate(src);
}
}
}
packagesmallsql.database;
importjava.io.*;
importjava.nio.ByteBuffer;
importjava.nio.channels.FileChannel;
importjava.sql.SQLException;
publicclassIdentityextendsNumberimplementsMutable{
finalprivatelongfilePos;
finalprivateFileChannelraFile;
finalprivatebyte[]page=newbyte[8];
privatelongvalue;
publicIdentity(FileChannelraFile,longfilePos)throwsIOException{
ByteBufferbuffer=ByteBuffer.wrap(page);
synchronized(raFile){
raFile.position(filePos);
raFile.read(buffer);
}
value=((long)(page[ﻝ])<<ﻝ)|
((long)(page[ﻝ]&ﻝxFF)<<ﻝ)|
((long)(page[ﻝ]&ﻝxFF)<<ﻝ)|
((long)(page[ﻝ]&ﻝxFF)<<ﻝ)|
((long)(page[ﻝ]&ﻝxFF)<<ﻝ)|
((page[ﻝ]&ﻝxFF)<<ﻝ)|
((page[ﻝ]&ﻝxFF)<<ﻝ)|
((page[ﻝ]&ﻝxFF));
this.raFile=raFile;
this.filePos=filePos;
}
privateStorePagecreateStorePage(){
page[ﻝ]=(byte)(value>>ﻝ);
page[ﻝ]=(byte)(value>>ﻝ);
page[ﻝ]=(byte)(value>>ﻝ);
page[ﻝ]=(byte)(value>>ﻝ);
page[ﻝ]=(byte)(value>>ﻝ);
page[ﻝ]=(byte)(value>>ﻝ);
page[ﻝ]=(byte)(value>>ﻝ);
page[ﻝ]=(byte)(value);
returnnewStorePage(page,8,raFile,filePos);
}
voidcreateNextValue(SSConnectioncon)throwsSQLException{
value++;
con.add(createStorePage());
}
voidsetNextValue(ﺝexpr)throwsException{
longnewValue=expr.getLong();
if(newValue>value){
value=newValue;
createStorePage().commit();
}
}
@Override
publicfloatfloatValue(){
returnvalue;
}
@Override
publicdoubledoubleValue(){
returnvalue;
}
@Override
publicintintValue(){
return(int)value;
}
@Override
publiclonglongValue(){
returnvalue;
}
@Override
publicﺝtoString(){
returnString.valueOf(value);
}
publicObjectgetImmutableObject(){
returnnewLong(value);
}
}
packagesmallsql.database;
importjava.sql.SQLException;
importjava.util.ArrayList;
classIndex{
finalIndexNoderootPage;
Index(booleanunique){
rootPage=newIndexNode(unique,(char)-1);
}
Index(IndexNoderootPage){
this.rootPage=rootPage;
}
IndexScrollStatuscreateScrollStatus(Expressionsexpressions){
returnnewIndexScrollStatus(rootPage,expressions);
}
finalObjectfindRows(Expressionsexpressions,booleansearchNullValues,ArrayListnodeList)throwsException{
IndexNodepage=rootPage;
intcount=expressions.size();
for(inti=ﻝ;i<count;i++){
page=findRows(page,expressions.get(i),searchNullValues,nodeList);
if(page==null)
returnnull;
if(i+ﻝ==count)
returnpage.getValue();
else
page=(IndexNode)page.getValue();
}
thrownewError();
}
finalObjectfindRows(Expression[]expressions,booleansearchNullValues,ArrayListnodeList)throwsException{
IndexNodepage=rootPage;
intcount=expressions.length;
for(inti=ﻝ;i<count;i++){
page=findRows(page,expressions[i],searchNullValues,nodeList);
if(page==null)
returnnull;
if(i+ﻝ==count)
returnpage.getValue();
else
page=(IndexNode)page.getValue();
}
thrownewError();
}
finalprivateIndexNodefindRows(IndexNodepage,ﺝexpr,booleansearchNullValues,ArrayListnodeList)throwsException{
if(expr.isNull()){
if(!searchNullValues){
returnnull;
}
page=findNull(page);
}else{
switch(expr.getDataType()){
caseSQLTokenizer.REAL:
page=find(page,floatToBinarySortOrder(expr.getFloat()),2,nodeList);
break;
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.FLOAT:
page=find(page,doubleToBinarySortOrder(expr.getDouble()),4,nodeList);
break;
caseSQLTokenizer.TINYINT:
page=find(page,expr.getInt(),1,nodeList);
break;
caseSQLTokenizer.SMALLINT:
page=find(page,shortToBinarySortOrder(expr.getInt()),1,nodeList);
break;
caseSQLTokenizer.INT:
page=find(page,intToBinarySortOrder(expr.getInt()),2,nodeList);
break;
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.DATE:
caseSQLTokenizer.TIME:
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
page=find(page,longToBinarySortOrder(expr.getLong()),4,nodeList);
break;
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.CLOB:
page=find(page,stringToBinarySortOrder(expr.getString(),false),nodeList);
break;
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.CHAR:
page=find(page,stringToBinarySortOrder(expr.getString(),true),nodeList);
break;
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.BINARY:
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
caseSQLTokenizer.UNIQUEIDENTIFIER:
page=find(page,bytesToBinarySortOrder(expr.getBytes()),nodeList);
break;
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
page=find(page,expr.getBoolean()?ﻝ:ﻝ,ﻝ,nodeList);
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
page=find(page,numericToBinarySortOrder(expr.getNumeric()),nodeList);
break;
default:
thrownewError(String.valueOf(expr.getDataType()));
}
}
returnpage;
}
ﺝaddValues(longrowOffset,Expressionsexpressions)throwsException{
IndexNodepage=this.rootPage;
intcount=expressions.size();
for(inti=ﻝ;i<count;i++){
ﺝexpr=expressions.get(i);
booleanisLastValues=(i==count-1);
if(expr.isNull()){
page=addNull(page,rowOffset,isLastValues);
}else{
switch(expr.getDataType()){
caseSQLTokenizer.REAL:
page=add(page,rowOffset,floatToBinarySortOrder(expr.getFloat()),isLastValues,ﻝ);
break;
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.FLOAT:
page=add(page,rowOffset,doubleToBinarySortOrder(expr.getDouble()),isLastValues,ﻝ);
break;
caseSQLTokenizer.TINYINT:
page=add(page,rowOffset,expr.getInt(),isLastValues,ﻝ);
break;
caseSQLTokenizer.SMALLINT:
page=add(page,rowOffset,shortToBinarySortOrder(expr.getInt()),isLastValues,ﻝ);
break;
caseSQLTokenizer.INT:
page=add(page,rowOffset,intToBinarySortOrder(expr.getInt()),isLastValues,ﻝ);
break;
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.DATE:
caseSQLTokenizer.TIME:
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
page=add(page,rowOffset,longToBinarySortOrder(expr.getLong()),isLastValues,ﻝ);
break;
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.LONGNVARCHAR:
page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),false),isLastValues);
break;
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.CHAR:
page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),true),isLastValues);
break;
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.BINARY:
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
caseSQLTokenizer.UNIQUEIDENTIFIER:
page=add(page,rowOffset,bytesToBinarySortOrder(expr.getBytes()),isLastValues);
break;
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
page=add(page,rowOffset,expr.getBoolean()?ﻝ:ﻝ,isLastValues,ﻝ);
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
page=add(page,rowOffset,numericToBinarySortOrder(expr.getNumeric()),isLastValues);
break;
default:
thrownewError(String.valueOf(expr.getDataType()));
}
}
}
}
ﺝremoveValue(longrowOffset,Expressionsexpressions)throwsException{
ArrayListnodeList=newArrayList();
Objectobj=findRows(expressions,true,nodeList);
if(!rootPage.getUnique()){
LongTreeListlist=(LongTreeList)obj;
list.remove(rowOffset);
if(list.getSize()>ﻝ)return;
}
IndexNodenode=(IndexNode)nodeList.get(nodeList.size()-1);
node.clearValue();
for(inti=nodeList.size()-ﻝ;i>=ﻝ;i--){
if(!node.isEmpty())
break;
IndexNodeparent=(IndexNode)nodeList.get(i);
parent.removeNode(node.getDigit());
node=parent;
}
}
finalprivateIndexNodefindNull(IndexNodepage){
returnpage.getChildNode((char)0);
}
finalprivateIndexNodeaddNull(IndexNodepage,longrowOffset,booleanisLastValue)throwsSQLException{
if(isLastValue){
page.addNode((char)0,rowOffset);
returnnull;
}else
returnpage.addRoot((char)0);
}
finalprivateIndexNodefind(IndexNodenode,longkey,intdigitCount,ArrayListnodeList){
for(inti=digitCount-ﻝ;i>=ﻝ;i--){
chardigit=(char)(key>>(i<<4));
node=node.getChildNode(digit);
if(node==null)returnnull;
if(nodeList!=null)nodeList.add(node);
if(equals(node.getRemainderValue(),key,i)){
returnnode;
}
}
returnnode;
}
finalprivateIndexNodeadd(IndexNodenode,longrowOffset,longkey,booleanisLastValue,intdigitCount)throwsSQLException{
for(inti=digitCount-ﻝ;i>=ﻝ;i--){
chardigit=(char)(key>>(i<<4));
if(i==ﻝ){
if(isLastValue){
node.addNode(digit,rowOffset);
returnnull;
}
returnnode.addRoot(digit);
}
node=node.addNode(digit);
if(node.isEmpty()){
if(isLastValue){
node.addRemainderKey(rowOffset,key,i);
returnnull;
}
returnnode.addRootValue(key,i);
}else
if(equals(node.getRemainderValue(),key,i)){
if(isLastValue){
node.saveValue(rowOffset);
returnnull;
}
returnnode.addRoot();
}
}
thrownewError();
}
finalprivateIndexNodefind(IndexNodenode,char[]key,ArrayListnodeList){
intlength=key.length;
inti=-1;
while(true){
chardigit=(i<ﻝ)?(length==ﻝ?(char)ﻝ:ﻝ)
:(key[i]);
node=node.getChildNode(digit);
if(node==null)returnnull;
if(nodeList!=null)nodeList.add(node);
if(++i==length){
returnnode;
}
if(equals(node.getRemainderValue(),key,i)){
returnnode;
}
}
}
finalprivateIndexNodeadd(IndexNodenode,longrowOffset,char[]key,booleanisLast)throwsSQLException{
intlength=key.length;
inti=-1;
while(true){
chardigit=(i<ﻝ)?(length==ﻝ?(char)ﻝ:ﻝ)
:(key[i]);
if(++i==length){
if(isLast){
node.addNode(digit,rowOffset);
returnnull;
}
returnnode.addRoot(digit);
}
node=node.addNode(digit);
if(node.isEmpty()){
if(isLast){
node.addRemainderKey(rowOffset,key,i);
returnnull;
}
returnnode.addRootValue(key,i);
}else
if(equals(node.getRemainderValue(),key,i)){
if(isLast){
node.saveValue(rowOffset);
returnnull;
}
returnnode.addRoot();
}
}
}
ﺝclear(){
rootPage.clear();
}
finalstaticﺝfloatToBinarySortOrder(floatvalue){
intintValue=Float.floatToIntBits(value);
return(intValue<0)?
~intValue:
intValue^0x80000000;
}
finalstaticprivatelongdoubleToBinarySortOrder(doublevalue){
longintValue=Double.doubleToLongBits(value);
return(intValue<0)?
~intValue:
intValue^0x8000000000000000L;
}
finalstaticﺝshortToBinarySortOrder(intvalue){
returnvalue^0x8000;
}
finalstaticﺝintToBinarySortOrder(intvalue){
returnvalue^0x80000000;
}
finalstaticprivatelonglongToBinarySortOrder(longvalue){
returnvalue^0x8000000000000000L;
}
finalstaticprivatechar[]stringToBinarySortOrder(ﺝvalue,booleanneedTrim){
intlength=value.length();
if(needTrim){
while(length>ﻝ&&value.charAt(length-ﻝ)=='')length--;
}
char[]puffer=newchar[length];
for(inti=ﻝ;i<length;i++){
puffer[i]=Character.toLowerCase(Character.toUpperCase(value.charAt(i)));
}
returnpuffer;
}
finalstaticprivatechar[]bytesToBinarySortOrder(byte[]value){
intlength=value.length;
char[]puffer=newchar[length];
for(inti=ﻝ;i<length;i++){
puffer[i]=(char)(value[i]&0xFF);
}
returnpuffer;
}
finalstaticprivatechar[]numericToBinarySortOrder(MutableNumericnumeric){
int[]value=numeric.getInternalValue();
intcount=ﻝ;
inti;
for(i=ﻝ;i<value.length;i++){
if(value[i]!=ﻝ){
count=2*(value.length-i)+1;
break;
}
}
char[]puffer=newchar[count];
puffer[0]=(char)count;
for(intc=ﻝ;c<count;){
puffer[c++]=(char)(value[i]>>ﻝ);
puffer[c++]=(char)value[i++];
}
returnpuffer;
}
privatefinalbooleanequals(char[]src1,char[]src2,intoffset2){
if(src1==null)ﺝ
intlength=src1.length;
if(length!=src2.length-offset2)ﺝ
for(inti=ﻝ;i<length;i++){
if(src1[i]!=src2[i+offset2])ﺝ
}
ﺝ
}
privatefinalbooleanequals(char[]src1,longsrc2,intcharCount){
if(src1==null)ﺝ
intlength=src1.length;
if(length!=charCount)ﺝ
for(inti=0,d=charCount-1;i<length;i++){
if(srcﻝ[i]!=(char)((srcﻝ>>(d--<<ﻝ))))ﺝ
}
ﺝ
}
}
packagesmallsql.database;
importjava.io.File;
importjava.nio.ByteBuffer;
importjava.nio.channels.FileChannel;
importjava.sql.DriverManager;
importjava.sql.SQLException;
importsmallsql.database.language.Language;
finalclassIndexDescription{
staticﺝMAGIC_INDEX='S'<<ﻝ|'Q'<<ﻝ|'L'<<ﻝ|'I';
staticﺝINDEX_VERSION=ﻝ;
privatefinalﺝname;
finalﺝconstraintType;
finalprivateStringscolumns;
privateint[]matrix;
finalprivateExpressionsexpressions;
privateIndexindex;
privateFileChannelraFile;
IndexDescription(ﺝname,ﺝtableName,intconstraintType,Expressionsexpressions,Stringscolumns){
this.constraintType=constraintType;
this.expressions=expressions;
this.columns=columns;
this.name=createName(name,tableName);
}
privatestaticﺝcreateName(ﺝdefaultName,ﺝtableName){
if(defaultName==null){
defaultName=tableName+"_"+Long.toHexString(System.currentTimeMillis())+Integer.toHexString(newObject().hashCode());
}
returndefaultName;
}
finalﺝgetName(){
returnname;
}
finalbooleanisPrimary(){
returnconstraintType==SQLTokenizer.PRIMARY;
}
finalbooleanisUnique(){
returnconstraintType==SQLTokenizer.PRIMARY||constraintType==SQLTokenizer.UNIQUE;
}
finalStringsgetColumns(){
returncolumns;
}
ﺝmatchFactor(Stringsstrings){
if(strings.size()<columns.size())
returnInteger.MAX_VALUE;
nextColumn:
for(intc=ﻝ;c<columns.size();c++){
ﺝcolName=columns.get(c);
for(ints=ﻝ;s<strings.size();s++){
if(colName.equalsIgnoreCase(strings.get(s)))
continuenextColumn;
}
returnInteger.MAX_VALUE;
}
returnstrings.size()-columns.size();
}
ﺝinit(Databasedatabase,TableViewtableView){
intsize=tableView.columns.size();
matrix=newint[size];
for(inti=ﻝ;i<matrix.length;i++){
matrix[i]=-1;
}
for(inti=ﻝ;i<columns.size();i++){
matrix[tableView.findColumnIdx(columns.get(i))]=i;
}
}
ﺝcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{
init(database,tableView);
raFile=createFile(con,database);
}
staticFilegetFile(Databasedatabase,ﺝname)throwsException{
returnnewFile(Utils.createIdxFileName(database,name));
}
privateFileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{
if(database.isReadOnly()){
throwSmallSQLException.create(Language.DB_READONLY);
}
Filefile=getFile(database,name);
booleanok=file.createNewFile();
if(!ok)throwSmallSQLException.create(Language.INDEX_EXISTS,name);
FileChannelrandomFile=Utils.openRaFile(file,database.isReadOnly());
con.add(newCreateFile(file,randomFile,con,database));
writeMagic(randomFile);
returnrandomFile;
}
privatevoidload(Databasedatabase)throwsSQLException{
try{
Filefile=getFile(database,name);
if(!file.exists())
throwSmallSQLException.create(Language.INDEX_MISSING,name);
raFile=Utils.openRaFile(file,database.isReadOnly());
ByteBufferbuffer=ByteBuffer.allocate(8);
raFile.read(buffer);
buffer.position(0);
intmagic=buffer.getInt();
intversion=buffer.getInt();
if(magic!=MAGIC_INDEX){
throwSmallSQLException.create(Language.INDEX_FILE_INVALID,file.getName());
}
if(version>INDEX_VERSION){
Object[]params={newInteger(version),file.getName()};
throwSmallSQLException.create(Language.FILE_TOONEW,params);
}
}catch(Throwablee){
if(raFile!=null)
try{
raFile.close();
}catch(Exceptione2){
DriverManager.println(e2.toString());
}
throwSmallSQLException.createFromException(e);
}
}
voiddrop(Databasedatabase)throwsException{
close();
booleanok=getFile(database,name).delete();
if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);
}
voidclose()throwsException{
if(raFile!=null){
raFile.close();
raFile=null;
}
}
privateﺝwriteMagic(FileChannelraFile)throwsException{
ByteBufferbuffer=ByteBuffer.allocate(8);
buffer.putInt(MAGIC_INDEX);
buffer.putInt(INDEX_VERSION);
buffer.position(0);
raFile.write(buffer);
}
ﺝwriteExpression(intcolumnIdx,ﺝvalueExpression){
intidx=matrix[columnIdx];
if(idx>=ﻝ)
expressions.set(idx,valueExpression);
}
ﺝwriteFinish(SSConnectioncon){
}
ﺝsave(StoreImplstore)throwsSQLException{
store.writeInt(constraintType);
store.writeInt(columns.size());
for(intc=ﻝ;c<columns.size();c++){
store.writeString(columns.get(c));
}
store.writeString(name);
}
finalstaticIndexDescriptionload(Databasedatabase,TableViewtableView,StoreImplstore)throwsSQLException{
intconstraintType=store.readInt();
intcount=store.readInt();
Stringscolumns=newStrings();
Expressionsexpressions=newExpressions();
SQLParsersqlParser=newSQLParser();
for(intc=ﻝ;c<count;c++){
ﺝcolumn=store.readString();
columns.add(column);
expressions.add(sqlParser.parseExpression(column));
}
IndexDescriptionindexDesc=newIndexDescription(store.readString(),tableView.name,constraintType,expressions,columns);
indexDesc.init(database,tableView);
indexDesc.load(database);
returnindexDesc;
}
}
packagesmallsql.database;
importjava.sql.SQLException;
importsmallsql.database.language.Language;
classIndexDescriptions{
ﺝsize;
privateIndexDescription[]data;
privatebooleanhasPrimary;
IndexDescriptions(){
data=newIndexDescription[4];
}
ﺝsize(){
returnsize;
}
finalIndexDescriptionget(intidx){
if(idx>=size)
thrownewIndexOutOfBoundsException("Columnindex:"+idx+",Size:"+size);
returndata[idx];
}
ﺝadd(IndexDescriptiondescr)throwsSQLException{
if(size>=data.length){
resize(size<<ﻝ);
}
if(hasPrimary&&descr.isPrimary()){
throwSmallSQLException.create(Language.PK_ONLYONE);
}
hasPrimary=descr.isPrimary();
data[size++]=descr;
}
privateﺝresize(intnewSize){
IndexDescription[]dataNew=newIndexDescription[newSize];
System.arraycopy(data,0,dataNew,0,size);
data=dataNew;
}
finalIndexDescriptionfindBestMatch(Stringscolumns){
intbestFactor=Integer.MAX_VALUE;
intbestIdx=ﻝ;
for(inti=ﻝ;i<size;i++){
intfactor=data[i].matchFactor(columns);
if(factor==ﻝ)
returndata[i];
if(factor<bestFactor){
bestFactor=factor;
bestIdx=i;
}
}
if(bestFactor==Integer.MAX_VALUE)
returnnull;
else
returndata[bestIdx];
}
voidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{
for(inti=ﻝ;i<size;i++){
data[i].create(con,database,tableView);
}
}
voiddrop(Databasedatabase)throwsException{
for(inti=ﻝ;i<size;i++){
data[i].drop(database);
}
}
voidclose()throwsException{
for(inti=ﻝ;i<size;i++){
data[i].close();
}
}
voidadd(IndexDescriptionsindexes)throwsSQLException{
for(inti=ﻝ;i<indexes.size;i++){
add(indexes.data[i]);
}
}
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
classIndexNode{
finalprivatebooleanunique;
finalprivatechardigit;
staticfinalprivateIndexNode[]EMPTY_NODES=newIndexNode[0];
privateIndexNode[]nodes=EMPTY_NODES;
privatechar[]remainderKey;
privateObjectvalue;
protectedIndexNode(booleanunique,chardigit){
this.unique=unique;
this.digit=digit;
}
protectedIndexNodecreateIndexNode(booleanunique,chardigit){
returnnewIndexNode(unique,digit);
}
finalchargetDigit(){
returndigit;
}
finalbooleangetUnique(){
returnunique;
}
finalbooleanisEmpty(){
returnnodes==EMPTY_NODES&&value==null;
}
ﺝclear(){
nodes=EMPTY_NODES;
value=null;
remainderKey=null;
}
ﺝclearValue(){
value=null;
}
finalObjectgetValue(){
returnvalue;
}
finalIndexNode[]getChildNodes(){
returnnodes;
}
finalIndexNodegetChildNode(chardigit){
intpos=findNodePos(digit);
if(pos>=ﻝ)returnnodes[pos];
returnnull;
}
finalchar[]getRemainderValue(){
returnremainderKey;
}
finalIndexNodeaddNode(chardigit)throwsSQLException{
if(remainderKey!=null)moveRemainderValue();
intpos=findNodePos(digit);
if(pos==-1){
IndexNodenode=createIndexNode(unique,digit);
saveNode(node);
returnnode;
}else{
returnnodes[pos];
}
}
ﺝremoveNode(chardigit){
intpos=findNodePos(digit);
if(pos!=-1){
intlength=nodes.length-1;
IndexNode[]temp=newIndexNode[length];
System.arraycopy(nodes,0,temp,0,pos);
System.arraycopy(nodes,pos+1,temp,pos,length-pos);
nodes=temp;
}
}
ﺝaddNode(chardigit,longrowOffset)throwsSQLException{
IndexNodenode=addNode(digit);
if(node.remainderKey!=null)node.moveRemainderValue();
node.saveValue(rowOffset);
}
ﺝsaveValue(longrowOffset)throwsSQLException{
if(unique){
if(value!=null)throwSmallSQLException.create(Language.KEY_DUPLICATE);
value=newLong(rowOffset);
}else{
LongTreeListlist=(LongTreeList)value;
if(list==null){
value=list=newLongTreeList();
}
list.add(rowOffset);
}
}
ﺝaddRemainderKey(longrowOffset,longremainderValue,intcharCount)throwsSQLException{
saveRemainderValue(remainderValue,charCount);
value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);
}
ﺝaddRemainderKey(longrowOffset,char[]remainderValue,intoffset)throwsSQLException{
saveRemainderValue(remainderValue,offset);
value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);
}
finalIndexNodeaddRoot(chardigit)throwsSQLException{
IndexNodenode=addNode(digit);
if(node.remainderKey!=null)node.moveRemainderValue();
returnnode.addRoot();
}
finalIndexNodeaddRootValue(char[]remainderValue,intoffset)throwsSQLException{
saveRemainderValue(remainderValue,offset);
returnaddRoot();
}
finalIndexNodeaddRootValue(longremainderValue,intdigitCount)throwsSQLException{
saveRemainderValue(remainderValue,digitCount);
returnaddRoot();
}
privateﺝmoveRemainderValue()throwsSQLException{
ObjectrowOffset=value;
char[]puffer=remainderKey;
value=null;
remainderKey=null;
IndexNodenewNode=addNode(puffer[0]);
if(puffer.length==ﻝ){
newNode.value=rowOffset;
}else{
newNode.moveRemainderValueSub(rowOffset,puffer);
}
}
privateﺝmoveRemainderValueSub(ObjectrowOffset,char[]remainderValue){
intlength=remainderValue.length-1;
this.remainderKey=newchar[length];
value=rowOffset;
System.arraycopy(remainderValue,1,this.remainderKey,0,length);
}
privateﺝsaveRemainderValue(char[]remainderValue,intoffset){
intlength=remainderValue.length-offset;
this.remainderKey=newchar[length];
System.arraycopy(remainderValue,offset,this.remainderKey,0,length);
}
privateﺝsaveRemainderValue(longremainderValue,intcharCount){
this.remainderKey=newchar[charCount];
for(inti=charCount-ﻝ,d=ﻝ;i>=ﻝ;i--){
this.remainderKey[d++]=(char)(remainderValue>>(i<<4));
}
}
finalIndexNodeaddRoot()throwsSQLException{
IndexNoderoot=(IndexNode)value;
if(root==null){
value=root=createIndexNode(unique,(char)-1);
}
returnroot;
}
privateﺝsaveNode(IndexNodenode){
intlength=nodes.length;
IndexNode[]temp=newIndexNode[length+1];
if(length==ﻝ){
temp[0]=node;
}else{
intpos=findNodeInsertPos(node.digit,0,length);
System.arraycopy(nodes,0,temp,0,pos);
System.arraycopy(nodes,pos,temp,pos+1,length-pos);
temp[pos]=node;
}
nodes=temp;
}
privateﺝfindNodeInsertPos(chardigit,intstart,intend){
if(start==end)returnstart;
intmid=start+(end-start)/2;
charnodeDigit=nodes[mid].digit;
if(nodeDigit==digit)returnmid;
if(nodeDigit<digit){
returnfindNodeInsertPos(digit,mid+1,end);
}else{
if(start==mid)returnstart;
returnfindNodeInsertPos(digit,start,mid);
}
}
privateﺝfindNodePos(chardigit){
returnfindNodePos(digit,0,nodes.length);
}
privateﺝfindNodePos(chardigit,intstart,intend){
if(start==nodes.length)return-1;
intmid=start+(end-start)/2;
charnodeDigit=nodes[mid].digit;
if(nodeDigit==digit)returnmid;
if(nodeDigit<digit){
returnfindNodePos(digit,mid+1,end);
}else{
if(start==mid)return-1;
returnfindNodePos(digit,start,mid-1);
}
}
voidsave(StoreImploutput)throwsSQLException{
output.writeShort(digit);
intlength=remainderKey==null?ﻝ:remainderKey.length;
output.writeInt(length);
if(length>0)output.writeChars(remainderKey);
if(value==null){
output.writeByte(0);
}else
if(valueinstanceofLong){
output.writeByte(1);
output.writeLong(((Long)value).longValue());
}else
if(valueinstanceofLongTreeList){
output.writeByte(2);
((LongTreeList)value).save(output);
}else
if(valueinstanceofIndexNode){
output.writeByte(3);
((IndexNode)value).saveRef(output);
}
output.writeShort(nodes.length);
for(inti=ﻝ;i<nodes.length;i++){
nodes[i].saveRef(output);
}
}
voidsaveRef(StoreImploutput)throwsSQLException{
}
IndexNodeloadRef(longoffset)throwsSQLException{
thrownewError();
}
voidload(StoreImplinput)throwsSQLException{
intlength=input.readInt();
remainderKey=(length>0)?input.readChars(length):null;
intvalueType=input.readByte();
switch(valueType){
case0:
value=null;
break;
case1:
value=newLong(input.readLong());
break;
case2:
value=newLongTreeList(input);
break;
case3:
value=loadRef(input.readLong());
break;
default:
throwSmallSQLException.create(Language.INDEX_CORRUPT,String.valueOf(valueType));
}
nodes=newIndexNode[input.readShort()];
for(inti=ﻝ;i<nodes.length;i++){
nodes[i]=loadRef(input.readLong());
}
}
}
packagesmallsql.database;
finalclassIndexNodeScrollStatus{
finalbooleanasc;
finalIndexNode[]nodes;
intidx;
finalObjectnodeValue;
ﺝlevel;
IndexNodeScrollStatus(IndexNodenode,booleanasc,booleanscroll,intlevel){
this.nodes=node.getChildNodes();
nodeValue=node.getValue();
this.asc=asc;
this.idx=(asc^scroll)?nodes.length:-2;
this.level=level;
}
voidafterLast(){
idx=(asc)?nodes.length:-2;
}
}
packagesmallsql.database;
classIndexScrollStatus{
privatefinalIndexNoderootPage;
privatefinalExpressionsexpressions;
privatefinaljava.util.StacknodeStack=newjava.util.Stack();
privateLongTreeListlongList;
privateLongTreeListEnumlongListEnum=newLongTreeListEnum();
IndexScrollStatus(IndexNoderootPage,Expressionsexpressions){
this.rootPage	=rootPage;
this.expressions=expressions;
reset();
}
ﺝreset(){
nodeStack.clear();
booleanasc=(expressions.get(0).getAlias()!=SQLTokenizer.DESC_STR);
nodeStack.push(newIndexNodeScrollStatus(rootPage,asc,true,ﻝ));
}
finallonggetRowOffset(booleanscroll){
if(longList!=null){
longrowOffset=scroll?
longList.getNext(longListEnum):
longList.getPrevious(longListEnum);
if(rowOffset<ﻝ){
longList=null;
}else{
returnrowOffset;
}
}
while(true){
IndexNodeScrollStatusstatus=(IndexNodeScrollStatus)nodeStack.peek();
intlevel=status.level;
if(!status.asc^scroll){
intidx=++status.idx;
if(idx==-1){
if(status.nodeValue!=null){
if(status.nodeValueinstanceofIndexNode){
level++;
nodeStack.push(
newIndexNodeScrollStatus(	(IndexNode)status.nodeValue,
(expressions.get(level).getAlias()!=SQLTokenizer.DESC_STR),
scroll,level));
continue;
}else
returngetReturnValue(status.nodeValue);
}
idx=++status.idx;
}
if(idx>=status.nodes.length){
if(nodeStack.size()>ﻝ){
nodeStack.pop();
continue;
}else{
status.idx=status.nodes.length;
return-1;
}
}
IndexNodenode=status.nodes[idx];
nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));
}else{
intidx=--status.idx;
if(idx==-1){
if(status.nodeValue!=null){
if(status.nodeValueinstanceofIndexNode){
level++;
nodeStack.push(
newIndexNodeScrollStatus(	(IndexNode)status.nodeValue,
(expressions.get(level).getAlias()!=SQLTokenizer.DESC_STR),
scroll,level));
continue;
}else
returngetReturnValue(status.nodeValue);
}
}
if(idx<ﻝ){
if(nodeStack.size()>ﻝ){
nodeStack.pop();
continue;
}else{
return-1;
}
}
IndexNodenode=status.nodes[idx];
nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));
}
}
}
ﺝafterLast(){
longList=null;
nodeStack.setSize(1);
((IndexNodeScrollStatus)nodeStack.peek()).afterLast();
}
privatefinallonggetReturnValue(Objectvalue){
if(rootPage.getUnique()){
return((Long)value).longValue();
}else{
longList=(LongTreeList)value;
longListEnum.reset();
returnlongList.getNext(longListEnum);
}
}
}
packagesmallsql.database;
finalclassJoinextendsRowSource{
ﺝcondition;
ﺝtype;
RowSourceleft;
RowSourceright;
privatebooleanisAfterLast;
privateLongLongListrowPositions;
ﺝrow;
JoinScrollscroll;
Join(inttype,RowSourceleft,RowSourceright,ﺝcondition){
this.type=type;
this.condition=condition;
this.left=left;
this.right=right;
}
finalbooleanisScrollable(){
ﺝ
}
voidbeforeFirst()throwsException{
scroll.beforeFirst();
isAfterLast=false;
row=ﻝ;
}
booleanfirst()throwsException{
beforeFirst();
returnnext();
}
booleannext()throwsException{
if(isAfterLast)ﺝ
row++;
booleanresult=scroll.next();
if(!result){
noRow();
}
returnresult;
}
voidafterLast(){
isAfterLast=true;
noRow();
}
intgetRow(){
returnrow;
}
finallonggetRowPosition(){
if(rowPositions==null)rowPositions=newLongLongList();
rowPositions.add(left.getRowPosition(),right.getRowPosition());
returnrowPositions.size()-1;
}
ﺝsetRowPosition(longrowPosition)throwsException{
left.setRowPosition(rowPositions.get1((int)rowPosition));
right.setRowPosition(rowPositions.get2((int)rowPosition));
}
finalbooleanrowInserted(){
returnleft.rowInserted()||right.rowInserted();
}
finalbooleanrowDeleted(){
returnleft.rowDeleted()||right.rowDeleted();
}
voidnullRow(){
left.nullRow();
right.nullRow();
row=ﻝ;
}
voidnoRow(){
isAfterLast=true;
left.noRow();
right.noRow();
row=ﻝ;
}
voidexecute()throwsException{
left.execute();
right.execute();
if(!createJoinScrollIndex()){
scroll=newJoinScroll(type,left,right,condition);
}
}
booleanisExpressionsFromThisRowSource(Expressionscolumns){
if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){
ﺝ
}
if(columns.size()==ﻝ){
ﺝ
}
Expressionssingle=newExpressions();
for(inti=ﻝ;i<columns.size();i++){
single.clear();
single.add(columns.get(i));
if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){
continue;
}
ﺝ
}
ﺝ
}
privatebooleancreateJoinScrollIndex()throwsException{
if(type==CROSS_JOIN){
ﺝ
}
if(type!=INNER_JOIN){
ﺝ
}
if(conditioninstanceofExpressionArithmetic){
ExpressionArithmeticcond=(ExpressionArithmetic)condition;
ExpressionsleftEx=newExpressions();
ExpressionsrightEx=newExpressions();
intoperation=createJoinScrollIndex(cond,leftEx,rightEx,ﻝ);
if(operation!=ﻝ){
scroll=newJoinScrollIndex(type,left,right,leftEx,rightEx,operation);
ﺝ
}
}
ﺝ
}
ﺝcreateJoinScrollIndex(ExpressionArithmeticcond,ExpressionsleftEx,ExpressionsrightEx,intoperation)throwsException{
Expression[]params=cond.getParams();
intop=cond.getOperation();
if(op==ExpressionArithmetic.AND){
ﺝparam0=params[0];
ﺝparam1=params[1];
if(param0instanceofExpressionArithmetic&&param1instanceofExpressionArithmetic){
op=createJoinScrollIndex((ExpressionArithmetic)param0,leftEx,rightEx,operation);
if(op==ﻝ){
returnﻝ;
}
returncreateJoinScrollIndex((ExpressionArithmetic)param1,leftEx,rightEx,operation);
}
returnﻝ;
}
if(operation==ﻝ){
operation=op;
}
if(operation!=op){
returnﻝ;
}
if(operation==ExpressionArithmetic.EQUALS){
ﺝparam0=params[0];
ﺝparam1=params[1];
Expressionscolumns0=Utils.getExpressionNameFromTree(param0);
Expressionscolumns1=Utils.getExpressionNameFromTree(param1);
if(left.isExpressionsFromThisRowSource(columns0)&&right.isExpressionsFromThisRowSource(columns1)){
leftEx.add(param0);
rightEx.add(param1);
}else{
if(left.isExpressionsFromThisRowSource(columns1)&&right.isExpressionsFromThisRowSource(columns0)){
leftEx.add(param1);
rightEx.add(param0);
}else{
returnﻝ;
}
}
returnoperation;
}
returnﻝ;
}
staticﺝCROSS_JOIN=ﻝ;
staticﺝINNER_JOIN=ﻝ;
staticﺝLEFT_JOIN=ﻝ;
staticﺝFULL_JOIN=ﻝ;
staticﺝRIGHT_JOIN=ﻝ;
}
packagesmallsql.database;
classJoinScroll{
privatefinalﺝcondition;
ﺝtype;
finalRowSourceleft;
finalRowSourceright;
privatebooleanisBeforeFirst=true;
privatebooleanisOuterValid=true;
privateboolean[]isFullNotValid;
ﺝfullRightRowCounter;
ﺝfullRowCount;
ﺝfullReturnCounter=-1;
JoinScroll(inttype,RowSourceleft,RowSourceright,ﺝcondition){
this.type=type;
this.condition=condition;
this.left=left;
this.right=right;
if(type==Join.FULL_JOIN){
isFullNotValid=newboolean[10];
}
}
voidbeforeFirst()throwsException{
left.beforeFirst();
right.beforeFirst();
isBeforeFirst=true;
fullRightRowCounter=ﻝ;
fullRowCount=ﻝ;
fullReturnCounter=-1;
}
booleannext()throwsException{
booleanresult;
if(fullReturnCounter>=ﻝ){
do{
if(fullReturnCounter>=fullRowCount){
ﺝ
}
right.next();
}while(isFullNotValid[fullReturnCounter++]);
ﺝ
}
do{
if(isBeforeFirst){
result=left.next();
if(result){
result=right.first();
if(!result){
switch(type){
caseJoin.LEFT_JOIN:
caseJoin.FULL_JOIN:
isOuterValid=false;
isBeforeFirst=false;
right.nullRow();
ﺝ
}
}elsefullRightRowCounter++;
}else{
if(type==Join.FULL_JOIN){
while(right.next()){
fullRightRowCounter++;
}
fullRowCount=fullRightRowCounter;
}
}
}else{
result=right.next();
if(!result){
switch(type){
caseJoin.LEFT_JOIN:
caseJoin.FULL_JOIN:
if(isOuterValid){
isOuterValid=false;
right.nullRow();
ﺝ
}
fullRowCount=Math.max(fullRowCount,fullRightRowCounter);
fullRightRowCounter=ﻝ;
}
isOuterValid=true;
result=left.next();
if(result){
result=right.first();
if(!result){
switch(type){
caseJoin.LEFT_JOIN:
caseJoin.FULL_JOIN:
isOuterValid=false;
right.nullRow();
ﺝ
}
}elsefullRightRowCounter++;
}
}elsefullRightRowCounter++;
}
isBeforeFirst=false;
}while(result&&!getBoolean());
isOuterValid=false;
if(type==Join.FULL_JOIN){
if(fullRightRowCounter>=isFullNotValid.length){
boolean[]temp=newboolean[fullRightRowCounter<<1];
System.arraycopy(isFullNotValid,0,temp,0,fullRightRowCounter);
isFullNotValid=temp;
}
if(!result){
if(fullRowCount==ﻝ){
ﺝ
}
if(fullReturnCounter<0){
fullReturnCounter=ﻝ;
right.first();
left.nullRow();
}
while(isFullNotValid[fullReturnCounter++]){
if(fullReturnCounter>=fullRowCount){
ﺝ
}
right.next();
}
ﺝ
}else
isFullNotValid[fullRightRowCounter-1]=result;
}
returnresult;
}
privatebooleangetBoolean()throwsException{
returntype==Join.CROSS_JOIN||condition.getBoolean();
}
}
packagesmallsql.database;
classJoinScrollIndexextendsJoinScroll{
privateﺝcompare;
ExpressionsleftEx;
ExpressionsrightEx;
privateIndexindex;
privateLongTreeListrowList;
privatefinalLongTreeListEnumlongListEnum=newLongTreeListEnum();
JoinScrollIndex(intjoinType,RowSourceleft,RowSourceright,ExpressionsleftEx,ExpressionsrightEx,intcompare)
throwsException{
super(joinType,left,right,null);
this.leftEx=leftEx;
this.rightEx=rightEx;
this.compare=compare;
createIndex(rightEx);
}
privatevoidcreateIndex(ExpressionsrightEx)throwsException{
index=newIndex(false);
right.beforeFirst();
while(right.next()){
index.addValues(right.getRowPosition(),rightEx);
}
}
booleannext()throwsException{
switch(compare){
caseExpressionArithmetic.EQUALS:
returnnextEquals();
default:
thrownewError("Compareoperationnotsupported:"+compare);
}
}
privatebooleannextEquals()throwsException{
if(rowList!=null){
longrowPosition=rowList.getNext(longListEnum);
if(rowPosition!=-1){
right.setRowPosition(rowPosition);
ﺝ
}
rowList=null;
}
Objectrows;
do{
if(!left.next()){
ﺝ
}
rows=index.findRows(leftEx,false,null);
}while(rows==null);
if(rowsinstanceofLong){
right.setRowPosition(((Long)rows).longValue());
}else{
rowList=(LongTreeList)rows;
longListEnum.reset();
right.setRowPosition(rowList.getNext(longListEnum));
}
ﺝ
}
}
packagesmallsql.database;
importjava.io.File;
classLobsextendsTable{
Lobs(Tabletable)throwsException{
super(table.database,table.name);
raFile=Utils.openRaFile(getFile(database),database.isReadOnly());
}
@Override
FilegetFile(Databasedatabase){
returnnewFile(Utils.createLobFileName(database,name));
}
}
packagesmallsql.database;
importjava.io.PrintWriter;
importjava.sql.*;
classLogger{
booleanisLogging(){
returnDriverManager.getLogWriter()!=null;
}
voidprintln(ﺝmsg){
PrintWriterlog=DriverManager.getLogWriter();
if(log!=null){
synchronized(log){
log.print("[SmallSQL]");
log.println(msg);
log.flush();
}
}
}
}
packagesmallsql.database;
classLongList{
ﺝsize;
privatelong[]data;
LongList(){
this(16);
}
LongList(intinitialSize){
data=newlong[initialSize];
}
ﺝsize(){
returnsize;
}
finallongget(intidx){
if(idx>=size)
thrownewIndexOutOfBoundsException("Index:"+idx+",Size:"+size);
returndata[idx];
}
ﺝadd(longvalue){
if(size>=data.length){
resize(size<<ﻝ);
}
data[size++]=value;
}
ﺝclear(){
size=ﻝ;
}
privateﺝresize(intnewSize){
long[]dataNew=newlong[newSize];
System.arraycopy(data,0,dataNew,0,size);
data=dataNew;
}
}
packagesmallsql.database;
finalclassLongLongList{
ﺝsize;
privatelong[]data;
LongLongList(){
this(16);
}
LongLongList(intinitialSize){
data=newlong[initialSize*2];
}
ﺝsize(){
returnsize;
}
finallongget1(intidx){
if(idx>=size)
thrownewIndexOutOfBoundsException("Index:"+idx+",Size:"+size);
returndata[idx<<1];
}
finallongget2(intidx){
if(idx>=size)
thrownewIndexOutOfBoundsException("Index:"+idx+",Size:"+size);
returndata[(idx<<ﻝ)+ﻝ];
}
ﺝadd(longvalue1,longvalue2){
intsizeﻝ=size<<ﻝ;
if(size2>=data.length){
resize(size2);
}
data[size2]=value1;
data[size2+1]=value2;
size++;
}
ﺝclear(){
size=ﻝ;
}
privateﺝresize(intnewSize){
long[]dataNew=newlong[newSize<<1];
System.arraycopy(data,ﻝ,dataNew,ﻝ,size<<ﻝ);
data=dataNew;
}
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
finalclassLongTreeList{
privatebyte[]data;
ﺝsize;
ﺝoffset;
staticfinalﺝpointerSize=ﻝ;
LongTreeList(){
data=newbyte[25];
}
LongTreeList(longvalue)throwsSQLException{
this();
add(value);
}
LongTreeList(StoreImplinput){
intreadSize=input.readInt();
data=input.readBytes(readSize);
}
ﺝsave(StoreImploutput){
output.writeInt(size);
output.writeBytes(data,0,size);
}
ﺝadd(longvalue)throwsSQLException{
offset=ﻝ;
if(size==ﻝ){
writeShort((int)(value>>ﻝ));
writePointer(offset+pointerSize+2);
writeShort(ﻝ);
writeShort((int)(value>>ﻝ));
writePointer(offset+pointerSize+2);
writeShort(ﻝ);
writeShort((int)(value>>ﻝ));
writePointer(offset+pointerSize+2);
writeShort(ﻝ);
writeShort((int)(value));
writeShort(ﻝ);
size=offset;
return;
}
intshift=ﻝ;
booleanfirstNode=(size>ﻝ);
while(shift>=ﻝ){
intoctet=(int)(value>>shift)&0xFFFF;
while(true){
intnextEntry=getUnsignedShort();
if(nextEntry==octet){
if(shift==ﻝ)return;
offset=getPointer();
firstNode=true;
break;
}
if((nextEntry==ﻝ&&!firstNode)||nextEntry>octet){
offset-=ﻝ;
while(true){
if(shift!=ﻝ){
offset=insertNode(octet);
}else{
insertNodeLastLevel(octet);
return;
}
shift-=ﻝ;
octet=(int)(value>>shift)&0xFFFF;
}
}
firstNode=false;
if(shift!=ﻝ)offset+=pointerSize;
}
shift-=ﻝ;
}
}
ﺝremove(longvalue)throwsSQLException{
if(size==ﻝ)return;
intoffsetﻝ=ﻝ;
intoffsetﻝ=ﻝ;
intoffsetﻝ=ﻝ;
offset=ﻝ;
intshift=ﻝ;
booleanfirstNode=true;
booleanfirstNode1=true;
booleanfirstNode2=true;
booleanfirstNode3=true;
while(shift>=ﻝ){
intoctet=(int)(value>>shift)&0xFFFF;
while(true){
intnextEntry=getUnsignedShort();
if(nextEntry==octet){
if(shift==ﻝ){
offset-=ﻝ;
removeNodeLastLevel();
while(firstNode&&getUnsignedShort()==ﻝ){
offset-=ﻝ;
removeNodeLastLevel();
if(shift>=ﻝ)
break;
offset=offset1;
offset1=offset2;
offset2=offset3;
firstNode=firstNode1;
firstNode1=firstNode2;
firstNode2=firstNode3;
removeNode();
shift++;
}
return;
}
offset3=offset2;
offset2=offset1;
offset1=offset-2;
offset=getPointer();
firstNode3=firstNode2;
firstNode2=firstNode1;
firstNode1=firstNode;
firstNode=true;
break;
}
if((nextEntry==ﻝ&&!firstNode)||nextEntry>octet){
return;
}
firstNode=false;
if(shift!=ﻝ)offset+=pointerSize;
}
shift-=ﻝ;
}
}
finallonggetNext(LongTreeListEnumlistEnum){
intshift=(ﻝ-listEnum.stack)<<ﻝ;
if(shift>=ﻝ)return-ﻝ;
offset		=listEnum.offsetStack[listEnum.stack];
longresult=listEnum.resultStack[listEnum.stack];
booleanfirstNode=(offset==ﻝ);
while(true){
intnextEntry=getUnsignedShort();
if(nextEntry!=ﻝ||firstNode){
result|=(((long)nextEntry)<<shift);
if(listEnum.stack>=ﻝ){
listEnum.offsetStack[listEnum.stack]=offset;
returnresult;
}
listEnum.offsetStack[listEnum.stack]=offset+pointerSize;
offset=getPointer();
shift-=ﻝ;
listEnum.stack++;
listEnum.resultStack[listEnum.stack]=result;
firstNode=true;
}else{
shift+=ﻝ;
listEnum.stack--;
if(listEnum.stack<0)return-1;
result=listEnum.resultStack[listEnum.stack];
offset=listEnum.offsetStack[listEnum.stack];
firstNode=false;
}
}
}
finallonggetPrevious(LongTreeListEnumlistEnum){
intshift=(ﻝ-listEnum.stack)<<ﻝ;
if(shift>=ﻝ){
shift=ﻝ;
offset=ﻝ;
listEnum.stack=ﻝ;
listEnum.offsetStack[ﻝ]=ﻝ+pointerSize;
loopToEndOfNode(listEnum);
}else{
setPreviousOffset(listEnum);
}
longresult=listEnum.resultStack[listEnum.stack];
while(true){
intnextEntry=(offset<ﻝ)?-ﻝ:getUnsignedShort();
if(nextEntry>=ﻝ){
result|=(((long)nextEntry)<<shift);
if(listEnum.stack>=ﻝ){
listEnum.offsetStack[listEnum.stack]=offset;
returnresult;
}
listEnum.offsetStack[listEnum.stack]=offset+pointerSize;
offset=getPointer();
shift-=ﻝ;
listEnum.stack++;
listEnum.resultStack[listEnum.stack]=result;
loopToEndOfNode(listEnum);
}else{
shift+=ﻝ;
listEnum.stack--;
if(listEnum.stack<0)return-1;
result=listEnum.resultStack[listEnum.stack];
setPreviousOffset(listEnum);
}
}
}
finalprivatevoidsetPreviousOffset(LongTreeListEnumlistEnum){
intpreviousOffset=listEnum.offsetStack[listEnum.stack]-ﻝ*(ﻝ+(listEnum.stack>=ﻝ?ﻝ:pointerSize));
if(listEnum.stack==ﻝ){
offset=previousOffset;
return;
}
offset=listEnum.offsetStack[listEnum.stack-1]-pointerSize;
intpointer=getPointer();
if(pointer<=previousOffset){
offset=previousOffset;
return;
}
offset=-1;
}
finalprivatevoidloopToEndOfNode(LongTreeListEnumlistEnum){
intnextEntry;
intnextOffset1,nextOffset2;
nextOffset1=offset;
offset+=ﻝ;
if(listEnum.stack<3)
offset+=pointerSize;
do{
nextOffset2=nextOffset1;
nextOffset1=offset;
nextEntry=getUnsignedShort();
if(listEnum.stack<3)
offset+=pointerSize;
}while(nextEntry!=ﻝ);
offset=nextOffset2;
}
finalﺝinsertNode(intoctet)throwsSQLException{
intoldOffset=offset;
if(data.length<size+ﻝ+pointerSize)resize();
System.arraycopy(data,oldOffset,data,oldOffset+2+pointerSize,size-oldOffset);
size+=2+pointerSize;
writeShort(octet);
writePointer(size);
correctPointers(ﻝ,oldOffset,ﻝ+pointerSize,ﻝ);
data[size++]=(byte)0;
data[size++]=(byte)0;
returnsize-2;
}
finalprivatevoidinsertNodeLastLevel(intoctet)throwsSQLException{
intoldOffset=offset;
if(data.length<size+ﻝ)resize();
System.arraycopy(data,offset,data,offset+2,size-offset);
size+=ﻝ;
writeShort(octet);
correctPointers(ﻝ,oldOffset,ﻝ,ﻝ);
}
finalprivatevoidremoveNode()throwsSQLException{
intoldOffset=offset;
correctPointers(ﻝ,oldOffset,-(ﻝ+pointerSize),ﻝ);
size-=2+pointerSize;
System.arraycopy(data,oldOffset+2+pointerSize,data,oldOffset,size-oldOffset);
offset=oldOffset;
}
finalprivatevoidremoveNodeLastLevel()throwsSQLException{
intoldOffset=offset;
correctPointers(ﻝ,oldOffset,-ﻝ,ﻝ);
size-=ﻝ;
System.arraycopy(data,oldOffset+2,data,oldOffset,size-oldOffset);
offset=oldOffset;
}
finalprivatevoidcorrectPointers(intstartOffset,intoldOffset,intdiff,intlevel){
offset=startOffset;
booleanfirstNode=true;
while(offset<size){
if(offset==oldOffset){
intabsDiff=Math.abs(diff);
if(absDiff==ﻝ)return;
offset+=absDiff;
firstNode=false;
continue;
}
intvalue=getUnsignedShort();
if(value!=ﻝ||firstNode){
intpointer=getPointer();
if(pointer>oldOffset){
offset-=pointerSize;
writePointer(pointer+diff);
if(diff>ﻝ)pointer+=diff;
}
if(level<ﻝ){
startOffset=offset;
correctPointers(pointer,oldOffset,diff,level+1);
offset=startOffset;
}
firstNode=false;
}else{
return;
}
}
}
finalﺝgetPointer(){
intvalue=ﻝ;
for(inti=ﻝ;i<pointerSize;i++){
value<<=ﻝ;
value+=(data[offset++]&0xFF);
}
returnvalue;
}
finalprivatevoidwritePointer(intvalue){
for(inti=pointerSize-ﻝ;i>=ﻝ;i--){
data[offset++]=(byte)(value>>(i*8));
}
}
finalﺝgetUnsignedShort(){
return((data[offset++]&ﻝxFF)<<ﻝ)|(data[offset++]&ﻝxFF);
}
finalprivatevoidwriteShort(intvalue){
data[offset++]=(byte)(value>>ﻝ);
data[offset++]=(byte)(value);
}
privateﺝresize()throwsSQLException{
intnewsize=data.length<<ﻝ;
if(newsize>0xFFFFFF){
newsize=0xFFFFFF;
if(newsize==data.length)throwSmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);
}
byte[]temp=newbyte[newsize];
System.arraycopy(data,0,temp,0,data.length);
data=temp;
}
ﺝgetSize(){
returnsize;
}
}
packagesmallsql.database;
publicclassLongTreeListEnum{
long[]resultStack=newlong[4];
int[]offsetStack=newint[4];
intstack;
ﺝreset(){
stack=ﻝ;
offsetStack[ﻝ]=ﻝ;
}
}
packagesmallsql.database;
importjava.sql.*;
importjava.util.ArrayList;
importjava.util.List;
importsmallsql.database.language.Language;
classMemoryResultextendsDataSource{
ExpressionValue[]currentRow;
privatefinalColumnscolumns=newColumns();
ﺝrowIdx=-1;
privateListrowList=newArrayList();
MemoryResult(){}
MemoryResult(Object[][]data,intcolCount)throwsSQLException{
for(intc=ﻝ;c<colCount;c++){
Columncolumn=newColumn();
column.setDataType(SQLTokenizer.NULL);
columns.add(column);
}
for(intr=ﻝ;r<data.length;r++){
Object[]row=data[r];
ExpressionValue[]rowValues=newExpressionValue[row.length];
addRow(rowValues);
for(intc=ﻝ;c<colCount;c++){
ExpressionValueexpr=rowValues[c]=newExpressionValue();
expr.set(row[c],-1);
Columncolumn=columns.get(c);
if(expr.getDataType()!=SQLTokenizer.NULL){
column.setDataType(expr.getDataType());
}
if(expr.getPrecision()>column.getPrecision()){
column.setPrecision(expr.getPrecision());
}
}
}
}
ﺝaddRow(ExpressionValue[]row){
rowList.add(row);
}
finalColumngetColumn(intcolIdx){
returncolumns.get(colIdx);
}
ﺝaddColumn(Columncolumn){
columns.add(column);
}
finalbooleanisScrollable(){
ﺝ
}
ﺝbeforeFirst(){
rowIdx=-1;
currentRow=null;
}
finalbooleanisBeforeFirst(){
returnrowIdx<ﻝ||rowList.size()==ﻝ;
}
finalbooleanisFirst(){
returnrowIdx==ﻝ&&currentRow!=null;
}
finalbooleanfirst(){
rowIdx=ﻝ;
returnmove();
}
finalbooleanprevious(){
if(rowIdx--<ﻝ)rowIdx=-ﻝ;
returnmove();
}
finalbooleannext(){
rowIdx++;
returnmove();
}
finalbooleanlast(){
rowIdx=rowList.size()-ﻝ;
returnmove();
}
finalbooleanisLast(){
returnrowIdx==rowList.size()-ﻝ&&currentRow!=null;
}
finalbooleanisAfterLast(){
returnrowIdx>=rowList.size()||rowList.size()==ﻝ;
}
ﺝafterLast(){
rowIdx=rowList.size();
currentRow=null;
}
finalbooleanabsolute(introw)throwsSQLException{
if(row==ﻝ)throwSmallSQLException.create(Language.ROW_ﻝ_ABSOLUTE);
rowIdx=(row>ﻝ)?
Math.min(row-1,rowList.size()):
Math.max(row+rowList.size(),-1);
returnmove();
}
finalbooleanrelative(introws){
if(rows==ﻝ)return(currentRow!=null);
rowIdx=Math.min(Math.max(rowIdx+rows,-1),rowList.size());
returnmove();
}
ﺝgetRow(){
returncurrentRow==null?ﻝ:rowIdx+ﻝ;
}
finallonggetRowPosition(){
returnrowIdx;
}
ﺝsetRowPosition(longrowPosition)throwsException{
rowIdx=(int)rowPosition;
move();
}
finalbooleanrowInserted(){
ﺝ
}
finalbooleanrowDeleted(){
ﺝ
}
voidnullRow(){
thrownewError();
}
voidnoRow(){
currentRow=null;
}
finalprivatebooleanmove(){
if(rowIdx<rowList.size()&&rowIdx>=ﻝ){
currentRow=(ExpressionValue[])rowList.get(rowIdx);
ﺝ
}
currentRow=null;
ﺝ
}
booleanisNull(intcolIdx)throwsException{
returnget(colIdx).isNull();
}
booleangetBoolean(intcolIdx)throwsException{
returnget(colIdx).getBoolean();
}
intgetInt(intcolIdx)throwsException{
returnget(colIdx).getInt();
}
longgetLong(intcolIdx)throwsException{
returnget(colIdx).getLong();
}
floatgetFloat(intcolIdx)throwsException{
returnget(colIdx).getFloat();
}
doublegetDouble(intcolIdx)throwsException{
returnget(colIdx).getDouble();
}
longgetMoney(intcolIdx)throwsException{
returnget(colIdx).getMoney();
}
MutableNumericgetNumeric(intcolIdx)throwsException{
returnget(colIdx).getNumeric();
}
ObjectgetObject(intcolIdx)throwsException{
returnget(colIdx).getObject();
}
ﺝgetString(intcolIdx)throwsException{
returnget(colIdx).getString();
}
byte[]getBytes(intcolIdx)throwsException{
returnget(colIdx).getBytes();
}
intgetDataType(intcolIdx){
returncolumns.get(colIdx).getDataType();
}
finalTableViewgetTableView(){
returnnull;
}
ﺝdeleteRow()throwsException{
throwSmallSQLException.create(Language.RSET_READONLY);
}
ﺝupdateRow(Expression[]updateValues)throwsException{
throwSmallSQLException.create(Language.RSET_READONLY);
}
ﺝinsertRow(Expression[]updateValues)throwsException{
throwSmallSQLException.create(Language.RSET_READONLY);
}
privateﺝget(intcolIdx)throwsException{
if(currentRow==null)throwSmallSQLException.create(Language.ROW_NOCURRENT);
returncurrentRow[colIdx];
}
intgetRowCount(){
returnrowList.size();
}
voidexecute()throwsException{
rowList.clear();
}
}
packagesmallsql.database;
importjava.io.*;
importjava.nio.ByteBuffer;
importjava.nio.channels.FileChannel;
classMemoryStream{
privatebyte[]puffer;
ﺝoffset;
MemoryStream(){
puffer=newbyte[256];
}
voidwriteTo(FileChannelfile)throwsIOException{
ByteBufferbuffer=ByteBuffer.wrap(puffer,0,offset);
file.write(buffer);
}
voidwriteByte(intvalue){
verifyFreePufferSize(1);
puffer[offset++]=(byte)(value);
}
voidwriteShort(intvalue){
verifyFreePufferSize(2);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value);
}
voidwriteInt(intvalue){
verifyFreePufferSize(4);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value);
}
voidwriteLong(longvalue){
verifyFreePufferSize(8);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value>>ﻝ);
puffer[offset++]=(byte)(value);
}
voidwriteChars(char[]value){
verifyFreePufferSize(2*value.length);
for(inti=ﻝ;i<value.length;i++){
charc=value[i];
puffer[offset++]=(byte)(c>>ﻝ);
puffer[offset++]=(byte)(c);
}
}
voidwriteBytes(byte[]value,intoff,intlength){
verifyFreePufferSize(length);
System.arraycopy(value,off,puffer,offset,length);
offset+=length;
}
privatevoidverifyFreePufferSize(intfreeSize){
intminSize=offset+freeSize;
if(minSize<puffer.length){
intnewSize=puffer.length<<ﻝ;
if(newSize<minSize)newSize=minSize;
byte[]temp=newbyte[newSize];
System.arraycopy(puffer,0,temp,0,offset);
puffer=temp;
}
}
voidskip(intcount){
offset+=count;
}
intreadByte(){
returnpuffer[offset++];
}
intreadShort(){
return((puffer[offset++]&ﻝxFF)<<ﻝ)|(puffer[offset++]&ﻝxFF);
}
intreadInt(){
return((puffer[offset++]&ﻝxFF)<<ﻝ)
|((puffer[offset++]&ﻝxFF)<<ﻝ)
|((puffer[offset++]&ﻝxFF)<<ﻝ)
|(puffer[offset++]&0xFF);
}
longreadLong(){
return(((long)(puffer[offset++]&ﻝxFF))<<ﻝ)
|(((long)(puffer[offset++]&ﻝxFF))<<ﻝ)
|(((long)(puffer[offset++]&ﻝxFF))<<ﻝ)
|(((long)(puffer[offset++]&ﻝxFF))<<ﻝ)
|((puffer[offset++]&ﻝxFF)<<ﻝ)
|((puffer[offset++]&ﻝxFF)<<ﻝ)
|((puffer[offset++]&ﻝxFF)<<ﻝ)
|(puffer[offset++]&0xFF);
}
char[]readChars(intlength){
char[]chars=newchar[length];
for(inti=ﻝ;i<length;i++){
chars[i]=(char)readShort();
}
returnchars;
}
byte[]readBytes(intlength){
byte[]bytes=newbyte[length];
System.arraycopy(puffer,offset,bytes,0,length);
offset+=length;
returnbytes;
}
}
packagesmallsql.database;
importjava.math.*;
publicclassMoneyextendsNumberimplementsMutable{
privatestaticfinallongserialVersionUID=-620300937494609089L;
longvalue;
privateMoney(){}
publicMoney(doublevalue){
this.value=(long)(value*ﻝ);
}
publicMoney(floatvalue){
this.value=(long)(value*ﻝ);
}
publicstaticMoneycreateFromUnscaledValue(longvalue){
Moneymoney=newMoney();
money.value=value;
returnmoney;
}
publicstaticMoneycreateFromUnscaledValue(intvalue){
Moneymoney=newMoney();
money.value=value;
returnmoney;
}
publicintintValue(){
return(int)(value/10000.0);
}
publicfloatfloatValue(){
returnvalue/10000.0F;
}
publicdoubledoubleValue(){
returnvalue/10000.0;
}
publiclonglongValue(){
return(long)(value/10000.0);
}
publicﺝtoString(){
StringBufferbuffer=newStringBuffer();
buffer.append(longValue()).append('.');
finallongv=Math.abs(value);
buffer.append((char)((v%ﻝ)/ﻝ+'ﻝ'));
buffer.append((char)((v%ﻝ)/ﻝ+'ﻝ'));
buffer.append((char)((v%ﻝ)/ﻝ+'ﻝ'));
buffer.append((char)((v%ﻝ)+'ﻝ'));
returnbuffer.toString();
}
publicbooleanequals(Objectobj){
return(objinstanceofMoney&&((Money)obj).value==value);
}
publicinthashCode(){
return(int)(value^(value>>>ﻝ));
}
publiclongunscaledValue(){
returnvalue;
}
publicstaticlongparseMoney(ﺝstr){
returnUtils.doubleToMoney(Double.parseDouble(str));
}
privatebyte[]toByteArray(){
byte[]bytes=newbyte[8];
intoffset=ﻝ;
bytes[offset++]=(byte)(value>>ﻝ);
bytes[offset++]=(byte)(value>>ﻝ);
bytes[offset++]=(byte)(value>>ﻝ);
bytes[offset++]=(byte)(value>>ﻝ);
bytes[offset++]=(byte)(value>>ﻝ);
bytes[offset++]=(byte)(value>>ﻝ);
bytes[offset++]=(byte)(value>>ﻝ);
bytes[offset++]=(byte)(value);
returnbytes;
}
publicBigDecimaltoBigDecimal(){
if(value==ﻝ)returnZERO;
returnnewBigDecimal(newBigInteger(toByteArray()),ﻝ);
}
publicObjectgetImmutableObject(){
returntoBigDecimal();
}
staticprivatefinalBigDecimalZERO=newBigDecimal("0.0000");
}
packagesmallsql.database;
interfaceMutable{
ObjectgetImmutableObject();
}
packagesmallsql.database;
finalclassMutableDoubleextendsNumberimplementsMutable{
doublevalue;
MutableDouble(doublevalue){
this.value=value;
}
publicdoubledoubleValue(){
returnvalue;
}
publicfloatfloatValue(){
return(float)value;
}
publicintintValue(){
return(int)value;
}
publiclonglongValue(){
return(long)value;
}
publicﺝtoString(){
returnString.valueOf(value);
}
publicObjectgetImmutableObject(){
returnnewDouble(value);
}
}
packagesmallsql.database;
finalclassMutableFloatextendsNumberimplementsMutable{
floatvalue;
MutableFloat(floatvalue){
this.value=value;
}
publicdoubledoubleValue(){
returnvalue;
}
publicfloatfloatValue(){
returnvalue;
}
publicintintValue(){
return(int)value;
}
publiclonglongValue(){
return(long)value;
}
publicﺝtoString(){
returnString.valueOf(value);
}
publicObjectgetImmutableObject(){
returnnewFloat(value);
}
}
packagesmallsql.database;
finalclassMutableIntegerextendsNumberimplementsMutable{
intvalue;
MutableInteger(intvalue){
this.value=value;
}
publicdoubledoubleValue(){
returnvalue;
}
publicfloatfloatValue(){
returnvalue;
}
publicintintValue(){
returnvalue;
}
publiclonglongValue(){
returnvalue;
}
publicﺝtoString(){
returnString.valueOf(value);
}
publicObjectgetImmutableObject(){
returnUtils.getInteger(value);
}
}
packagesmallsql.database;
finalclassMutableLongextendsNumberimplementsMutable{
longvalue;
MutableLong(longvalue){
this.value=value;
}
publicdoubledoubleValue(){
returnvalue;
}
publicfloatfloatValue(){
returnvalue;
}
publicintintValue(){
return(int)value;
}
publiclonglongValue(){
returnvalue;
}
publicﺝtoString(){
returnString.valueOf(value);
}
publicObjectgetImmutableObject(){
returnnewLong(value);
}
}
packagesmallsql.database;
importjava.math.*;
classMutableNumericextendsNumberimplementsMutable{
privatestaticfinallongserialVersionUID=-750525164208565056L;
privateint[]value;
ﺝscale;
ﺝsignum;
MutableNumeric(byte[]complement){
setValue(complement);
}
privatevoidsetValue(byte[]complement){
intlength=complement.length;
if(length==ﻝ){
value=EMPTY_INTS;
signum=ﻝ;
return;
}
value=newint[(length+ﻝ)/ﻝ];
if(complement[ﻝ]<ﻝ){
negate(complement);
signum=-1;
}else{
signum=ﻝ;
for(inti=ﻝ;i<complement.length;i++)
if(complement[i]!=ﻝ){
signum=ﻝ;
break;
}
}
for(intv=value.length-ﻝ;v>=ﻝ;v--){
inttemp=ﻝ;
for(inti=ﻝ;i<ﻝ&&ﻝ<length;i++){
temp|=(complement[--length]&0xFF)<<(i*8);
}
value[v]=temp;
}
}
MutableNumeric(intcomplement){
if(complement==ﻝ){
signum=ﻝ;
value=EMPTY_INTS;
}else{
value=newint[1];
if(complement<ﻝ){
value[0]=-complement;
signum=-1;
}else{
value[0]=complement;
signum=ﻝ;
}
}
}
MutableNumeric(intcomplement,intscale){
this(complement);
this.scale=scale;
}
MutableNumeric(longcomplement){
if(complement==ﻝ){
signum=ﻝ;
value=EMPTY_INTS;
}else{
value=newint[2];
if(complement<ﻝ){
value[ﻝ]=(int)(~(complement>>ﻝ));
value[1]=(int)(-complement);
signum=-1;
}else{
value[ﻝ]=(int)(complement>>ﻝ);
value[1]=(int)complement;
signum=ﻝ;
}
}
}
MutableNumeric(longcomplement,intscale){
this(complement);
this.scale=scale;
}
MutableNumeric(doubleval){
this(newBigDecimal(String.valueOf(val)));
}
MutableNumeric(floatval){
this(newBigDecimal(String.valueOf(val)));
}
MutableNumeric(ﺝval){
this(newBigDecimal(val));
}
MutableNumeric(BigDecimalbig){
this(big.unscaledValue().toByteArray());
scale=big.scale();
}
MutableNumeric(intsignum,int[]value,intscale){
this.signum=signum;
this.value=value;
this.scale=scale;
}
MutableNumeric(MutableNumericnumeric){
this.signum=numeric.signum;
this.value=newint[numeric.value.length];
System.arraycopy(numeric.value,0,value,0,value.length);
this.scale=numeric.scale;
}
int[]getInternalValue(){
returnvalue;
}
voidadd(MutableNumericnum){
if(num.scale<scale){
num.setScale(scale);
}else
if(num.scale>scale){
setScale(num.scale);
}
add(num.signum,num.value);
}
privatevoidadd(intsig2,int[]val2){
if(val2.length>value.length){
int[]temp=val2;
val2=value;
value=temp;
inttempi=signum;
signum=sig2;
sig2=tempi;
}
if(signum!=sig2)
sub(val2);
else
add(val2);
}
privatevoidadd(int[]val2){
longtemp=ﻝ;
intv1=value.length;
for(intv2=val2.length;v2>0;){
temp=(value[--vﻝ]&ﻝxFFFFFFFFL)+(valﻝ[--vﻝ]&ﻝxFFFFFFFFL)+(temp>>>ﻝ);
value[v1]=(int)temp;
}
booleanuebertrag=(temp>>>ﻝ)!=ﻝ;
while(vﻝ>ﻝ&&uebertrag)
uebertrag=(value[--vﻝ]=value[vﻝ]+ﻝ)==ﻝ;
if(uebertrag){
resizeValue(1);
}
}
privatevoidresizeValue(inthighBits){
intval[]=newint[value.length+1];
val[0]=highBits;
System.arraycopy(value,0,val,1,value.length);
value=val;
}
voidsub(MutableNumericnum){
if(num.scale<scale){
num.setScale(scale);
}else
if(num.scale>scale){
setScale(num.scale);
}
add(-num.signum,num.value);
}
privatevoidsub(int[]val2){
longtemp=ﻝ;
intv1=value.length;
for(intv2=val2.length;v2>0;){
temp=(value[--vﻝ]&ﻝxFFFFFFFFL)-(valﻝ[--vﻝ]&ﻝxFFFFFFFFL)+(temp>>>=ﻝ);
value[v1]=(int)temp;
}
booleanuebertrag=(temp>>>ﻝ)!=ﻝ;
while(vﻝ>ﻝ&&uebertrag)
uebertrag=(value[--vﻝ]=value[vﻝ]-ﻝ)==-ﻝ;
if(uebertrag){
signum=-signum;
intlast=value.length-1;
for(inti=ﻝ;i<=last;i++){
value[i]=(i==last)?-value[i]:~value[i];
}
}
}
voidmul(MutableNumericnum){
BigDecimalbig=toBigDecimal().multiply(num.toBigDecimal());
setValue(big.unscaledValue().toByteArray());
scale=big.scale();
signum=big.signum();
}
ﺝmul(intfactor){
if(factor<ﻝ){
factor=-factor;
signum=-signum;
}
longcarryover=ﻝ;
for(inti=value.length-ﻝ;i>=ﻝ;i--){
longv=(value[i]&0xFFFFFFFFL)*factor+carryover;
value[i]=(int)v;
carryover=v>>ﻝ;
}
if(carryover>ﻝ){
resizeValue((int)carryover);
}
}
voiddiv(MutableNumericnum){
intnewScale=Math.max(scale+5,num.scale+4);
BigDecimalbig=toBigDecimal().divide(num.toBigDecimal(),newScale,BigDecimal.ROUND_HALF_EVEN);
setValue(big.unscaledValue().toByteArray());
scale=big.scale();
signum=big.signum();
}
ﺝdiv(intquotient){
mul(100000);
scale+=ﻝ;
divImpl(quotient);
}
finalprivatevoiddivImpl(intquotient){
if(quotient==ﻝ)return;
if(quotient<ﻝ){
quotient=-quotient;
signum=-signum;
}
intvalueLength=value.length;
longcarryover=ﻝ;
for(inti=ﻝ;i<valueLength;i++){
longv=(value[i]&0xFFFFFFFFL)+carryover;
value[i]=(int)(v/quotient);
carryover=((v%quotient)<<ﻝ);
}
carryover/=quotient;
if(carryover>2147483648L||
(carryover==ﻝL&&(value[valueLength-ﻝ]%ﻝ==ﻝ))){
inti=valueLength-1;
booleanisCarryOver=true;
while(i>=ﻝ&&isCarryOver)
isCarryOver=(value[i--]+=ﻝ)==ﻝ;
}
if(valueLength>ﻝ&&value[ﻝ]==ﻝ){
int[]temp=newint[valueLength-1];
System.arraycopy(value,1,temp,0,valueLength-1);
value=temp;
}
}
voidmod(MutableNumericnum){
num=newMutableNumeric(doubleValue()%num.doubleValue());
value=num.value;
scale=num.scale;
signum=num.signum;
}
intgetScale(){
returnscale;
}
voidsetScale(intnewScale){
if(newScale==scale)return;
intfactor=ﻝ;
if(newScale>scale){
for(;newScale>scale;scale++){
factor*=ﻝ;
if(factor==ﻝ){
mul(factor);
factor=ﻝ;
}
}
mul(factor);
}else{
for(;newScale<scale;scale--){
factor*=ﻝ;
if(factor==ﻝ){
divImpl(factor);
factor=ﻝ;
}
}
divImpl(factor);
}
}
intgetSignum(){
returnsignum;
}
voidsetSignum(intsignum){
this.signum=signum;
}
voidfloor(){
intoldScale=scale;
setScale(0);
setScale(oldScale);
}
privatevoidnegate(byte[]complement){
intlast=complement.length-1;
for(inti=ﻝ;i<=last;i++){
complement[i]=(byte)((i==last)?-complement[i]:~complement[i]);
}
while(complement[last]==ﻝ){
last--;
complement[last]++;
}
}
byte[]toByteArray(){
if(signum==ﻝ)returnEMPTY_BYTES;
byte[]complement;
intoffset;
intv=ﻝ;
while(v<value.length&&value[v]==ﻝ)v++;
if(v==value.length)returnEMPTY_BYTES;
if(value[v]<ﻝ){
complement=newbyte[(value.length-v)*4+4];
if(signum<ﻝ)
complement[0]=complement[1]=complement[2]=complement[3]=-1;
offset=ﻝ;
}else{
complement=newbyte[(value.length-v)*4];
offset=ﻝ;
}
intlast=value.length-1;
for(;v<=last;v++){
intval=(signum>0)?value[v]:(v==last)?-value[v]:~value[v];
complement[offset++]=(byte)(val>>ﻝ);
complement[offset++]=(byte)(val>>ﻝ);
complement[offset++]=(byte)(val>>ﻝ);
complement[offset++]=(byte)(val);
}
returncomplement;
}
publicintintValue(){
returnUtils.long2int(longValue());
}
publiclonglongValue(){
if(value.length==ﻝ||signum==ﻝ){
returnﻝ;
}else{
if(value.length==ﻝ&&(value[ﻝ]>ﻝ)){
returnUtils.double2long(value[0]/scaleDoubleFactor[scale]*signum);
}else
if(value.length==ﻝ){
longtemp=value[0]&0xFFFFFFFFL;
returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);
}else
if(value.length==ﻝ&&(value[ﻝ]>ﻝ)){
longtemp=(((long)value[ﻝ])<<ﻝ)|(value[ﻝ]&ﻝxFFFFFFFFL);
returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);
}else{
if(scale!=ﻝ){
MutableNumericnumeric=newMutableNumeric(this);
numeric.setScale(0);
returnnumeric.longValue();
}
return(signum>ﻝ)?Long.MAX_VALUE:Long.MIN_VALUE;
}
}
}
publicfloatfloatValue(){
if(value.length==ﻝ||signum==ﻝ){
returnﻝ;
}else{
if(value.length==ﻝ&&(value[ﻝ]>ﻝ)){
returnvalue[0]/scaleFloatFactor[scale]*signum;
}else
if(value.length==ﻝ){
longtemp=value[0]&0xFFFFFFFFL;
returntemp/scaleFloatFactor[scale]*signum;
}else
if(value.length==ﻝ&&(value[ﻝ]>ﻝ)){
longtemp=(((long)value[ﻝ])<<ﻝ)|(value[ﻝ]&ﻝxFFFFFFFFL);
returntemp/scaleFloatFactor[scale]*signum;
}else{
returnnewBigDecimal(newBigInteger(toByteArray()),scale).floatValue();
}
}
}
publicdoubledoubleValue(){
if(value.length==ﻝ||signum==ﻝ){
returnﻝ;
}else{
if(value.length==ﻝ&&(value[ﻝ]>ﻝ)){
returnvalue[0]/scaleDoubleFactor[scale]*signum;
}else
if(value.length==ﻝ){
longtemp=value[0]&0xFFFFFFFFL;
returntemp/scaleDoubleFactor[scale]*signum;
}else
if(value.length==ﻝ&&(value[ﻝ]>ﻝ)){
longtemp=(((long)value[ﻝ])<<ﻝ)|(value[ﻝ]&ﻝxFFFFFFFFL);
returntemp/scaleDoubleFactor[scale]*signum;
}else{
returnnewBigDecimal(newBigInteger(toByteArray()),scale).doubleValue();
}
}
}
publicﺝtoString(){
StringBufferbuf=newStringBuffer();
if(value.length==ﻝ||signum==ﻝ){
buf.append('0');
}else{
if(value.length==ﻝ&&(value[ﻝ]>ﻝ)){
buf.append(Integer.toString(value[0]));
}else
if(value.length==ﻝ){
longtemp=value[0]&0xFFFFFFFFL;
buf.append(Long.toString(temp));
}else
if(value.length==ﻝ&&(value[ﻝ]>ﻝ)){
longtemp=(((long)value[ﻝ])<<ﻝ)|(value[ﻝ]&ﻝxFFFFFFFFL);
buf.append(Long.toString(temp));
}else{
returnnewBigDecimal(newBigInteger(toByteArray()),scale).toString();
}
}
if(scale>ﻝ){
while(buf.length()<=scale)buf.insert(0,'0');
buf.insert(buf.length()-scale,'.');
}
if(signum<ﻝ)buf.insert(ﻝ,'-');
returnbuf.toString();
}
publicintcompareTo(MutableNumericnumeric){
returntoBigDecimal().compareTo(numeric.toBigDecimal());
}
publicbooleanequals(Objectobj){
if(!(objinstanceofMutableNumeric))ﺝ
returncompareTo((MutableNumeric)obj)==ﻝ;
}
publicBigDecimaltoBigDecimal(){
if(signum==ﻝ)returnnewBigDecimal(BigInteger.ZERO,scale);
returnnewBigDecimal(newBigInteger(toByteArray()),scale);
}
publicBigDecimaltoBigDecimal(intnewScale){
if(newScale==this.scale)returntoBigDecimal();
returntoBigDecimal().setScale(newScale,BigDecimal.ROUND_HALF_EVEN);
}
publicObjectgetImmutableObject(){
returntoBigDecimal();
}
privatestaticfinalbyte[]EMPTY_BYTES=newbyte[0];
privatestaticﺝ[]EMPTY_INTS=newint[0];
privatestaticfinaldouble[]scaleDoubleFactor={ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ};
privatestaticfinalfloat[]scaleFloatFactor={ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ};
}
packagesmallsql.database;
finalclassNoFromResultextendsRowSource{
ﺝrowPos;
finalbooleanisScrollable(){
ﺝ
}
ﺝbeforeFirst(){
rowPos=ﻝ;
}
finalbooleanisBeforeFirst(){
returnrowPos<=ﻝ;
}
finalbooleanisFirst(){
returnrowPos==ﻝ;
}
finalbooleanfirst(){
rowPos=ﻝ;
ﺝ
}
finalbooleanprevious(){
rowPos--;
returnrowPos==ﻝ;
}
finalbooleannext(){
rowPos++;
returnrowPos==ﻝ;
}
finalbooleanlast(){
rowPos=ﻝ;
ﺝ
}
finalbooleanisLast(){
returnrowPos==ﻝ;
}
finalbooleanisAfterLast(){
returnrowPos>ﻝ;
}
ﺝafterLast(){
rowPos=ﻝ;
}
finalbooleanabsolute(introw){
rowPos=(row>ﻝ)?
Math.min(row,ﻝ):
Math.min(row+1,-1);
returnrowPos==ﻝ;
}
finalbooleanrelative(introws){
if(rows==ﻝ)returnrowPos==ﻝ;
rowPos=Math.min(Math.max(rowPos+rows,-ﻝ),ﻝ);
returnrowPos==ﻝ;
}
ﺝgetRow(){
returnrowPos==ﻝ?ﻝ:ﻝ;
}
finallonggetRowPosition(){
returnrowPos;
}
ﺝsetRowPosition(longrowPosition){
rowPos=(int)rowPosition;
}
finalbooleanrowInserted(){
ﺝ
}
finalbooleanrowDeleted(){
ﺝ
}
ﺝnullRow(){
thrownewError();
}
ﺝnoRow(){
thrownewError();
}
ﺝexecute()throwsException{}
booleanisExpressionsFromThisRowSource(Expressionscolumns){
returncolumns.size()==ﻝ;
}
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
abstractclassRowSource{
abstractbooleanisScrollable();
abstractvoidbeforeFirst()throwsException;
booleanisBeforeFirst()throwsSQLException{
throwSmallSQLException.create(Language.RSET_FWDONLY);
}
booleanisFirst()throwsSQLException{
throwSmallSQLException.create(Language.RSET_FWDONLY);
}
abstractbooleanfirst()throwsException;
booleanprevious()throwsException{
throwSmallSQLException.create(Language.RSET_FWDONLY);
}
abstractbooleannext()throwsException;
booleanlast()throwsException{
throwSmallSQLException.create(Language.RSET_FWDONLY);
}
booleanisLast()throwsException{
throwSmallSQLException.create(Language.RSET_FWDONLY);
}
booleanisAfterLast()throwsSQLException,Exception{
throwSmallSQLException.create(Language.RSET_FWDONLY);
}
abstractvoidafterLast()throwsException;
booleanabsolute(introw)throwsException{
throwSmallSQLException.create(Language.RSET_FWDONLY);
}
booleanrelative(introws)throwsException{
throwSmallSQLException.create(Language.RSET_FWDONLY);
}
abstractintgetRow()throwsException;
abstractlonggetRowPosition();
abstractvoidsetRowPosition(longrowPosition)throwsException;
abstractvoidnullRow();
abstractvoidnoRow();
abstractbooleanrowInserted();
abstractbooleanrowDeleted();
booleanhasAlias(){
ﺝ
}
voidsetAlias(ﺝname)throwsSQLException{
throwSmallSQLException.create(Language.ALIAS_UNSUPPORTED);
}
abstractvoidexecute()throwsException;
abstractbooleanisExpressionsFromThisRowSource(Expressionscolumns);
}
packagesmallsql.database;
importjava.util.List;
importjava.sql.*;
importsmallsql.database.language.Language;
finalclassSQLParser{
SSConnectioncon;
privatechar[]sql;
privateListtokens;
ﺝtokenIdx;
Commandparse(SSConnectioncon,ﺝsqlString)throwsSQLException{
this.con=con;
Commandcmd=parse(sqlString.toCharArray());
SQLTokentoken=nextToken();
if(token!=null){
throwcreateSyntaxError(token,Language.STXADD_ADDITIONAL_TOK);
}
returncmd;
}
finalprivateCommandparse(char[]sql)throwsSQLException{
this.sql=sql;
this.tokens=SQLTokenizer.parseSQL(sql);
tokenIdx=ﻝ;
SQLTokentoken=nextToken(COMMANDS);
switch(token.value){
caseSQLTokenizer.SELECT:
returnselect();
caseSQLTokenizer.DELETE:
returndelete();
caseSQLTokenizer.INSERT:
returninsert();
caseSQLTokenizer.UPDATE:
returnupdate();
caseSQLTokenizer.CREATE:
returncreate();
caseSQLTokenizer.DROP:
returndrop();
caseSQLTokenizer.ALTER:
returnalter();
caseSQLTokenizer.SET:
returnset();
caseSQLTokenizer.USE:
token=nextToken(MISSING_EXPRESSION);
ﺝname=token.getName(sql);
checkValidIdentifier(name,token);
CommandSetset=newCommandSet(con.log,SQLTokenizer.USE);
set.name=name;
returnset;
caseSQLTokenizer.EXECUTE:
returnexecute();
caseSQLTokenizer.TRUNCATE:
returntruncate();
default:
thrownewError();
}
}
ﺝparseExpression(ﺝexpr)throwsSQLException{
this.sql=expr.toCharArray();
this.tokens=SQLTokenizer.parseSQL(sql);
tokenIdx=ﻝ;
returnexpression(null,ﻝ);
}
privateSQLExceptioncreateSyntaxError(SQLTokentoken,ﺝaddMessageCode){
ﺝmessage=getErrorString(token,addMessageCode,null);
returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);
}
privateSQLExceptioncreateSyntaxError(SQLTokentoken,ﺝaddMessageCode,
Objectparam0){
ﺝmessage=getErrorString(token,addMessageCode,param0);
returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);
}
privateSQLExceptioncreateSyntaxError(SQLTokentoken,int[]validValues){
ﺝmsgStr=SmallSQLException.translateMsg(
Language.STXADD_KEYS_REQUIRED,newObject[]{});
StringBuffermsgBuf=newStringBuffer(msgStr);
for(inti=ﻝ;i<validValues.length;i++){
ﺝname=SQLTokenizer.getKeyWord(validValues[i]);
if(name==null)name=String.valueOf((char)validValues[i]);
msgBuf.append(name);
if(i<validValues.length-ﻝ)
msgBuf.append(",");
else
if(i==validValues.length-ﻝ)
msgBuf.append("or");
}
ﺝmessage=getErrorString(
token,Language.CUSTOM_MESSAGE,msgBuf);
returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);
}
privateﺝgetErrorString(SQLTokentoken,ﺝmiddleMsgCode,
ObjectmiddleMsgParam){
StringBufferbuffer=newStringBuffer(1024);
if(token!=null){
Object[]params={String.valueOf(token.offset),
String.valueOf(sql,token.offset,token.length)};
ﺝbegin=SmallSQLException.translateMsg(Language.SYNTAX_BASE_OFS,params);
buffer.append(begin);
}
else{
ﺝbegin=SmallSQLException.translateMsg(
Language.SYNTAX_BASE_END,newObject[]{});
buffer.append(begin);
}
ﺝmiddle=SmallSQLException.translateMsg(
middleMsgCode,newObject[]{middleMsgParam});
buffer.append(middle);
intvalOffset=(token!=null)?token.offset:sql.length;
intvalBegin=Math.max(0,valOffset-40);
intvalEnd=Math.min(valOffset+20,sql.length);
ﺝlineSeparator=System.getProperty("line.separator");
buffer.append(lineSeparator);
buffer.append(sql,valBegin,valEnd-valBegin);
buffer.append(lineSeparator);
for(;valBegin<valOffset;valBegin++)buffer.append('');
buffer.append('^');
returnbuffer.toString();
}
privatevoidcheckValidIdentifier(ﺝname,SQLTokentoken)throwsSQLException{
if(token.value==SQLTokenizer.ASTERISK)return;
if(token.value!=SQLTokenizer.VALUE&&
token.value!=SQLTokenizer.IDENTIFIER&&
token.value<ﻝ){
throwcreateSyntaxError(token,Language.STXADD_IDENT_EXPECT);
}
if(name.length()==ﻝ){
throwcreateSyntaxError(token,Language.STXADD_IDENT_EMPTY,name);
}
charfirstChar=name.charAt(0);
if(firstChar!='#'&&firstChar<'@'){
throwcreateSyntaxError(token,Language.STXADD_IDENT_WRONG,name);
}
}
privateﺝgetIdentifier(SQLTokentoken)throwsSQLException{
ﺝname=token.getName(sql);
checkValidIdentifier(name,token);
returnname;
}
privateﺝnextIdentifier()throwsSQLException{
returngetIdentifier(nextToken(MISSING_IDENTIFIER));
}
privateﺝnextIdentiferPart(ﺝname)throwsSQLException{
SQLTokentoken=nextToken();
if(token!=null&&token.value==SQLTokenizer.POINT){
returnnextIdentifier();
}else{
previousToken();
}
returnname;
}
finalprivatebooleanisKeyword(SQLTokentoken){
if(token==null)ﺝ
switch(token.value){
caseSQLTokenizer.SELECT:
caseSQLTokenizer.INSERT:
caseSQLTokenizer.UPDATE:
caseSQLTokenizer.UNION:
caseSQLTokenizer.FROM:
caseSQLTokenizer.WHERE:
caseSQLTokenizer.GROUP:
caseSQLTokenizer.HAVING:
caseSQLTokenizer.ORDER:
caseSQLTokenizer.COMMA:
caseSQLTokenizer.SET:
caseSQLTokenizer.JOIN:
caseSQLTokenizer.LIMIT:
ﺝ
}
ﺝ
}
privateSQLTokenlastToken(){
if(tokenIdx>tokens.size()){
returnnull;
}
return(SQLToken)tokens.get(tokenIdx-1);
}
privatevoidpreviousToken(){
tokenIdx--;
}
privateSQLTokennextToken(){
if(tokenIdx>=tokens.size()){
tokenIdx++;
returnnull;
}
return(SQLToken)tokens.get(tokenIdx++);
}
privateSQLTokennextToken(int[]validValues)throwsSQLException{
SQLTokentoken=nextToken();
if(token==null)throwcreateSyntaxError(token,validValues);
if(validValues==MISSING_EXPRESSION){
returntoken;
}
if(validValues==MISSING_IDENTIFIER){
switch(token.value){
caseSQLTokenizer.PARENTHESIS_L:
caseSQLTokenizer.PARENTHESIS_R:
caseSQLTokenizer.COMMA:
throwcreateSyntaxError(token,validValues);
}
returntoken;
}
for(inti=validValues.length-ﻝ;i>=ﻝ;i--){
if(token.value==validValues[i])returntoken;
}
throwcreateSyntaxError(token,validValues);
}
privateCommandSelectsingleSelect()throwsSQLException{
CommandSelectselCmd=newCommandSelect(con.log);
SQLTokentoken;
Switch:while(true){
token=nextToken(MISSING_EXPRESSION);
switch(token.value){
caseSQLTokenizer.TOP:
token=nextToken(MISSING_EXPRESSION);
try{
intmaxRows=Integer.parseInt(token.getName(sql));
selCmd.setMaxRows(maxRows);
}catch(NumberFormatExceptione){
throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));
}
break;
caseSQLTokenizer.ALL:
selCmd.setDistinct(false);
break;
caseSQLTokenizer.DISTINCT:
selCmd.setDistinct(true);
break;
default:
previousToken();
breakSwitch;
}
}
while(true){
ﺝcolumn=expression(selCmd,ﻝ);
selCmd.addColumnExpression(column);
token=nextToken();
if(token==null)returnselCmd;
booleanas=false;
if(token.value==SQLTokenizer.AS){
token=nextToken(MISSING_EXPRESSION);
as=true;
}
if(as||(!isKeyword(token))){
ﺝalias=getIdentifier(token);
column.setAlias(alias);
token=nextToken();
if(token==null)returnselCmd;
}
switch(token.value){
caseSQLTokenizer.COMMA:
if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);
column=null;
break;
caseSQLTokenizer.FROM:
if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);
column=null;
from(selCmd);
returnselCmd;
default:
if(!isKeyword(token))
throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.FROM});
previousToken();
returnselCmd;
}
}
}
finalprivateCommandSelectselect()throwsSQLException{
CommandSelectselCmd=singleSelect();
SQLTokentoken=nextToken();
UnionAllunion=null;
while(token!=null&&token.value==SQLTokenizer.UNION){
if(union==null){
union=newUnionAll();
union.addDataSource(newViewResult(con,selCmd));
selCmd=newCommandSelect(con.log);
selCmd.setSource(union);
DataSourcesfrom=newDataSources();
from.add(union);
selCmd.setTables(from);
selCmd.addColumnExpression(newExpressionName("*"));
}
nextToken(MISSING_ALL);
nextToken(MISSING_SELECT);
union.addDataSource(newViewResult(con,singleSelect()));
token=nextToken();
}
if(token!=null&&token.value==SQLTokenizer.ORDER){
order(selCmd);
token=nextToken();
}
if(token!=null&&token.value==SQLTokenizer.LIMIT){
limit(selCmd);
token=nextToken();
}
previousToken();
returnselCmd;
}
privateCommanddelete()throwsSQLException{
CommandDeletecmd=newCommandDelete(con.log);
nextToken(MISSING_FROM);
from(cmd);
SQLTokentoken=nextToken();
if(token!=null){
if(token.value!=SQLTokenizer.WHERE)
throwthis.createSyntaxError(token,MISSING_WHERE);
where(cmd);
}
returncmd;
}
privateCommandtruncate()throwsSQLException{
CommandDeletecmd=newCommandDelete(con.log);
nextToken(MISSING_TABLE);
from(cmd);
returncmd;
}
privateCommandinsert()throwsSQLException{
SQLTokentoken=nextToken(MISSING_INTO);
CommandInsertcmd=newCommandInsert(con.log,nextIdentifier());
intparthesisCount=ﻝ;
token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);
if(token.value==SQLTokenizer.PARENTHESIS_L){
token=nextToken(MISSING_EXPRESSION);
if(token.value==SQLTokenizer.SELECT){
parthesisCount++;
cmd.noColumns=true;
}else{
previousToken();
Expressionslist=expressionParenthesisList(cmd);
for(inti=ﻝ;i<list.size();i++){
cmd.addColumnExpression(list.get(i));
}
token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);
}
}elsecmd.noColumns=true;
Switch:while(true)
switch(token.value){
caseSQLTokenizer.VALUES:{
token=nextToken(MISSING_PARENTHESIS_L);
cmd.addValues(expressionParenthesisList(cmd));
returncmd;
}
caseSQLTokenizer.SELECT:
cmd.addValues(select());
while(parthesisCount-->ﻝ){
nextToken(MISSING_PARENTHESIS_R);
}
returncmd;
caseSQLTokenizer.PARENTHESIS_L:
token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);
parthesisCount++;
continueSwitch;
default:
thrownewError();
}
}
privateCommandupdate()throwsSQLException{
CommandUpdatecmd=newCommandUpdate(con.log);
DataSourcestables=newDataSources();
cmd.setTables(tables);
cmd.setSource(rowSource(cmd,tables,ﻝ));
SQLTokentoken=nextToken(MISSING_SET);
while(true){
token=nextToken();
ﺝdest=expressionSingle(cmd,token);
if(dest.getType()!=Expression.NAME)throwcreateSyntaxError(token,MISSING_IDENTIFIER);
nextToken(MISSING_EQUALS);
ﺝsrc=expression(cmd,ﻝ);
cmd.addSetting(dest,src);
token=nextToken();
if(token==null)break;
switch(token.value){
caseSQLTokenizer.WHERE:
where(cmd);
returncmd;
caseSQLTokenizer.COMMA:
continue;
default:throwcreateSyntaxError(token,MISSING_WHERE_COMMA);
}
}
returncmd;
}
privateCommandcreate()throwsSQLException{
while(true){
SQLTokentoken=nextToken(COMMANDS_CREATE);
switch(token.value){
caseSQLTokenizer.DATABASE:
returncreateDatabase();
caseSQLTokenizer.TABLE:
returncreateTable();
caseSQLTokenizer.VIEW:
returncreateView();
caseSQLTokenizer.INDEX:
returncreateIndex(false);
caseSQLTokenizer.PROCEDURE:
returncreateProcedure();
caseSQLTokenizer.UNIQUE:
do{
token=nextToken(COMMANDS_CREATE_UNIQUE);
}while(token.value==SQLTokenizer.INDEX);
returncreateIndex(true);
caseSQLTokenizer.NONCLUSTERED:
caseSQLTokenizer.CLUSTERED:
continue;
default:
throwcreateSyntaxError(token,COMMANDS_CREATE);
}
}
}
privateCommandCreateDatabasecreateDatabase()throwsSQLException{
SQLTokentoken=nextToken();
if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);
returnnewCommandCreateDatabase(con.log,token.getName(sql));
}
privateCommandTablecreateTable()throwsSQLException{
ﺝcatalog;
ﺝtableName=catalog=nextIdentifier();
tableName=nextIdentiferPart(tableName);
if(tableName==catalog)catalog=null;
CommandTablecmdCreate=newCommandTable(con.log,catalog,tableName,SQLTokenizer.CREATE);
SQLTokentoken=nextToken(MISSING_PARENTHESIS_L);
nextCol:
while(true){
token=nextToken(MISSING_EXPRESSION);
ﺝconstraintName;
if(token.value==SQLTokenizer.CONSTRAINT){
constraintName=nextIdentifier();
token=nextToken(MISSING_KEYTYPE);
}else{
constraintName=null;
}
switch(token.value){
caseSQLTokenizer.PRIMARY:
caseSQLTokenizer.UNIQUE:
caseSQLTokenizer.FOREIGN:
IndexDescriptionindex=index(cmdCreate,token.value,tableName,constraintName,null);
if(token.value==SQLTokenizer.FOREIGN){
nextToken(MISSING_REFERENCES);
ﺝpk=nextIdentifier();
Expressionsexpressions=newExpressions();
Stringscolumns=newStrings();
expressionDefList(cmdCreate,expressions,columns);
IndexDescriptionpkIndex=newIndexDescription(null,pk,SQLTokenizer.UNIQUE,expressions,columns);
ForeignKeyforeignKey=newForeignKey(pk,pkIndex,tableName,index);
cmdCreate.addForeingnKey(foreignKey);
}else{
cmdCreate.addIndex(index);
}
token=nextToken(MISSING_COMMA_PARENTHESIS);
switch(token.value){
caseSQLTokenizer.PARENTHESIS_R:
returncmdCreate;
caseSQLTokenizer.COMMA:
continuenextCol;
}
}
token=addColumn(token,cmdCreate);
if(token==null){
throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);
}
switch(token.value){
caseSQLTokenizer.PARENTHESIS_R:
returncmdCreate;
caseSQLTokenizer.COMMA:
continuenextCol;
default:
throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);
}
}
}
privateSQLTokenaddColumn(SQLTokentoken,CommandTablecmdCreate)throwsSQLException{
ﺝcolName=getIdentifier(token);
Columncol=datatype(false);
col.setName(colName);
token=nextToken();
booleannullableWasSet=false;
booleandefaultWasSet=col.isAutoIncrement();
while(true){
if(token==null){
cmdCreate.addColumn(col);
returnnull;
}
switch(token.value){
caseSQLTokenizer.PARENTHESIS_R:
caseSQLTokenizer.COMMA:
cmdCreate.addColumn(col);
returntoken;
caseSQLTokenizer.DEFAULT:
if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);
intoffset=token.offset+token.length;
token=nextToken();
if(token!=null)offset=token.offset;
previousToken();
ﺝexpr=expression(cmdCreate,ﻝ);
SQLTokenlast=lastToken();
intlength=last.offset+last.length-offset;
ﺝdef=newString(sql,offset,length);
col.setDefaultValue(expr,def);
defaultWasSet=true;
break;
caseSQLTokenizer.IDENTITY:
if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);
col.setAutoIncrement(true);
defaultWasSet=true;
break;
caseSQLTokenizer.NULL:
if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);
nullableWasSet=true;
break;
caseSQLTokenizer.NOT:
if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);
token=nextToken(MISSING_NULL);
col.setNullable(false);
nullableWasSet=true;
break;
caseSQLTokenizer.PRIMARY:
caseSQLTokenizer.UNIQUE:
IndexDescriptionindex=index(cmdCreate,token.value,cmdCreate.name,null,colName);
cmdCreate.addIndex(index);
break;
default:
throwcreateSyntaxError(token,MISSING_OPTIONS_DATATYPE);
}
token=nextToken();
}
}
privateIndexDescriptionindex(Commandcmd,intconstraintType,ﺝtableName,ﺝcontrainName,ﺝcolumnName)throwsSQLException{
if(constraintType!=SQLTokenizer.UNIQUE)nextToken(MISSING_KEY);
SQLTokentoken=nextToken();
if(token!=null){
switch(token.value){
caseSQLTokenizer.CLUSTERED:
caseSQLTokenizer.NONCLUSTERED:
break;
default:
previousToken();
}
}else{
previousToken();
}
Stringscolumns=newStrings();
Expressionsexpressions=newExpressions();
if(columnName!=null){
columns.add(columnName);
expressions.add(newExpressionName(columnName));
}else{
expressionDefList(cmd,expressions,columns);
}
returnnewIndexDescription(contrainName,tableName,constraintType,expressions,columns);
}
privateColumndatatype(booleanisEscape)throwsSQLException{
SQLTokentoken;
intdataType;
if(isEscape){
token=nextToken(MISSING_SQL_DATATYPE);
switch(token.value){
caseSQLTokenizer.SQL_BIGINT:			dataType=SQLTokenizer.BIGINT;		break;
caseSQLTokenizer.SQL_BINARY:			dataType=SQLTokenizer.BINARY;	break;
caseSQLTokenizer.SQL_BIT:				dataType=SQLTokenizer.BIT;		break;
caseSQLTokenizer.SQL_CHAR:				dataType=SQLTokenizer.CHAR;		break;
caseSQLTokenizer.SQL_DATE:				dataType=SQLTokenizer.DATE;		break;
caseSQLTokenizer.SQL_DECIMAL:			dataType=SQLTokenizer.DECIMAL;	break;
caseSQLTokenizer.SQL_DOUBLE:			dataType=SQLTokenizer.DOUBLE;		break;
caseSQLTokenizer.SQL_FLOAT:			dataType=SQLTokenizer.FLOAT;		break;
caseSQLTokenizer.SQL_INTEGER:			dataType=SQLTokenizer.INT;		break;
caseSQLTokenizer.SQL_LONGVARBINARY:	dataType=SQLTokenizer.LONGVARBINARY;break;
caseSQLTokenizer.SQL_LONGVARCHAR:		dataType=SQLTokenizer.LONGVARCHAR;break;
caseSQLTokenizer.SQL_REAL:				dataType=SQLTokenizer.REAL;		break;
caseSQLTokenizer.SQL_SMALLINT:			dataType=SQLTokenizer.SMALLINT;	break;
caseSQLTokenizer.SQL_TIME:				dataType=SQLTokenizer.TIME;		break;
caseSQLTokenizer.SQL_TIMESTAMP:		dataType=SQLTokenizer.TIMESTAMP;	break;
caseSQLTokenizer.SQL_TINYINT:			dataType=SQLTokenizer.TINYINT;	break;
caseSQLTokenizer.SQL_VARBINARY:		dataType=SQLTokenizer.VARBINARY;	break;
caseSQLTokenizer.SQL_VARCHAR:			dataType=SQLTokenizer.VARCHAR;	break;
default:thrownewError();
}
}else{
token=nextToken(MISSING_DATATYPE);
dataType=token.value;
}
Columncol=newColumn();
if(dataType==SQLTokenizer.LONG){
token=nextToken();
if(token!=null&&token.value==SQLTokenizer.RAW){
dataType=SQLTokenizer.LONGVARBINARY;
}else{
dataType=SQLTokenizer.LONGVARCHAR;
previousToken();
}
}
switch(dataType){
caseSQLTokenizer.RAW:
dataType=SQLTokenizer.VARBINARY;
caseSQLTokenizer.CHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.NVARCHAR:
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
{
token=nextToken();
intdisplaySize;
if(token==null||token.value!=SQLTokenizer.PARENTHESIS_L){
displaySize=ﻝ;
previousToken();
}else{
token=nextToken(MISSING_EXPRESSION);
try{
displaySize=Integer.parseInt(token.getName(sql));
}catch(Exceptione){
throwcreateSyntaxError(token,MISSING_NUMBERVALUE);
}
nextToken(MISSING_PARENTHESIS_R);
}
col.setPrecision(displaySize);
break;
}
caseSQLTokenizer.SYSNAME:
col.setPrecision(255);
dataType=SQLTokenizer.VARCHAR;
break;
caseSQLTokenizer.COUNTER:
col.setAutoIncrement(true);
dataType=SQLTokenizer.INT;
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
token=nextToken();
if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_L){
token=nextToken(MISSING_EXPRESSION);
intvalue;
try{
value=Integer.parseInt(token.getName(sql));
}catch(Exceptione){
throwcreateSyntaxError(token,MISSING_NUMBERVALUE);
}
col.setPrecision(value);
token=nextToken(MISSING_COMMA_PARENTHESIS);
if(token.value==SQLTokenizer.COMMA){
token=nextToken(MISSING_EXPRESSION);
try{
value=Integer.parseInt(token.getName(sql));
}catch(Exceptione){
throwcreateSyntaxError(token,MISSING_NUMBERVALUE);
}
col.setScale(value);
nextToken(MISSING_PARENTHESIS_R);
}
}else{
col.setPrecision(18);
previousToken();
}
break;
}
col.setDataType(dataType);
returncol;
}
privateCommandCreateViewcreateView()throwsSQLException{
ﺝviewName=nextIdentifier();
nextToken(MISSING_AS);
SQLTokentoken=nextToken(MISSING_SELECT);
CommandCreateViewcmd=newCommandCreateView(con.log,viewName);
cmd.sql=newString(sql,token.offset,sql.length-token.offset);
select();
returncmd;
}
privateCommandTablecreateIndex(booleanunique)throwsSQLException{
ﺝindexName=nextIdentifier();
nextToken(MISSING_ON);
ﺝcatalog;
ﺝtableName=catalog=nextIdentifier();
tableName=nextIdentiferPart(tableName);
if(tableName==catalog)catalog=null;
CommandTablecmd=newCommandTable(con.log,catalog,tableName,SQLTokenizer.INDEX);
Expressionsexpressions=newExpressions();
Stringscolumns=newStrings();
expressionDefList(cmd,expressions,columns);
IndexDescriptionindexDesc=newIndexDescription(
indexName,
tableName,
unique?SQLTokenizer.UNIQUE:SQLTokenizer.INDEX,
expressions,
columns);
Object[]param={"CreateIndex"};
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);
}
privateCommandCreateDatabasecreateProcedure()throwsSQLException{
Object[]param={"CreateProcedure"};
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);
}
privateCommanddrop()throwsSQLException{
SQLTokentokenType=nextToken(COMMANDS_DROP);
ﺝcatalog;
ﺝname=catalog=nextIdentifier();
name=nextIdentiferPart(name);
if(name==catalog)catalog=null;
switch(tokenType.value){
caseSQLTokenizer.DATABASE:
caseSQLTokenizer.TABLE:
caseSQLTokenizer.VIEW:
caseSQLTokenizer.INDEX:
caseSQLTokenizer.PROCEDURE:
returnnewCommandDrop(con.log,catalog,name,tokenType.value);
default:
throwcreateSyntaxError(tokenType,COMMANDS_DROP);
}
}
privateCommandalter()throwsSQLException{
SQLTokentokenType=nextToken(COMMANDS_ALTER);
ﺝcatalog;
ﺝtableName=catalog=nextIdentifier();
switch(tokenType.value){
caseSQLTokenizer.TABLE:
caseSQLTokenizer.VIEW:
caseSQLTokenizer.INDEX:
caseSQLTokenizer.PROCEDURE:
tableName=nextIdentiferPart(tableName);
if(tableName==catalog)catalog=null;
}
switch(tokenType.value){
caseSQLTokenizer.TABLE:
returnalterTable(catalog,tableName);
default:
Object[]param={"ALTER"+tokenType.getName(sql)};
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);
}
}
CommandalterTable(ﺝcatalog,ﺝname)throwsSQLException{
SQLTokentokenType=nextToken(MISSING_ADD_ALTER_DROP);
CommandTablecmd=newCommandTable(con.log,catalog,name,tokenType.value);
switch(tokenType.value){
caseSQLTokenizer.ADD:
SQLTokentoken;
do{
token=nextToken(MISSING_IDENTIFIER);
token=addColumn(token,cmd);
}while(token!=null&&token.value==SQLTokenizer.COMMA);
returncmd;
default:
Object[]param={"ALTERTABLE"+tokenType.getName(sql)};
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);
}
}
privateCommandSetset()throwsSQLException{
SQLTokentoken=nextToken(COMMANDS_SET);
switch(token.value){
caseSQLTokenizer.TRANSACTION:
returnsetTransaction();
default:
thrownewError();
}
}
privateCommandSetsetTransaction()throwsSQLException{
SQLTokentoken=nextToken(MISSING_ISOLATION);
token=nextToken(MISSING_LEVEL);
token=nextToken(COMMANDS_TRANS_LEVEL);
CommandSetcmd=newCommandSet(con.log,SQLTokenizer.LEVEL);
switch(token.value){
caseSQLTokenizer.READ:
token=nextToken(MISSING_COMM_UNCOMM);
switch(token.value){
caseSQLTokenizer.COMMITTED:
cmd.isolationLevel=Connection.TRANSACTION_READ_COMMITTED;
break;
caseSQLTokenizer.UNCOMMITTED:
cmd.isolationLevel=Connection.TRANSACTION_READ_UNCOMMITTED;
break;
default:
thrownewError();
}
returncmd;
caseSQLTokenizer.REPEATABLE:
token=nextToken(MISSING_READ);
cmd.isolationLevel=Connection.TRANSACTION_REPEATABLE_READ;
returncmd;
caseSQLTokenizer.SERIALIZABLE:
cmd.isolationLevel=Connection.TRANSACTION_SERIALIZABLE;
returncmd;
default:
thrownewError();
}
}
privateCommandexecute()throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Execute");
}
privateExpressionsexpressionParenthesisList(Commandcmd)throwsSQLException{
Expressionslist=newExpressions();
{
SQLTokentoken=nextToken();
if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_R){
returnlist;
}
previousToken();
}
while(true){
list.add(expression(cmd,ﻝ));
SQLTokentoken=nextToken(MISSING_COMMA_PARENTHESIS);
switch(token.value){
caseSQLTokenizer.PARENTHESIS_R:
returnlist;
caseSQLTokenizer.COMMA:
continue;
default:
thrownewError();
}
}
}
privateExpressionsexpressionTokenList(Commandcmd,intlistType)throwsSQLException{
Expressionslist=newExpressions();
while(true){
ﺝexpr=expression(cmd,ﻝ);
list.add(expr);
SQLTokentoken=nextToken();
if(listType==SQLTokenizer.ORDER&&token!=null){
switch(token.value){
caseSQLTokenizer.DESC:
expr.setAlias(SQLTokenizer.DESC_STR);
caseSQLTokenizer.ASC:
token=nextToken();
}
}
if(token==null){
previousToken();
returnlist;
}
switch(token.value){
caseSQLTokenizer.COMMA:
continue;
default:
if(isKeyword(token)){
previousToken();
returnlist;
}
throwcreateSyntaxError(token,MISSING_TOKEN_LIST);
}
}
}
privatevoidexpressionDefList(Commandcmd,Expressionsexpressions,Stringscolumns)throwsSQLException{
SQLTokentoken=nextToken();
if(token.value!=SQLTokenizer.PARENTHESIS_L)throwcreateSyntaxError(token,MISSING_PARENTHESIS_L);
Loop:
while(true){
intoffset=token.offset+token.length;
token=nextToken();
if(token!=null)offset=token.offset;
previousToken();
expressions.add(expression(cmd,ﻝ));
SQLTokenlast=lastToken();
intlength=last.offset+last.length-offset;
columns.add(newString(sql,offset,length));
token=nextToken(MISSING_COMMA_PARENTHESIS);
switch(token.value){
caseSQLTokenizer.PARENTHESIS_R:
breakLoop;
caseSQLTokenizer.COMMA:
continue;
default:
thrownewError();
}
}
}
privateﺝexpression(Commandcmd,intpreviousOperationLevel)throwsSQLException{
SQLTokentoken=nextToken(MISSING_EXPRESSION);
ﺝleftExpr;
switch(token.value){
caseSQLTokenizer.NOT:
leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NOT/ﻝ),ExpressionArithmetic.NOT);
break;
caseSQLTokenizer.MINUS:
leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NEGATIVE/ﻝ),ExpressionArithmetic.NEGATIVE);
break;
caseSQLTokenizer.TILDE:
leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.BIT_NOT/ﻝ),ExpressionArithmetic.BIT_NOT);
break;
caseSQLTokenizer.PARENTHESIS_L:
leftExpr=expression(cmd,ﻝ);
token=nextToken(MISSING_PARENTHESIS_R);
break;
default:
leftExpr=expressionSingle(cmd,token);
}
booleanisNot=false;
while((token=nextToken())!=null){
ﺝrightExpr;
intoperation=ExpressionArithmetic.getOperationFromToken(token.value);
intlevel=operation/ﻝ;
if(previousOperationLevel>=level){
previousToken();
returnleftExpr;
}
switch(token.value){
caseSQLTokenizer.PLUS:
caseSQLTokenizer.MINUS:
caseSQLTokenizer.ASTERISK:
caseSQLTokenizer.SLACH:
caseSQLTokenizer.PERCENT:
caseSQLTokenizer.EQUALS:
caseSQLTokenizer.LESSER:
caseSQLTokenizer.LESSER_EQU:
caseSQLTokenizer.GREATER:
caseSQLTokenizer.GREATER_EQU:
caseSQLTokenizer.UNEQUALS:
caseSQLTokenizer.LIKE:
caseSQLTokenizer.OR:
caseSQLTokenizer.AND:
caseSQLTokenizer.BIT_AND:
caseSQLTokenizer.BIT_OR:
caseSQLTokenizer.BIT_XOR:
rightExpr=expression(cmd,level);
leftExpr=newExpressionArithmetic(leftExpr,rightExpr,operation);
break;
caseSQLTokenizer.BETWEEN:
rightExpr=expression(cmd,ExpressionArithmetic.AND);
nextToken(MISSING_AND);
ﺝrightExpr2=expression(cmd,level);
leftExpr=newExpressionArithmetic(leftExpr,rightExpr,rightExpr2,operation);
break;
caseSQLTokenizer.IN:
nextToken(MISSING_PARENTHESIS_L);
token=nextToken(MISSING_EXPRESSION);
if(token.value==SQLTokenizer.SELECT){
CommandSelectcmdSel=select();
leftExpr=newExpressionInSelect(con,leftExpr,cmdSel,operation);
nextToken(MISSING_PARENTHESIS_R);
}else{
previousToken();
Expressionslist=expressionParenthesisList(cmd);
leftExpr=newExpressionArithmetic(leftExpr,list,operation);
}
break;
caseSQLTokenizer.IS:
token=nextToken(MISSING_NOT_NULL);
if(token.value==SQLTokenizer.NOT){
nextToken(MISSING_NULL);
operation++;
}
leftExpr=newExpressionArithmetic(leftExpr,operation);
break;
caseSQLTokenizer.NOT:
token=nextToken(MISSING_BETWEEN_IN);
previousToken();
isNot=true;
continue;
default:
previousToken();
returnleftExpr;
}
if(isNot){
isNot=false;
leftExpr=newExpressionArithmetic(leftExpr,ExpressionArithmetic.NOT);
}
}
previousToken();
returnleftExpr;
}
privateﺝexpressionSingle(Commandcmd,SQLTokentoken)throwsSQLException{
booleanisMinus=false;
if(token!=null){
switch(token.value){
caseSQLTokenizer.NULL:
returnnewExpressionValue(null,SQLTokenizer.NULL);
caseSQLTokenizer.STRING:
returnnewExpressionValue(token.getName(null),SQLTokenizer.VARCHAR);
caseSQLTokenizer.IDENTIFIER:
{
ﺝname=getIdentifier(token);
ﺝexpr=newExpressionName(name);
SQLTokentoken2=nextToken();
if(token2!=null&&token2.value==SQLTokenizer.POINT){
expr.setNameAfterTableAlias(nextIdentifier());
}else{
previousToken();
}
returnexpr;
}
caseSQLTokenizer.TRUE:
returnnewExpressionValue(Boolean.TRUE,SQLTokenizer.BOOLEAN);
caseSQLTokenizer.FALSE:
returnnewExpressionValue(Boolean.FALSE,SQLTokenizer.BOOLEAN);
caseSQLTokenizer.ESCAPE_L:{
token=nextToken(COMMANDS_ESCAPE);
SQLTokenpara=nextToken(MISSING_EXPRESSION);
ﺝexpr;
switch(token.value){
caseSQLTokenizer.D:
expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.DATE),SQLTokenizer.DATE);
break;
caseSQLTokenizer.T:
expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIME),SQLTokenizer.TIME);
break;
caseSQLTokenizer.TS:
expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);
break;
caseSQLTokenizer.FN:
nextToken(MISSING_PARENTHESIS_L);
expr=function(cmd,para,true);
break;
caseSQLTokenizer.CALL:
thrownewjava.lang.UnsupportedOperationException("callescapesequence");
default:thrownewError();
}
token=nextToken(ESCAPE_MISSING_CLOSE);
returnexpr;
}
caseSQLTokenizer.QUESTION:
ExpressionValueparam=newExpressionValue();
cmd.addParameter(param);
returnparam;
caseSQLTokenizer.CASE:
returncaseExpr(cmd);
caseSQLTokenizer.MINUS:
caseSQLTokenizer.PLUS:
do{
if(token.value==SQLTokenizer.MINUS)
isMinus=!isMinus;
token=nextToken();
if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);
}while(token.value==SQLTokenizer.MINUS||token.value==SQLTokenizer.PLUS);
default:
SQLTokentoken2=nextToken();
if(token2!=null&&token2.value==SQLTokenizer.PARENTHESIS_L){
if(isMinus)
returnnewExpressionArithmetic(function(cmd,token,false),ExpressionArithmetic.NEGATIVE);
returnfunction(cmd,token,false);
}else{
charchr1=sql[token.offset];
if(chr1=='$'){
previousToken();
ﺝtok=newString(sql,token.offset+1,token.length-1);
if(isMinus)tok="-"+tok;
returnnewExpressionValue(newMoney(Double.parseDouble(tok)),SQLTokenizer.MONEY);
}
ﺝtok=newString(sql,token.offset,token.length);
if((chr1>='0'&&'9'>=chr1)||chr1=='.'){
previousToken();
if(token.length>1&&(sql[token.offset+1]|0x20)=='x'){
if(isMinus){
throwcreateSyntaxError(token,Language.STXADD_OPER_MINUS);
}
returnnewExpressionValue(Utils.hex2bytes(sql,token.offset+2,token.length-2),SQLTokenizer.VARBINARY);
}
if(isMinus)tok="-"+tok;
if(Utils.indexOf('.',sql,token.offset,token.length)>=ﻝ||
Utils.indexOf('e',sql,token.offset,token.length)>=ﻝ){
returnnewExpressionValue(newDouble(tok),SQLTokenizer.DOUBLE);
}else{
try{
returnnewExpressionValue(newInteger(tok),SQLTokenizer.INT);
}catch(NumberFormatExceptione){
returnnewExpressionValue(newLong(tok),SQLTokenizer.BIGINT);
}
}
}else{
checkValidIdentifier(tok,token);
ﺝexpr=newExpressionName(tok);
if(token2!=null&&token2.value==SQLTokenizer.POINT){
expr.setNameAfterTableAlias(nextIdentifier());
}else{
previousToken();
}
if(isMinus)
returnnewExpressionArithmetic(expr,ExpressionArithmetic.NEGATIVE);
returnexpr;
}
}
}
}
returnnull;
}
ExpressionFunctionCasecaseExpr(finalCommandcmd)throwsSQLException{
ExpressionFunctionCaseexpr=newExpressionFunctionCase();
SQLTokentoken=nextToken(MISSING_EXPRESSION);
ﺝinput=null;
if(token.value!=SQLTokenizer.WHEN){
previousToken();
input=expression(cmd,ﻝ);
token=nextToken(MISSING_WHEN_ELSE_END);
}
while(true){
switch(token.value){
caseSQLTokenizer.WHEN:
ﺝcondition=expression(cmd,ﻝ);
if(input!=null){
condition=newExpressionArithmetic(input,condition,ExpressionArithmetic.EQUALS);
}
nextToken(MISSING_THEN);
ﺝresult=expression(cmd,ﻝ);
expr.addCase(condition,result);
break;
caseSQLTokenizer.ELSE:
expr.setElseResult(expression(cmd,ﻝ));
break;
caseSQLTokenizer.END:
expr.setEnd();
returnexpr;
default:
thrownewError();
}
token=nextToken(MISSING_WHEN_ELSE_END);
}
}
privateﺝfunction(Commandcmd,SQLTokentoken,booleanisEscape)throwsSQLException{
ﺝexpr;
switch(token.value){
caseSQLTokenizer.CONVERT:{
Columncol;
ﺝstyle=null;
if(isEscape){
expr=expression(cmd,ﻝ);
nextToken(MISSING_COMMA);
col=datatype(isEscape);
}else{
col=datatype(isEscape);
nextToken(MISSING_COMMA);
expr=expression(cmd,ﻝ);
token=nextToken(MISSING_COMMA_PARENTHESIS);
if(token.value==SQLTokenizer.COMMA){
style=expression(cmd,ﻝ);
}else
previousToken();
}
nextToken(MISSING_PARENTHESIS_R);
returnnewExpressionFunctionConvert(col,expr,style);
}
caseSQLTokenizer.CAST:
expr=expression(cmd,ﻝ);
nextToken(MISSING_AS);
Columncol=datatype(false);
nextToken(MISSING_PARENTHESIS_R);
returnnewExpressionFunctionConvert(col,expr,null);
caseSQLTokenizer.TIMESTAMPDIFF:
token=nextToken(MISSING_INTERVALS);
nextToken(MISSING_COMMA);
expr=expression(cmd,ﻝ);
nextToken(MISSING_COMMA);
expr=newExpressionFunctionTimestampDiff(token.value,expr,expression(cmd,ﻝ));
nextToken(MISSING_PARENTHESIS_R);
returnexpr;
caseSQLTokenizer.TIMESTAMPADD:
token=nextToken(MISSING_INTERVALS);
nextToken(MISSING_COMMA);
expr=expression(cmd,ﻝ);
nextToken(MISSING_COMMA);
expr=newExpressionFunctionTimestampAdd(token.value,expr,expression(cmd,ﻝ));
nextToken(MISSING_PARENTHESIS_R);
returnexpr;
}
ExpressionsparamList=expressionParenthesisList(cmd);
intparamCount=paramList.size();
Expression[]params=paramList.toArray();
booleaninvalidParamCount;
switch(token.value){
caseSQLTokenizer.ABS:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionAbs();
break;
caseSQLTokenizer.ACOS:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionACos();
break;
caseSQLTokenizer.ASIN:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionASin();
break;
caseSQLTokenizer.ATAN:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionATan();
break;
caseSQLTokenizer.ATAN2:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionATan2();
break;
caseSQLTokenizer.CEILING:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionCeiling();
break;
caseSQLTokenizer.COS:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionCos();
break;
caseSQLTokenizer.COT:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionCot();
break;
caseSQLTokenizer.DEGREES:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionDegrees();
break;
caseSQLTokenizer.EXP:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionExp();
break;
caseSQLTokenizer.FLOOR:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionFloor();
break;
caseSQLTokenizer.LOG:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionLog();
break;
caseSQLTokenizer.LOG10:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionLog10();
break;
caseSQLTokenizer.MOD:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionMod();
break;
caseSQLTokenizer.PI:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionPI();
break;
caseSQLTokenizer.POWER:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionPower();
break;
caseSQLTokenizer.RADIANS:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionRadians();
break;
caseSQLTokenizer.RAND:
invalidParamCount=(paramCount!=ﻝ)&&(paramCount!=ﻝ);
expr=newExpressionFunctionRand();
break;
caseSQLTokenizer.ROUND:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionRound();
break;
caseSQLTokenizer.SIN:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionSin();
break;
caseSQLTokenizer.SIGN:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionSign();
break;
caseSQLTokenizer.SQRT:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionSqrt();
break;
caseSQLTokenizer.TAN:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionTan();
break;
caseSQLTokenizer.TRUNCATE:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionTruncate();
break;
caseSQLTokenizer.ASCII:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionAscii();
break;
caseSQLTokenizer.BITLEN:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionBitLen();
break;
caseSQLTokenizer.CHARLEN:
caseSQLTokenizer.CHARACTLEN:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionCharLen();
break;
caseSQLTokenizer.CHAR:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionChar();
break;
caseSQLTokenizer.CONCAT:
if(paramCount!=ﻝ){
invalidParamCount=true;
expr=null;
break;
}
invalidParamCount=false;
expr=newExpressionArithmetic(params[0],params[1],ExpressionArithmetic.ADD);
break;
caseSQLTokenizer.DIFFERENCE:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionDifference();
break;
caseSQLTokenizer.INSERT:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionInsert();
break;
caseSQLTokenizer.LCASE:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionLCase();
break;
caseSQLTokenizer.LEFT:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionLeft();
break;
caseSQLTokenizer.LENGTH:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionLength();
break;
caseSQLTokenizer.LOCATE:
invalidParamCount=(paramCount!=ﻝ)&&(paramCount!=ﻝ);
expr=newExpressionFunctionLocate();
break;
caseSQLTokenizer.LTRIM:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionLTrim();
break;
caseSQLTokenizer.OCTETLEN:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionOctetLen();
break;
caseSQLTokenizer.REPEAT:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionRepeat();
break;
caseSQLTokenizer.REPLACE:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionReplace();
break;
caseSQLTokenizer.RIGHT:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionRight();
break;
caseSQLTokenizer.RTRIM:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionRTrim();
break;
caseSQLTokenizer.SPACE:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionSpace();
break;
caseSQLTokenizer.SOUNDEX:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionSoundex();
break;
caseSQLTokenizer.SUBSTRING:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionSubstring();
break;
caseSQLTokenizer.UCASE:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionUCase();
break;
caseSQLTokenizer.CURDATE:
caseSQLTokenizer.CURRENTDATE:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.DATE),SQLTokenizer.DATE);
break;
caseSQLTokenizer.CURTIME:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIME),SQLTokenizer.TIME);
break;
caseSQLTokenizer.DAYOFMONTH:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionDayOfMonth();
break;
caseSQLTokenizer.DAYOFWEEK:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionDayOfWeek();
break;
caseSQLTokenizer.DAYOFYEAR:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionDayOfYear();
break;
caseSQLTokenizer.HOUR:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionHour();
break;
caseSQLTokenizer.MINUTE:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionMinute();
break;
caseSQLTokenizer.MONTH:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionMonth();
break;
caseSQLTokenizer.NOW:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);
break;
caseSQLTokenizer.YEAR:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionYear();
break;
caseSQLTokenizer.IIF:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionFunctionIIF();
break;
caseSQLTokenizer.SWITCH:
invalidParamCount=(paramCount%ﻝ!=ﻝ);
ExpressionFunctionCaseexprCase=newExpressionFunctionCase();
for(inti=ﻝ;i<paramCount-ﻝ;i+=ﻝ)
exprCase.addCase(params[i],params[i+1]);
exprCase.setEnd();
expr=exprCase;
break;
caseSQLTokenizer.IFNULL:
switch(paramCount){
case1:
returnnewExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);
case2:
invalidParamCount=false;
expr=newExpressionFunctionIIF();
Expression[]newParams=newExpression[3];
newParams[0]=newExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);
newParams[1]=params[1];
newParams[2]=params[0];
params=newParams;
paramCount=ﻝ;
break;
default:
invalidParamCount=true;
expr=null;
}
break;
caseSQLTokenizer.COUNT:
invalidParamCount=(paramCount!=ﻝ);
if(params[0].getType()==Expression.NAME){
ﺝparam=(ExpressionName)params[0];
if("*".equals(param.getName())&&param.getTableAlias()==null){
params[0]=newExpressionValue("*",SQLTokenizer.VARCHAR);
}
}
expr=newExpressionName(Expression.COUNT);
break;
caseSQLTokenizer.SUM:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionName(Expression.SUM);
break;
caseSQLTokenizer.MAX:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionName(Expression.MAX);
break;
caseSQLTokenizer.MIN:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionName(Expression.MIN);
break;
caseSQLTokenizer.FIRST:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionName(Expression.FIRST);
break;
caseSQLTokenizer.LAST:
invalidParamCount=(paramCount!=ﻝ);
expr=newExpressionName(Expression.LAST);
break;
caseSQLTokenizer.AVG:
if(paramCount!=ﻝ){
invalidParamCount=true;
expr=null;
break;
}
expr=newExpressionName(Expression.SUM);
expr.setParams(params);
ﺝexpr2=newExpressionName(Expression.COUNT);
expr2.setParams(params);
expr=newExpressionArithmetic(expr,expr2,ExpressionArithmetic.DIV);
returnexpr;
default:
throwcreateSyntaxError(token,Language.STXADD_FUNC_UNKNOWN);
}
if(invalidParamCount){
throwcreateSyntaxError(token,Language.STXADD_PARAM_INVALID_COUNT);
}
expr.setParams(params);
returnexpr;
}
privateRowSourcetableSource(Commandcmd,DataSourcestables)throwsSQLException{
SQLTokentoken=nextToken(MISSING_EXPRESSION);
switch(token.value){
caseSQLTokenizer.PARENTHESIS_L:
returnrowSource(cmd,tables,SQLTokenizer.PARENTHESIS_R);
caseSQLTokenizer.ESCAPE_L:
token=nextToken(MISSING_OJ);
returnrowSource(cmd,tables,SQLTokenizer.ESCAPE_R);
caseSQLTokenizer.SELECT:
ViewResultviewResult=newViewResult(con,select());
tables.add(viewResult);
returnviewResult;
}
ﺝcatalog=null;
ﺝname=getIdentifier(token);
token=nextToken();
if(token!=null&&token.value==SQLTokenizer.POINT){
catalog=name;
name=nextIdentifier();
token=nextToken();
}
TableViewtableView=Database.getTableView(con,catalog,name);
TableViewResulttable=TableViewResult.createResult(tableView);
tables.add(table);
if(token!=null&&token.value==SQLTokenizer.AS){
token=nextToken(MISSING_EXPRESSION);
table.setAlias(token.getName(sql));
}else{
previousToken();
}
returntable;
}
privateJoinjoin(Commandcmd,DataSourcestables,RowSourceleft,inttype)throwsSQLException{
RowSourceright=rowSource(cmd,tables,ﻝ);
SQLTokentoken=nextToken();
while(true){
if(token==null){
throwcreateSyntaxError(token,Language.STXADD_JOIN_INVALID);
}
switch(token.value){
caseSQLTokenizer.ON:
if(type==Join.RIGHT_JOIN)
returnnewJoin(Join.LEFT_JOIN,right,left,expression(cmd,ﻝ));
returnnewJoin(type,left,right,expression(cmd,ﻝ));
default:
if(!right.hasAlias()){
right.setAlias(token.getName(sql));
token=nextToken();
continue;
}
throwcreateSyntaxError(token,MISSING_ON);
}
}
}
privateRowSourcerowSource(Commandcmd,DataSourcestables,intparenthesis)throwsSQLException{
RowSourcefromSource=null;
fromSource=tableSource(cmd,tables);
while(true){
SQLTokentoken=nextToken();
if(token==null)returnfromSource;
switch(token.value){
caseSQLTokenizer.ON:
previousToken();
returnfromSource;
caseSQLTokenizer.CROSS:
nextToken(MISSING_JOIN);
caseSQLTokenizer.COMMA:
fromSource=newJoin(Join.CROSS_JOIN,fromSource,rowSource(cmd,tables,ﻝ),null);
break;
caseSQLTokenizer.INNER:
nextToken(MISSING_JOIN);
caseSQLTokenizer.JOIN:
fromSource=join(cmd,tables,fromSource,Join.INNER_JOIN);
break;
caseSQLTokenizer.LEFT:
token=nextToken(MISSING_OUTER_JOIN);
if(token.value==SQLTokenizer.OUTER)
token=nextToken(MISSING_JOIN);
fromSource=join(cmd,tables,fromSource,Join.LEFT_JOIN);
break;
caseSQLTokenizer.RIGHT:
token=nextToken(MISSING_OUTER_JOIN);
if(token.value==SQLTokenizer.OUTER)
token=nextToken(MISSING_JOIN);
fromSource=join(cmd,tables,fromSource,Join.RIGHT_JOIN);
break;
caseSQLTokenizer.FULL:
token=nextToken(MISSING_OUTER_JOIN);
if(token.value==SQLTokenizer.OUTER)
token=nextToken(MISSING_JOIN);
fromSource=join(cmd,tables,fromSource,Join.FULL_JOIN);
break;
caseSQLTokenizer.PARENTHESIS_R:
caseSQLTokenizer.ESCAPE_R:
if(parenthesis==token.value)returnfromSource;
if(parenthesis==ﻝ){
previousToken();
returnfromSource;
}
throwcreateSyntaxError(token,Language.STXADD_FROM_PAR_CLOSE);
default:
if(isKeyword(token)){
previousToken();
returnfromSource;
}
if(!fromSource.hasAlias()){
fromSource.setAlias(token.getName(sql));
break;
}
throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.GROUP,SQLTokenizer.ORDER,SQLTokenizer.HAVING});
}
}
}
privatevoidfrom(CommandSelectcmd)throwsSQLException{
DataSourcestables=newDataSources();
cmd.setTables(tables);
cmd.setSource(rowSource(cmd,tables,ﻝ));
SQLTokentoken;
while(null!=(token=nextToken())){
switch(token.value){
caseSQLTokenizer.WHERE:
where(cmd);
break;
caseSQLTokenizer.GROUP:
group(cmd);
break;
caseSQLTokenizer.HAVING:
having(cmd);
break;
default:
previousToken();
return;
}
}
}
privatevoidorder(CommandSelectcmd)throwsSQLException{
nextToken(MISSING_BY);
cmd.setOrder(expressionTokenList(cmd,SQLTokenizer.ORDER));
}
privatevoidlimit(CommandSelectselCmd)throwsSQLException{
SQLTokentoken=nextToken(MISSING_EXPRESSION);
try{
intmaxRows=Integer.parseInt(token.getName(sql));
selCmd.setMaxRows(maxRows);
}catch(NumberFormatExceptione){
throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));
}
}
privatevoidgroup(CommandSelectcmd)throwsSQLException{
nextToken(MISSING_BY);
cmd.setGroup(expressionTokenList(cmd,SQLTokenizer.GROUP));
}
privatevoidwhere(CommandSelectcmd)throwsSQLException{
cmd.setWhere(expression(cmd,ﻝ));
}
privatevoidhaving(CommandSelectcmd)throwsSQLException{
cmd.setHaving(expression(cmd,ﻝ));
}
privatestaticfinalint[]COMMANDS={SQLTokenizer.SELECT,SQLTokenizer.DELETE,SQLTokenizer.INSERT,SQLTokenizer.UPDATE,SQLTokenizer.CREATE,SQLTokenizer.DROP,SQLTokenizer.ALTER,SQLTokenizer.SET,SQLTokenizer.USE,SQLTokenizer.EXECUTE,SQLTokenizer.TRUNCATE};
privatestaticfinalint[]COMMANDS_ESCAPE={SQLTokenizer.D,SQLTokenizer.T,SQLTokenizer.TS,SQLTokenizer.FN,SQLTokenizer.CALL};
privatestaticfinalint[]COMMANDS_ALTER={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.PROCEDURE,};
privatestaticfinalint[]COMMANDS_CREATE={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE,SQLTokenizer.UNIQUE,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};
privatestaticfinalint[]COMMANDS_DROP={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE};
privatestaticfinalint[]COMMANDS_SET={SQLTokenizer.TRANSACTION};
privatestaticfinalint[]COMMANDS_CREATE_UNIQUE={SQLTokenizer.INDEX,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};
privatestaticfinalint[]MISSING_TABLE={SQLTokenizer.TABLE};
privatestaticfinalint[]ESCAPE_MISSING_CLOSE={SQLTokenizer.ESCAPE_R};
privatestaticfinalint[]MISSING_EXPRESSION={SQLTokenizer.VALUE};
privatestaticfinalint[]MISSING_IDENTIFIER={SQLTokenizer.IDENTIFIER};
privatestaticfinalint[]MISSING_BY={SQLTokenizer.BY};
privatestaticfinalint[]MISSING_PARENTHESIS_L={SQLTokenizer.PARENTHESIS_L};
privatestaticfinalint[]MISSING_PARENTHESIS_R={SQLTokenizer.PARENTHESIS_R};
privatestaticfinalint[]MISSING_DATATYPE={SQLTokenizer.BIT,SQLTokenizer.BOOLEAN,SQLTokenizer.BINARY,SQLTokenizer.VARBINARY,SQLTokenizer.RAW,SQLTokenizer.LONGVARBINARY,SQLTokenizer.BLOB,SQLTokenizer.TINYINT,SQLTokenizer.SMALLINT,SQLTokenizer.INT,SQLTokenizer.COUNTER,SQLTokenizer.BIGINT,SQLTokenizer.SMALLMONEY,SQLTokenizer.MONEY,SQLTokenizer.DECIMAL,SQLTokenizer.NUMERIC,SQLTokenizer.REAL,SQLTokenizer.FLOAT,SQLTokenizer.DOUBLE,SQLTokenizer.DATE,SQLTokenizer.TIME,SQLTokenizer.TIMESTAMP,SQLTokenizer.SMALLDATETIME,SQLTokenizer.CHAR,SQLTokenizer.NCHAR,SQLTokenizer.VARCHAR,SQLTokenizer.NVARCHAR,SQLTokenizer.LONG,SQLTokenizer.LONGNVARCHAR,SQLTokenizer.LONGVARCHAR,SQLTokenizer.CLOB,SQLTokenizer.NCLOB,SQLTokenizer.UNIQUEIDENTIFIER,SQLTokenizer.JAVA_OBJECT,SQLTokenizer.SYSNAME};
privatestaticfinalint[]MISSING_SQL_DATATYPE={SQLTokenizer.SQL_BIGINT,SQLTokenizer.SQL_BINARY,SQLTokenizer.SQL_BIT,SQLTokenizer.SQL_CHAR,SQLTokenizer.SQL_DATE,SQLTokenizer.SQL_DECIMAL,SQLTokenizer.SQL_DOUBLE,SQLTokenizer.SQL_FLOAT,SQLTokenizer.SQL_INTEGER,SQLTokenizer.SQL_LONGVARBINARY,SQLTokenizer.SQL_LONGVARCHAR,SQLTokenizer.SQL_REAL,SQLTokenizer.SQL_SMALLINT,SQLTokenizer.SQL_TIME,SQLTokenizer.SQL_TIMESTAMP,SQLTokenizer.SQL_TINYINT,SQLTokenizer.SQL_VARBINARY,SQLTokenizer.SQL_VARCHAR};
privatestaticfinalint[]MISSING_INTO={SQLTokenizer.INTO};
privatestaticfinalint[]MISSING_BETWEEN_IN={SQLTokenizer.BETWEEN,SQLTokenizer.IN};
privatestaticfinalint[]MISSING_NOT_NULL={SQLTokenizer.NOT,SQLTokenizer.NULL};
privatestaticfinalint[]MISSING_NULL={SQLTokenizer.NULL};
privatestaticfinalint[]MISSING_COMMA={SQLTokenizer.COMMA};
privatestaticfinalint[]MISSING_COMMA_PARENTHESIS={SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};
privatestaticfinalint[]MISSING_PARENTHESIS_VALUES_SELECT={SQLTokenizer.PARENTHESIS_L,SQLTokenizer.VALUES,SQLTokenizer.SELECT};
privatestaticfinalint[]MISSING_TOKEN_LIST={SQLTokenizer.COMMA,SQLTokenizer.FROM,SQLTokenizer.GROUP,SQLTokenizer.HAVING,SQLTokenizer.ORDER};
privatestaticfinalint[]MISSING_FROM={SQLTokenizer.FROM};
privatestaticfinalint[]MISSING_SET={SQLTokenizer.SET};
privatestaticfinalint[]MISSING_EQUALS={SQLTokenizer.EQUALS};
privatestaticfinalint[]MISSING_WHERE={SQLTokenizer.WHERE};
privatestaticfinalint[]MISSING_WHERE_COMMA={SQLTokenizer.WHERE,SQLTokenizer.COMMA};
privatestaticfinalint[]MISSING_ISOLATION={SQLTokenizer.ISOLATION};
privatestaticfinalint[]MISSING_LEVEL={SQLTokenizer.LEVEL};
privatestaticfinalint[]COMMANDS_TRANS_LEVEL={SQLTokenizer.READ,SQLTokenizer.REPEATABLE,SQLTokenizer.SERIALIZABLE};
privatestaticfinalint[]MISSING_READ={SQLTokenizer.READ};
privatestaticfinalint[]MISSING_COMM_UNCOMM={SQLTokenizer.COMMITTED,SQLTokenizer.UNCOMMITTED};
privatestaticfinalint[]MISSING_OPTIONS_DATATYPE={SQLTokenizer.DEFAULT,SQLTokenizer.IDENTITY,SQLTokenizer.NOT,SQLTokenizer.NULL,SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};
privatestaticfinalint[]MISSING_NUMBERVALUE={SQLTokenizer.NUMBERVALUE};
privatestaticfinalint[]MISSING_AND={SQLTokenizer.AND};
privatestaticfinalint[]MISSING_JOIN={SQLTokenizer.JOIN};
privatestaticfinalint[]MISSING_OUTER_JOIN={SQLTokenizer.OUTER,SQLTokenizer.JOIN};
privatestaticfinalint[]MISSING_OJ={SQLTokenizer.OJ};
privatestaticfinalint[]MISSING_ON={SQLTokenizer.ON};
privatestaticfinalint[]MISSING_KEYTYPE={SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.FOREIGN};
privatestaticfinalint[]MISSING_KEY={SQLTokenizer.KEY};
privatestaticfinalint[]MISSING_REFERENCES={SQLTokenizer.REFERENCES};
privatestaticfinalint[]MISSING_AS={SQLTokenizer.AS};
privatestaticfinalint[]MISSING_SELECT={SQLTokenizer.SELECT};
privatestaticfinalint[]MISSING_INTERVALS={SQLTokenizer.SQL_TSI_FRAC_SECOND,SQLTokenizer.SQL_TSI_SECOND,SQLTokenizer.SQL_TSI_MINUTE,SQLTokenizer.SQL_TSI_HOUR,SQLTokenizer.SQL_TSI_DAY,SQLTokenizer.SQL_TSI_WEEK,SQLTokenizer.SQL_TSI_MONTH,SQLTokenizer.SQL_TSI_QUARTER,SQLTokenizer.SQL_TSI_YEAR,SQLTokenizer.MILLISECOND,SQLTokenizer.SECOND,SQLTokenizer.MINUTE,SQLTokenizer.HOUR,SQLTokenizer.DAY,SQLTokenizer.WEEK,SQLTokenizer.MONTH,SQLTokenizer.QUARTER,SQLTokenizer.YEAR,SQLTokenizer.D};
privatestaticfinalint[]MISSING_ALL={SQLTokenizer.ALL};
privatestaticfinalint[]MISSING_THEN={SQLTokenizer.THEN};
privatestaticfinalint[]MISSING_WHEN_ELSE_END={SQLTokenizer.WHEN,SQLTokenizer.ELSE,SQLTokenizer.END};
privatestaticfinalint[]MISSING_ADD_ALTER_DROP={SQLTokenizer.ADD,SQLTokenizer.ALTER,SQLTokenizer.DROP};
}
packagesmallsql.database;
classSQLToken{
intvalue;
intoffset;
intlength;
ﺝname;
SQLToken(intvalue,inttokenStart,inttokenEnd){
this.value=value;
this.offset=tokenStart;
this.length=tokenEnd-tokenStart;
}
SQLToken(ﺝname,intvalue,inttokenStart,inttokenEnd){
this.value=value;
this.offset=tokenStart;
this.length=tokenEnd-tokenStart;
this.name=name;
}
ﺝgetName(char[]sql){
if(name!=null)returnname;
returnnewString(sql,offset,length);
}
}
packagesmallsql.database;
importjava.util.*;
importjava.sql.SQLException;
importjava.sql.Types;
importsmallsql.database.language.Language;
publicclassSQLTokenizer{
privatestaticﺝNOT_COMMENT=ﻝ;
privatestaticﺝLINE_COMMENT=ﻝ;
privatestaticﺝMULTI_COMMENT=ﻝ;
publicstaticListparseSQL(char[]sql)throwsSQLException{
SearchNodenode=searchTree;
ArrayListtokens=newArrayList();
intvalue=ﻝ;
inttokenStart=ﻝ;
booleanwasWhiteSpace=true;
intcomment=NOT_COMMENT;
charquote=ﻝ;
StringBufferquoteBuffer=newStringBuffer();
for(inti=ﻝ;i<sql.length;i++){
charc=sql[i];
switch(c){
case'\"':
case'\'':
if(comment!=NOT_COMMENT){
break;
}elseif(quote==ﻝ){
quote=c;
}elseif(quote==c){
if(i+1<sql.length&&sql[i+1]==quote){
quoteBuffer.append(quote);
i++;
}else{
tokens.add(newSQLToken(quoteBuffer.toString(),(quote=='\'')?STRING:IDENTIFIER,tokenStart,i+1));
quoteBuffer.setLength(0);
quote=ﻝ;
tokenStart=i+1;
wasWhiteSpace=true;
}
}elsequoteBuffer.append(c);
break;
case'.':
if(comment!=NOT_COMMENT){
break;
}elseif(quote==ﻝ){
intk=tokenStart;
if(k==i){
if(sql.length>k+1){
charcc=sql[k+1];
if((cc>='0')&&cc<='9')break;
}
}else{
for(;k<i;k++){
charcc=sql[k];
if((cc!='-'&&cc!='$'&&cc<'0')||cc>'9')break;
}
if(k>=i)break;
}
}
case'-':
if(comment!=NOT_COMMENT){
break;
}
elseif(c=='-'&&(i+1<sql.length)&&(sql[i+1]=='-')){
if(!wasWhiteSpace){
tokens.add(newSQLToken(value,tokenStart,i));
value=ﻝ;
}
i++;
tokenStart=i+1;
comment=LINE_COMMENT;
}
elseif(quote==ﻝ&&!wasWhiteSpace){
charc1=sql[tokenStart];
charcx=sql[i-1];
if(((c1>='0'&&c1<='9')||c1=='.')&&(cx=='e'||cx=='E'))
break;
if(c1=='$'&&tokenStart+1==i)
break;
}
case'':
case'\t':
case'\n':
case'\r':
case',':
case'(':
case')':
case'{':
case'}':
case'*':
case'+':
case'/':
case'%':
case'&':
case'|':
case'=':
case'<':
case'>':
case'?':
case'^':
case'~':
if(comment==LINE_COMMENT){
if(c=='\r'||c=='\n'){
comment=NOT_COMMENT;
wasWhiteSpace=true;
}
tokenStart=i+1;
break;
}
elseif(comment==MULTI_COMMENT){
if(c=='*'&&(i+1<sql.length)&&(sql[i+1]=='/')){
comment=NOT_COMMENT;
wasWhiteSpace=true;
i++;
}
tokenStart=i+ﻝ;
break;
}
elseif(quote==ﻝ){
if(!wasWhiteSpace){
tokens.add(newSQLToken(value,tokenStart,i));
value=ﻝ;
}
switch(c){
case'':
case'\t':
case'\n':
case'\r':
break;
case'<':
if((i+1<sql.length)&&(sql[i+1]=='>')){
tokens.add(newSQLToken(UNEQUALS,i,i+2));
i++;
break;
}
case'>':
if((i+1<sql.length)&&(sql[i+1]=='=')){
tokens.add(newSQLToken(ﻝ+c,i,i+ﻝ));
i++;
break;
}
case'/':
if((i+1<sql.length)&&(sql[i+1]=='*')){
i++;
tokenStart=i+1;
comment=MULTI_COMMENT;
break;
}
default:
tokens.add(newSQLToken(c,i,i+1));
}
wasWhiteSpace=true;
tokenStart=i+1;
}else{
quoteBuffer.append(c);
}
break;
default:
if(comment!=NOT_COMMENT){
break;
}elseif(quote==ﻝ){
if(wasWhiteSpace){
node=searchTree;
}else{
if(node==null){
value=ﻝ;
wasWhiteSpace=false;
break;
}
}
c|=0x20;
while(node!=null&&node.letter!=c)node=node.nextEntry;
if(node!=null){
value=node.value;
node=node.nextLetter;
}else{
value=ﻝ;
node=null;
}
}else{
quoteBuffer.append(c);
}
wasWhiteSpace=false;
break;
}
}
if(comment==MULTI_COMMENT){
throwSmallSQLException.create(Language.STXADD_COMMENT_OPEN);
}
if(!wasWhiteSpace){
tokens.add(newSQLToken(value,tokenStart,sql.length));
}
returntokens;
}
staticprivatevoidaddKeyWord(ﺝkeyword,intvalue){
keywords.put(Utils.getInteger(value),keyword);
char[]letters=keyword.toCharArray();
if(searchTree==null){
searchTree=newSearchNode();
searchTree.letter=(char)(letters[0]|0x20);
}
SearchNodeprev=null;
SearchNodenode=searchTree;
booleanwasNextEntry=true;
for(inti=ﻝ;i<letters.length;i++){
charc=(char)(letters[i]|0x20);
while(node!=null&&node.letter!=c){
prev=node;
node=node.nextEntry;
wasNextEntry=true;
}
if(node==null){
node=newSearchNode();
node.letter=c;
if(wasNextEntry)
prev.nextEntry=node;
elseprev.nextLetter=node;
wasNextEntry=false;
prev=node;
node=null;
}else{
prev=node;
node=node.nextLetter;
wasNextEntry=false;
}
}
prev.value=value;
}
staticfinalﺝgetKeyWord(intkey){
return(String)keywords.get(Utils.getInteger(key));
}
staticﺝgetSQLDataType(inttype){
switch(type){
caseSQLTokenizer.BIT:
returnTypes.BIT;
caseSQLTokenizer.BOOLEAN:
returnTypes.BOOLEAN;
caseSQLTokenizer.BINARY:
returnTypes.BINARY;
caseSQLTokenizer.VARBINARY:
returnTypes.VARBINARY;
caseSQLTokenizer.LONGVARBINARY:
returnTypes.LONGVARBINARY;
caseSQLTokenizer.BLOB:
returnTypes.BLOB;
caseSQLTokenizer.TINYINT:
returnTypes.TINYINT;
caseSQLTokenizer.SMALLINT:
returnTypes.SMALLINT;
caseSQLTokenizer.INT:
returnTypes.INTEGER;
caseSQLTokenizer.BIGINT:
returnTypes.BIGINT;
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.DECIMAL:
returnTypes.DECIMAL;
caseSQLTokenizer.NUMERIC:
returnTypes.NUMERIC;
caseSQLTokenizer.REAL:
returnTypes.REAL;
caseSQLTokenizer.FLOAT:
returnTypes.FLOAT;
caseSQLTokenizer.DOUBLE:
returnTypes.DOUBLE;
caseSQLTokenizer.DATE:
returnTypes.DATE;
caseSQLTokenizer.TIME:
returnTypes.TIME;
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.SMALLDATETIME:
returnTypes.TIMESTAMP;
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
returnTypes.CHAR;
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnTypes.VARCHAR;
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnTypes.LONGVARCHAR;
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
returnTypes.CLOB;
caseSQLTokenizer.JAVA_OBJECT:
returnTypes.JAVA_OBJECT;
caseSQLTokenizer.UNIQUEIDENTIFIER:
return-11;
caseSQLTokenizer.NULL:
returnTypes.NULL;
default:thrownewError("DataType:"+type);
}
}
staticSearchNodesearchTree;
staticHashtablekeywords=newHashtable(337);
staticﺝVALUE=ﻝ;
staticﺝSTRING=ﻝ;
staticﺝIDENTIFIER=ﻝ;
staticﺝNUMBERVALUE=ﻝ;
static{
keywords.put(newInteger(VALUE),"<expression>");
keywords.put(newInteger(IDENTIFIER),"<identifier>");
keywords.put(newInteger(NUMBERVALUE),"<number>");
}
staticﺝPERCENT='%';
staticﺝBIT_AND='&';
staticﺝPARENTHESIS_L='(';
staticﺝPARENTHESIS_R=')';
staticﺝASTERISK='*';
staticﺝPLUS='+';
staticﺝCOMMA=',';
staticﺝMINUS='-';
staticﺝPOINT='.';
staticﺝSLACH='/';
staticﺝLESSER='<';
staticﺝEQUALS='=';
staticﺝGREATER='>';
staticﺝQUESTION='?';
staticﺝBIT_XOR='^';
staticﺝESCAPE_L='{';
staticﺝBIT_OR='|';
staticﺝESCAPE_R='}';
staticﺝTILDE='~';
staticﺝLESSER_EQU=ﻝ+LESSER;
staticﺝUNEQUALS=ﻝ+EQUALS;
staticﺝGREATER_EQU=ﻝ+GREATER;
static{
keywords.put(newInteger(LESSER_EQU),	"<=");
keywords.put(newInteger(UNEQUALS),	"<>");
keywords.put(newInteger(GREATER_EQU),">=");
}
staticﺝSELECT=ﻝ;
staticﺝDELETE=ﻝ;
staticﺝINTO=ﻝ;
staticﺝUPDATE=ﻝ;
staticﺝCREATE=ﻝ;
staticﺝDROP=ﻝ;
staticﺝALTER=ﻝ;
staticﺝSET=ﻝ;
staticﺝEXECUTE=ﻝ;
staticﺝFROM=ﻝ;
staticﺝWHERE=ﻝ;
staticﺝGROUP=ﻝ;
staticﺝBY=ﻝ;
staticﺝHAVING=ﻝ;
staticﺝORDER=ﻝ;
staticﺝASC=ﻝ;
staticﺝDESC=ﻝ;
staticﺝVALUES=ﻝ;
staticﺝAS=ﻝ;
staticﺝDEFAULT=ﻝ;
staticﺝIDENTITY=ﻝ;
staticﺝINNER=ﻝ;
staticﺝJOIN=ﻝ;
staticﺝON=ﻝ;
staticﺝOUTER=ﻝ;
staticﺝFULL=ﻝ;
staticﺝCROSS=ﻝ;
staticﺝUSE		=ﻝ;
staticﺝTOP		=ﻝ;
staticﺝADD		=ﻝ;
staticﺝLIMIT=ﻝ;
staticﺝDATABASE=ﻝ;
staticﺝTABLE=ﻝ;
staticﺝVIEW=ﻝ;
staticﺝINDEX=ﻝ;
staticﺝPROCEDURE=ﻝ;
staticﺝTRANSACTION=ﻝ;
staticﺝISOLATION=ﻝ;
staticﺝLEVEL=ﻝ;
staticﺝREAD=ﻝ;
staticﺝCOMMITTED=ﻝ;
staticﺝUNCOMMITTED=ﻝ;
staticﺝREPEATABLE=ﻝ;
staticﺝSERIALIZABLE=ﻝ;
staticﺝCONSTRAINT=ﻝ;
staticﺝPRIMARY	=ﻝ;
staticﺝFOREIGN	=ﻝ;
staticﺝKEY		=ﻝ;
staticﺝUNIQUE	=ﻝ;
staticﺝCLUSTERED=ﻝ;
staticﺝNONCLUSTERED=ﻝ;
staticﺝREFERENCES=ﻝ;
staticﺝUNION		=ﻝ;
staticﺝALL		=ﻝ;
staticﺝDISTINCT=ﻝ;
staticﺝCASE		=ﻝ;
staticﺝWHEN		=ﻝ;
staticﺝTHEN		=ﻝ;
staticﺝELSE		=ﻝ;
staticﺝEND		=ﻝ;
staticﺝSWITCH	=ﻝ;
staticfinalﺝDESC_STR="DESC";
static{
addKeyWord("SELECT",SELECT);
addKeyWord("DELETE",DELETE);
addKeyWord("INTO",INTO);
addKeyWord("UPDATE",UPDATE);
addKeyWord("CREATE",CREATE);
addKeyWord("DROP",DROP);
addKeyWord("ALTER",ALTER);
addKeyWord("SET",SET);
addKeyWord("EXEC",EXECUTE);
addKeyWord("EXECUTE",EXECUTE);
addKeyWord("FROM",FROM);
addKeyWord("WHERE",WHERE);
addKeyWord("GROUP",GROUP);
addKeyWord("BY",BY);
addKeyWord("HAVING",HAVING);
addKeyWord("ORDER",ORDER);
addKeyWord("ASC",ASC);
addKeyWord(DESC_STR,DESC);
addKeyWord("VALUES",VALUES);
addKeyWord("AS",AS);
addKeyWord("DEFAULT",DEFAULT);
addKeyWord("AUTO_INCREMENT",IDENTITY);
addKeyWord("IDENTITY",IDENTITY);
addKeyWord("INNER",INNER);
addKeyWord("JOIN",JOIN);
addKeyWord("ON",ON);
addKeyWord("OUTER",OUTER);
addKeyWord("FULL",FULL);
addKeyWord("CROSS",CROSS);
addKeyWord("USE",USE);
addKeyWord("TOP",TOP);
addKeyWord("ADD",ADD);
addKeyWord("LIMIT",LIMIT);
addKeyWord("DATABASE",DATABASE);
addKeyWord("TABLE",TABLE);
addKeyWord("VIEW",VIEW);
addKeyWord("INDEX",INDEX);
addKeyWord("PROCEDURE",PROCEDURE);
addKeyWord("TRANSACTION",TRANSACTION);
addKeyWord("ISOLATION",ISOLATION);
addKeyWord("LEVEL",LEVEL);
addKeyWord("READ",READ);
addKeyWord("COMMITTED",COMMITTED);
addKeyWord("UNCOMMITTED",UNCOMMITTED);
addKeyWord("REPEATABLE",REPEATABLE);
addKeyWord("SERIALIZABLE",SERIALIZABLE);
addKeyWord("CONSTRAINT",	CONSTRAINT);
addKeyWord("PRIMARY",	PRIMARY);
addKeyWord("FOREIGN",	FOREIGN);
addKeyWord("KEY",		KEY);
addKeyWord("UNIQUE",		UNIQUE);
addKeyWord("CLUSTERED",	CLUSTERED);
addKeyWord("NONCLUSTERED",NONCLUSTERED);
addKeyWord("REFERENCES",REFERENCES);
addKeyWord("UNION",		UNION);
addKeyWord("ALL",		ALL);
addKeyWord("DISTINCT",	DISTINCT);
addKeyWord("CASE",		CASE);
addKeyWord("WHEN",		WHEN);
addKeyWord("THEN",		THEN);
addKeyWord("ELSE",		ELSE);
addKeyWord("END",		END);
addKeyWord("SWITCH",		SWITCH);
}
staticﺝBIT=ﻝ;
staticﺝBOOLEAN=ﻝ;
staticﺝBINARY=ﻝ;
staticﺝVARBINARY=ﻝ;
staticﺝRAW		=ﻝ;
staticﺝLONGVARBINARY=ﻝ;
staticﺝBLOB=ﻝ;
staticﺝTINYINT=ﻝ;
staticﺝSMALLINT=ﻝ;
staticﺝINT=ﻝ;
staticﺝCOUNTER=ﻝ;
staticﺝBIGINT=ﻝ;
staticﺝSMALLMONEY=ﻝ;
staticﺝMONEY=ﻝ;
staticﺝDECIMAL=ﻝ;
staticﺝNUMERIC=ﻝ;
staticﺝREAL=ﻝ;
staticﺝFLOAT=ﻝ;
staticﺝDOUBLE=ﻝ;
staticﺝDATE=ﻝ;
staticﺝTIME=ﻝ;
staticﺝTIMESTAMP=ﻝ;
staticﺝSMALLDATETIME=ﻝ;
staticﺝCHAR=ﻝ;
staticﺝNCHAR=ﻝ;
staticﺝVARCHAR=ﻝ;
staticﺝNVARCHAR=ﻝ;
staticﺝSYSNAME=ﻝ;
staticﺝLONGVARCHAR=ﻝ;
staticﺝLONGNVARCHAR=ﻝ;
staticﺝLONG=ﻝ;
staticﺝCLOB=ﻝ;
staticﺝNCLOB=ﻝ;
staticﺝUNIQUEIDENTIFIER=ﻝ;
staticﺝJAVA_OBJECT=ﻝ;
static{
addKeyWord("BIT",BIT);
addKeyWord("BOOLEAN",BOOLEAN);
addKeyWord("BINARY",BINARY);
addKeyWord("VARBINARY",VARBINARY);
addKeyWord("RAW",RAW);
addKeyWord("IMAGE",LONGVARBINARY);
addKeyWord("LONGVARBINARY",LONGVARBINARY);
addKeyWord("BLOB",BLOB);
addKeyWord("BYTE",TINYINT);
addKeyWord("TINYINT",TINYINT);
addKeyWord("SMALLINT",SMALLINT);
addKeyWord("INTEGER",INT);
addKeyWord("INT",INT);
addKeyWord("SERIAL",COUNTER);
addKeyWord("COUNTER",COUNTER);
addKeyWord("BIGINT",BIGINT);
addKeyWord("SMALLMONEY",SMALLMONEY);
addKeyWord("MONEY",MONEY);
addKeyWord("NUMBER",DECIMAL);
addKeyWord("VARNUM",DECIMAL);
addKeyWord("DECIMAL",DECIMAL);
addKeyWord("NUMERIC",NUMERIC);
addKeyWord("REAL",REAL);
addKeyWord("FLOAT",FLOAT);
addKeyWord("DOUBLE",DOUBLE);
addKeyWord("DATE",DATE);
addKeyWord("TIME",TIME);
addKeyWord("DATETIME",TIMESTAMP);
addKeyWord("TIMESTAMP",TIMESTAMP);
addKeyWord("SMALLDATETIME",SMALLDATETIME);
addKeyWord("CHARACTER",CHAR);
addKeyWord("CHAR",CHAR);
addKeyWord("NCHAR",NCHAR);
addKeyWord("VARCHAR2",VARCHAR);
addKeyWord("VARCHAR",VARCHAR);
addKeyWord("NVARCHAR2",NVARCHAR);
addKeyWord("NVARCHAR",NVARCHAR);
addKeyWord("SYSNAME",SYSNAME);
addKeyWord("TEXT",LONGVARCHAR);
addKeyWord("LONGVARCHAR",LONGVARCHAR);
addKeyWord("NTEXT",LONGNVARCHAR);
addKeyWord("LONGNVARCHAR",LONGNVARCHAR);
addKeyWord("LONG",LONG);
addKeyWord("CLOB",CLOB);
addKeyWord("NCLOB",NCLOB);
addKeyWord("UNIQUEIDENTIFIER",UNIQUEIDENTIFIER);
addKeyWord("SQL_VARIANT",JAVA_OBJECT);
addKeyWord("JAVA_OBJECT",JAVA_OBJECT);
}
staticﺝD=ﻝ;
staticﺝT=ﻝ;
staticﺝTS=ﻝ;
staticﺝFN=ﻝ;
staticﺝCALL=ﻝ;
staticﺝOJ=ﻝ;
static{
addKeyWord("D",D);
addKeyWord("T",T);
addKeyWord("TS",TS);
addKeyWord("FN",FN);
addKeyWord("CALL",CALL);
addKeyWord("OJ",OJ);
}
staticﺝOR=ﻝ;
staticﺝAND=ﻝ;
staticﺝIS=ﻝ;
staticﺝNOT=ﻝ;
staticﺝNULL=ﻝ;
staticﺝTRUE=ﻝ;
staticﺝFALSE=ﻝ;
staticﺝBETWEEN=ﻝ;
staticﺝLIKE=ﻝ;
staticﺝIN=ﻝ;
static{
addKeyWord("OR",OR);
addKeyWord("AND",AND);
addKeyWord("IS",IS);
addKeyWord("NOT",NOT);
addKeyWord("NULL",NULL);
addKeyWord("YES",TRUE);
addKeyWord("TRUE",TRUE);
addKeyWord("NO",	FALSE);
addKeyWord("FALSE",FALSE);
addKeyWord("BETWEEN",BETWEEN);
addKeyWord("LIKE",LIKE);
addKeyWord("IN",IN);
}
staticﺝABS=ﻝ;
staticﺝACOS=ﻝ;
staticﺝASIN=ﻝ;
staticﺝATAN=ﻝ;
staticﺝATANﻝ=ﻝ;
staticﺝCEILING=ﻝ;
staticﺝCOS=ﻝ;
staticﺝCOT=ﻝ;
staticﺝDEGREES=ﻝ;
staticﺝEXP=ﻝ;
staticﺝFLOOR=ﻝ;
staticﺝLOG=ﻝ;
staticﺝLOGﻝ=ﻝ;
staticﺝMOD=ﻝ;
staticﺝPI=ﻝ;
staticﺝPOWER=ﻝ;
staticﺝRADIANS=ﻝ;
staticﺝRAND=ﻝ;
staticﺝROUND=ﻝ;
staticﺝSIGN=ﻝ;
staticﺝSIN=ﻝ;
staticﺝSQRT=ﻝ;
staticﺝTAN=ﻝ;
staticﺝTRUNCATE=ﻝ;
static{
addKeyWord("ABS",ABS);
addKeyWord("ACOS",ACOS);
addKeyWord("ASIN",ASIN);
addKeyWord("ATAN",ATAN);
addKeyWord("ATN2",	ATAN2);
addKeyWord("ATAN2",ATAN2);
addKeyWord("CEILING",CEILING);
addKeyWord("COS",COS);
addKeyWord("COT",COT);
addKeyWord("DEGREES",DEGREES);
addKeyWord("EXP",EXP);
addKeyWord("FLOOR",FLOOR);
addKeyWord("LOG",LOG);
addKeyWord("LOG10",LOG10);
addKeyWord("MOD",MOD);
addKeyWord("PI",PI);
addKeyWord("POWER",POWER);
addKeyWord("RADIANS",RADIANS);
addKeyWord("RAND",RAND);
addKeyWord("ROUND",ROUND);
addKeyWord("SIGN",SIGN);
addKeyWord("SIN",SIN);
addKeyWord("SQRT",SQRT);
addKeyWord("TAN",TAN);
addKeyWord("TRUNCATE",TRUNCATE);
}
staticﺝASCII=ﻝ;
staticﺝBITLEN=ﻝ;
staticﺝCHARLEN=ﻝ;
staticﺝCHARACTLEN=ﻝ;
staticﺝ_CHAR=ﻝ;
staticﺝCONCAT=ﻝ;
staticﺝDIFFERENCE=ﻝ;
staticﺝINSERT=ﻝ;
staticﺝLCASE=ﻝ;
staticﺝLEFT=ﻝ;
staticﺝLENGTH=ﻝ;
staticﺝLOCATE=ﻝ;
staticﺝLTRIM=ﻝ;
staticﺝOCTETLEN=ﻝ;
staticﺝREPEAT=ﻝ;
staticﺝREPLACE=ﻝ;
staticﺝRIGHT=ﻝ;
staticﺝRTRIM=ﻝ;
staticﺝSOUNDEX=ﻝ;
staticﺝSPACE=ﻝ;
staticﺝSUBSTRING=ﻝ;
staticﺝTRIM=ﻝ;
staticﺝUCASE=ﻝ;
static{
addKeyWord("ASCII",ASCII);
addKeyWord("BIT_LENGTH",BITLEN);
addKeyWord("CHAR_LENGTH",CHARLEN);
addKeyWord("CHARACTER_LENGTH",CHARACTLEN);
keywords.put(newInteger(_CHAR),"CHAR");
addKeyWord("CONCAT",CONCAT);
addKeyWord("DIFFERENCE",DIFFERENCE);
addKeyWord("STUFF",INSERT);
addKeyWord("INSERT",INSERT);
addKeyWord("LCASE",LCASE);
addKeyWord("LEFT",LEFT);
addKeyWord("DATALENGTH",LENGTH);
addKeyWord("LEN",		LENGTH);
addKeyWord("LENGTH",LENGTH);
addKeyWord("CHARINDEX",LOCATE);
addKeyWord("LOCATE",LOCATE);
addKeyWord("LTRIM",LTRIM);
addKeyWord("OCTET_LENGTH",OCTETLEN);
addKeyWord("REPEAT",REPEAT);
addKeyWord("REPLACE",REPLACE);
addKeyWord("RIGHT",RIGHT);
addKeyWord("RTRIM",RTRIM);
addKeyWord("SOUNDEX",SOUNDEX);
addKeyWord("SPACE",SPACE);
addKeyWord("SUBSTRING",SUBSTRING);
addKeyWord("TRIM",TRIM);
addKeyWord("UCASE",UCASE);
}
staticﺝCURDATE=ﻝ;
staticﺝCURRENTDATE=ﻝ;
staticﺝCURTIME=ﻝ;
staticﺝDAYNAME=ﻝ;
staticﺝDAYOFMONTH=ﻝ;
staticﺝDAYOFWEEK=ﻝ;
staticﺝDAYOFYEAR=ﻝ;
staticﺝDAY		=ﻝ;
staticﺝHOUR=ﻝ;
staticﺝMILLISECOND=ﻝ;
staticﺝMINUTE=ﻝ;
staticﺝMONTH=ﻝ;
staticﺝMONTHNAME=ﻝ;
staticﺝNOW=ﻝ;
staticﺝQUARTER=ﻝ;
staticﺝSECOND=ﻝ;
staticﺝTIMESTAMPADD=ﻝ;
staticﺝTIMESTAMPDIFF=ﻝ;
staticﺝWEEK=ﻝ;
staticﺝYEAR=ﻝ;
static{
addKeyWord("CURDATE",CURDATE);
addKeyWord("CURTIME",CURTIME);
addKeyWord("CURRENT_DATE",CURRENTDATE);
addKeyWord("DAYNAME",DAYNAME);
addKeyWord("DAYOFMONTH",DAYOFMONTH);
addKeyWord("DAYOFWEEK",DAYOFWEEK);
addKeyWord("DAYOFYEAR",DAYOFYEAR);
addKeyWord("DAY",		DAY);
addKeyWord("HOUR",HOUR);
addKeyWord("MILLISECOND",MILLISECOND);
addKeyWord("MINUTE",MINUTE);
addKeyWord("MONTH",MONTH);
addKeyWord("MONTHNAME",MONTHNAME);
addKeyWord("GETDATE",NOW);
addKeyWord("NOW",NOW);
addKeyWord("QUARTER",QUARTER);
addKeyWord("SECOND",SECOND);
addKeyWord("DATEADD",		TIMESTAMPADD);
addKeyWord("TIMESTAMPADD",TIMESTAMPADD);
addKeyWord("DATEDIFF",		TIMESTAMPDIFF);
addKeyWord("TIMESTAMPDIFF",TIMESTAMPDIFF);
addKeyWord("WEEK",WEEK);
addKeyWord("YEAR",YEAR);
}
staticﺝSQL_TSI_FRAC_SECOND=ﻝ;
staticﺝSQL_TSI_SECOND		=ﻝ;
staticﺝSQL_TSI_MINUTE		=ﻝ;
staticﺝSQL_TSI_HOUR		=ﻝ;
staticﺝSQL_TSI_DAY		=ﻝ;
staticﺝSQL_TSI_WEEK		=ﻝ;
staticﺝSQL_TSI_MONTH		=ﻝ;
staticﺝSQL_TSI_QUARTER	=ﻝ;
staticﺝSQL_TSI_YEAR		=ﻝ;
static{
addKeyWord("MS",					SQL_TSI_FRAC_SECOND);
addKeyWord("SQL_TSI_FRAC_SECOND",	SQL_TSI_FRAC_SECOND);
addKeyWord("S",					SQL_TSI_SECOND);
addKeyWord("SS",					SQL_TSI_SECOND);
addKeyWord("SQL_TSI_SECOND",		SQL_TSI_SECOND);
addKeyWord("MI",					SQL_TSI_MINUTE);
addKeyWord("N",					SQL_TSI_MINUTE);
addKeyWord("SQL_TSI_MINUTE",		SQL_TSI_MINUTE);
addKeyWord("HH",					SQL_TSI_HOUR);
addKeyWord("SQL_TSI_HOUR",			SQL_TSI_HOUR);
addKeyWord("DD",					SQL_TSI_DAY);
addKeyWord("SQL_TSI_DAY",			SQL_TSI_DAY);
addKeyWord("WK",					SQL_TSI_WEEK);
addKeyWord("WW",					SQL_TSI_WEEK);
addKeyWord("SQL_TSI_WEEK",			SQL_TSI_WEEK);
addKeyWord("M",					SQL_TSI_MONTH);
addKeyWord("MM",					SQL_TSI_MONTH);
addKeyWord("SQL_TSI_MONTH",		SQL_TSI_MONTH);
addKeyWord("Q",					SQL_TSI_QUARTER);
addKeyWord("QQ",					SQL_TSI_QUARTER);
addKeyWord("SQL_TSI_QUARTER",		SQL_TSI_QUARTER);
addKeyWord("YY",					SQL_TSI_YEAR);
addKeyWord("YYYY",					SQL_TSI_YEAR);
addKeyWord("SQL_TSI_YEAR",			SQL_TSI_YEAR);
}
staticﺝIFNULL=ﻝ;
staticﺝUSER=ﻝ;
staticﺝCONVERT=ﻝ;
staticﺝCAST	=ﻝ;
staticﺝIIF	=ﻝ;
static{
addKeyWord("ISNULL",	IFNULL);
addKeyWord("IFNULL",IFNULL);
addKeyWord("USER",USER);
addKeyWord("CONVERT",CONVERT);
addKeyWord("CAST",	CAST);
addKeyWord("IIF",	IIF);
}
staticﺝSQL_BIGINT		=ﻝ;
staticﺝSQL_BINARY		=ﻝ;
staticﺝSQL_BIT		=ﻝ;
staticﺝSQL_CHAR		=ﻝ;
staticﺝSQL_DATE		=ﻝ;
staticﺝSQL_DECIMAL	=ﻝ;
staticﺝSQL_DOUBLE		=ﻝ;
staticﺝSQL_FLOAT		=ﻝ;
staticﺝSQL_INTEGER	=ﻝ;
staticﺝSQL_LONGVARBINARY	=ﻝ;
staticﺝSQL_LONGVARCHAR	=ﻝ;
staticﺝSQL_REAL		=ﻝ;
staticﺝSQL_SMALLINT	=ﻝ;
staticﺝSQL_TIME		=ﻝ;
staticﺝSQL_TIMESTAMP	=ﻝ;
staticﺝSQL_TINYINT	=ﻝ;
staticﺝSQL_VARBINARY	=ﻝ;
staticﺝSQL_VARCHAR	=ﻝ;
static{
addKeyWord("SQL_BIGINT",		SQL_BIGINT);
addKeyWord("SQL_BINARY",		SQL_BINARY);
addKeyWord("SQL_BIT",			SQL_BIT);
addKeyWord("SQL_CHAR",			SQL_CHAR);
addKeyWord("SQL_DATE",			SQL_DATE);
addKeyWord("SQL_DECIMAL",		SQL_DECIMAL);
addKeyWord("SQL_DOUBLE",		SQL_DOUBLE);
addKeyWord("SQL_FLOAT",		SQL_FLOAT);
addKeyWord("SQL_INTEGER",		SQL_INTEGER);
addKeyWord("SQL_LONGVARBINARY",SQL_LONGVARBINARY);
addKeyWord("SQL_LONGVARCHAR",	SQL_LONGVARCHAR);
addKeyWord("SQL_REAL",			SQL_REAL);
addKeyWord("SQL_SMALLINT",		SQL_SMALLINT);
addKeyWord("SQL_TIME",			SQL_TIME);
addKeyWord("SQL_TIMESTAMP",	SQL_TIMESTAMP);
addKeyWord("SQL_TINYINT",		SQL_TINYINT);
addKeyWord("SQL_VARBINARY",	SQL_VARBINARY);
addKeyWord("SQL_VARCHAR",		SQL_VARCHAR);
}
staticﺝCOUNT		=ﻝ;
staticﺝMIN		=ﻝ;
staticﺝMAX		=ﻝ;
staticﺝSUM		=ﻝ;
staticﺝFIRST		=ﻝ;
staticﺝLAST		=ﻝ;
staticﺝAVG		=ﻝ;
static{
addKeyWord("COUNT",	COUNT);
addKeyWord("MIN",	MIN);
addKeyWord("MAX",	MAX);
addKeyWord("SUM",	SUM);
addKeyWord("FIRST",FIRST);
addKeyWord("LAST",LAST);
addKeyWord("AVG",AVG);
}
}
classSearchNode{
intvalue;
charletter;
SearchNodenextLetter;
SearchNodenextEntry;
}
packagesmallsql.database;
importjava.sql.*;
importjava.math.*;
importjava.util.Map;
importjava.util.Calendar;
importjava.net.URL;
importjava.io.*;
importsmallsql.database.language.Language;
publicclassSSCallableStatementextendsSSPreparedStatementimplementsCallableStatement{
privatebooleanwasNull;
SSCallableStatement(SSConnectioncon,ﺝsql)throwsSQLException{
super(con,sql);
}
SSCallableStatement(SSConnectioncon,ﺝsql,intrsType,intrsConcurrency)throwsSQLException{
super(con,sql,rsType,rsConcurrency);
}
privateﺝgetValue(inti)throwsSQLException{
thrownewjava.lang.UnsupportedOperationException("MethodgetValue()notyetimplemented.");
}
ﺝfindParameter(ﺝparameterName){
thrownewjava.lang.UnsupportedOperationException("MethodfindParameter()notyetimplemented.");
}
publicvoidregisterOutParameter(inti,intsqlType)throwsSQLException{
thrownewjava.lang.UnsupportedOperationException("MethodregisterOutParameter()notyetimplemented.");
}
publicvoidregisterOutParameter(inti,intsqlType,intscale)throwsSQLException{
thrownewjava.lang.UnsupportedOperationException("MethodregisterOutParameter()notyetimplemented.");
}
publicbooleanwasNull(){
returnwasNull;
}
publicﺝgetString(inti)throwsSQLException{
try{
ﺝobj=getValue(i).getString();
wasNull=obj==null;
returnobj;
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleangetBoolean(inti)throwsSQLException{
try{
ﺝexpr=getValue(i);
wasNull=expr.isNull();
returnexpr.getBoolean();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbytegetByte(inti)throwsSQLException{
return(byte)getInt(i);
}
publicshortgetShort(inti)throwsSQLException{
return(byte)getInt(i);
}
publicintgetInt(inti)throwsSQLException{
try{
ﺝexpr=getValue(i);
wasNull=expr.isNull();
returnexpr.getInt();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publiclonggetLong(inti)throwsSQLException{
try{
ﺝexpr=getValue(i);
wasNull=expr.isNull();
returnexpr.getLong();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicfloatgetFloat(inti)throwsSQLException{
try{
ﺝexpr=getValue(i);
wasNull=expr.isNull();
returnexpr.getFloat();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicdoublegetDouble(inti)throwsSQLException{
try{
ﺝexpr=getValue(i);
wasNull=expr.isNull();
returnexpr.getLong();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicBigDecimalgetBigDecimal(inti,intscale)throwsSQLException{
try{
MutableNumericobj=getValue(i).getNumeric();
wasNull=obj==null;
if(wasNull)returnnull;
returnobj.toBigDecimal(scale);
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbyte[]getBytes(inti)throwsSQLException{
try{
byte[]obj=getValue(i).getBytes();
wasNull=obj==null;
returnobj;
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicDategetDate(inti)throwsSQLException{
try{
ﺝexpr=getValue(i);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnDateTime.getDate(expr.getLong());
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicTimegetTime(inti)throwsSQLException{
try{
ﺝexpr=getValue(i);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnDateTime.getTime(expr.getLong());
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicTimestampgetTimestamp(inti)throwsSQLException{
try{
ﺝexpr=getValue(i);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnDateTime.getTimestamp(expr.getLong());
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicObjectgetObject(inti)throwsSQLException{
try{
Objectobj=getValue(i).getObject();
wasNull=obj==null;
returnobj;
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicBigDecimalgetBigDecimal(inti)throwsSQLException{
try{
MutableNumericobj=getValue(i).getNumeric();
wasNull=obj==null;
if(wasNull)returnnull;
returnobj.toBigDecimal();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicObjectgetObject(inti,Mapmap)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodgetObject()notyetimplemented.");
}
publicRefgetRef(inti)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodgetRef()notyetimplemented.");
}
publicBlobgetBlob(inti)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodgetBlob()notyetimplemented.");
}
publicClobgetClob(inti)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodgetClob()notyetimplemented.");
}
publicArraygetArray(inti)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodgetArray()notyetimplemented.");
}
publicDategetDate(inti,Calendarcal)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodgetDate()notyetimplemented.");
}
publicTimegetTime(inti,Calendarcal)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodgetTime()notyetimplemented.");
}
publicTimestampgetTimestamp(inti,Calendarcal)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodgetTimestamp()notyetimplemented.");
}
publicvoidregisterOutParameter(inti,intsqlType,ﺝtypeName)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodregisterOutParameter()notyetimplemented.");
}
publicvoidregisterOutParameter(ﺝparameterName,intsqlType)throwsSQLException{
registerOutParameter(findParameter(parameterName),sqlType);
}
publicvoidregisterOutParameter(ﺝparameterName,intsqlType,intscale)throwsSQLException{
registerOutParameter(findParameter(parameterName),sqlType,scale);
}
publicvoidregisterOutParameter(ﺝparameterName,intsqlType,ﺝtypeName)throwsSQLException{
registerOutParameter(findParameter(parameterName),sqlType,typeName);
}
publicURLgetURL(intparameterIndex)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"MethodgetURL()notyetimplemented.");
}
publicvoidsetURL(ﺝparameterName,URLx)throwsSQLException{
setURL(findParameter(parameterName),x);
}
publicvoidsetNull(ﺝparameterName,intsqlType)throwsSQLException{
setNull(findParameter(parameterName),sqlType);
}
publicvoidsetBoolean(ﺝparameterName,booleanx)throwsSQLException{
setBoolean(findParameter(parameterName),x);
}
publicvoidsetByte(ﺝparameterName,bytex)throwsSQLException{
setByte(findParameter(parameterName),x);
}
publicvoidsetShort(ﺝparameterName,shortx)throwsSQLException{
setShort(findParameter(parameterName),x);
}
publicvoidsetInt(ﺝparameterName,intx)throwsSQLException{
setInt(findParameter(parameterName),x);
}
publicvoidsetLong(ﺝparameterName,longx)throwsSQLException{
setLong(findParameter(parameterName),x);
}
publicvoidsetFloat(ﺝparameterName,floatx)throwsSQLException{
setFloat(findParameter(parameterName),x);
}
publicvoidsetDouble(ﺝparameterName,doublex)throwsSQLException{
setDouble(findParameter(parameterName),x);
}
publicvoidsetBigDecimal(ﺝparameterName,BigDecimalx)throwsSQLException{
setBigDecimal(findParameter(parameterName),x);
}
publicvoidsetString(ﺝparameterName,ﺝx)throwsSQLException{
setString(findParameter(parameterName),x);
}
publicvoidsetBytes(ﺝparameterName,byte[]x)throwsSQLException{
setBytes(findParameter(parameterName),x);
}
publicvoidsetDate(ﺝparameterName,Datex)throwsSQLException{
setDate(findParameter(parameterName),x);
}
publicvoidsetTime(ﺝparameterName,Timex)throwsSQLException{
setTime(findParameter(parameterName),x);
}
publicvoidsetTimestamp(ﺝparameterName,Timestampx)throwsSQLException{
setTimestamp(findParameter(parameterName),x);
}
publicvoidsetAsciiStream(ﺝparameterName,InputStreamx,intlength)throwsSQLException{
setAsciiStream(findParameter(parameterName),x,length);
}
publicvoidsetBinaryStream(ﺝparameterName,InputStreamx,intlength)throwsSQLException{
setBinaryStream(findParameter(parameterName),x,length);
}
publicvoidsetObject(ﺝparameterName,Objectx,intsqlType,intscale)throwsSQLException{
setObject(findParameter(parameterName),x,sqlType,scale);
}
publicvoidsetObject(ﺝparameterName,Objectx,intsqlType)throwsSQLException{
setObject(findParameter(parameterName),x,sqlType);
}
publicvoidsetObject(ﺝparameterName,Objectx)throwsSQLException{
setObject(findParameter(parameterName),x);
}
publicvoidsetCharacterStream(ﺝparameterName,Readerx,intlength)throwsSQLException{
setCharacterStream(findParameter(parameterName),x,length);
}
publicvoidsetDate(ﺝparameterName,Datex,Calendarcal)throwsSQLException{
setDate(findParameter(parameterName),x,cal);
}
publicvoidsetTime(ﺝparameterName,Timex,Calendarcal)throwsSQLException{
setTime(findParameter(parameterName),x,cal);
}
publicvoidsetTimestamp(ﺝparameterName,Timestampx,Calendarcal)throwsSQLException{
setTimestamp(findParameter(parameterName),x,cal);
}
publicvoidsetNull(ﺝparameterName,intsqlType,ﺝtypeName)throwsSQLException{
setNull(findParameter(parameterName),sqlType,typeName);
}
publicﺝgetString(ﺝparameterName)throwsSQLException{
returngetString(findParameter(parameterName));
}
publicbooleangetBoolean(ﺝparameterName)throwsSQLException{
returngetBoolean(findParameter(parameterName));
}
publicbytegetByte(ﺝparameterName)throwsSQLException{
returngetByte(findParameter(parameterName));
}
publicshortgetShort(ﺝparameterName)throwsSQLException{
returngetShort(findParameter(parameterName));
}
publicintgetInt(ﺝparameterName)throwsSQLException{
returngetInt(findParameter(parameterName));
}
publiclonggetLong(ﺝparameterName)throwsSQLException{
returngetLong(findParameter(parameterName));
}
publicfloatgetFloat(ﺝparameterName)throwsSQLException{
returngetFloat(findParameter(parameterName));
}
publicdoublegetDouble(ﺝparameterName)throwsSQLException{
returngetDouble(findParameter(parameterName));
}
publicbyte[]getBytes(ﺝparameterName)throwsSQLException{
returngetBytes(findParameter(parameterName));
}
publicDategetDate(ﺝparameterName)throwsSQLException{
returngetDate(findParameter(parameterName));
}
publicTimegetTime(ﺝparameterName)throwsSQLException{
returngetTime(findParameter(parameterName));
}
publicTimestampgetTimestamp(ﺝparameterName)throwsSQLException{
returngetTimestamp(findParameter(parameterName));
}
publicObjectgetObject(ﺝparameterName)throwsSQLException{
returngetObject(findParameter(parameterName));
}
publicBigDecimalgetBigDecimal(ﺝparameterName)throwsSQLException{
returngetBigDecimal(findParameter(parameterName));
}
publicObjectgetObject(ﺝparameterName,Mapmap)throwsSQLException{
returngetObject(findParameter(parameterName),map);
}
publicRefgetRef(ﺝparameterName)throwsSQLException{
returngetRef(findParameter(parameterName));
}
publicBlobgetBlob(ﺝparameterName)throwsSQLException{
returngetBlob(findParameter(parameterName));
}
publicClobgetClob(ﺝparameterName)throwsSQLException{
returngetClob(findParameter(parameterName));
}
publicArraygetArray(ﺝparameterName)throwsSQLException{
returngetArray(findParameter(parameterName));
}
publicDategetDate(ﺝparameterName,Calendarcal)throwsSQLException{
returngetDate(findParameter(parameterName),cal);
}
publicTimegetTime(ﺝparameterName,Calendarcal)throwsSQLException{
returngetTime(findParameter(parameterName),cal);
}
publicTimestampgetTimestamp(ﺝparameterName,Calendarcal)throwsSQLException{
returngetTimestamp(findParameter(parameterName),cal);
}
publicURLgetURL(ﺝparameterName)throwsSQLException{
returngetURL(findParameter(parameterName));
}
}
packagesmallsql.database;
importjava.nio.channels.FileChannel;
importjava.sql.CallableStatement;
importjava.sql.Connection;
importjava.sql.DatabaseMetaData;
importjava.sql.PreparedStatement;
importjava.sql.SQLException;
importjava.sql.SQLWarning;
importjava.sql.Savepoint;
importjava.sql.Statement;
importjava.util.ArrayList;
importjava.util.List;
importjava.util.Map;
importjava.util.Properties;
importsmallsql.database.language.Language;
publicclassSSConnectionimplementsConnection{
privatefinalbooleanreadonly;
privateDatabasedatabase;
privatebooleanautoCommit=true;
intisolationLevel=TRANSACTION_READ_COMMITTED;
privateListcommitPages=newArrayList();
privatelongtransactionTime;
privatefinalSSDatabaseMetaDatametadata;
ﺝholdability;
finalLoggerlog;
SSConnection(Propertiesprops)throwsSQLException{
SmallSQLException.setLanguage(props.get("locale"));
log=newLogger();
ﺝname=props.getProperty("dbpath");
readonly="true".equals(props.getProperty("readonly"));
booleancreate="true".equals(props.getProperty("create"));
database=Database.getDatabase(name,this,create);
metadata=newSSDatabaseMetaData(this);
}
SSConnection(SSConnectioncon){
readonly=con.readonly;
database=con.database;
metadata=con.metadata;
log=con.log;
}
DatabasegetDatabase(booleanreturnNull)throwsSQLException{
testClosedConnection();
if(!returnNull&&database==null)throwSmallSQLException.create(Language.DB_NOTCONNECTED);
returndatabase;
}
ObjectgetMonitor(){
returnthis;
}
publicStatementcreateStatement()throwsSQLException{
returnnewSSStatement(this);
}
publicPreparedStatementprepareStatement(ﺝsql)throwsSQLException{
returnnewSSPreparedStatement(this,sql);
}
publicCallableStatementprepareCall(ﺝsql)throwsSQLException{
returnnewSSCallableStatement(this,sql);
}
publicﺝnativeSQL(ﺝsql){
returnsql;
}
publicvoidsetAutoCommit(booleanautoCommit)throwsSQLException{
if(log.isLogging())log.println("AutoCommit:"+autoCommit);
if(this.autoCommit!=autoCommit){
commit();
this.autoCommit=autoCommit;
}
}
publicbooleangetAutoCommit(){
returnautoCommit;
}
voidadd(TransactionStepstorePage)throwsSQLException{
testClosedConnection();
synchronized(getMonitor()){
commitPages.add(storePage);
}
}
publicvoidcommit()throwsSQLException{
log.println("Commit");
testClosedConnection();
synchronized(getMonitor()){
try{
intcount=commitPages.size();
for(inti=ﻝ;i<count;i++){
TransactionSteppage=(TransactionStep)commitPages.get(i);
page.commit();
}
for(inti=ﻝ;i<count;i++){
TransactionSteppage=(TransactionStep)commitPages.get(i);
page.freeLock();
}
commitPages.clear();
transactionTime=System.currentTimeMillis();
}catch(Throwablee){
rollback();
throwSmallSQLException.createFromException(e);
}
}
}
voidrollbackFile(FileChannelraFile)throwsSQLException{
testClosedConnection();
synchronized(getMonitor()){
for(inti=commitPages.size()-ﻝ;i>=ﻝ;i--){
TransactionSteppage=(TransactionStep)commitPages.get(i);
if(page.raFile==raFile){
page.rollback();
page.freeLock();
}
}
}
}
voidrollback(intsavepoint)throwsSQLException{
testClosedConnection();
synchronized(getMonitor()){
for(inti=commitPages.size()-ﻝ;i>=savepoint;i--){
TransactionSteppage=(TransactionStep)commitPages.remove(i);
page.rollback();
page.freeLock();
}
}
}
publicvoidrollback()throwsSQLException{
log.println("Rollback");
testClosedConnection();
synchronized(getMonitor()){
intcount=commitPages.size();
for(inti=ﻝ;i<count;i++){
TransactionSteppage=(TransactionStep)commitPages.get(i);
page.rollback();
page.freeLock();
}
commitPages.clear();
transactionTime=System.currentTimeMillis();
}
}
publicvoidclose()throwsSQLException{
rollback();
database=null;
commitPages=null;
Database.closeConnection(this);
}
ﺝtestClosedConnection()throwsSQLException{
if(isClosed())throwSmallSQLException.create(Language.CONNECTION_CLOSED);
}
publicbooleanisClosed(){
return(commitPages==null);
}
publicDatabaseMetaDatagetMetaData(){
returnmetadata;
}
publicvoidsetReadOnly(booleanreadOnly){
}
publicbooleanisReadOnly(){
returnreadonly;
}
publicvoidsetCatalog(ﺝcatalog)throwsSQLException{
testClosedConnection();
database=Database.getDatabase(catalog,this,false);
}
publicﺝgetCatalog(){
if(database==null)
return"";
returndatabase.getName();
}
publicvoidsetTransactionIsolation(intlevel)throwsSQLException{
if(!metadata.supportsTransactionIsolationLevel(level)){
throwSmallSQLException.create(Language.ISOLATION_UNKNOWN,String.valueOf(level));
}
isolationLevel=level;
}
publicintgetTransactionIsolation(){
returnisolationLevel;
}
publicSQLWarninggetWarnings(){
returnnull;
}
publicvoidclearWarnings(){
}
publicStatementcreateStatement(intresultSetType,intresultSetConcurrency)throwsSQLException{
returnnewSSStatement(this,resultSetType,resultSetConcurrency);
}
publicPreparedStatementprepareStatement(ﺝsql,intresultSetType,intresultSetConcurrency)throwsSQLException{
returnnewSSPreparedStatement(this,sql,resultSetType,resultSetConcurrency);
}
publicCallableStatementprepareCall(ﺝsql,intresultSetType,intresultSetConcurrency)throwsSQLException{
returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);
}
publicMapgetTypeMap(){
returnnull;
}
publicvoidsetTypeMap(Mapmap){
}
publicvoidsetHoldability(intholdability){
this.holdability=holdability;
}
publicintgetHoldability(){
returnholdability;
}
intgetSavepoint()throwsSQLException{
testClosedConnection();
returncommitPages.size();
}
publicSavepointsetSavepoint()throwsSQLException{
returnnewSSSavepoint(getSavepoint(),null,transactionTime);
}
publicSavepointsetSavepoint(ﺝname)throwsSQLException{
returnnewSSSavepoint(getSavepoint(),name,transactionTime);
}
publicvoidrollback(Savepointsavepoint)throwsSQLException{
if(savepointinstanceofSSSavepoint){
if(((SSSavepoint)savepoint).transactionTime!=transactionTime){
throwSmallSQLException.create(Language.SAVEPT_INVALID_TRANS);
}
rollback(savepoint.getSavepointId());
return;
}
throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,savepoint);
}
publicvoidreleaseSavepoint(Savepointsavepoint)throwsSQLException{
if(savepointinstanceofSSSavepoint){
((SSSavepoint)savepoint).transactionTime=ﻝ;
return;
}
throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,newObject[]{savepoint});
}
publicStatementcreateStatement(intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{
returnnewSSStatement(this,resultSetType,resultSetConcurrency);
}
publicPreparedStatementprepareStatement(ﺝsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{
returnnewSSPreparedStatement(this,sql);
}
publicCallableStatementprepareCall(ﺝsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{
returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);
}
publicPreparedStatementprepareStatement(ﺝsql,intautoGeneratedKeys)throwsSQLException{
SSPreparedStatementpr=newSSPreparedStatement(this,sql);
pr.setNeedGeneratedKeys(autoGeneratedKeys);
returnpr;
}
publicPreparedStatementprepareStatement(ﺝsql,int[]columnIndexes)throwsSQLException{
SSPreparedStatementpr=newSSPreparedStatement(this,sql);
pr.setNeedGeneratedKeys(columnIndexes);
returnpr;
}
publicPreparedStatementprepareStatement(ﺝsql,String[]columnNames)throwsSQLException{
SSPreparedStatementpr=newSSPreparedStatement(this,sql);
pr.setNeedGeneratedKeys(columnNames);
returnpr;
}
}
packagesmallsql.database;
importjava.sql.*;
importjava.util.ArrayList;
finalclassSSDatabaseMetaDataimplementsDatabaseMetaData{
finalprivateSSConnectioncon;
finalprivateSSStatementst;
SSDatabaseMetaData(SSConnectioncon)throwsSQLException{
this.con=con;
st=newSSStatement(con);
}
publicbooleanallProceduresAreCallable(){
ﺝ
}
publicbooleanallTablesAreSelectable(){
ﺝ
}
publicﺝgetURL()throwsSQLException{
Databasedatabase=con.getDatabase(true);
if(database==null)
returnSSDriver.URL_PREFIX;
returnSSDriver.URL_PREFIX+':'+database.getName();
}
publicﺝgetUserName(){
return"";
}
publicbooleanisReadOnly(){
ﺝ
}
publicbooleannullsAreSortedHigh(){
ﺝ
}
publicbooleannullsAreSortedLow(){
ﺝ
}
publicbooleannullsAreSortedAtStart(){
ﺝ
}
publicbooleannullsAreSortedAtEnd(){
ﺝ
}
publicﺝgetDatabaseProductName(){
return"SmallSQLDatabase";
}
publicﺝgetDatabaseProductVersion(){
returngetDriverVersion();
}
publicﺝgetDriverName(){
return"SmallSQLDriver";
}
publicﺝgetDriverVersion(){
returngetDriverMajorVersion()+"."+SSDriver.drv.getMinorVersion();
}
publicintgetDriverMajorVersion(){
returnSSDriver.drv.getMajorVersion();
}
publicintgetDriverMinorVersion(){
returnSSDriver.drv.getMinorVersion();
}
publicbooleanusesLocalFiles(){
ﺝ
}
publicbooleanusesLocalFilePerTable(){
ﺝ
}
publicbooleansupportsMixedCaseIdentifiers(){
ﺝ
}
publicbooleanstoresUpperCaseIdentifiers(){
ﺝ
}
publicbooleanstoresLowerCaseIdentifiers(){
ﺝ
}
publicbooleanstoresMixedCaseIdentifiers(){
ﺝ
}
publicbooleansupportsMixedCaseQuotedIdentifiers(){
ﺝ
}
publicbooleanstoresUpperCaseQuotedIdentifiers(){
ﺝ
}
publicbooleanstoresLowerCaseQuotedIdentifiers(){
ﺝ
}
publicbooleanstoresMixedCaseQuotedIdentifiers(){
ﺝ
}
publicﺝgetIdentifierQuoteString(){
return"\"";
}
publicﺝgetSQLKeywords(){
return"database,use";
}
privateﺝgetFunctions(intfrom,intto){
StringBufferbuf=newStringBuffer();
for(inti=from;i<=to;i++){
if(i!=from)buf.append(',');
buf.append(SQLTokenizer.getKeyWord(i));
}
returnbuf.toString();
}
publicﺝgetNumericFunctions(){
returngetFunctions(SQLTokenizer.ABS,SQLTokenizer.TRUNCATE);
}
publicﺝgetStringFunctions(){
returngetFunctions(SQLTokenizer.ASCII,SQLTokenizer.UCASE);
}
publicﺝgetSystemFunctions(){
returngetFunctions(SQLTokenizer.IFNULL,SQLTokenizer.IIF);
}
publicﺝgetTimeDateFunctions(){
returngetFunctions(SQLTokenizer.CURDATE,SQLTokenizer.YEAR);
}
publicﺝgetSearchStringEscape(){
return"\\";
}
publicﺝgetExtraNameCharacters(){
return"#$ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ";
}
publicbooleansupportsAlterTableWithAddColumn(){
thrownewjava.lang.UnsupportedOperationException("MethodsupportsAlterTableWithAddColumn()notyetimplemented.");
}
publicbooleansupportsAlterTableWithDropColumn(){
thrownewjava.lang.UnsupportedOperationException("MethodsupportsAlterTableWithDropColumn()notyetimplemented.");
}
publicbooleansupportsColumnAliasing(){
ﺝ
}
publicbooleannullPlusNonNullIsNull(){
ﺝ
}
publicbooleansupportsConvert(){
ﺝ
}
publicbooleansupportsConvert(intfromType,inttoType){
ﺝ
}
publicbooleansupportsTableCorrelationNames(){
ﺝ
}
publicbooleansupportsDifferentTableCorrelationNames(){
ﺝ
}
publicbooleansupportsExpressionsInOrderBy(){
ﺝ
}
publicbooleansupportsOrderByUnrelated(){
ﺝ
}
publicbooleansupportsGroupBy(){
ﺝ
}
publicbooleansupportsGroupByUnrelated(){
ﺝ
}
publicbooleansupportsGroupByBeyondSelect(){
ﺝ
}
publicbooleansupportsLikeEscapeClause(){
ﺝ
}
publicbooleansupportsMultipleResultSets(){
ﺝ
}
publicbooleansupportsMultipleTransactions(){
ﺝ
}
publicbooleansupportsNonNullableColumns(){
ﺝ
}
publicbooleansupportsMinimumSQLGrammar(){
ﺝ
}
publicbooleansupportsCoreSQLGrammar(){
ﺝ
}
publicbooleansupportsExtendedSQLGrammar(){
ﺝ
}
publicbooleansupportsANSI92EntryLevelSQL(){
ﺝ
}
publicbooleansupportsANSI92IntermediateSQL(){
ﺝ
}
publicbooleansupportsANSI92FullSQL(){
ﺝ
}
publicbooleansupportsIntegrityEnhancementFacility(){
ﺝ
}
publicbooleansupportsOuterJoins(){
ﺝ
}
publicbooleansupportsFullOuterJoins(){
ﺝ
}
publicbooleansupportsLimitedOuterJoins(){
ﺝ
}
publicﺝgetSchemaTerm(){
return"owner";
}
publicﺝgetProcedureTerm(){
return"procedure";
}
publicﺝgetCatalogTerm(){
return"database";
}
publicbooleanisCatalogAtStart(){
ﺝ
}
publicﺝgetCatalogSeparator(){
return".";
}
publicbooleansupportsSchemasInDataManipulation(){
ﺝ
}
publicbooleansupportsSchemasInProcedureCalls(){
ﺝ
}
publicbooleansupportsSchemasInTableDefinitions(){
ﺝ
}
publicbooleansupportsSchemasInIndexDefinitions(){
ﺝ
}
publicbooleansupportsSchemasInPrivilegeDefinitions(){
ﺝ
}
publicbooleansupportsCatalogsInDataManipulation(){
ﺝ
}
publicbooleansupportsCatalogsInProcedureCalls(){
ﺝ
}
publicbooleansupportsCatalogsInTableDefinitions(){
ﺝ
}
publicbooleansupportsCatalogsInIndexDefinitions(){
ﺝ
}
publicbooleansupportsCatalogsInPrivilegeDefinitions(){
ﺝ
}
publicbooleansupportsPositionedDelete(){
ﺝ
}
publicbooleansupportsPositionedUpdate(){
ﺝ
}
publicbooleansupportsSelectForUpdate(){
ﺝ
}
publicbooleansupportsStoredProcedures(){
ﺝ
}
publicbooleansupportsSubqueriesInComparisons(){
ﺝ
}
publicbooleansupportsSubqueriesInExists(){
ﺝ
}
publicbooleansupportsSubqueriesInIns(){
ﺝ
}
publicbooleansupportsSubqueriesInQuantifieds(){
ﺝ
}
publicbooleansupportsCorrelatedSubqueries(){
ﺝ
}
publicbooleansupportsUnion(){
ﺝ
}
publicbooleansupportsUnionAll(){
ﺝ
}
publicbooleansupportsOpenCursorsAcrossCommit(){
ﺝ
}
publicbooleansupportsOpenCursorsAcrossRollback(){
ﺝ
}
publicbooleansupportsOpenStatementsAcrossCommit(){
ﺝ
}
publicbooleansupportsOpenStatementsAcrossRollback(){
ﺝ
}
publicintgetMaxBinaryLiteralLength(){
returnﻝ;
}
publicintgetMaxCharLiteralLength(){
returnﻝ;
}
publicintgetMaxColumnNameLength(){
returnﻝ;
}
publicintgetMaxColumnsInGroupBy(){
returnﻝ;
}
publicintgetMaxColumnsInIndex(){
returnﻝ;
}
publicintgetMaxColumnsInOrderBy(){
returnﻝ;
}
publicintgetMaxColumnsInSelect(){
returnﻝ;
}
publicintgetMaxColumnsInTable(){
returnﻝ;
}
publicintgetMaxConnections(){
returnﻝ;
}
publicintgetMaxCursorNameLength(){
returnﻝ;
}
publicintgetMaxIndexLength(){
returnﻝ;
}
publicintgetMaxSchemaNameLength(){
returnﻝ;
}
publicintgetMaxProcedureNameLength(){
returnﻝ;
}
publicintgetMaxCatalogNameLength(){
returnﻝ;
}
publicintgetMaxRowSize(){
returnﻝ;
}
publicbooleandoesMaxRowSizeIncludeBlobs(){
ﺝ
}
publicintgetMaxStatementLength(){
returnﻝ;
}
publicintgetMaxStatements(){
returnﻝ;
}
publicintgetMaxTableNameLength(){
returnﻝ;
}
publicintgetMaxTablesInSelect(){
returnﻝ;
}
publicintgetMaxUserNameLength(){
returnﻝ;
}
publicintgetDefaultTransactionIsolation(){
returnConnection.TRANSACTION_READ_COMMITTED;
}
publicbooleansupportsTransactions(){
ﺝ
}
publicbooleansupportsTransactionIsolationLevel(intlevel){
switch(level){
caseConnection.TRANSACTION_NONE:
caseConnection.TRANSACTION_READ_UNCOMMITTED:
caseConnection.TRANSACTION_READ_COMMITTED:
caseConnection.TRANSACTION_REPEATABLE_READ:
caseConnection.TRANSACTION_SERIALIZABLE:
ﺝ
}
ﺝ
}
publicbooleansupportsDataDefinitionAndDataManipulationTransactions(){
ﺝ
}
publicbooleansupportsDataManipulationTransactionsOnly(){
ﺝ
}
publicbooleandataDefinitionCausesTransactionCommit(){
ﺝ
}
publicbooleandataDefinitionIgnoredInTransactions(){
ﺝ
}
publicResultSetgetProcedures(ﺝcatalog,ﺝschemaPattern,ﺝprocedureNamePattern)throwsSQLException{
String[]colNames={"PROCEDURE_CAT","PROCEDURE_SCHEM","PROCEDURE_NAME","","","","REMARKS","PROCEDURE_TYPE"};
Object[][]data=newObject[0][];
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}
publicResultSetgetProcedureColumns(ﺝcatalog,ﺝschemaPattern,ﺝprocedureNamePattern,ﺝcolumnNamePattern)throwsSQLException{
String[]colNames={"PROCEDURE_CAT","PROCEDURE_SCHEM","PROCEDURE_NAME","COLUMN_NAME","COLUMN_TYPE","DATA_TYPE","TYPE_NAME","PRECISION","LENGTH","SCALE","RADIX","NULLABLE","REMARKS"};
Object[][]data=newObject[0][];
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}
publicResultSetgetTables(ﺝcatalog,ﺝschemaPattern,ﺝtableNamePattern,String[]types)throwsSQLException{
String[]colNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","TABLE_TYPE","REMARKS","TYPE_CAT","TYPE_SCHEM","TYPE_NAME","SELF_REFERENCING_COL_NAME","REF_GENERATION"};
Databasedatabase;
if(catalog==null){
database=con.getDatabase(true);
if(database!=null)
catalog=database.getName();
}else{
database=Database.getDatabase(catalog,con,false);
}
ArrayListrows=newArrayList();
booleanisTypeTable=types==null;
booleanisTypeView=types==null;
for(inti=ﻝ;types!=null&&i<types.length;i++){
if("TABLE".equalsIgnoreCase(types[i]))isTypeTable=true;
if("VIEW".equalsIgnoreCase(types[i]))isTypeView=true;
}
if(database!=null){
Stringstables=database.getTables(tableNamePattern);
for(inti=ﻝ;i<tables.size();i++){
ﺝtable=tables.get(i);
Object[]row=newObject[10];
row[0]=catalog;
row[2]=table;
try{
if(database.getTableView(con,table)instanceofView){
if(isTypeView){
row[3]="VIEW";
rows.add(row);
}
}else{
if(isTypeTable){
row[3]="TABLE";
rows.add(row);
}
}
}catch(Exceptione){
}
}
}
Object[][]data=newObject[rows.size()][];
rows.toArray(data);
CommandSelectcmdSelect=Utils.createMemoryCommandSelect(con,colNames,data);
Expressionsorder=newExpressions();
order.add(newExpressionName("TABLE_TYPE"));
order.add(newExpressionName("TABLE_NAME"));
cmdSelect.setOrder(order);
returnnewSSResultSet(st,cmdSelect);
}
publicResultSetgetSchemas()throwsSQLException{
String[]colNames={"TABLE_SCHEM"};
Object[][]data=newObject[0][];
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}
publicResultSetgetCatalogs()throwsSQLException{
String[]colNames={"TABLE_CAT"};
Object[][]data=Database.getCatalogs(con.getDatabase(true));
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}
publicResultSetgetTableTypes()throwsSQLException{
String[]colNames={"TABLE_TYPE"};
Object[][]data={{"SYSTEMTABLE"},{"TABLE"},{"VIEW"}};
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}
publicResultSetgetColumns(ﺝcatalog,ﺝschemaPattern,ﺝtableNamePattern,ﺝcolumnNamePattern)throwsSQLException{
try{
String[]colNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","DATA_TYPE","TYPE_NAME","COLUMN_SIZE","BUFFER_LENGTH","DECIMAL_DIGITS","NUM_PREC_RADIX","NULLABLE","REMARKS","COLUMN_DEF","SQL_DATA_TYPE","SQL_DATETIME_SUB","CHAR_OCTET_LENGTH","ORDINAL_POSITION","IS_NULLABLE"};
Object[][]data=con.getDatabase(false).getColumns(con,tableNamePattern,columnNamePattern);
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicResultSetgetColumnPrivileges(ﺝcatalog,ﺝschema,ﺝtable,ﺝcolumnNamePattern)throwsSQLException{
String[]colNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","GRANTOR","GRANTEE","PRIVILEGE","IS_GRANTABLE"};
thrownewjava.lang.UnsupportedOperationException("MethodgetColumnPrivileges()notyetimplemented.");
}
publicResultSetgetTablePrivileges(ﺝcatalog,ﺝschemaPattern,ﺝtableNamePattern)throwsSQLException{
String[]colNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","GRANTOR","GRANTEE","PRIVILEGE","IS_GRANTABLE"};
thrownewjava.lang.UnsupportedOperationException("MethodgetTablePrivileges()notyetimplemented.");
}
publicResultSetgetBestRowIdentifier(ﺝcatalog,ﺝschema,ﺝtable,intscope,booleannullable)throwsSQLException{
try{
String[]colNames={"SCOPE","COLUMN_NAME","DATA_TYPE","TYPE_NAME","COLUMN_SIZE","BUFFER_LENGTH","DECIMAL_DIGITS","PSEUDO_COLUMN"};
Object[][]data=con.getDatabase(false).getBestRowIdentifier(con,table);
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicResultSetgetVersionColumns(ﺝcatalog,ﺝschema,ﺝtable)throwsSQLException{
try{
String[]colNames={"SCOPE","COLUMN_NAME","DATA_TYPE","TYPE_NAME","COLUMN_SIZE","BUFFER_LENGTH","DECIMAL_DIGITS","PSEUDO_COLUMN"};
Object[][]data=newObject[0][0];
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicResultSetgetPrimaryKeys(ﺝcatalog,ﺝschema,ﺝtable)throwsSQLException{
try{
String[]colNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","KEY_SEQ","PK_NAME"};
Object[][]data=con.getDatabase(false).getPrimaryKeys(con,table);
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicResultSetgetImportedKeys(ﺝcatalog,ﺝschema,ﺝtable)throwsSQLException{
returngetCrossReference(null,null,null,null,null,table);
}
publicResultSetgetExportedKeys(ﺝcatalog,ﺝschema,ﺝtable)throwsSQLException{
returngetCrossReference(null,null,table,null,null,null);
}
publicResultSetgetCrossReference(ﺝprimaryCatalog,ﺝprimarySchema,ﺝprimaryTable,ﺝforeignCatalog,ﺝforeignSchema,ﺝforeignTable)throwsSQLException{
try{
String[]colNames={"PKTABLE_CAT","PKTABLE_SCHEM","PKTABLE_NAME","PKCOLUMN_NAME","FKTABLE_CAT","FKTABLE_SCHEM","FKTABLE_NAME","FKCOLUMN_NAME","KEY_SEQ","UPDATE_RULE","DELETE_RULE","FK_NAME","PK_NAME","DEFERRABILITY"};
Object[][]data=con.getDatabase(false).getReferenceKeys(con,primaryTable,foreignTable);
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicResultSetgetTypeInfo()throwsSQLException{
String[]colNames={		"TYPE_NAME",				"DATA_TYPE",																	"PRECISION",	"LITERAL_PREFIX","LITERAL_SUFFIX",		"CREATE_PARAMS","NULLABLE",	"CASE_SENSITIVE","SEARCHABLE","UNSIGNED_ATTRIBUTE","FIXED_PREC_SCALE","AUTO_INCREMENT","LOCAL_TYPE_NAME","MINIMUM_SCALE","MAXIMUM_SCALE","SQL_DATA_TYPE","SQL_DATETIME_SUB","NUM_PREC_RADIX"};
Object[][]data={
{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.UNIQUEIDENTIFIER)),Utils.getInteger(36),	"'","'",null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIT)),Utils.getInteger(1),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TINYINT)),Utils.getInteger(3),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIGINT)),Utils.getInteger(19),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARBINARY)),Utils.getInteger(2147483647),	"0x",null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),	Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARBINARY)),	Utils.getInteger(65535),	"0x",null,"maxlength",		Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),		Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BINARY)),		Utils.getInteger(65535),	"0x",null,"length",			Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARCHAR)),Utils.getInteger(2147483647),	"'","'",null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGNVARCHAR)),Utils.getInteger(2147483647),	"'","'",null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),	Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CHAR)),	Utils.getInteger(65535),	"'","'","length",			Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),	Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCHAR)),Utils.getInteger(65535),	"'","'","length",			Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NUMERIC)),Utils.getInteger(38),	null,null,"precision,scale",	Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DECIMAL)),Utils.getInteger(38),	null,null,"precision,scale",	Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.MONEY)),Utils.getInteger(19),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLMONEY)),Utils.getInteger(10),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.INT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.INT)),Utils.getInteger(10),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLINT)),Utils.getInteger(5),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),	Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.FLOAT)),Utils.getInteger(15),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),	Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.REAL)),	Utils.getInteger(7),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DOUBLE)),Utils.getInteger(15),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARCHAR)),Utils.getInteger(65535),	"'","'","maxlength",		Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NVARCHAR)),Utils.getInteger(65535),	"'","'","maxlength",		Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BOOLEAN)),Utils.getInteger(1),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),		Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DATE)),			Utils.getInteger(10),		"'","'",null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),		Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIME)),			Utils.getInteger(8),		"'","'",null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),	Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIMESTAMP)),	Utils.getInteger(23),		"'","'",null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(3),Utils.getInteger(3),null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLDATETIME)),Utils.getInteger(16),		"'","'",null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),	Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.JAVA_OBJECT)),Utils.getInteger(65535),	null,null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),		Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BLOB)),		Utils.getInteger(2147483647),	"0x",null,null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),		Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CLOB)),		Utils.getInteger(2147483647),	"'","'",null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),		Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCLOB)),	Utils.getInteger(2147483647),	"'","'",null,				Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,			Boolean.FALSE,Boolean.FALSE,null,null,				null,				null,null,null},
};
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}
publicResultSetgetIndexInfo(ﺝcatalog,ﺝschema,ﺝtable,booleanunique,booleanapproximate)throwsSQLException{
try{
String[]colNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","NON_UNIQUE","INDEX_QUALIFIER","INDEX_NAME","TYPE","ORDINAL_POSITION","COLUMN_NAME","ASC_OR_DESC","CARDINALITY","PAGES","FILTER_CONDITION"};
Object[][]data=con.getDatabase(false).getIndexInfo(con,table,unique);
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleansupportsResultSetType(inttype){
switch(type){
caseResultSet.TYPE_FORWARD_ONLY:
caseResultSet.TYPE_SCROLL_INSENSITIVE:
caseResultSet.TYPE_SCROLL_SENSITIVE:
ﺝ
}
ﺝ
}
publicbooleansupportsResultSetConcurrency(inttype,intconcurrency){
if(type>=ResultSet.TYPE_FORWARD_ONLY&&type<=ResultSet.TYPE_SCROLL_SENSITIVE&&
concurrency>=ResultSet.CONCUR_READ_ONLY&&concurrency<=ResultSet.CONCUR_UPDATABLE)
ﺝ
ﺝ
}
publicbooleanownUpdatesAreVisible(inttype){
returnsupportsResultSetType(type);
}
publicbooleanownDeletesAreVisible(inttype){
returnsupportsResultSetType(type);
}
publicbooleanownInsertsAreVisible(inttype){
returnsupportsResultSetType(type);
}
publicbooleanothersUpdatesAreVisible(inttype){
returnsupportsResultSetType(type);
}
publicbooleanothersDeletesAreVisible(inttype){
returnsupportsResultSetType(type);
}
publicbooleanothersInsertsAreVisible(inttype){
returnsupportsResultSetType(type);
}
publicbooleanupdatesAreDetected(inttype){
ﺝ
}
publicbooleandeletesAreDetected(inttype){
returnsupportsResultSetType(type);
}
publicbooleaninsertsAreDetected(inttype){
returnsupportsResultSetType(type);
}
publicbooleansupportsBatchUpdates(){
ﺝ
}
publicResultSetgetUDTs(ﺝcatalog,ﺝschemaPattern,ﺝtypeNamePattern,int[]types)throwsSQLException{
String[]colNames={"TYPE_CAT","TYPE_SCHEM","TYPE_NAME","CLASS_NAME","DATA_TYPE","REMARKS"};
Object[][]data=newObject[0][];
returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));
}
publicConnectiongetConnection(){
returncon;
}
publicbooleansupportsSavepoints(){
ﺝ
}
publicbooleansupportsNamedParameters(){
ﺝ
}
publicbooleansupportsMultipleOpenResults(){
ﺝ
}
publicbooleansupportsGetGeneratedKeys(){
ﺝ
}
publicResultSetgetSuperTypes(ﺝcatalog,ﺝschemaPattern,ﺝtypeNamePattern)throwsSQLException{
thrownewjava.lang.UnsupportedOperationException("MethodgetSuperTypes()notyetimplemented.");
}
publicResultSetgetSuperTables(ﺝcatalog,ﺝschemaPattern,ﺝtableNamePattern)throwsSQLException{
thrownewjava.lang.UnsupportedOperationException("MethodgetSuperTables()notyetimplemented.");
}
publicResultSetgetAttributes(ﺝcatalog,ﺝschemaPattern,ﺝtypeNamePattern,ﺝattributeNamePattern)throwsSQLException{
thrownewjava.lang.UnsupportedOperationException("MethodgetAttributes()notyetimplemented.");
}
publicbooleansupportsResultSetHoldability(intholdability){
ﺝ
}
publicintgetResultSetHoldability(){
returnResultSet.HOLD_CURSORS_OVER_COMMIT;
}
publicintgetDatabaseMajorVersion(){
returngetDriverMajorVersion();
}
publicintgetDatabaseMinorVersion(){
returngetDriverMinorVersion();
}
publicintgetJDBCMajorVersion(){
returnﻝ;
}
publicintgetJDBCMinorVersion(){
returnﻝ;
}
publicintgetSQLStateType(){
returnsqlStateSQL99;
}
publicbooleanlocatorsUpdateCopy(){
ﺝ
}
publicbooleansupportsStatementPooling(){
ﺝ
}
}
packagesmallsql.database;
importjava.sql.*;
importjava.util.Properties;
importjava.util.StringTokenizer;
importsmallsql.database.language.Language;
publicclassSSDriverimplementsDriver{
staticfinalﺝURL_PREFIX="jdbc:smallsql";
staticSSDriverdrv;
static{
try{
drv=newSSDriver();
java.sql.DriverManager.registerDriver(drv);
}catch(Throwablee){
e.printStackTrace();
}
}
publicConnectionconnect(ﺝurl,Propertiesinfo)throwsSQLException{
if(!acceptsURL(url)){
returnnull;
}
returnnewSSConnection(parse(url,info));
}
privatePropertiesparse(ﺝurl,Propertiesinfo)throwsSQLException{
Propertiesprops=(Properties)info.clone();
if(!acceptsURL(url)){
returnprops;
}
intidxﻝ=url.indexOf(':',ﻝ);
intidx2=url.indexOf('?');
if(idxﻝ>ﻝ){
ﺝdbPath=(idxﻝ>ﻝ)?url.substring(idxﻝ+ﻝ,idxﻝ):url.substring(idxﻝ+ﻝ);
props.setProperty("dbpath",dbPath);
}
if(idxﻝ>ﻝ){
ﺝpropsﺝ=url.substring(idxﻝ+ﻝ).replace('&',';');
StringTokenizertok=newStringTokenizer(propsString,";");
while(tok.hasMoreTokens()){
ﺝkeyValue=tok.nextToken().trim();
if(keyValue.length()>ﻝ){
idx1=keyValue.indexOf('=');
if(idxﻝ>ﻝ){
ﺝkey=keyValue.substring(0,idx1).toLowerCase().trim();
ﺝvalue=keyValue.substring(idxﻝ+ﻝ).trim();
props.put(key,value);
}else{
throwSmallSQLException.create(Language.CUSTOM_MESSAGE,"Missingequalinproperty:"+keyValue);
}
}
}
}
returnprops;
}
publicbooleanacceptsURL(ﺝurl){
returnurl.startsWith(URL_PREFIX);
}
publicDriverPropertyInfo[]getPropertyInfo(ﺝurl,Propertiesinfo)
throwsSQLException{
Propertiesprops=parse(url,info);
DriverPropertyInfo[]driverInfos=newDriverPropertyInfo[1];
driverInfos[0]=newDriverPropertyInfo("dbpath",props.getProperty("dbpath"));
returndriverInfos;
}
publicintgetMajorVersion(){
returnﻝ;
}
publicintgetMinorVersion(){
returnﻝ;
}
publicbooleanjdbcCompliant(){
ﺝ
}
}
packagesmallsql.database;
importjava.sql.*;
importjava.math.*;
importjava.io.*;
importjava.util.ArrayList;
importjava.util.Calendar;
importjava.net.URL;
classSSPreparedStatementextendsSSStatementimplementsPreparedStatement{
privateArrayListbatches;
privateﺝtop;
SSPreparedStatement(SSConnectioncon,ﺝsql)throwsSQLException{
this(con,sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
}
SSPreparedStatement(SSConnectioncon,ﺝsql,intrsType,intrsConcurrency)throwsSQLException{
super(con,rsType,rsConcurrency);
con.log.println(sql);
SQLParserparser=newSQLParser();
cmd=parser.parse(con,sql);
top=cmd.getMaxRows();
}
publicResultSetexecuteQuery()throwsSQLException{
executeImp();
returncmd.getQueryResult();
}
publicintexecuteUpdate()throwsSQLException{
executeImp();
returncmd.getUpdateCount();
}
finalprivatevoidexecuteImp()throwsSQLException{
checkStatement();
cmd.verifyParams();
if(getMaxRows()!=ﻝ&&(top==-ﻝ||top>getMaxRows()))
cmd.setMaxRows(getMaxRows());
cmd.execute(con,this);
}
publicvoidsetNull(intparameterIndex,intsqlType)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,null,SQLTokenizer.NULL);
}
publicvoidsetBoolean(intparameterIndex,booleanx)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,x?Boolean.TRUE:Boolean.FALSE,SQLTokenizer.BOOLEAN);
}
publicvoidsetByte(intparameterIndex,bytex)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.TINYINT);
}
publicvoidsetShort(intparameterIndex,shortx)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.SMALLINT);
}
publicvoidsetInt(intparameterIndex,intx)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.INT);
}
publicvoidsetLong(intparameterIndex,longx)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,newLong(x),SQLTokenizer.BIGINT);
}
publicvoidsetFloat(intparameterIndex,floatx)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,newFloat(x),SQLTokenizer.REAL);
}
publicvoidsetDouble(intparameterIndex,doublex)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,newDouble(x),SQLTokenizer.DOUBLE);
}
publicvoidsetBigDecimal(intparameterIndex,BigDecimalx)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,x,SQLTokenizer.DECIMAL);
}
publicvoidsetString(intparameterIndex,ﺝx)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,x,SQLTokenizer.VARCHAR);
}
publicvoidsetBytes(intparameterIndex,byte[]x)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,x,SQLTokenizer.BINARY);
}
publicvoidsetDate(intparameterIndex,Datex)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.DATE);
}
publicvoidsetTime(intparameterIndex,Timex)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIME);
}
publicvoidsetTimestamp(intparameterIndex,Timestampx)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIMESTAMP);
}
publicvoidsetAsciiStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,x,SQLTokenizer.LONGVARCHAR,length);
}
publicvoidsetUnicodeStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetUnicodeStream()notyetimplemented.");
}
publicvoidsetBinaryStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,x,SQLTokenizer.LONGVARBINARY,length);
}
publicvoidclearParameters()throwsSQLException{
checkStatement();
cmd.clearParams();
}
publicvoidsetObject(intparameterIndex,Objectx,inttargetSqlType,intscale)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,x,-1);
}
publicvoidsetObject(intparameterIndex,Objectx,inttargetSqlType)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,x,-1);
}
publicvoidsetObject(intparameterIndex,Objectx)throwsSQLException{
checkStatement();
cmd.setParamValue(parameterIndex,x,-1);
}
publicbooleanexecute()throwsSQLException{
executeImp();
returncmd.getResultSet()!=null;
}
publicvoidaddBatch()throwsSQLException{
checkStatement();
try{
finalExpressionsparams=cmd.params;
ﺝsize=params.size();
ExpressionValue[]values=newExpressionValue[size];
for(inti=ﻝ;i<size;i++){
values[i]=(ExpressionValue)params.get(i).clone();
}
if(batches==null)batches=newArrayList();
batches.add(values);
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicvoidclearBatch()throwsSQLException{
checkStatement();
if(batches!=null)batches.clear();
}
publicint[]executeBatch()throwsBatchUpdateException{
if(batches==null||batches.size()==ﻝ)returnnewint[ﻝ];
int[]result=newint[batches.size()];
BatchUpdateExceptionfailed=null;
for(intb=ﻝ;b<batches.size();b++){
try{
checkStatement();
ExpressionValue[]values=(ExpressionValue[])batches.get(b);
for(inti=ﻝ;i<values.length;i++){
((ExpressionValue)cmd.params.get(i)).set(values[i]);
}
result[b]=executeUpdate();
}catch(SQLExceptionex){
result[b]=EXECUTE_FAILED;
if(failed==null){
failed=newBatchUpdateException(ex.getMessage(),ex.getSQLState(),ex.getErrorCode(),result);
failed.initCause(ex);
}
failed.setNextException(ex);
}
}
batches.clear();
if(failed!=null)
throwfailed;
returnresult;
}
publicvoidsetCharacterStream(intparameterIndex,Readerreader,intlength)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetCharacterStream()notyetimplemented.");
}
publicvoidsetRef(inti,Refx)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetRef()notyetimplemented.");
}
publicvoidsetBlob(inti,Blobx)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetBlob()notyetimplemented.");
}
publicvoidsetClob(inti,Clobx)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetClob()notyetimplemented.");
}
publicvoidsetArray(inti,Arrayx)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetArray()notyetimplemented.");
}
publicResultSetMetaDatagetMetaData()throwsSQLException{
checkStatement();
if(cmdinstanceofCommandSelect){
try{
((CommandSelect)cmd).compile(con);
SSResultSetMetaDatametaData=newSSResultSetMetaData();
metaData.columns=cmd.columnExpressions;
returnmetaData;
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
returnnull;
}
publicvoidsetDate(intparameterIndex,Datex,Calendarcal)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetDate()notyetimplemented.");
}
publicvoidsetTime(intparameterIndex,Timex,Calendarcal)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetTime()notyetimplemented.");
}
publicvoidsetTimestamp(intparameterIndex,Timestampx,Calendarcal)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetTimestamp()notyetimplemented.");
}
publicvoidsetNull(intparamIndex,intsqlType,ﺝtypeName)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetNull()notyetimplemented.");
}
publicvoidsetURL(intparameterIndex,URLx)throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodsetURL()notyetimplemented.");
}
publicParameterMetaDatagetParameterMetaData()throwsSQLException{
checkStatement();
thrownewjava.lang.UnsupportedOperationException("MethodgetParameterMetaData()notyetimplemented.");
}
}
packagesmallsql.database;
importjava.sql.*;
importjava.math.*;
importjava.io.ByteArrayInputStream;
importjava.io.InputStream;
importjava.io.Reader;
importjava.util.Map;
importjava.util.Calendar;
importjava.net.URL;
importsmallsql.database.language.Language;
publicclassﺝimplementsResultSet{
SSResultSetMetaDatametaData=newSSResultSetMetaData();
privateCommandSelectcmd;
privatebooleanwasNull;
SSStatementst;
privatebooleanisUpdatable;
privatebooleanisInsertRow;
privateExpressionValue[]values;
ﺝfetchDirection;
ﺝfetchSize;
SSResultSet(SSStatementst,CommandSelectcmd){
this.st=st;
metaData.columns=cmd.columnExpressions;
this.cmd=cmd;
isUpdatable=st!=null&&st.rsConcurrency==CONCUR_UPDATABLE&&!cmd.isGroupResult();
}
publicvoidclose(){
st.con.log.println("ResultSet.close");
cmd=null;
}
publicbooleanwasNull(){
returnwasNull;
}
publicﺝgetString(intcolumnIndex)throwsSQLException{
try{
Objectobj=getObject(columnIndex);
if(objinstanceofﺝ||obj==null){
return(String)obj;
}
if(objinstanceofbyte[]){
return"0x"+Utils.bytes2hex((byte[])obj);
}
returngetValue(columnIndex).getString();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleangetBoolean(intcolumnIndex)throwsSQLException{
try{
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
returnexpr.getBoolean();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbytegetByte(intcolumnIndex)throwsSQLException{
return(byte)getInt(columnIndex);
}
publicshortgetShort(intcolumnIndex)throwsSQLException{
return(short)getInt(columnIndex);
}
publicintgetInt(intcolumnIndex)throwsSQLException{
try{
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
returnexpr.getInt();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publiclonggetLong(intcolumnIndex)throwsSQLException{
try{
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
returnexpr.getLong();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicfloatgetFloat(intcolumnIndex)throwsSQLException{
try{
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
returnexpr.getFloat();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicdoublegetDouble(intcolumnIndex)throwsSQLException{
try{
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
returnexpr.getDouble();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicBigDecimalgetBigDecimal(intcolumnIndex,intscale)throwsSQLException{
try{
MutableNumericobj=getValue(columnIndex).getNumeric();
wasNull=obj==null;
if(wasNull)returnnull;
returnobj.toBigDecimal(scale);
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbyte[]getBytes(intcolumnIndex)throwsSQLException{
try{
byte[]obj=getValue(columnIndex).getBytes();
wasNull=obj==null;
returnobj;
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicDategetDate(intcolumnIndex)throwsSQLException{
try{
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnDateTime.getDate(expr.getLong());
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicTimegetTime(intcolumnIndex)throwsSQLException{
try{
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnDateTime.getTime(expr.getLong());
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicTimestampgetTimestamp(intcolumnIndex)throwsSQLException{
try{
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnDateTime.getTimestamp(expr.getLong());
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicInputStreamgetAsciiStream(intcolumnIndex)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"getAsciiStream");
}
publicInputStreamgetUnicodeStream(intcolumnIndex)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"getUnicodeStream");
}
publicInputStreamgetBinaryStream(intcolumnIndex)throwsSQLException{
returnnewByteArrayInputStream(getBytes(columnIndex));
}
publicﺝgetString(ﺝcolumnName)throwsSQLException{
returngetString(findColumn(columnName));
}
publicbooleangetBoolean(ﺝcolumnName)throwsSQLException{
returngetBoolean(findColumn(columnName));
}
publicbytegetByte(ﺝcolumnName)throwsSQLException{
returngetByte(findColumn(columnName));
}
publicshortgetShort(ﺝcolumnName)throwsSQLException{
returngetShort(findColumn(columnName));
}
publicintgetInt(ﺝcolumnName)throwsSQLException{
returngetInt(findColumn(columnName));
}
publiclonggetLong(ﺝcolumnName)throwsSQLException{
returngetLong(findColumn(columnName));
}
publicfloatgetFloat(ﺝcolumnName)throwsSQLException{
returngetFloat(findColumn(columnName));
}
publicdoublegetDouble(ﺝcolumnName)throwsSQLException{
returngetDouble(findColumn(columnName));
}
publicBigDecimalgetBigDecimal(ﺝcolumnName,intscale)throwsSQLException{
returngetBigDecimal(findColumn(columnName),scale);
}
publicbyte[]getBytes(ﺝcolumnName)throwsSQLException{
returngetBytes(findColumn(columnName));
}
publicDategetDate(ﺝcolumnName)throwsSQLException{
returngetDate(findColumn(columnName));
}
publicTimegetTime(ﺝcolumnName)throwsSQLException{
returngetTime(findColumn(columnName));
}
publicTimestampgetTimestamp(ﺝcolumnName)throwsSQLException{
returngetTimestamp(findColumn(columnName));
}
publicInputStreamgetAsciiStream(ﺝcolumnName)throwsSQLException{
returngetAsciiStream(findColumn(columnName));
}
publicInputStreamgetUnicodeStream(ﺝcolumnName)throwsSQLException{
returngetUnicodeStream(findColumn(columnName));
}
publicInputStreamgetBinaryStream(ﺝcolumnName)throwsSQLException{
returngetBinaryStream(findColumn(columnName));
}
publicSQLWarninggetWarnings(){
returnnull;
}
publicvoidclearWarnings(){
}
publicﺝgetCursorName(){
returnnull;
}
publicResultSetMetaDatagetMetaData(){
returnmetaData;
}
publicObjectgetObject(intcolumnIndex)throwsSQLException{
try{
Objectobj=getValue(columnIndex).getApiObject();
wasNull=obj==null;
returnobj;
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicObjectgetObject(ﺝcolumnName)throwsSQLException{
returngetObject(findColumn(columnName));
}
publicintfindColumn(ﺝcolumnName)throwsSQLException{
returngetCmd().findColumn(columnName)+ﻝ;
}
publicReadergetCharacterStream(intcolumnIndex)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"getCharacterStream");
}
publicReadergetCharacterStream(ﺝcolumnName)throwsSQLException{
returngetCharacterStream(findColumn(columnName));
}
publicBigDecimalgetBigDecimal(intcolumnIndex)throwsSQLException{
try{
MutableNumericobj=getValue(columnIndex).getNumeric();
wasNull=obj==null;
if(wasNull)returnnull;
returnobj.toBigDecimal();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicBigDecimalgetBigDecimal(ﺝcolumnName)throwsSQLException{
returngetBigDecimal(findColumn(columnName));
}
publicbooleanisBeforeFirst()throwsSQLException{
returngetCmd().isBeforeFirst();
}
publicbooleanisAfterLast()throwsSQLException{
try{
returngetCmd().isAfterLast();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleanisFirst()throwsSQLException{
returngetCmd().isFirst();
}
publicbooleanisLast()throwsSQLException{
try{
returngetCmd().isLast();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicvoidbeforeFirst()throwsSQLException{
try{
moveToCurrentRow();
getCmd().beforeFirst();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleanfirst()throwsSQLException{
try{
if(st.rsType==ResultSet.TYPE_FORWARD_ONLY)throwSmallSQLException.create(Language.RSET_FWDONLY);
moveToCurrentRow();
returngetCmd().first();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleanprevious()throwsSQLException{
try{
moveToCurrentRow();
returngetCmd().previous();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleannext()throwsSQLException{
try{
moveToCurrentRow();
returngetCmd().next();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleanlast()throwsSQLException{
try{
moveToCurrentRow();
returngetCmd().last();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicvoidafterLast()throwsSQLException{
try{
if(st.rsType==ResultSet.TYPE_FORWARD_ONLY)throwSmallSQLException.create(Language.RSET_FWDONLY);
moveToCurrentRow();
getCmd().afterLast();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleanabsolute(introw)throwsSQLException{
try{
moveToCurrentRow();
returngetCmd().absolute(row);
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicbooleanrelative(introws)throwsSQLException{
try{
moveToCurrentRow();
returngetCmd().relative(rows);
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicintgetRow()throwsSQLException{
try{
returngetCmd().getRow();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicvoidsetFetchDirection(intdirection){
fetchDirection=direction;
}
publicintgetFetchDirection(){
returnfetchDirection;
}
publicvoidsetFetchSize(introws){
fetchSize=rows;
}
publicintgetFetchSize(){
returnfetchSize;
}
publicintgetType()throwsSQLException{
returngetCmd().from.isScrollable()?ResultSet.TYPE_SCROLL_SENSITIVE:ResultSet.TYPE_FORWARD_ONLY;
}
publicintgetConcurrency(){
returnisUpdatable?ResultSet.CONCUR_UPDATABLE:ResultSet.CONCUR_READ_ONLY;
}
publicbooleanrowUpdated(){
ﺝ
}
publicbooleanrowInserted()throwsSQLException{
returngetCmd().from.rowInserted();
}
publicbooleanrowDeleted()throwsSQLException{
returngetCmd().from.rowDeleted();
}
publicvoidupdateNull(intcolumnIndex)throwsSQLException{
updateValue(columnIndex,null,SQLTokenizer.NULL);
}
publicvoidupdateBoolean(intcolumnIndex,booleanx)throwsSQLException{
updateValue(columnIndex,x?Boolean.TRUE:Boolean.FALSE,SQLTokenizer.BOOLEAN);
}
publicvoidupdateByte(intcolumnIndex,bytex)throwsSQLException{
updateValue(columnIndex,Utils.getShort(x),SQLTokenizer.TINYINT);
}
publicvoidupdateShort(intcolumnIndex,shortx)throwsSQLException{
updateValue(columnIndex,Utils.getShort(x),SQLTokenizer.SMALLINT);
}
publicvoidupdateInt(intcolumnIndex,intx)throwsSQLException{
updateValue(columnIndex,Utils.getInteger(x),SQLTokenizer.INT);
}
publicvoidupdateLong(intcolumnIndex,longx)throwsSQLException{
updateValue(columnIndex,newLong(x),SQLTokenizer.BIGINT);
}
publicvoidupdateFloat(intcolumnIndex,floatx)throwsSQLException{
updateValue(columnIndex,newFloat(x),SQLTokenizer.REAL);
}
publicvoidupdateDouble(intcolumnIndex,doublex)throwsSQLException{
updateValue(columnIndex,newDouble(x),SQLTokenizer.DOUBLE);
}
publicvoidupdateBigDecimal(intcolumnIndex,BigDecimalx)throwsSQLException{
updateValue(columnIndex,x,SQLTokenizer.DECIMAL);
}
publicvoidupdateString(intcolumnIndex,ﺝx)throwsSQLException{
updateValue(columnIndex,x,SQLTokenizer.VARCHAR);
}
publicvoidupdateBytes(intcolumnIndex,byte[]x)throwsSQLException{
updateValue(columnIndex,x,SQLTokenizer.VARBINARY);
}
publicvoidupdateDate(intcolumnIndex,Datex)throwsSQLException{
updateValue(columnIndex,DateTime.valueOf(x),SQLTokenizer.DATE);
}
publicvoidupdateTime(intcolumnIndex,Timex)throwsSQLException{
updateValue(columnIndex,DateTime.valueOf(x),SQLTokenizer.TIME);
}
publicvoidupdateTimestamp(intcolumnIndex,Timestampx)throwsSQLException{
updateValue(columnIndex,DateTime.valueOf(x),SQLTokenizer.TIMESTAMP);
}
publicvoidupdateAsciiStream(intcolumnIndex,InputStreamx,intlength)throwsSQLException{
updateValue(columnIndex,x,SQLTokenizer.LONGVARCHAR,length);
}
publicvoidupdateBinaryStream(intcolumnIndex,InputStreamx,intlength)throwsSQLException{
updateValue(columnIndex,x,SQLTokenizer.LONGVARBINARY,length);
}
publicvoidupdateCharacterStream(intcolumnIndex,Readerx,intlength)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Readerobject");
}
publicvoidupdateObject(intcolumnIndex,Objectx,intscale)throwsSQLException{
updateValue(columnIndex,x,-1);
}
publicvoidupdateObject(intcolumnIndex,Objectx)throwsSQLException{
updateValue(columnIndex,x,-1);
}
publicvoidupdateNull(ﺝcolumnName)throwsSQLException{
updateNull(findColumn(columnName));
}
publicvoidupdateBoolean(ﺝcolumnName,booleanx)throwsSQLException{
updateBoolean(findColumn(columnName),x);
}
publicvoidupdateByte(ﺝcolumnName,bytex)throwsSQLException{
updateByte(findColumn(columnName),x);
}
publicvoidupdateShort(ﺝcolumnName,shortx)throwsSQLException{
updateShort(findColumn(columnName),x);
}
publicvoidupdateInt(ﺝcolumnName,intx)throwsSQLException{
updateInt(findColumn(columnName),x);
}
publicvoidupdateLong(ﺝcolumnName,longx)throwsSQLException{
updateLong(findColumn(columnName),x);
}
publicvoidupdateFloat(ﺝcolumnName,floatx)throwsSQLException{
updateFloat(findColumn(columnName),x);
}
publicvoidupdateDouble(ﺝcolumnName,doublex)throwsSQLException{
updateDouble(findColumn(columnName),x);
}
publicvoidupdateBigDecimal(ﺝcolumnName,BigDecimalx)throwsSQLException{
updateBigDecimal(findColumn(columnName),x);
}
publicvoidupdateString(ﺝcolumnName,ﺝx)throwsSQLException{
updateString(findColumn(columnName),x);
}
publicvoidupdateBytes(ﺝcolumnName,byte[]x)throwsSQLException{
updateBytes(findColumn(columnName),x);
}
publicvoidupdateDate(ﺝcolumnName,Datex)throwsSQLException{
updateDate(findColumn(columnName),x);
}
publicvoidupdateTime(ﺝcolumnName,Timex)throwsSQLException{
updateTime(findColumn(columnName),x);
}
publicvoidupdateTimestamp(ﺝcolumnName,Timestampx)throwsSQLException{
updateTimestamp(findColumn(columnName),x);
}
publicvoidupdateAsciiStream(ﺝcolumnName,InputStreamx,intlength)throwsSQLException{
updateAsciiStream(findColumn(columnName),x,length);
}
publicvoidupdateBinaryStream(ﺝcolumnName,InputStreamx,intlength)throwsSQLException{
updateBinaryStream(findColumn(columnName),x,length);
}
publicvoidupdateCharacterStream(ﺝcolumnName,Readerx,intlength)throwsSQLException{
updateCharacterStream(findColumn(columnName),x,length);
}
publicvoidupdateObject(ﺝcolumnName,Objectx,intscale)throwsSQLException{
updateObject(findColumn(columnName),x,scale);
}
publicvoidupdateObject(ﺝcolumnName,Objectx)throwsSQLException{
updateObject(findColumn(columnName),x);
}
publicvoidinsertRow()throwsSQLException{
st.con.log.println("insertRow()");
if(!isInsertRow){
throwSmallSQLException.create(Language.RSET_NOT_INSERT_ROW);
}
getCmd().insertRow(st.con,values);
clearRowBuffer();
}
privatevoidtestNotInsertRow()throwsSQLException{
if(isInsertRow){
throwSmallSQLException.create(Language.RSET_ON_INSERT_ROW);
}
}
publicvoidupdateRow()throwsSQLException{
try{
if(values==null){
return;
}
st.con.log.println("updateRow()");
testNotInsertRow();
finalCommandSelectcommand=getCmd();
command.updateRow(st.con,values);
command.relative(0);
clearRowBuffer();
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicvoiddeleteRow()throwsSQLException{
st.con.log.println("deleteRow()");
testNotInsertRow();
getCmd().deleteRow(st.con);
clearRowBuffer();
}
publicvoidrefreshRow()throwsSQLException{
testNotInsertRow();
relative(0);
}
publicvoidcancelRowUpdates()throwsSQLException{
testNotInsertRow();
clearRowBuffer();
}
privatevoidclearRowBuffer(){
if(values!=null){
for(inti=values.length-ﻝ;i>=ﻝ;i--){
values[i].clear();
}
}
}
publicvoidmoveToInsertRow()throwsSQLException{
if(isUpdatable){
isInsertRow=true;
clearRowBuffer();
}else{
throwSmallSQLException.create(Language.RSET_READONLY);
}
}
publicvoidmoveToCurrentRow()throwsSQLException{
isInsertRow=false;
clearRowBuffer();
if(values==null){
getUpdateValue(1);
}
}
publicStatementgetStatement(){
returnst;
}
publicObjectgetObject(inti,Mapmap)throwsSQLException{
returngetObject(i);
}
publicRefgetRef(inti)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Refobject");
}
publicBlobgetBlob(inti)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Blobobject");
}
publicClobgetClob(inti)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Clobobject");
}
publicArraygetArray(inti)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Array");
}
publicObjectgetObject(ﺝcolumnName,Mapmap)throwsSQLException{
returngetObject(columnName);
}
publicRefgetRef(ﺝcolumnName)throwsSQLException{
returngetRef(findColumn(columnName));
}
publicBlobgetBlob(ﺝcolumnName)throwsSQLException{
returngetBlob(findColumn(columnName));
}
publicClobgetClob(ﺝcolumnName)throwsSQLException{
returngetClob(findColumn(columnName));
}
publicArraygetArray(ﺝcolumnName)throwsSQLException{
returngetArray(findColumn(columnName));
}
publicDategetDate(intcolumnIndex,Calendarcal)throwsSQLException{
try{
if(cal==null){
returngetDate(columnIndex);
}
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnnewDate(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicDategetDate(ﺝcolumnName,Calendarcal)throwsSQLException{
returngetDate(findColumn(columnName),cal);
}
publicTimegetTime(intcolumnIndex,Calendarcal)throwsSQLException{
try{
if(cal==null){
returngetTime(columnIndex);
}
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnnewTime(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicTimegetTime(ﺝcolumnName,Calendarcal)throwsSQLException{
returngetTime(findColumn(columnName),cal);
}
publicTimestampgetTimestamp(intcolumnIndex,Calendarcal)throwsSQLException{
try{
if(cal==null){
returngetTimestamp(columnIndex);
}
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnnewTimestamp(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicTimestampgetTimestamp(ﺝcolumnName,Calendarcal)throwsSQLException{
returngetTimestamp(findColumn(columnName),cal);
}
publicURLgetURL(intcolumnIndex)throwsSQLException{
try{
ﺝexpr=getValue(columnIndex);
wasNull=expr.isNull();
if(wasNull)returnnull;
returnnewURL(expr.getString());
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
publicURLgetURL(ﺝcolumnName)throwsSQLException{
returngetURL(findColumn(columnName));
}
publicvoidupdateRef(intcolumnIndex,Refx)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Ref");
}
publicvoidupdateRef(ﺝcolumnName,Refx)throwsSQLException{
updateRef(findColumn(columnName),x);
}
publicvoidupdateBlob(intcolumnIndex,Blobx)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Blob");
}
publicvoidupdateBlob(ﺝcolumnName,Blobx)throwsSQLException{
updateBlob(findColumn(columnName),x);
}
publicvoidupdateClob(intcolumnIndex,Clobx)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Clob");
}
publicvoidupdateClob(ﺝcolumnName,Clobx)throwsSQLException{
updateClob(findColumn(columnName),x);
}
publicvoidupdateArray(intcolumnIndex,Arrayx)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"Array");
}
publicvoidupdateArray(ﺝcolumnName,Arrayx)throwsSQLException{
updateArray(findColumn(columnName),x);
}
finalprivateﺝgetValue(intcolumnIndex)throwsSQLException{
if(values!=null){
ExpressionValuevalue=values[metaData.getColumnIdx(columnIndex)];
if(!value.isEmpty()||isInsertRow){
returnvalue;
}
}
returnmetaData.getColumnExpression(columnIndex);
}
finalprivateExpressionValuegetUpdateValue(intcolumnIndex)throwsSQLException{
if(values==null){
intcount=metaData.getColumnCount();
values=newExpressionValue[count];
while(count-->ﻝ){
values[count]=newExpressionValue();
}
}
returnvalues[metaData.getColumnIdx(columnIndex)];
}
finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType)throwsSQLException{
getUpdateValue(columnIndex).set(x,dataType);
if(st.con.log.isLogging()){
st.con.log.println("parameter'"+metaData.getColumnName(columnIndex)+"'="+x+";type="+dataType);
}
}
finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType,intlength)throwsSQLException{
getUpdateValue(columnIndex).set(x,dataType,length);
if(st.con.log.isLogging()){
st.con.log.println("parameter'"+metaData.getColumnName(columnIndex)+"'="+x+";type="+dataType+";length="+length);
}
}
finalprivateCommandSelectgetCmd()throwsSQLException{
if(cmd==null){
throwSmallSQLException.create(Language.RSET_CLOSED);
}
st.con.testClosedConnection();
returncmd;
}
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
publicclassSSResultSetMetaDataimplementsResultSetMetaData{
Expressionscolumns;
publicintgetColumnCount()throwsSQLException{
returncolumns.size();
}
publicbooleanisAutoIncrement(intcolumn)throwsSQLException{
returngetColumnExpression(column).isAutoIncrement();
}
publicbooleanisCaseSensitive(intcolumn)throwsSQLException{
returngetColumnExpression(column).isCaseSensitive();
}
publicbooleanisSearchable(intcolumn)throwsSQLException{
inttype=getColumnExpression(column).getType();
returntype==Expression.NAME||type==Expression.FUNCTION;
}
publicbooleanisCurrency(intcolumn)throwsSQLException{
switch(getColumnExpression(column).getDataType()){
caseSQLTokenizer.MONEY:
caseSQLTokenizer.SMALLMONEY:
ﺝ
}
ﺝ
}
publicintisNullable(intcolumn)throwsSQLException{
returngetColumnExpression(column).isNullable()?columnNullable:columnNoNulls;
}
publicbooleanisSigned(intcolumn)throwsSQLException{
returnisSignedDataType(getColumnExpression(column).getDataType());
}
staticbooleanisSignedDataType(intdataType){
switch(dataType){
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.INT:
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.DECIMAL:
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.REAL:
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
ﺝ
}
ﺝ
}
staticbooleanisNumberDataType(intdataType){
returnisSignedDataType(dataType)||dataType==SQLTokenizer.TINYINT;
}
staticbooleanisBinaryDataType(intdataType){
switch(dataType){
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
ﺝ
}
ﺝ
}
staticintgetDisplaySize(intdataType,intprecision,intscale){
switch(dataType){
caseSQLTokenizer.BIT:
returnﻝ;
caseSQLTokenizer.BOOLEAN:
returnﻝ;
caseSQLTokenizer.TINYINT:
returnﻝ;
caseSQLTokenizer.SMALLINT:
returnﻝ;
caseSQLTokenizer.INT:
returnﻝ;
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.MONEY:
returnﻝ;
caseSQLTokenizer.REAL:
returnﻝ;
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnﻝ;
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.JAVA_OBJECT:
caseSQLTokenizer.BLOB:
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
returnInteger.MAX_VALUE;
caseSQLTokenizer.NUMERIC:
returnprecision+(scale>ﻝ?ﻝ:ﻝ);
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.BINARY:
returnﻝ+precision*ﻝ;
caseSQLTokenizer.SMALLDATETIME:
returnﻝ;
default:
returnprecision;
}
}
staticintgetDataTypePrecision(intdataType,intdefaultValue){
switch(dataType){
caseSQLTokenizer.NULL:
returnﻝ;
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnﻝ;
caseSQLTokenizer.TINYINT:
returnﻝ;
caseSQLTokenizer.SMALLINT:
returnﻝ;
caseSQLTokenizer.INT:
caseSQLTokenizer.SMALLMONEY:
returnﻝ;
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.MONEY:
returnﻝ;
caseSQLTokenizer.REAL:
returnﻝ;
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnﻝ;
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
if(defaultValue==-1)
return0xFFFF;
returndefaultValue;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
if(defaultValue==-1)
returnﻝ;
returndefaultValue;
caseSQLTokenizer.TIMESTAMP:
returnﻝ;
caseSQLTokenizer.TIME:
returnﻝ;
caseSQLTokenizer.DATE:
returnﻝ;
caseSQLTokenizer.SMALLDATETIME:
returnﻝ;
caseSQLTokenizer.UNIQUEIDENTIFIER:
returnﻝ;
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARBINARY:
returnInteger.MAX_VALUE;
}
if(defaultValue==-1)
thrownewError("Precision:"+SQLTokenizer.getKeyWord(dataType));
returndefaultValue;
}
publicintgetColumnDisplaySize(intcolumn)throwsSQLException{
returngetColumnExpression(column).getDisplaySize();
}
publicﺝgetColumnLabel(intcolumn)throwsSQLException{
returngetColumnExpression(column).getAlias();
}
publicﺝgetColumnName(intcolumn)throwsSQLException{
returngetColumnExpression(column).getAlias();
}
publicﺝgetSchemaName(intcolumn)throwsSQLException{
returnnull;
}
publicintgetPrecision(intcolumn)throwsSQLException{
returngetColumnExpression(column).getPrecision();
}
publicintgetScale(intcolumn)throwsSQLException{
returngetColumnExpression(column).getScale();
}
publicﺝgetTableName(intcolumn)throwsSQLException{
returngetColumnExpression(column).getTableName();
}
publicﺝgetCatalogName(intcolumn)throwsSQLException{
returnnull;
}
publicintgetColumnType(intcolumn)throwsSQLException{
returnSQLTokenizer.getSQLDataType(getColumnExpression(column).getDataType());
}
publicﺝgetColumnTypeName(intcolumn)throwsSQLException{
returnSQLTokenizer.getKeyWord(getColumnExpression(column).getDataType());
}
publicbooleanisReadOnly(intcolumn)throwsSQLException{
return!getColumnExpression(column).isDefinitelyWritable();
}
publicbooleanisWritable(intcolumn)throwsSQLException{
returngetColumnExpression(column).isDefinitelyWritable();
}
publicbooleanisDefinitelyWritable(intcolumn)throwsSQLException{
returngetColumnExpression(column).isDefinitelyWritable();
}
publicﺝgetColumnClassName(intcolumn)throwsSQLException{
switch(getColumnType(column)){
caseTypes.TINYINT:
caseTypes.SMALLINT:
caseTypes.INTEGER:
return"java.lang.Integer";
caseTypes.BIT:
caseTypes.BOOLEAN:
return"java.lang.Boolean";
caseTypes.BINARY:
caseTypes.VARBINARY:
caseTypes.LONGVARBINARY:
return"[B";
caseTypes.BLOB:
return"java.sql.Blob";
caseTypes.BIGINT:
return"java.lang.Long";
caseTypes.DECIMAL:
caseTypes.NUMERIC:
return"java.math.BigDecimal";
caseTypes.REAL:
return"java.lang.Float";
caseTypes.FLOAT:
caseTypes.DOUBLE:
return"java.lang.Double";
caseTypes.DATE:
return"java.sql.Date";
caseTypes.TIME:
return"java.sql.Time";
caseTypes.TIMESTAMP:
return"java.sql.Timestamp";
caseTypes.CHAR:
caseTypes.VARCHAR:
caseTypes.LONGVARCHAR:
case-11:
return"java.lang.String";
caseTypes.CLOB:
return"java.sql.Clob";
default:return"java.lang.Object";
}
}
ﺝgetColumnIdx(intcolumn)throwsSQLException{
if(column<ﻝ||column>columns.size())
throwSmallSQLException.create(Language.COL_IDX_OUT_RANGE,String.valueOf(column));
returncolumn-1;
}
finalﺝgetColumnExpression(intcolumn)throwsSQLException{
returncolumns.get(getColumnIdx(column));
}
}
packagesmallsql.database;
importjava.sql.*;
classSSSavepointimplementsSavepoint{
privateﺝid;
privatefinalﺝname;
longtransactionTime;
SSSavepoint(intid,ﺝname,longtransactionTime){
this.id=id;
this.name=name;
this.transactionTime=transactionTime;
}
publicintgetSavepointId(){
returnid;
}
publicﺝgetSavepointName(){
returnname;
}
}
packagesmallsql.database;
importjava.sql.*;
importjava.util.ArrayList;
importsmallsql.database.language.Language;
classSSStatementimplementsStatement{
finalSSConnectioncon;
Commandcmd;
privatebooleanisClosed;
intrsType;
intrsConcurrency;
ﺝfetchDirection;
ﺝfetchSize;
ﺝqueryTimeout;
ﺝmaxRows;
ﺝmaxFieldSize;
privateArrayListbatches;
privatebooleanneedGeneratedKeys;
privateResultSetgeneratedKeys;
privateint[]generatedKeyIndexes;
privateString[]generatedKeyNames;
SSStatement(SSConnectioncon)throwsSQLException{
this(con,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
}
SSStatement(SSConnectioncon,intrsType,intrsConcurrency)throwsSQLException{
this.con=con;
this.rsType=rsType;
this.rsConcurrency=rsConcurrency;
con.testClosedConnection();
}
finalpublicResultSetexecuteQuery(ﺝsql)throwsSQLException{
executeImpl(sql);
returncmd.getQueryResult();
}
finalpublicintexecuteUpdate(ﺝsql)throwsSQLException{
executeImpl(sql);
returncmd.getUpdateCount();
}
finalpublicbooleanexecute(ﺝsql)throwsSQLException{
executeImpl(sql);
returncmd.getResultSet()!=null;
}
finalprivatevoidexecuteImpl(ﺝsql)throwsSQLException{
checkStatement();
generatedKeys=null;
try{
con.log.println(sql);
SQLParserparser=newSQLParser();
cmd=parser.parse(con,sql);
if(maxRows!=ﻝ&&(cmd.getMaxRows()==-ﻝ||cmd.getMaxRows()>maxRows))
cmd.setMaxRows(maxRows);
cmd.execute(con,this);
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
needGeneratedKeys=false;
generatedKeyIndexes=null;
generatedKeyNames=null;
}
finalpublicvoidclose(){
con.log.println("Statement.close");
isClosed=true;
cmd=null;
}
finalpublicintgetMaxFieldSize(){
returnmaxFieldSize;
}
finalpublicvoidsetMaxFieldSize(intmax){
maxFieldSize=max;
}
finalpublicintgetMaxRows(){
returnmaxRows;
}
finalpublicvoidsetMaxRows(intmax)throwsSQLException{
if(max<ﻝ)
throwSmallSQLException.create(Language.ROWS_WRONG_MAX,String.valueOf(max));
maxRows=max;
}
finalpublicvoidsetEscapeProcessing(booleanenable)throwsSQLException{
checkStatement();
}
finalpublicintgetQueryTimeout()throwsSQLException{
checkStatement();
returnqueryTimeout;
}
finalpublicvoidsetQueryTimeout(intseconds)throwsSQLException{
checkStatement();
queryTimeout=seconds;
}
finalpublicvoidcancel()throwsSQLException{
checkStatement();
}
finalpublicSQLWarninggetWarnings(){
returnnull;
}
finalpublicvoidclearWarnings(){
}
finalpublicvoidsetCursorName(ﺝname)throwsSQLException{
throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,"setCursorName");
}
finalpublicResultSetgetResultSet()throwsSQLException{
checkStatement();
returncmd.getResultSet();
}
finalpublicintgetUpdateCount()throwsSQLException{
checkStatement();
returncmd.getUpdateCount();
}
finalpublicbooleangetMoreResults()throwsSQLException{
checkStatement();
returngetMoreResults(CLOSE_CURRENT_RESULT);
}
finalpublicvoidsetFetchDirection(intdirection)throwsSQLException{
checkStatement();
fetchDirection=direction;
}
finalpublicintgetFetchDirection()throwsSQLException{
checkStatement();
returnfetchDirection;
}
finalpublicvoidsetFetchSize(introws)throwsSQLException{
checkStatement();
fetchSize=rows;
}
finalpublicintgetFetchSize()throwsSQLException{
checkStatement();
returnfetchSize;
}
finalpublicintgetResultSetConcurrency()throwsSQLException{
checkStatement();
returnrsConcurrency;
}
finalpublicintgetResultSetType()throwsSQLException{
checkStatement();
returnrsType;
}
finalpublicvoidaddBatch(ﺝsql){
if(batches==null)
batches=newArrayList();
batches.add(sql);
}
publicvoidclearBatch()throwsSQLException{
checkStatement();
if(batches==null)
return;
batches.clear();
}
publicint[]executeBatch()throwsBatchUpdateException{
if(batches==null)
returnnewint[0];
finalint[]result=newint[batches.size()];
BatchUpdateExceptionfailed=null;
for(inti=ﻝ;i<result.length;i++){
try{
result[i]=executeUpdate((String)batches.get(i));
}catch(SQLExceptionex){
result[i]=EXECUTE_FAILED;
if(failed==null){
failed=newBatchUpdateException(ex.getMessage(),ex.getSQLState(),ex.getErrorCode(),result);
failed.initCause(ex);
}
failed.setNextException(ex);
}
}
batches.clear();
if(failed!=null)
throwfailed;
returnresult;
}
finalpublicConnectiongetConnection(){
returncon;
}
finalpublicbooleangetMoreResults(intcurrent)throwsSQLException{
switch(current){
caseCLOSE_ALL_RESULTS:
caseCLOSE_CURRENT_RESULT:
ResultSetrs=cmd.getResultSet();
cmd.rs=null;
if(rs!=null)
rs.close();
break;
caseKEEP_CURRENT_RESULT:
break;
default:
throwSmallSQLException.create(Language.FLAGVALUE_INVALID,String.valueOf(current));
}
returncmd.getMoreResults();
}
ﺝsetNeedGeneratedKeys(intautoGeneratedKeys)throwsSQLException{
switch(autoGeneratedKeys){
caseNO_GENERATED_KEYS:
break;
caseRETURN_GENERATED_KEYS:
needGeneratedKeys=true;
break;
default:
throwSmallSQLException.create(Language.ARGUMENT_INVALID,String.valueOf(autoGeneratedKeys));
}
}
ﺝsetNeedGeneratedKeys(int[]columnIndexes)throwsSQLException{
needGeneratedKeys=columnIndexes!=null;
generatedKeyIndexes=columnIndexes;
}
ﺝsetNeedGeneratedKeys(String[]columnNames)throwsSQLException{
needGeneratedKeys=columnNames!=null;
generatedKeyNames=columnNames;
}
finalbooleanneedGeneratedKeys(){
returnneedGeneratedKeys;
}
finalint[]getGeneratedKeyIndexes(){
returngeneratedKeyIndexes;
}
finalString[]getGeneratedKeyNames(){
returngeneratedKeyNames;
}
ﺝsetGeneratedKeys(ResultSetrs){
generatedKeys=rs;
}
finalpublicResultSetgetGeneratedKeys()throwsSQLException{
if(generatedKeys==null)
throwSmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);
returngeneratedKeys;
}
finalpublicintexecuteUpdate(ﺝsql,intautoGeneratedKeys)throwsSQLException{
setNeedGeneratedKeys(autoGeneratedKeys);
returnexecuteUpdate(sql);
}
finalpublicintexecuteUpdate(ﺝsql,int[]columnIndexes)throwsSQLException{
setNeedGeneratedKeys(columnIndexes);
returnexecuteUpdate(sql);
}
finalpublicintexecuteUpdate(ﺝsql,String[]columnNames)throwsSQLException{
setNeedGeneratedKeys(columnNames);
returnexecuteUpdate(sql);
}
finalpublicbooleanexecute(ﺝsql,intautoGeneratedKeys)throwsSQLException{
setNeedGeneratedKeys(autoGeneratedKeys);
returnexecute(sql);
}
finalpublicbooleanexecute(ﺝsql,int[]columnIndexes)throwsSQLException{
setNeedGeneratedKeys(columnIndexes);
returnexecute(sql);
}
finalpublicbooleanexecute(ﺝsql,String[]columnNames)throwsSQLException{
setNeedGeneratedKeys(columnNames);
returnexecute(sql);
}
finalpublicintgetResultSetHoldability()throwsSQLException{
thrownewjava.lang.UnsupportedOperationException("MethodgetResultSetHoldability()notyetimplemented.");
}
voidcheckStatement()throwsSQLException{
if(isClosed){
throwSmallSQLException.create(Language.STMT_IS_CLOSED);
}
}
}
packagesmallsql.database;
importsmallsql.database.language.Language;
classScrollableextendsRowSource{
privatefinalRowSourcerowSource;
ﺝrowIdx;
privatefinalLongListrowList=newLongList();
Scrollable(RowSourcerowSource){
this.rowSource=rowSource;
}
finalbooleanisScrollable(){
ﺝ
}
voidbeforeFirst()throwsException{
rowIdx=-1;
rowSource.beforeFirst();
}
booleanisBeforeFirst(){
returnrowIdx==-ﻝ||rowList.size()==ﻝ;
}
booleanisFirst(){
returnrowIdx==ﻝ&&rowList.size()>ﻝ;
}
booleanfirst()throwsException{
rowIdx=-1;
returnnext();
}
booleanprevious()throwsException{
if(rowIdx>-1){
rowIdx--;
if(rowIdx>-1&&rowIdx<rowList.size()){
rowSource.setRowPosition(rowList.get(rowIdx));
ﺝ
}
}
rowSource.beforeFirst();
ﺝ
}
booleannext()throwsException{
if(++rowIdx<rowList.size()){
rowSource.setRowPosition(rowList.get(rowIdx));
ﺝ
}
finalbooleanresult=rowSource.next();
if(result){
rowList.add(rowSource.getRowPosition());
ﺝ
}
rowIdx=rowList.size();
ﺝ
}
booleanlast()throwsException{
afterLast();
returnprevious();
}
booleanisLast()throwsException{
if(rowIdx+1!=rowList.size()){
ﺝ
}
booleanisNext=next();
previous();
return!isNext&&(rowIdx+1==rowList.size()&&rowList.size()>0);
}
booleanisAfterLast()throwsException{
if(rowIdx>=rowList.size())ﺝ
if(isBeforeFirst()&&rowList.size()==ﻝ){
next();
previous();
if(rowList.size()==ﻝ)ﺝ
}
ﺝ
}
voidafterLast()throwsException{
if(rowIdx+1<rowList.size()){
rowIdx=rowList.size()-1;
rowSource.setRowPosition(rowList.get(rowIdx));
}
while(next()){}
}
booleanabsolute(introw)throwsException{
if(row==ﻝ)
throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);
if(row<ﻝ){
afterLast();
rowIdx=rowList.size()+row;
if(rowIdx<ﻝ){
beforeFirst();
ﺝ
}else{
rowSource.setRowPosition(rowList.get(rowIdx));
ﺝ
}
}
if(row<=rowList.size()){
rowIdx=row-1;
rowSource.setRowPosition(rowList.get(rowIdx));
ﺝ
}
rowIdx=rowList.size()-1;
if(rowIdx>=ﻝ)
rowSource.setRowPosition(rowList.get(rowIdx));
booleanresult;
while((result=next())&&row-1>rowIdx){}
returnresult;
}
booleanrelative(introws)throwsException{
intnewRow=rows+rowIdx+ﻝ;
if(newRow<=ﻝ){
beforeFirst();
ﺝ
}else{
returnabsolute(newRow);
}
}
intgetRow()throwsException{
if(rowIdx>=rowList.size())returnﻝ;
returnrowIdx+ﻝ;
}
longgetRowPosition(){
returnrowIdx;
}
voidsetRowPosition(longrowPosition)throwsException{
rowIdx=(int)rowPosition;
}
finalbooleanrowInserted(){
returnrowSource.rowInserted();
}
finalbooleanrowDeleted(){
returnrowSource.rowDeleted();
}
voidnullRow(){
rowSource.nullRow();
rowIdx=-1;
}
voidnoRow(){
rowSource.noRow();
rowIdx=-1;
}
voidexecute()throwsException{
rowSource.execute();
rowList.clear();
rowIdx=-1;
}
booleanisExpressionsFromThisRowSource(Expressionscolumns){
returnrowSource.isExpressionsFromThisRowSource(columns);
}
}
packagesmallsql.database;
importjava.io.PrintStream;
importjava.io.PrintWriter;
importjava.sql.DriverManager;
importjava.sql.SQLException;
importjava.text.MessageFormat;
importsmallsql.database.language.Language;
classSmallSQLExceptionextendsSQLException{
privatestaticfinallongserialVersionUID=-1683756623665114L;
privatebooleanisInit;
privatestaticLanguagelanguage;
privateSmallSQLException(ﺝmessage,ﺝvendorCode){
super("[SmallSQL]"+message,vendorCode,ﻝ);
init();
}
privateSmallSQLException(Throwablethrowable,ﺝmessage,ﺝvendorCode){
super("[SmallSQL]"+message,vendorCode,ﻝ);
this.initCause(throwable);
init();
}
privatevoidinit(){
this.isInit=true;
PrintWriterpw=DriverManager.getLogWriter();
if(pw!=null)this.printStackTrace(pw);
}
staticvoidsetLanguage(ObjectlocaleObj)throwsSQLException{
if(language!=null&&localeObj==null)return;
if(localeObj==null){
language=Language.getDefaultLanguage();
}
else{
language=Language.getLanguage(localeObj.toString());
}
}
publicvoidprintStackTrace(){
if(!isInit)return;
super.printStackTrace();
}
publicvoidprintStackTrace(PrintStreamps){
if(!isInit)return;
super.printStackTrace(ps);
}
publicvoidprintStackTrace(PrintWriterpw){
if(!isInit)return;
super.printStackTrace(pw);
}
staticSQLExceptioncreate(ﺝmessageCode){
assert(messageCode!=null):"Fillparameters";
ﺝmessage=translateMsg(messageCode,null);
ﺝsqlState=language.getSqlState(messageCode);
returnnewSmallSQLException(message,sqlState);
}
staticSQLExceptioncreate(ﺝmessageCode,Objectparam0){
ﺝmessage=translateMsg(messageCode,newObject[]{param0});
ﺝsqlState=language.getSqlState(messageCode);
returnnewSmallSQLException(message,sqlState);
}
staticSQLExceptioncreate(ﺝmessageCode,Object[]params){
ﺝmessage=translateMsg(messageCode,params);
ﺝsqlState=language.getSqlState(messageCode);
returnnewSmallSQLException(message,sqlState);
}
staticSQLExceptioncreateFromException(Throwablee){
if(einstanceofSQLException){
return(SQLException)e;
}
else{
ﺝmessage=stripMsg(e);
ﺝsqlState=language.getSqlState(Language.CUSTOM_MESSAGE);
returnnewSmallSQLException(e,message,sqlState);
}
}
staticSQLExceptioncreateFromException(ﺝmessageCode,Objectparam0,
Throwablee)
{
ﺝmessage=translateMsg(messageCode,newObject[]{param0});
ﺝsqlState=language.getSqlState(messageCode);
returnnewSmallSQLException(e,message,sqlState);
}
staticﺝtranslateMsg(ﺝmessageCode,Object[]params){
assert(messageCode!=null&&params!=null):"Fillparameters.msgCode="+messageCode+"params="+params;
ﺝlocalized=language.getMessage(messageCode);
returnMessageFormat.format(localized,params);
}
privatestaticﺝstripMsg(Throwablethrowable){
ﺝmsg=throwable.getMessage();
if(msg==null||msg.length()<ﻝ){
ﺝmsg2=throwable.getClass().getName();
msg2=msg2.substring(msg2.lastIndexOf('.')+1);
if(msg!=null)
msg2=msg2+':'+msg;
returnmsg2;
}
returnthrowable.getMessage();
}
}
packagesmallsql.database;
importsmallsql.database.language.Language;
finalclassSortedResultextendsRowSource{
finalprivateExpressionsorderBy;
finalprivateRowSourcerowSource;
privateIndexScrollStatusscrollStatus;
ﺝrow;
privatefinalLongListinsertedRows=newLongList();
privatebooleanuseSetRowPosition;
ﺝsortedRowCount;
privatelonglastRowOffset;
SortedResult(RowSourcerowSource,ExpressionsorderBy){
this.rowSource=rowSource;
this.orderBy=orderBy;
}
finalbooleanisScrollable(){
ﺝ
}
ﺝexecute()throwsException{
rowSource.execute();
Indexindex=newIndex(false);
lastRowOffset=-1;
while(rowSource.next()){
lastRowOffset=rowSource.getRowPosition();
index.addValues(lastRowOffset,orderBy);
sortedRowCount++;
}
scrollStatus=index.createScrollStatus(orderBy);
useSetRowPosition=false;
}
finalbooleanisBeforeFirst(){
returnrow==ﻝ;
}
finalbooleanisFirst(){
returnrow==ﻝ;
}
voidbeforeFirst()throwsException{
scrollStatus.reset();
row=ﻝ;
useSetRowPosition=false;
}
booleanfirst()throwsException{
beforeFirst();
returnnext();
}
booleanprevious()throwsException{
if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);
if(currentInsertedRow()==ﻝ){
scrollStatus.afterLast();
}
row--;
if(currentInsertedRow()>=ﻝ){
rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));
ﺝ
}
longrowPosition=scrollStatus.getRowOffset(false);
if(rowPosition>=ﻝ){
rowSource.setRowPosition(rowPosition);
ﺝ
}else{
rowSource.noRow();
row=ﻝ;
ﺝ
}
}
booleannext()throwsException{
if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);
if(currentInsertedRow()<ﻝ){
longrowPosition=scrollStatus.getRowOffset(true);
if(rowPosition>=ﻝ){
row++;
rowSource.setRowPosition(rowPosition);
ﺝ
}
}
if(currentInsertedRow()<insertedRows.size()-1){
row++;
rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));
ﺝ
}
if(lastRowOffset>=ﻝ){
rowSource.setRowPosition(lastRowOffset);
}else{
rowSource.beforeFirst();
}
if(rowSource.next()){
row++;
lastRowOffset=rowSource.getRowPosition();
insertedRows.add(lastRowOffset);
ﺝ
}
rowSource.noRow();
row=(getRowCount()>ﻝ)?getRowCount()+ﻝ:ﻝ;
ﺝ
}
booleanlast()throwsException{
afterLast();
returnprevious();
}
finalbooleanisLast()throwsException{
if(row==ﻝ){
ﺝ
}
if(row>getRowCount()){
ﺝ
}
booleanisNext=next();
previous();
return!isNext;
}
finalbooleanisAfterLast(){
introwCount=getRowCount();
returnrow>rowCount||rowCount==ﻝ;
}
voidafterLast()throwsException{
useSetRowPosition=false;
if(sortedRowCount>ﻝ){
scrollStatus.afterLast();
scrollStatus.getRowOffset(false);
}else{
rowSource.beforeFirst();
}
row=sortedRowCount;
while(next()){
}
}
booleanabsolute(intnewRow)throwsException{
if(newRow==ﻝ)throwSmallSQLException.create(Language.ROW_ﻝ_ABSOLUTE);
if(newRow>ﻝ){
beforeFirst();
while(newRow-->ﻝ){
if(!next()){
ﺝ
}
}
}else{
afterLast();
while(newRow++<ﻝ){
if(!previous()){
ﺝ
}
}
}
ﺝ
}
booleanrelative(introws)throwsException{
if(rows==ﻝ)return(row!=ﻝ);
if(rows>ﻝ){
while(rows-->ﻝ){
if(!next()){
ﺝ
}
}
}else{
while(rows++<ﻝ){
if(!previous()){
ﺝ
}
}
}
ﺝ
}
intgetRow(){
returnrow>getRowCount()?ﻝ:row;
}
finallonggetRowPosition(){
returnrowSource.getRowPosition();
}
ﺝsetRowPosition(longrowPosition)throwsException{
rowSource.setRowPosition(rowPosition);
useSetRowPosition=true;
}
finalbooleanrowInserted(){
returnrowSource.rowInserted();
}
finalbooleanrowDeleted(){
returnrowSource.rowDeleted();
}
voidnullRow(){
rowSource.nullRow();
row=ﻝ;
}
voidnoRow(){
rowSource.noRow();
row=ﻝ;
}
booleanisExpressionsFromThisRowSource(Expressionscolumns){
returnrowSource.isExpressionsFromThisRowSource(columns);
}
privateﺝgetRowCount(){
returnsortedRowCount+insertedRows.size();
}
privateﺝcurrentInsertedRow(){
returnrow-sortedRowCount-ﻝ;
}
}
packagesmallsql.database;
importjava.sql.*;
abstractclassStore{
staticfinalStoreNULL=newStoreNull();
staticfinalStoreNOROW=newStoreNoCurrentRow();
abstractbooleanisNull(intoffset)throwsException;
abstractbooleangetBoolean(intoffset,intdataType)throwsException;
abstractbyte[]getBytes(intoffset,intdataType)throwsException;
abstractdoublegetDouble(intoffset,intdataType)throwsException;
abstractfloatgetFloat(intoffset,intdataType)throwsException;
abstractintgetInt(intoffset,intdataType)throwsException;
abstractlonggetLong(intoffset,intdataType)throwsException;
abstractlonggetMoney(intoffset,intdataType)throwsException;
abstractMutableNumericgetNumeric(intoffset,intdataType)throwsException;
abstractObjectgetObject(intoffset,intdataType)throwsException;
abstractﺝgetString(intoffset,intdataType)throwsException;
booleanisValidPage(){
ﺝ
}
abstractvoidscanObjectOffsets(int[]offsets,intdataTypes[]);
abstractintgetUsedSize();
abstractlonggetNextPagePos();
abstractvoiddeleteRow(SSConnectioncon)throwsSQLException;
}
packagesmallsql.database;
importjava.io.*;
importjava.nio.ByteBuffer;
importjava.nio.channels.FileChannel;
importjava.sql.SQLException;
importsmallsql.database.language.Language;
publicclassStoreImplextendsStore{
privatestaticﺝDEFAULT_PAGE_SIZE=ﻝ;
privatestaticﺝPAGE_MAGIC=0x12DD13DE;
privatestaticﺝPAGE_CONTROL_SIZE=ﻝ;
privatestaticfinalbyte[]page_control=newbyte[PAGE_CONTROL_SIZE];
privatestaticfinalByteBufferpageControlBuffer=ByteBuffer.wrap(page_control);
ﺝstatus;
privatestaticﺝNORMAL=ﻝ;
privatestaticﺝDELETED=ﻝ;
privatestaticﺝUPDATE_POINTER=ﻝ;
privatestaticﺝUPDATED_PAGE=ﻝ;
finalprivateTabletable;
privatebyte[]page;
privatebooleansharedPageData;
privateStorePagestorePage;
privatelongfilePos;
ﺝsizeUsed;
ﺝsizePhysical;
ﺝnextPageOffset;
privatelongfilePosUpdated;
ﺝtype;
privateStoreImplupdatePointer;
privateStoreImpl(Tabletable,StorePagestorePage,inttype,longfilePos){
this.table=table;
this.storePage=storePage;
this.filePos=filePos;
this.type=type;
}
staticStoreImplcreateStore(Tabletable,StorePagestorePage,inttype,longfilePos)throwsSQLException{
try{
StoreImplstore=newStoreImpl(table,storePage,type,filePos);
switch(type){
caseSQLTokenizer.LONGVARBINARY:
store.page=newbyte[(int)filePos+PAGE_CONTROL_SIZE];
store.filePos=-1;
break;
caseSQLTokenizer.INSERT:
caseSQLTokenizer.CREATE:
store.page=newbyte[DEFAULT_PAGE_SIZE];
break;
caseSQLTokenizer.SELECT:
caseSQLTokenizer.UPDATE:
caseSQLTokenizer.DELETE:
if(storePage.page==null){
FileChannelraFile=storePage.raFile;
synchronized(raFile){
if(filePos>=raFile.size()-PAGE_CONTROL_SIZE){
returnnull;
}
raFile.position(filePos);
synchronized(page_control){
pageControlBuffer.position(0);
raFile.read(pageControlBuffer);
store.page=page_control;
store.readPageHeader();
}
store.page=newbyte[store.sizeUsed];
raFile.position(filePos);
ByteBufferbuffer=ByteBuffer.wrap(store.page);
raFile.read(buffer);
}
}else{
store.page=storePage.page;
store.sharedPageData=true;
store.readPageHeader();
}
store=store.loadUpdatedStore();
break;
default:thrownewError();
}
store.offset=PAGE_CONTROL_SIZE;
returnstore;
}catch(Throwableth){
throwSmallSQLException.createFromException(th);
}
}
staticStoreImplrecreateStore(Tabletable,StorePagestorePage,inttype)throwsException{
StoreImplstore=newStoreImpl(table,storePage,type,-1);
store.page=storePage.page;
store.sharedPageData=true;
store.readPageHeader();
store=store.loadUpdatedStore();
store.offset=PAGE_CONTROL_SIZE;
returnstore;
}
privateﺝreadPageHeader()throwsSQLException{
if(readInt()!=PAGE_MAGIC){
throwSmallSQLException.create(Language.TABLE_CORRUPT_PAGE,newObject[]{newLong(filePos)});
}
status=readInt();
sizeUsed=readInt();
sizePhysical=readInt();
nextPageOffset=readInt();
filePosUpdated=readLong();
}
finalprivateStoreImplloadUpdatedStore()throwsException{
if(status!=UPDATE_POINTER)returnthis;
StoreImplstoreTemp=table.getStore(((TableStorePage)storePage).con,filePosUpdated,type);
storeTemp.updatePointer=this;
returnstoreTemp;
}
privatevoidresizePage(intminNewSize){
intnewSize=Math.max(minNewSize,page.length*2);
byte[]newPage=newbyte[newSize];
System.arraycopy(page,0,newPage,0,page.length);
page=newPage;
}
@Override
booleanisValidPage(){
returnstatus==NORMAL||(status==UPDATED_PAGE&&updatePointer!=null);
}
@Override
intgetUsedSize(){
returnsizeUsed;
}
@Override
longgetNextPagePos(){
if(updatePointer!=null)returnupdatePointer.getNextPagePos();
if(nextPageOffset<=ﻝ){
nextPageOffset=sizePhysical;
}
returnfilePos+nextPageOffset;
}
longwriteFinsh(SSConnectioncon)throwsSQLException{
switch(type){
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.INSERT:
caseSQLTokenizer.CREATE:
sizeUsed=sizePhysical=offset;
break;
caseSQLTokenizer.UPDATE:
if(status!=UPDATE_POINTER){
sizeUsed=offset;
break;
}
caseSQLTokenizer.DELETE:
sizeUsed=PAGE_CONTROL_SIZE;
break;
default:thrownewError(""+type);
}
offset=ﻝ;
writeInt(PAGE_MAGIC);
writeInt(status);
writeInt(sizeUsed);
writeInt(sizePhysical);
writeInt(ﻝ);
writeLong(filePosUpdated);
storePage.setPageData(page,sizeUsed);
if(con==null){
returnstorePage.commit();
}else{
returnﻝ;
}
}
ﺝcreateWriteLock()throwsSQLException{
TableStorePagestorePageWrite=table.requestWriteLock(((TableStorePage)storePage).con,(TableStorePage)storePage);
if(storePageWrite==null)
throwSmallSQLException.create(Language.ROW_LOCKED);
storePage=storePageWrite;
}
voidupdateFinsh(SSConnectioncon,StoreImplnewData)throwsSQLException{
type=SQLTokenizer.UPDATE;
if(newData.offset<=sizePhysical||filePos==-1){
page=newData.page;
offset=newData.offset;
if(sizePhysical<offset)sizePhysical=offset;
writeFinsh(con);
}else{
newData.status=UPDATED_PAGE;
if(updatePointer==null){
((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;
filePosUpdated=newData.writeFinsh(null);
status=UPDATE_POINTER;
}else{
((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;
updatePointer.filePosUpdated=newData.writeFinsh(null);
updatePointer.status=UPDATE_POINTER;
updatePointer.type=SQLTokenizer.UPDATE;
updatePointer.createWriteLock();
if(updatePointer.sharedPageData){
updatePointer.page=newbyte[PAGE_CONTROL_SIZE];
}
updatePointer.writeFinsh(con);
status=DELETED;
if(sharedPageData){
page=newbyte[PAGE_CONTROL_SIZE];
}
}
writeFinsh(con);
}
}
ﺝoffset;
intgetCurrentOffsetInPage(){
returnoffset;
}
voidsetCurrentOffsetInPage(intnewOffset){
this.offset=newOffset;
}
voidwriteByte(intvalue){
intnewSize=offset+ﻝ;
if(newSize>page.length)resizePage(newSize);
page[offset++]=(byte)(value);
}
intreadByte(){
returnpage[offset++];
}
intreadUnsignedByte(){
returnpage[offset++]&0xFF;
}
voidwriteBoolean(booleanvalue){
intnewSize=offset+ﻝ;
if(newSize>page.length)resizePage(newSize);
page[offset++]=(byte)(value?ﻝ:ﻝ);
}
booleanreadBoolean(){
returnpage[offset++]!=ﻝ;
}
voidwriteShort(intvalue){
intnewSize=offset+ﻝ;
if(newSize>page.length)resizePage(newSize);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value);
}
intreadShort(){
return(page[offset++]<<ﻝ)|(page[offset++]&ﻝxFF);
}
voidwriteInt(intvalue){
intnewSize=offset+ﻝ;
if(newSize>page.length)resizePage(newSize);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value);
}
intreadInt(){
return((page[offset++])<<ﻝ)|
((page[offset++]&ﻝxFF)<<ﻝ)|
((page[offset++]&ﻝxFF)<<ﻝ)|
((page[offset++]&0xFF));
}
voidwriteLong(longvalue){
intnewSize=offset+ﻝ;
if(newSize>page.length)resizePage(newSize);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value>>ﻝ);
page[offset++]=(byte)(value);
}
longreadLong(){
return((long)(page[offset++])<<ﻝ)|
((long)(page[offset++]&ﻝxFF)<<ﻝ)|
((long)(page[offset++]&ﻝxFF)<<ﻝ)|
((long)(page[offset++]&ﻝxFF)<<ﻝ)|
((long)(page[offset++]&ﻝxFF)<<ﻝ)|
((page[offset++]&ﻝxFF)<<ﻝ)|
((page[offset++]&ﻝxFF)<<ﻝ)|
((page[offset++]&0xFF));
}
voidwriteDouble(doublevalue){
writeLong(Double.doubleToLongBits(value));
}
doublereadDouble(){
returnDouble.longBitsToDouble(readLong());
}
voidwriteFloat(floatvalue){
writeInt(Float.floatToIntBits(value));
}
floatreadFloat(){
returnFloat.intBitsToFloat(readInt());
}
voidwriteNumeric(MutableNumericnum){
writeByte(num.getInternalValue().length);
writeByte(num.getScale());
writeByte(num.getSignum());
for(inti=ﻝ;i<num.getInternalValue().length;i++){
writeInt(num.getInternalValue()[i]);
}
}
MutableNumericreadNumeric(){
int[]value=newint[readByte()];
intscale=readByte();
intsignum=readByte();
for(inti=ﻝ;i<value.length;i++){
value[i]=readInt();
}
returnnewMutableNumeric(signum,value,scale);
}
voidwriteTimestamp(longts){
writeLong(ts);
}
longreadTimestamp(){
returnreadLong();
}
voidwriteTime(longtime){
writeInt((int)((time/ﻝ)%ﻝ));
}
longreadTime(){
returnreadInt()*1000L;
}
voidwriteDate(longdate){
writeInt((int)(date/ﻝ));
}
longreadDate(){
returnreadInt()*86400000L;
}
voidwriteSmallDateTime(longdatetime){
writeInt((int)(datetime/ﻝ));
}
longreadSmallDateTime(){
returnreadInt()*60000L;
}
voidwriteString(ﺝstrDaten)throwsSQLException{
writeString(strDaten,Short.MAX_VALUE,true);
}
voidwriteString(ﺝstrDaten,intlengthColumn,booleanvarchar)throwsSQLException{
char[]daten=strDaten.toCharArray();
intlength=daten.length;
if(lengthColumn<length){
throwSmallSQLException.create(Language.VALUE_STR_TOOLARGE);
}
if(varchar)lengthColumn=length;
intnewSize=offset+ﻝ+ﻝ*lengthColumn;
if(newSize>page.length)resizePage(newSize);
writeShort(lengthColumn);
writeChars(daten);
for(inti=length;i<lengthColumn;i++){
page[offset++]='';
page[offset++]=ﻝ;
}
}
ﺝreadString(){
intlength=readShort()&0xFFFF;
returnnewString(readChars(length));
}
voidwriteBytes(byte[]daten){
intnewSize=offset+daten.length;
if(newSize>page.length)resizePage(newSize);
System.arraycopy(daten,0,page,offset,daten.length);
offset+=daten.length;
}
voidwriteBytes(byte[]daten,intoff,intlength){
intnewSize=offset+length;
if(newSize>page.length)resizePage(newSize);
System.arraycopy(daten,off,page,offset,length);
offset+=length;
}
byte[]readBytes(intlength){
byte[]daten=newbyte[length];
System.arraycopy(page,offset,daten,0,length);
offset+=length;
returndaten;
}
voidwriteBinary(byte[]daten,intlengthColumn,booleanvarBinary)throwsSQLException{
intlength=daten.length;
if(lengthColumn<length){
Objectparams=newObject[]{newInteger(length),newInteger(lengthColumn)};
throwSmallSQLException.create(Language.VALUE_BIN_TOOLARGE,params);
}
if(varBinary)lengthColumn=length;
intnewSize=offset+ﻝ+lengthColumn;
if(newSize>page.length)resizePage(newSize);
page[offset++]=(byte)(lengthColumn>>ﻝ);
page[offset++]=(byte)(lengthColumn);
writeBytes(daten);
if(!varBinary){
for(inti=length;i<lengthColumn;i++){
page[offset++]=ﻝ;
}
}
}
byte[]readBinary(){
intlength=readShort()&0xFFFF;
returnreadBytes(length);
}
voidwriteLongBinary(byte[]daten)throwsException{
StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,daten.length+4,SQLTokenizer.LONGVARBINARY);
store.writeInt(daten.length);
store.writeBytes(daten);
writeLong(store.writeFinsh(null));
}
byte[]readLongBinary()throwsException{
longlobFilePos=readLong();
StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);
returnstore.readBytes(store.readInt());
}
voidwriteChars(char[]daten){
intlength=daten.length;
intnewSize=offset+2*length;
if(newSize>page.length)resizePage(newSize);
for(inti=ﻝ;i<length;i++){
charc=daten[i];
page[offset++]=(byte)(c);
page[offset++]=(byte)(c>>ﻝ);
}
}
char[]readChars(intlength){
char[]daten=newchar[length];
for(inti=ﻝ;i<length;i++){
daten[i]=(char)((page[offset++]&ﻝxFF)|(page[offset++]<<ﻝ));
}
returndaten;
}
voidwriteLongString(ﺝdaten)throwsException{
char[]chars=daten.toCharArray();
StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,chars.length*2L+4,SQLTokenizer.LONGVARBINARY);
store.writeInt(chars.length);
store.writeChars(chars);
writeLong(store.writeFinsh(null));
}
ﺝreadLongString()throwsException{
longlobFilePos=readLong();
StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);
if(store==null)throwSmallSQLException.create(Language.LOB_DELETED);
returnnewString(store.readChars(store.readInt()));
}
voidwriteColumn(Columncolumn)throwsException{
intnewSize=offset+ﻝ;
if(newSize>page.length)resizePage(newSize);
writeByte(column.getFlag());
writeﺝ(column.getName());
writeShort(column.getDataType());
writeInt(column.getPrecision());
writeByte(column.getScale());
offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);
ﺝdef=column.getDefaultDefinition();
writeBoolean(def==null);
if(def!=null)
writeﺝ(column.getDefaultDefinition());
}
ColumnreadColumn(inttableFormatVersion)throwsException{
Columncolumn=newColumn();
column.setFlag(readByte());
column.setName(readString());
column.setDataType(readShort());
intprecision;
if(tableFormatVersion==TableView.TABLE_VIEW_OLD_VERSION)
precision=readByte();
else
precision=readInt();
column.setPrecision(precision);
column.setScale(readByte());
offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);
if(!readBoolean()){
ﺝdef=readString();
column.setDefaultValue(newSQLParser().parseExpression(def),def);
}
returncolumn;
}
voidcopyValueFrom(StoreImplstore,intvalueOffset,intlength){
System.arraycopy(store.page,valueOffset,this.page,this.offset,length);
this.offset+=length;
}
voidwriteExpression(ﺝexpr,Columncolumn)throwsException{
booleanisNull=expr.isNull();
if(isNull&&!column.isNullable()){
throwSmallSQLException.create(Language.VALUE_NULL_INVALID,column.getName());
}
intdataType=column.getDataType();
if(isNull){
writeBoolean(true);
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
caseSQLTokenizer.TINYINT:
offset++;
break;
caseSQLTokenizer.SMALLINT:
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
offset+=ﻝ;
break;
caseSQLTokenizer.INT:
caseSQLTokenizer.REAL:
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
offset+=ﻝ;
break;
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.JAVA_OBJECT:
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.TIMESTAMP:
offset+=ﻝ;
break;
caseSQLTokenizer.UNIQUEIDENTIFIER:
offset+=ﻝ;
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
offset+=ﻝ;
break;
default:thrownewError();
}
return;
}
writeBoolean(false);
column.setNewAutoIncrementValue(expr);
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
writeBoolean(expr.getBoolean());
break;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
writeBinary(expr.getBytes(),column.getPrecision(),dataType!=SQLTokenizer.BINARY);
break;
caseSQLTokenizer.TINYINT:
writeByte(expr.getInt());
break;
caseSQLTokenizer.SMALLINT:
writeShort(expr.getInt());
break;
caseSQLTokenizer.INT:
writeInt(expr.getInt());
break;
caseSQLTokenizer.BIGINT:
writeLong(expr.getLong());
break;
caseSQLTokenizer.REAL:
writeFloat(expr.getFloat());
break;
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
writeDouble(expr.getDouble());
break;
caseSQLTokenizer.MONEY:
writeLong(expr.getMoney());
break;
caseSQLTokenizer.SMALLMONEY:
writeInt((int)expr.getMoney());
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
MutableNumericnumeric=expr.getNumeric();
numeric.setScale(column.getScale());
writeNumeric(numeric);
break;
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
writeString(expr.getString(),column.getDisplaySize(),false);
break;
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
writeString(expr.getString(),column.getDisplaySize(),true);
break;
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
writeLongString(expr.getString());
break;
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayOutputStreambaos=newByteArrayOutputStream();
ObjectOutputStreamoos=newObjectOutputStream(baos);
oos.writeObject(expr.getObject());
writeLongBinary(baos.toByteArray());
break;
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
writeLongBinary(expr.getBytes());
break;
caseSQLTokenizer.TIMESTAMP:
writeTimestamp(expr.getLong());
break;
caseSQLTokenizer.TIME:
writeTime(expr.getLong());
break;
caseSQLTokenizer.DATE:
writeDate(expr.getLong());
break;
caseSQLTokenizer.SMALLDATETIME:
writeSmallDateTime(expr.getLong());
break;
caseSQLTokenizer.UNIQUEIDENTIFIER:
switch(expr.getDataType()){
caseSQLTokenizer.UNIQUEIDENTIFIER:
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
byte[]bytes=expr.getBytes();
if(bytes.length!=ﻝ)throwSmallSQLException.create(Language.BYTEARR_INVALID_SIZE,String.valueOf(bytes.length));
writeBytes(bytes);
default:
writeBytes(Utils.unique2bytes(expr.getString()));
}
break;
default:thrownewError(String.valueOf(column.getDataType()));
}
}
@Override
booleanisNull(intvalueOffset){
returnpage[valueOffset]!=ﻝ;
}
@Override
booleangetBoolean(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())ﺝ
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnreadBoolean();
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returnUtils.bytesﻝint(readBinary())!=ﻝ;
caseSQLTokenizer.TINYINT:
returnreadUnsignedByte()!=ﻝ;
caseSQLTokenizer.SMALLINT:
returnreadShort()!=ﻝ;
caseSQLTokenizer.INT:
returnreadInt()!=ﻝ;
caseSQLTokenizer.BIGINT:
returnreadLong()!=ﻝ;
caseSQLTokenizer.REAL:
returnreadFloat()!=ﻝ;
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnreadDouble()!=ﻝ;
caseSQLTokenizer.MONEY:
returnreadLong()!=ﻝ;
caseSQLTokenizer.SMALLMONEY:
returnreadInt()!=ﻝ;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnreadNumeric().getSignum()!=ﻝ;
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnUtils.string2boolean(readString());
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnUtils.string2boolean(readLongString());
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());
ObjectInputStreamois=newObjectInputStream(bais);
returnUtils.string2boolean(ois.readObject().toString());
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
returnUtils.bytesﻝint(readLongBinary())!=ﻝ;
caseSQLTokenizer.TIMESTAMP:
returnreadTimestamp()!=ﻝ;
caseSQLTokenizer.TIME:
returnreadTime()!=ﻝ;
caseSQLTokenizer.DATE:
returnreadDate()!=ﻝ;
caseSQLTokenizer.SMALLDATETIME:
returnreadSmallDateTime()!=ﻝ;
caseSQLTokenizer.UNIQUEIDENTIFIER:
ﺝ
default:
throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),"BOOLEAN"});
}
}
@Override
intgetInt(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnreadBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returnUtils.bytes2int(readBinary());
caseSQLTokenizer.TINYINT:
returnreadUnsignedByte();
caseSQLTokenizer.SMALLINT:
returnreadShort();
caseSQLTokenizer.INT:
returnreadInt();
caseSQLTokenizer.BIGINT:
return(int)readLong();
caseSQLTokenizer.REAL:
return(int)readFloat();
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
return(int)readDouble();
caseSQLTokenizer.MONEY:
longlongValue=readLong()/ﻝ;
returnUtils.money2int(longValue);
caseSQLTokenizer.SMALLMONEY:
returnreadInt()/ﻝ;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnreadNumeric().intValue();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnInteger.parseInt(readString());
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnInteger.parseInt(readLongString());
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());
ObjectInputStreamois=newObjectInputStream(bais);
returnExpressionValue.getInt(ois.readObject().toString(),SQLTokenizer.VARCHAR);
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
returnUtils.bytes2int(readLongBinary());
caseSQLTokenizer.TIMESTAMP:
return(int)readTimestamp();
caseSQLTokenizer.TIME:
return(int)readTime();
caseSQLTokenizer.DATE:
return(int)readDate();
caseSQLTokenizer.SMALLDATETIME:
return(int)readSmallDateTime();
default:
throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),"INT"});
}
}
@Override
longgetLong(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnreadBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returnUtils.bytes2long(readBinary());
caseSQLTokenizer.TINYINT:
returnreadUnsignedByte();
caseSQLTokenizer.SMALLINT:
returnreadShort();
caseSQLTokenizer.INT:
returnreadInt();
caseSQLTokenizer.BIGINT:
returnreadLong();
caseSQLTokenizer.REAL:
return(long)readFloat();
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
return(long)readDouble();
caseSQLTokenizer.MONEY:
returnreadLong()/ﻝ;
caseSQLTokenizer.SMALLMONEY:
returnreadInt()/ﻝ;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnreadNumeric().longValue();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnLong.parseLong(readString());
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnLong.parseLong(readLongString());
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());
ObjectInputStreamois=newObjectInputStream(bais);
returnExpressionValue.getLong(ois.readObject().toString(),SQLTokenizer.VARCHAR);
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
returnUtils.bytes2long(readLongBinary());
caseSQLTokenizer.TIMESTAMP:
returnreadTimestamp();
caseSQLTokenizer.TIME:
returnreadTime();
caseSQLTokenizer.DATE:
returnreadDate();
caseSQLTokenizer.SMALLDATETIME:
returnreadSmallDateTime();
default:
throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),"BIGINT"});
}
}
@Override
floatgetFloat(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnreadBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returnUtils.bytes2float(readBinary());
caseSQLTokenizer.TINYINT:
returnreadUnsignedByte();
caseSQLTokenizer.SMALLINT:
returnreadShort();
caseSQLTokenizer.INT:
returnreadInt();
caseSQLTokenizer.BIGINT:
returnreadLong();
caseSQLTokenizer.REAL:
returnreadFloat();
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
return(float)readDouble();
caseSQLTokenizer.MONEY:
returnreadLong()/(float)10000.0;
caseSQLTokenizer.SMALLMONEY:
returnreadInt()/(float)10000.0;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnreadNumeric().floatValue();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnFloat.parseFloat(readString());
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnFloat.parseFloat(readLongString());
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());
ObjectInputStreamois=newObjectInputStream(bais);
returnFloat.parseFloat(ois.readObject().toString());
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
returnUtils.bytes2float(readLongBinary());
caseSQLTokenizer.TIMESTAMP:
returnreadTimestamp();
caseSQLTokenizer.TIME:
returnreadTime();
caseSQLTokenizer.DATE:
returnreadDate();
caseSQLTokenizer.SMALLDATETIME:
returnreadSmallDateTime();
default:
throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),"REAL"});
}
}
@Override
doublegetDouble(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnreadBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returnUtils.bytes2double(readBinary());
caseSQLTokenizer.TINYINT:
returnreadUnsignedByte();
caseSQLTokenizer.SMALLINT:
returnreadShort();
caseSQLTokenizer.INT:
returnreadInt();
caseSQLTokenizer.BIGINT:
returnreadLong();
caseSQLTokenizer.REAL:
returnreadFloat();
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnreadDouble();
caseSQLTokenizer.MONEY:
returnreadLong()/10000.0;
caseSQLTokenizer.SMALLMONEY:
returnreadInt()/10000.0;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnreadNumeric().doubleValue();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnDouble.parseDouble(readString());
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnDouble.parseDouble(readLongString());
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());
ObjectInputStreamois=newObjectInputStream(bais);
returnDouble.parseDouble(ois.readObject().toString());
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
returnUtils.bytes2double(readLongBinary());
caseSQLTokenizer.TIMESTAMP:
returnreadTimestamp();
caseSQLTokenizer.TIME:
returnreadTime();
caseSQLTokenizer.DATE:
returnreadDate();
caseSQLTokenizer.SMALLDATETIME:
returnreadSmallDateTime();
default:
throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),"NUMERIC"});
}
}
@Override
longgetMoney(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())returnﻝ;
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnreadBoolean()?ﻝ:ﻝ;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
return(long)(Utils.bytes2double(readBinary())*10000L);
caseSQLTokenizer.TINYINT:
returnreadUnsignedByte()*10000L;
caseSQLTokenizer.SMALLINT:
returnreadShort()*10000L;
caseSQLTokenizer.INT:
returnreadInt()*10000L;
caseSQLTokenizer.BIGINT:
returnreadLong()*10000L;
caseSQLTokenizer.REAL:
return(long)(readFloat()*10000L);
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
return(long)(readDouble()*10000L);
caseSQLTokenizer.MONEY:
returnreadLong();
caseSQLTokenizer.SMALLMONEY:
returnreadInt();
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
return(long)(readNumeric().doubleValue()*10000L);
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnMoney.parseMoney(readString());
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnMoney.parseMoney(readLongString());
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());
ObjectInputStreamois=newObjectInputStream(bais);
returnMoney.parseMoney(ois.readObject().toString());
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
return(long)(Utils.bytes2double(readLongBinary())*10000L);
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),"MONEY"});
default:thrownewError();
}
}
@Override
MutableNumericgetNumeric(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())returnnull;
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnreadBoolean()?newMutableNumeric(1):newMutableNumeric(0);
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returnnewMutableNumeric(Utils.bytes2double(readBinary()));
caseSQLTokenizer.TINYINT:
returnnewMutableNumeric(readUnsignedByte());
caseSQLTokenizer.SMALLINT:
returnnewMutableNumeric(readShort());
caseSQLTokenizer.INT:
returnnewMutableNumeric(readInt());
caseSQLTokenizer.BIGINT:
returnnewMutableNumeric(readLong());
caseSQLTokenizer.REAL:
returnnewMutableNumeric(readFloat());
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnnewMutableNumeric(readDouble());
caseSQLTokenizer.MONEY:
returnnewMutableNumeric(readLong(),ﻝ);
caseSQLTokenizer.SMALLMONEY:
returnnewMutableNumeric(readInt(),ﻝ);
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnreadNumeric();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnnewMutableNumeric(readString());
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnnewMutableNumeric(readLongString());
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());
ObjectInputStreamois=newObjectInputStream(bais);
returnnewMutableNumeric(ois.readObject().toString());
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
returnnewMutableNumeric(Utils.bytes2double(readLongBinary()));
caseSQLTokenizer.TIMESTAMP:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),"NUMERIC"});
default:thrownewError();
}
}
@Override
ObjectgetObject(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())returnnull;
switch(dataType){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
returnreadBoolean()?Boolean.TRUE:Boolean.FALSE;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returnreadBinary();
caseSQLTokenizer.TINYINT:
returnUtils.getInteger(readUnsignedByte());
caseSQLTokenizer.SMALLINT:
returnUtils.getInteger(readShort());
caseSQLTokenizer.INT:
returnUtils.getInteger(readInt());
caseSQLTokenizer.BIGINT:
returnnewLong(readLong());
caseSQLTokenizer.REAL:
returnnewFloat(readFloat());
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnnewDouble(readDouble());
caseSQLTokenizer.MONEY:
returnMoney.createFromUnscaledValue(readLong());
caseSQLTokenizer.SMALLMONEY:
returnMoney.createFromUnscaledValue(readInt());
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnreadNumeric();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnreadString();
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnreadLongString();
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());
ObjectInputStreamois=newObjectInputStream(bais);
returnois.readObject();
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
returnreadLongBinary();
caseSQLTokenizer.TIMESTAMP:
returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP);
caseSQLTokenizer.TIME:
returnnewDateTime(readTime(),SQLTokenizer.TIME);
caseSQLTokenizer.DATE:
returnnewDateTime(readDate(),SQLTokenizer.DATE);
caseSQLTokenizer.SMALLDATETIME:
returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP);
caseSQLTokenizer.UNIQUEIDENTIFIER:
returnUtils.bytes2unique(page,this.offset);
default:thrownewError();
}
}
@Override
ﺝgetString(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())returnnull;
switch(dataType){
caseSQLTokenizer.BIT:
returnreadBoolean()?"1":"0";
caseSQLTokenizer.BOOLEAN:
returnString.valueOf(readBoolean());
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returnUtils.bytes2hex(readBinary());
caseSQLTokenizer.TINYINT:
returnString.valueOf(readUnsignedByte());
caseSQLTokenizer.SMALLINT:
returnString.valueOf(readShort());
caseSQLTokenizer.INT:
returnString.valueOf(readInt());
caseSQLTokenizer.BIGINT:
returnString.valueOf(readLong());
caseSQLTokenizer.REAL:
returnString.valueOf(readFloat());
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
returnString.valueOf(readDouble());
caseSQLTokenizer.MONEY:
returnMoney.createFromUnscaledValue(readLong()).toString();
caseSQLTokenizer.SMALLMONEY:
returnMoney.createFromUnscaledValue(readInt()).toString();
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnreadNumeric().toString();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnreadString();
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnreadLongString();
caseSQLTokenizer.JAVA_OBJECT:
ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());
ObjectInputStreamois=newObjectInputStream(bais);
returnois.readObject().toString();
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
returnUtils.bytes2hex(readLongBinary());
caseSQLTokenizer.TIMESTAMP:
returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP).toString();
caseSQLTokenizer.TIME:
returnnewDateTime(readTime(),SQLTokenizer.TIME).toString();
caseSQLTokenizer.DATE:
returnnewDateTime(readDate(),SQLTokenizer.DATE).toString();
caseSQLTokenizer.SMALLDATETIME:
returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP).toString();
caseSQLTokenizer.UNIQUEIDENTIFIER:
returnUtils.bytes2unique(page,this.offset);
default:thrownewError();
}
}
@Override
byte[]getBytes(intvalueOffset,intdataType)throwsException{
this.offset=valueOffset;
if(readBoolean())returnnull;
switch(dataType){
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
returnreadBinary();
caseSQLTokenizer.TINYINT:
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
byte[]bytes=newbyte[1];
System.arraycopy(page,valueOffset,bytes,0,bytes.length);
returnbytes;
caseSQLTokenizer.SMALLINT:
bytes=newbyte[2];
System.arraycopy(page,valueOffset,bytes,0,bytes.length);
returnbytes;
caseSQLTokenizer.INT:
caseSQLTokenizer.REAL:
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
bytes=newbyte[4];
System.arraycopy(page,valueOffset,bytes,0,bytes.length);
returnbytes;
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.TIMESTAMP:
bytes=newbyte[8];
System.arraycopy(page,valueOffset,bytes,0,bytes.length);
returnbytes;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
returnreadNumeric().toByteArray();
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
returnreadString().getBytes();
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
returnreadLongString().getBytes();
caseSQLTokenizer.JAVA_OBJECT:
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
returnreadLongBinary();
caseSQLTokenizer.UNIQUEIDENTIFIER:
bytes=newbyte[16];
System.arraycopy(page,valueOffset,bytes,0,bytes.length);
returnbytes;
default:thrownewError();
}
}
@Override
voidscanObjectOffsets(int[]offsets,intdataTypes[]){
offset=PAGE_CONTROL_SIZE;
for(inti=ﻝ;i<offsets.length;i++){
offsets[i]=offset;
booleanisNull=readBoolean();
switch(dataTypes[i]){
caseSQLTokenizer.BIT:
caseSQLTokenizer.BOOLEAN:
caseSQLTokenizer.TINYINT:
offset++;
break;
caseSQLTokenizer.SMALLINT:
offset+=ﻝ;
break;
caseSQLTokenizer.INT:
caseSQLTokenizer.REAL:
caseSQLTokenizer.SMALLMONEY:
caseSQLTokenizer.TIME:
caseSQLTokenizer.DATE:
caseSQLTokenizer.SMALLDATETIME:
offset+=ﻝ;
break;
caseSQLTokenizer.BIGINT:
caseSQLTokenizer.FLOAT:
caseSQLTokenizer.DOUBLE:
caseSQLTokenizer.MONEY:
caseSQLTokenizer.JAVA_OBJECT:
caseSQLTokenizer.LONGVARBINARY:
caseSQLTokenizer.BLOB:
caseSQLTokenizer.CLOB:
caseSQLTokenizer.NCLOB:
caseSQLTokenizer.LONGNVARCHAR:
caseSQLTokenizer.LONGVARCHAR:
caseSQLTokenizer.TIMESTAMP:
offset+=ﻝ;
break;
caseSQLTokenizer.BINARY:
caseSQLTokenizer.VARBINARY:
intcount=readShort()&0xFFFF;
if(!isNull)offset+=count;
break;
caseSQLTokenizer.NUMERIC:
caseSQLTokenizer.DECIMAL:
count=readByte();
offset+=ﻝ;
if(!isNull)offset+=count*4;
break;
caseSQLTokenizer.CHAR:
caseSQLTokenizer.NCHAR:
caseSQLTokenizer.VARCHAR:
caseSQLTokenizer.NVARCHAR:
count=readShort()&0xFFFF;
if(!isNull)offset+=count<<ﻝ;
break;
caseSQLTokenizer.UNIQUEIDENTIFIER:
offset+=ﻝ;
break;
default:thrownewError(String.valueOf(dataTypes[i]));
}
}
}
@Override
voiddeleteRow(SSConnectioncon)throwsSQLException{
status=DELETED;
type=SQLTokenizer.DELETE;
createWriteLock();
writeFinsh(con);
}
StorePageLinkgetLink(){
return((TableStorePageInsert)storePage).getLink();
}
booleanisRollback(){
returnstorePage.raFile==null;
}
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
publicclassStoreNoCurrentRowextendsStore{
privateSQLExceptionnoCurrentRow(){
returnSmallSQLException.create(Language.ROW_NOCURRENT);
}
booleanisNull(intoffset)throwsSQLException{
thrownoCurrentRow();
}
booleangetBoolean(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
byte[]getBytes(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
doublegetDouble(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
floatgetFloat(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
intgetInt(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
longgetLong(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
longgetMoney(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
MutableNumericgetNumeric(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
ObjectgetObject(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
ﺝgetString(intoffset,intdataType)throwsException{
thrownoCurrentRow();
}
voidscanObjectOffsets(int[]offsets,int[]dataTypes){
}
intgetUsedSize(){
returnﻝ;
}
longgetNextPagePos(){
return-1;
}
voiddeleteRow(SSConnectioncon)throwsSQLException{
thrownoCurrentRow();
}
}
packagesmallsql.database;
importjava.sql.*;
importsmallsql.database.language.Language;
classStoreNullextendsStore{
privatefinallongnextPagePos;
StoreNull(){
this(-1);
}
StoreNull(longnextPos){
nextPagePos=nextPos;
}
finalbooleanisNull(intoffset){
ﺝ
}
finalbooleangetBoolean(intoffset,intdataType)throwsException{
ﺝ
}
finalbyte[]getBytes(intoffset,intdataType)throwsException{
returnnull;
}
finaldoublegetDouble(intoffset,intdataType)throwsException{
returnﻝ;
}
finalfloatgetFloat(intoffset,intdataType)throwsException{
returnﻝ;
}
ﺝgetInt(intoffset,intdataType)throwsException{
returnﻝ;
}
finallonggetLong(intoffset,intdataType)throwsException{
returnﻝ;
}
finallonggetMoney(intoffset,intdataType)throwsException{
returnﻝ;
}
finalMutableNumericgetNumeric(intoffset,intdataType)throwsException{
returnnull;
}
finalObjectgetObject(intoffset,intdataType)throwsException{
returnnull;
}
finalﺝgetString(intoffset,intdataType)throwsException{
returnnull;
}
ﺝscanObjectOffsets(int[]offsets,int[]dataTypes){}
ﺝgetUsedSize(){
returnﻝ;
}
finallonggetNextPagePos(){
returnnextPagePos;
}
ﺝdeleteRow(SSConnectioncon)throwsSQLException{
if(nextPagePos>=ﻝ){
throwSmallSQLException.create(Language.ROW_DELETED);
}
thrownewError();
}
}
packagesmallsql.database;
importjava.io.*;
importjava.nio.ByteBuffer;
importjava.nio.channels.FileChannel;
importjava.sql.SQLException;
classStorePageextendsTransactionStep{
byte[]page;
intpageSize;
longfileOffset;
StorePage(byte[]page,intpageSize,FileChannelraFile,longfileOffset){
super(raFile);
this.page=page;
this.pageSize=pageSize;
this.fileOffset=fileOffset;
}
ﺝsetPageData(byte[]data,intsize){
page=data;
pageSize=size;
}
@Override
longcommit()throwsSQLException{
try{
if(raFile!=null&&page!=null){
ByteBufferbuffer=ByteBuffer.wrap(page,0,pageSize);
synchronized(raFile){
if(fileOffset<ﻝ){
fileOffset=raFile.size();
}
raFile.position(fileOffset);
raFile.write(buffer);
}
}
returnfileOffset;
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
@Override
ﺝrollback(){
raFile=null;
}
}
packagesmallsql.database;
classStorePageLink{
longfilePos;
TableStorePagepage;
StoreImplgetStore(Tabletable,SSConnectioncon,intlock)throwsException{
TableStorePagepage=this.page;
if(page==null)
returntable.getStore(con,filePos,lock);
while(page.nextLock!=null)page=page.nextLock;
returntable.getStore(page,lock);
}
}
packagesmallsql.database;
classStorePageMap{
privateEntry[]table;
ﺝsize;
ﺝthreshold;
StorePageMap(){
threshold=ﻝ;
table=newEntry[17];
}
ﺝsize(){
returnsize;
}
finalbooleanisEmpty(){
returnsize==ﻝ;
}
finalTableStorePageget(longkey){
inti=(int)(key%table.length);
Entrye=table[i];
while(true){
if(e==null)
returnnull;
if(e.key==key)
returne.value;
e=e.next;
}
}
finalbooleancontainsKey(longkey){
return(get(key)!=null);
}
finalTableStorePageadd(longkey,TableStorePagevalue){
inti=(int)(key%table.length);
table[i]=newEntry(key,value,table[i]);
if(size++>=threshold)
resize(2*table.length);
returnnull;
}
finalprivatevoidresize(intnewCapacity){
Entry[]newTable=newEntry[newCapacity];
transfer(newTable);
table=newTable;
threshold=(int)(newCapacity*0.75f);
}
finalprivatevoidtransfer(Entry[]newTable){
Entry[]src=table;
intnewCapacity=newTable.length;
for(intj=ﻝ;j<src.length;j++){
Entrye=src[j];
if(e!=null){
src[j]=null;
do{
Entrynext=e.next;
e.next=null;
inti=(int)(e.key%newCapacity);
if(newTable[i]==null){
newTable[i]=e;
}else{
Entryentry=newTable[i];
while(entry.next!=null)entry=entry.next;
entry.next=e;
}
e=next;
}while(e!=null);
}
}
}
finalTableStorePageremove(longkey){
inti=(int)(key%table.length);
Entryprev=table[i];
Entrye=prev;
while(e!=null){
Entrynext=e.next;
if(e.key==key){
size--;
if(prev==e)
table[i]=next;
else
prev.next=next;
returne.value;
}
prev=e;
e=next;
}
returnnull;
}
ﺝclear(){
Entrytab[]=table;
for(inti=ﻝ;i<tab.length;i++)
tab[i]=null;
size=ﻝ;
}
finalbooleancontainsValue(TableStorePagevalue){
Entrytab[]=table;
for(inti=ﻝ;i<tab.length;i++)
for(Entrye=tab[i];e!=null;e=e.next)
if(value.equals(e.value))
ﺝ
ﺝ
}
staticclassEntry{
finallongkey;
finalTableStorePagevalue;
Entrynext;
Entry(longk,TableStorePagev,Entryn){
value=v;
next=n;
key=k;
}
}
}
packagesmallsql.database;
classStrings{
ﺝsize;
privateString[]data;
Strings(){
data=newString[16];
}
ﺝsize(){
returnsize;
}
finalﺝget(intidx){
if(idx>=size)
thrownewIndexOutOfBoundsException("Columnindex:"+idx+",Size:"+size);
returndata[idx];
}
ﺝadd(ﺝdescr){
if(size>=data.length){
resize(size<<ﻝ);
}
data[size++]=descr;
}
privateﺝresize(intnewSize){
String[]dataNew=newString[newSize];
System.arraycopy(data,0,dataNew,0,size);
data=dataNew;
}
publicString[]toArray(){
String[]array=newString[size];
System.arraycopy(data,0,array,0,size);
returnarray;
}
}
packagesmallsql.database;
importjava.io.*;
importjava.nio.ByteBuffer;
importjava.nio.channels.FileChannel;
importjava.sql.*;
importjava.util.ArrayList;
importjava.util.HashMap;
importjava.util.Iterator;
importjava.util.List;
importsmallsql.database.language.Language;
classTableextendsTableView{
privatestaticﺝINDEX=ﻝ;
finalDatabasedatabase;
FileChannelraFile;
privateLobslobs;
longfirstPage;
finalprivateHashMaplocks=newHashMap();
privateSSConnectiontabLockConnection;
ﺝtabLockCount;
finalprivateArrayListlocksInsert=newArrayList();
finalprivateHashMapserializeConnections=newHashMap();
finalIndexDescriptionsindexes;
finalForeignKeysreferences;
Table(Databasedatabase,SSConnectioncon,ﺝname,FileChannelraFile,longoffset,inttableFormatVersion)throwsException{
super(name,newColumns());
this.database=database;
this.raFile=raFile;
this.firstPage=offset;
StoreImplstore=getStore(con,firstPage,SQLTokenizer.SELECT);
if(store==null){
throwSmallSQLException.create(Language.TABLE_FILE_INVALID,getFile(database));
}
intcount=store.readInt();
for(inti=ﻝ;i<count;i++){
columns.add(store.readColumn(tableFormatVersion));
}
indexes=newIndexDescriptions();
references=newForeignKeys();
inttype;
while((type=store.readInt())!=ﻝ){
intoffsetInPage=store.getCurrentOffsetInPage();
intsize=store.readInt();
switch(type){
caseINDEX:
indexes.add(IndexDescription.load(database,this,store));
break;
}
store.setCurrentOffsetInPage(offsetInPage+size);
}
firstPage=store.getNextPagePos();
}
Table(Databasedatabase,SSConnectioncon,ﺝname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{
this(database,con,name,columns,null,indexes,foreignKeys);
}
Table(Databasedatabase,SSConnectioncon,ﺝname,Columnscolumns,IndexDescriptionsexistIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{
super(name,columns);
this.database=database;
this.references=foreignKeys;
newIndexes.create(con,database,this);
if(existIndexes==null){
this.indexes=newIndexes;
}else{
this.indexes=existIndexes;
existIndexes.add(newIndexes);
}
write(con);
for(inti=ﻝ;i<foreignKeys.size();i++){
ForeignKeyforeignKey=foreignKeys.get(i);
TablepkTable=(Table)database.getTableView(con,foreignKey.pkTable);
pkTable.references.add(foreignKey);
}
}
Table(Databasedatabase,ﺝname){
super(name,null);
this.database=database;
indexes=null;
references=null;
}
staticvoiddrop(Databasedatabase,ﺝname)throwsException{
booleanok=newFile(Utils.createTableViewFileName(database,name)).delete();
if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);
}
voiddrop(SSConnectioncon)throwsException{
TableStorePagestorePage=requestLock(con,SQLTokenizer.CREATE,-1);
if(storePage==null){
throwSmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED,name);
}
con.rollbackFile(raFile);
close();
if(lobs!=null)
lobs.drop(con);
if(indexes!=null)
indexes.drop(database);
booleanok=getFile(database).delete();
if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);
}
@Override
voidclose()throwsException{
if(indexes!=null)
indexes.close();
raFile.close();
raFile=null;
if(lobs!=null){
lobs.close();
lobs=null;
}
}
privatevoidwrite(SSConnectioncon)throwsException{
raFile=createFile(con,database);
firstPage=ﻝ;
StoreImplstore=getStore(con,firstPage,SQLTokenizer.CREATE);
intcount=columns.size();
store.writeInt(count);
for(inti=ﻝ;i<count;i++){
store.writeColumn(columns.get(i));
}
for(inti=ﻝ;i<indexes.size();i++){
IndexDescriptionindexDesc=indexes.get(i);
store.writeInt(INDEX);
intoffsetStart=store.getCurrentOffsetInPage();
store.setCurrentOffsetInPage(offsetStart+ﻝ);
indexDesc.save(store);
intoffsetEnd=store.getCurrentOffsetInPage();
store.setCurrentOffsetInPage(offsetStart);
store.writeInt(offsetEnd-offsetStart);
store.setCurrentOffsetInPage(offsetEnd);
}
store.writeInt(ﻝ);
store.writeFinsh(null);
firstPage=store.getNextPagePos();
}
@Override
voidwriteMagic(FileChannelraFile)throwsException{
ByteBufferbuffer=ByteBuffer.allocate(8);
buffer.putInt(MAGIC_TABLE);
buffer.putInt(TABLE_VIEW_VERSION);
buffer.position(0);
raFile.write(buffer);
}
StoreImplgetStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{
TableStorePagestorePage=requestLock(con,pageOperation,filePos);
returnStoreImpl.createStore(this,storePage,pageOperation,filePos);
}
StoreImplgetStore(TableStorePagestorePage,intpageOperation)throwsException{
returnStoreImpl.recreateStore(this,storePage,pageOperation);
}
StoreImplgetStoreInsert(SSConnectioncon)throwsException{
TableStorePagestorePage=requestLock(con,SQLTokenizer.INSERT,-1);
returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-1);
}
StoreImplgetStoreTemp(SSConnectioncon)throwsException{
TableStorePagestorePage=newTableStorePage(con,this,LOCK_NONE,-2);
returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-2);
}
StoreImplgetLobStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{
if(lobs==null){
lobs=newLobs(this);
}
returnlobs.getStore(con,filePos,pageOperation);
}
finallonggetFirstPage(){
returnfirstPage;
}
ListgetInserts(SSConnectioncon){
synchronized(locks){
ArrayListinserts=newArrayList();
if(con.isolationLevel<=Connection.TRANSACTION_READ_UNCOMMITTED){
for(inti=ﻝ;i<locksInsert.size();i++){
TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);
inserts.add(lock.getLink());
}
}else{
for(inti=ﻝ;i<locksInsert.size();i++){
TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);
if(lock.con==con)
inserts.add(lock.getLink());
}
}
returninserts;
}
}
finalTableStorePagerequestLock(SSConnectioncon,intpageOperation,longpage)throwsException{
synchronized(locks){
if(raFile==null){
throwSmallSQLException.create(Language.TABLE_MODIFIED,name);
}
longendTime=ﻝ;
while(true){
TableStorePagestorePage=requestLockImpl(con,pageOperation,page);
if(storePage!=null)
returnstorePage;
if(endTime==ﻝ)
endTime=System.currentTimeMillis()+ﻝ;
longwaitTime=endTime-System.currentTimeMillis();
if(waitTime<=ﻝ)
throwSmallSQLException.create(Language.TABLE_DEADLOCK,name);
locks.wait(waitTime);
}
}
}
finalprivateTableStorePagerequestLockImpl(SSConnectioncon,intpageOperation,longpage)throwsSQLException{
synchronized(locks){
if(tabLockConnection!=null&&tabLockConnection!=con)returnnull;
switch(con.isolationLevel){
caseConnection.TRANSACTION_SERIALIZABLE:
serializeConnections.put(con,con);
break;
}
switch(pageOperation){
caseSQLTokenizer.CREATE:{
if(locks.size()>ﻝ){
Iteratorvalues=locks.values().iterator();
while(values.hasNext()){
TableStorePagelock=(TableStorePage)values.next();
if(lock.con!=con)returnnull;
}
}
for(inti=ﻝ;i<locksInsert.size();i++){
TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);
if(lock.con!=con)returnnull;
}
if(serializeConnections.size()>ﻝ){
Iteratorvalues=locks.values().iterator();
while(values.hasNext()){
TableStorePagelock=(TableStorePage)values.next();
if(lock.con!=con)returnnull;
}
}
tabLockConnection=con;
tabLockCount++;
TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);
con.add(lock);
returnlock;
}
caseSQLTokenizer.ALTER:{
if(locks.size()>ﻝ||locksInsert.size()>ﻝ){
returnnull;
}
if(serializeConnections.size()>ﻝ){
Iteratorvalues=locks.values().iterator();
while(values.hasNext()){
TableStorePagelock=(TableStorePage)values.next();
if(lock.con!=con)returnnull;
}
}
tabLockConnection=con;
tabLockCount++;
TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);
lock.rollback();
returnlock;
}
caseSQLTokenizer.INSERT:{
if(serializeConnections.size()>ﻝ)returnnull;
if(serializeConnections.size()==ﻝ&&serializeConnections.get(con)==null)returnnull;
TableStorePageInsertlock=newTableStorePageInsert(con,this,LOCK_INSERT);
locksInsert.add(lock);
con.add(lock);
returnlock;
}
caseSQLTokenizer.SELECT:
caseSQLTokenizer.UPDATE:{
LongpageKey=newLong(page);
TableStorePageprevLock=null;
TableStorePagelock=(TableStorePage)locks.get(pageKey);
TableStorePageusableLock=null;
while(lock!=null){
if(lock.con==con||
con.isolationLevel<=Connection.TRANSACTION_READ_UNCOMMITTED){
usableLock=lock;
}else{
if(lock.lockType==LOCK_WRITE){
returnnull;
}
}
prevLock=lock;
lock=lock.nextLock;
}
if(usableLock!=null){
returnusableLock;
}
lock=newTableStorePage(con,this,LOCK_NONE,page);
if(con.isolationLevel>=Connection.TRANSACTION_REPEATABLE_READ||pageOperation==SQLTokenizer.UPDATE){
lock.lockType=pageOperation==SQLTokenizer.UPDATE?LOCK_WRITE:LOCK_READ;
if(prevLock!=null){
prevLock.nextLock=lock.nextLock;
}else{
locks.put(pageKey,lock);
}
con.add(lock);
}
returnlock;
}
caseSQLTokenizer.LONGVARBINARY:
returnnewTableStorePage(con,this,LOCK_INSERT,-1);
default:
thrownewError("pageOperation:"+pageOperation);
}
}
}
TableStorePagerequestWriteLock(SSConnectioncon,TableStorePagereadlock)throwsSQLException{
if(readlock.lockType==LOCK_INSERT){
TableStorePagelock=newTableStorePage(con,this,LOCK_INSERT,-1);
readlock.nextLock=lock;
con.add(lock);
returnlock;
}
LongpageKey=newLong(readlock.fileOffset);
TableStorePageprevLock=null;
TableStorePagelock=(TableStorePage)locks.get(pageKey);
while(lock!=null){
if(lock.con!=con)returnnull;
if(lock.lockType<LOCK_WRITE){
lock.lockType=LOCK_WRITE;
returnlock;
}
prevLock=lock;
lock=lock.nextLock;
}
lock=newTableStorePage(con,this,LOCK_WRITE,readlock.fileOffset);
if(prevLock!=null){
prevLock.nextLock=lock;
}else{
locks.put(pageKey,lock);
}
con.add(lock);
returnlock;
}
voidfreeLock(TableStorePagestorePage){
ﺝlockType=storePage.lockType;
finallongfileOffset=storePage.fileOffset;
synchronized(locks){
try{
TableStorePagelock;
TableStorePageprev;
switch(lockType){
caseLOCK_INSERT:
for(inti=ﻝ;i<locksInsert.size();i++){
prev=lock=(TableStorePage)locksInsert.get(i);
while(lock!=null){
if(lock==storePage){
if(lock==prev){
if(lock.nextLock==null){
locksInsert.remove(i--);
}else{
locksInsert.set(i,lock.nextLock);
}
}else{
prev.nextLock=lock.nextLock;
}
return;
}
prev=lock;
lock=lock.nextLock;
}
}
break;
caseLOCK_READ:
caseLOCK_WRITE:
LongpageKey=newLong(fileOffset);
lock=(TableStorePage)locks.get(pageKey);
prev=lock;
while(lock!=null){
if(lock==storePage){
if(lock==prev){
if(lock.nextLock==null){
locks.remove(pageKey);
}else{
locks.put(pageKey,lock.nextLock);
}
}else{
prev.nextLock=lock.nextLock;
}
return;
}
prev=lock;
lock=lock.nextLock;
}
break;
caseLOCK_TAB:
assertstorePage.con==tabLockConnection:"InternalErrorwithTabLock";
if(--tabLockCount==ﻝ)tabLockConnection=null;
break;
default:
thrownewError();
}
}finally{
locks.notifyAll();
}
}
}
}
packagesmallsql.database;
importjava.sql.*;
importjava.util.List;
finalclassTableResultextendsTableViewResult{
finalprivateTabletable;
privateListinsertStorePages;
privatelongfirstOwnInsert;
privatelongmaxFileOffset;
TableResult(Tabletable){
this.table=table;
}
@Override
finalbooleaninit(SSConnectioncon)throwsException{
if(super.init(con)){
Columnscolumns=table.columns;
offsets=newint[columns.size()];
dataTypes=newint[columns.size()];
for(inti=ﻝ;i<columns.size();i++){
dataTypes[i]=columns.get(i).getDataType();
}
ﺝ
}
ﺝ
}
@Override
ﺝexecute()throwsException{
insertStorePages=table.getInserts(con);
firstOwnInsert=0x4000000000000000L|insertStorePages.size();
maxFileOffset=table.raFile.size();
beforeFirst();
}
@Override
finalTableViewgetTableView(){
returntable;
}
@Override
ﺝdeleteRow()throwsSQLException{
store.deleteRow(con);
store=newStoreNull(store.getNextPagePos());
}
@Override
ﺝupdateRow(Expression[]updateValues)throwsException{
ColumnstableColumns=table.columns;
intcount=tableColumns.size();
StoreImplnewStore=table.getStoreTemp(con);
synchronized(con.getMonitor()){
((StoreImpl)this.store).createWriteLock();
for(inti=ﻝ;i<count;i++){
ﺝsrc=updateValues[i];
if(src!=null){
newStore.writeExpression(src,tableColumns.get(i));
}else{
copyValueInto(i,newStore);
}
}
((StoreImpl)this.store).updateFinsh(con,newStore);
}
}
@Override
ﺝinsertRow(Expression[]updateValues)throwsException{
ColumnstableColumns=table.columns;
intcount=tableColumns.size();
StoreImplstore=table.getStoreInsert(con);
for(inti=ﻝ;i<count;i++){
ColumntableColumn=tableColumns.get(i);
ﺝsrc=updateValues[i];
if(src==null)src=tableColumn.getDefaultValue(con);
store.writeExpression(src,tableColumn);
}
store.writeFinsh(con);
insertStorePages.add(store.getLink());
}
privateStorestore=Store.NOROW;
privatelongfilePos;
privateint[]offsets;
privateint[]dataTypes;
ﺝrow;
privatelongafterLastValidFilePos;
finalprivatebooleanmoveToRow()throwsException{
if(filePos>=0x4000000000000000L){
store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);
}else{
store=(filePos<maxFileOffset)?table.getStore(con,filePos,lock):null;
if(store==null){
if(insertStorePages.size()>ﻝ){
filePos=0x4000000000000000L;
store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);
}
}
}
if(store!=null){
if(!store.isValidPage()){
ﺝ
}
store.scanObjectOffsets(offsets,dataTypes);
afterLastValidFilePos=store.getNextPagePos();
ﺝ
}else{
filePos=-1;
noRow();
ﺝ
}
}
finalprivatebooleanmoveToValidRow()throwsException{
while(filePos>=ﻝ){
if(moveToRow())
ﺝ
setNextFilePos();
}
row=ﻝ;
ﺝ
}
@Override
ﺝbeforeFirst(){
filePos=ﻝ;
store=Store.NOROW;
row=ﻝ;
}
@Override
finalbooleanfirst()throwsException{
filePos=table.getFirstPage();
row=ﻝ;
returnmoveToValidRow();
}
finalprivatevoidsetNextFilePos(){
if(filePos<ﻝ)return;
if(store==Store.NOROW)
filePos=table.getFirstPage();
else
if(filePos>=0x4000000000000000L){
filePos++;
if((filePos&0x3FFFFFFFFFFFFFFFL)>=insertStorePages.size()){
filePos=-1;
noRow();
}
}else
filePos=store.getNextPagePos();
}
@Override
finalbooleannext()throwsException{
if(filePos<ﻝ)ﺝ
setNextFilePos();
row++;
returnmoveToValidRow();
}
@Override
ﺝafterLast(){
filePos=-1;
noRow();
}
@Override
ﺝgetRow(){
returnrow;
}
@Override
finallonggetRowPosition(){
returnfilePos;
}
@Override
ﺝsetRowPosition(longrowPosition)throwsException{
filePos=rowPosition;
if(filePos<ﻝ||!moveToRow()){
store=newStoreNull(store.getNextPagePos());
}
}
@Override
finalbooleanrowInserted(){
returnfilePos>=firstOwnInsert;
}
@Override
finalbooleanrowDeleted(){
if(storeinstanceofStoreNull&&store!=Store.NULL){
ﺝ
}
if(storeinstanceofStoreImpl&&
((StoreImpl)store).isRollback()){
ﺝ
}
ﺝ
}
@Override
ﺝnullRow(){
row=ﻝ;
store=Store.NULL;
}
@Override
ﺝnoRow(){
row=ﻝ;
store=Store.NOROW;
}
@Override
finalbooleanisNull(intcolIdx)throwsException{
returnstore.isNull(offsets[colIdx]);
}
@Override
finalbooleangetBoolean(intcolIdx)throwsException{
returnstore.getBoolean(offsets[colIdx],dataTypes[colIdx]);
}
@Override
ﺝgetInt(intcolIdx)throwsException{
returnstore.getInt(offsets[colIdx],dataTypes[colIdx]);
}
@Override
finallonggetLong(intcolIdx)throwsException{
returnstore.getLong(offsets[colIdx],dataTypes[colIdx]);
}
@Override
finalfloatgetFloat(intcolIdx)throwsException{
returnstore.getFloat(offsets[colIdx],dataTypes[colIdx]);
}
@Override
finaldoublegetDouble(intcolIdx)throwsException{
returnstore.getDouble(offsets[colIdx],dataTypes[colIdx]);
}
@Override
finallonggetMoney(intcolIdx)throwsException{
returnstore.getMoney(offsets[colIdx],dataTypes[colIdx]);
}
@Override
finalMutableNumericgetNumeric(intcolIdx)throwsException{
returnstore.getNumeric(offsets[colIdx],dataTypes[colIdx]);
}
@Override
finalObjectgetObject(intcolIdx)throwsException{
returnstore.getObject(offsets[colIdx],dataTypes[colIdx]);
}
@Override
finalﺝgetString(intcolIdx)throwsException{
returnstore.getString(offsets[colIdx],dataTypes[colIdx]);
}
@Override
finalbyte[]getBytes(intcolIdx)throwsException{
returnstore.getBytes(offsets[colIdx],dataTypes[colIdx]);
}
@Override
ﺝgetDataType(intcolIdx){
returndataTypes[colIdx];
}
finalprivatevoidcopyValueInto(intcolIdx,StoreImpldst){
intoffset=offsets[colIdx++];
intlength=(colIdx<offsets.length?offsets[colIdx]:store.getUsedSize())-offset;
dst.copyValueFrom((StoreImpl)store,offset,length);
}
}
packagesmallsql.database;
importjava.sql.*;
publicclassTableStorePageextendsStorePage{
finalTabletable;
intlockType;
SSConnectioncon;
TableStorePagenextLock;
TableStorePage(SSConnectioncon,Tabletable,intlockType,longfileOffset){
super(null,0,table.raFile,fileOffset);
this.con	=con;
this.table=table;
this.lockType	=lockType;
}
byte[]getData(){
returnpage;
}
longcommit()throwsSQLException{
if(nextLock!=null){
fileOffset=nextLock.commit();
nextLock=null;
rollback();
returnfileOffset;
}
if(lockType==TableView.LOCK_READ)
returnfileOffset;
returnsuper.commit();
}
ﺝfreeLock(){
table.freeLock(this);
}
}
packagesmallsql.database;
importjava.sql.*;
classTableStorePageInsertextendsTableStorePage{
finalprivateStorePageLinklink=newStorePageLink();
TableStorePageInsert(SSConnectioncon,Tabletable,intlockType){
super(con,table,lockType,-1);
link.page=this;
link.filePos=fileOffset;
}
finallongcommit()throwsSQLException{
longresult=super.commit();
link.filePos=fileOffset;
link.page=null;
returnresult;
}
finalStorePageLinkgetLink(){
returnlink;
}
}
packagesmallsql.database;
importjava.io.*;
importjava.nio.ByteBuffer;
importjava.nio.channels.FileChannel;
importjava.sql.*;
importsmallsql.database.language.Language;
abstractclassTableView{
staticﺝMAGIC_TABLE='S'<<ﻝ|'Q'<<ﻝ|'L'<<ﻝ|'T';
staticﺝMAGIC_VIEW='S'<<ﻝ|'Q'<<ﻝ|'L'<<ﻝ|'V';
staticﺝTABLE_VIEW_VERSION=ﻝ;
staticﺝTABLE_VIEW_OLD_VERSION=ﻝ;
finalﺝname;
finalColumnscolumns;
privatelongtimestamp=System.currentTimeMillis();
staticﺝLOCK_NONE=ﻝ;
staticﺝLOCK_INSERT=ﻝ;
staticﺝLOCK_READ=ﻝ;
staticﺝLOCK_WRITE=ﻝ;
staticﺝLOCK_TAB=ﻝ;
TableView(ﺝname,Columnscolumns){
this.name=name;
this.columns=columns;
}
staticTableViewload(SSConnectioncon,Databasedatabase,ﺝname)throwsSQLException{
FileChannelraFile=null;
try{
ﺝfileName=Utils.createTableViewFileName(database,name);
Filefile=newFile(fileName);
if(!file.exists())
throwSmallSQLException.create(Language.TABLE_OR_VIEW_MISSING,name);
raFile=Utils.openRaFile(file,database.isReadOnly());
ByteBufferbuffer=ByteBuffer.allocate(8);
raFile.read(buffer);
buffer.position(0);
intmagic=buffer.getInt();
intversion=buffer.getInt();
switch(magic){
caseMAGIC_TABLE:
caseMAGIC_VIEW:
break;
default:
throwSmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID,fileName);
}
if(version>TABLE_VIEW_VERSION)
throwSmallSQLException.create(Language.FILE_TOONEW,newObject[]{newInteger(version),fileName});
if(version<TABLE_VIEW_OLD_VERSION)
throwSmallSQLException.create(Language.FILE_TOOOLD,newObject[]{newInteger(version),fileName});
if(magic==MAGIC_TABLE)
returnnewTable(database,con,name,raFile,raFile.position(),version);
returnnewView(con,name,raFile,raFile.position());
}catch(Throwablee){
if(raFile!=null)
try{
raFile.close();
}catch(Exceptione2){
DriverManager.println(e2.toString());
}
throwSmallSQLException.createFromException(e);
}
}
FilegetFile(Databasedatabase){
returnnewFile(Utils.createTableViewFileName(database,name));
}
FileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{
if(database.isReadOnly()){
throwSmallSQLException.create(Language.DB_READONLY);
}
Filefile=getFile(database);
booleanok=file.createNewFile();
if(!ok)throwSmallSQLException.create(Language.TABLE_EXISTENT,name);
FileChannelraFile=Utils.openRaFile(file,database.isReadOnly());
con.add(newCreateFile(file,raFile,con,database));
writeMagic(raFile);
returnraFile;
}
abstractvoidwriteMagic(FileChannelraFile)throwsException;
ﺝgetName(){
returnname;
}
longgetTimestamp(){
returntimestamp;
}
ﺝfindColumnIdx(ﺝcolumnName){
for(inti=ﻝ;i<columns.size();i++){
if(columns.get(i).getName().equalsIgnoreCase(columnName))returni;
}
return-1;
}
finalColumnfindColumn(ﺝcolumnName){
for(inti=ﻝ;i<columns.size();i++){
Columncolumn=columns.get(i);
if(column.getName().equalsIgnoreCase(columnName))returncolumn;
}
returnnull;
}
voidclose()throwsException{}
}
packagesmallsql.database;
importjava.util.Collection;
importjava.util.HashMap;
importjava.util.Locale;
finalclassTableViewMap{
privatefinalHashMapmap=newHashMap();
privateObjectgetUniqueKey(ﺝname){
returnname.toUpperCase(Locale.US);
}
TableViewget(ﺝname){
return(TableView)map.get(getUniqueKey(name));
}
voidput(ﺝname,TableViewtableView){
map.put(getUniqueKey(name),tableView);
}
TableViewremove(ﺝname){
return(TableView)map.remove(getUniqueKey(name));
}
Collectionvalues(){
returnmap.values();
}
}
packagesmallsql.database;
importjava.sql.SQLException;
importsmallsql.database.language.Language;
abstractclassTableViewResultextendsDataSource{
SSConnectioncon;
privateﺝalias;
privatelongtableTimestamp;
intlock=SQLTokenizer.SELECT;
staticTableViewResultcreateResult(TableViewtableView){
if(tableViewinstanceofTable)
returnnewTableResult((Table)tableView);
returnnewViewResult((View)tableView);
}
staticTableViewResultgetTableViewResult(RowSourcefrom)throwsSQLException{
if(frominstanceofWhere){
from=((Where)from).getFrom();
}
if(frominstanceofTableViewResult){
return(TableViewResult)from;
}
throwSmallSQLException.create(Language.ROWSOURCE_READONLY);
}
voidsetAlias(ﺝalias){
this.alias=alias;
}
ﺝgetAlias(){
return(alias!=null)?alias:getTableView().name;
}
booleanhasAlias(){
returnalias!=null;
}
booleaninit(SSConnectioncon)throwsException{
TableViewtableView=getTableView();
if(tableTimestamp!=tableView.getTimestamp()){
this.con=con;
tableTimestamp=tableView.getTimestamp();
ﺝ
}
ﺝ
}
abstractvoiddeleteRow()throwsSQLException;
abstractvoidupdateRow(Expression[]updateValues)throwsException;
abstractvoidinsertRow(Expression[]updateValues)throwsException;
finalbooleanisScrollable(){
ﺝ
}
}
packagesmallsql.database;
importjava.nio.channels.FileChannel;
importjava.sql.SQLException;
abstractclassTransactionStep{
FileChannelraFile;
TransactionStep(FileChannelraFile){
this.raFile=raFile;
}
abstractlongcommit()throwsSQLException;
abstractvoidrollback()throwsSQLException;
voidfreeLock(){}
}
packagesmallsql.database;
importsmallsql.database.language.Language;
finalclassUnionAllextendsDataSource{
privatefinalDataSourcesdataSources=newDataSources();
ﺝdataSourceIdx;
privateDataSourcecurrentDS;
ﺝrow;
voidaddDataSource(DataSourceds){
dataSources.add(ds);
currentDS=dataSources.get(0);
}
booleaninit(SSConnectioncon)throwsException{
booleanresult=false;
intcolCount=-1;
for(inti=ﻝ;i<dataSources.size();i++){
DataSourceds=dataSources.get(i);
result|=ds.init(con);
intnextColCount=ds.getTableView().columns.size();
if(colCount==-1)
colCount=nextColCount;
else
if(colCount!=nextColCount)
throwSmallSQLException.create(Language.UNION_DIFFERENT_COLS,newObject[]{newInteger(colCount),newInteger(nextColCount)});
}
returnresult;
}
finalbooleanisNull(intcolIdx)throwsException{
returncurrentDS.isNull(colIdx);
}
finalbooleangetBoolean(intcolIdx)throwsException{
returncurrentDS.getBoolean(colIdx);
}
ﺝgetInt(intcolIdx)throwsException{
returncurrentDS.getInt(colIdx);
}
finallonggetLong(intcolIdx)throwsException{
returncurrentDS.getLong(colIdx);
}
finalfloatgetFloat(intcolIdx)throwsException{
returncurrentDS.getFloat(colIdx);
}
finaldoublegetDouble(intcolIdx)throwsException{
returncurrentDS.getDouble(colIdx);
}
finallonggetMoney(intcolIdx)throwsException{
returncurrentDS.getMoney(colIdx);
}
finalMutableNumericgetNumeric(intcolIdx)throwsException{
returncurrentDS.getNumeric(colIdx);
}
finalObjectgetObject(intcolIdx)throwsException{
returncurrentDS.getObject(colIdx);
}
finalﺝgetString(intcolIdx)throwsException{
returncurrentDS.getString(colIdx);
}
finalbyte[]getBytes(intcolIdx)throwsException{
returncurrentDS.getBytes(colIdx);
}
ﺝgetDataType(intcolIdx){
returncurrentDS.getDataType(colIdx);
}
TableViewgetTableView(){
returncurrentDS.getTableView();
}
finalbooleanisScrollable(){
ﺝ
}
ﺝbeforeFirst()throwsException{
dataSourceIdx=ﻝ;
currentDS=dataSources.get(0);
currentDS.beforeFirst();
row=ﻝ;
}
finalbooleanfirst()throwsException{
dataSourceIdx=ﻝ;
currentDS=dataSources.get(0);
booleanb=currentDS.first();
row=b?ﻝ:ﻝ;
returnb;
}
finalbooleannext()throwsException{
booleann=currentDS.next();
row++;
if(n)ﺝ
while(dataSources.size()>dataSourceIdx+1){
currentDS=dataSources.get(++dataSourceIdx);
currentDS.beforeFirst();
n=currentDS.next();
if(n)ﺝ
}
row=ﻝ;
ﺝ
}
ﺝafterLast()throwsException{
dataSourceIdx=dataSources.size()-1;
currentDS=dataSources.get(dataSourceIdx);
currentDS.afterLast();
row=ﻝ;
}
ﺝgetRow()throwsException{
returnrow;
}
privateﺝgetBitCount(){
intsize=dataSources.size();
intbitCount=ﻝ;
while(size>0){
bitCount++;
size>>=ﻝ;
}
returnbitCount;
}
finallonggetRowPosition(){
intbitCount=getBitCount();
returndataSourceIdx|currentDS.getRowPosition()<<bitCount;
}
ﺝsetRowPosition(longrowPosition)throwsException{
intbitCount=getBitCount();
intmask=0xFFFFFFFF>>>(32-bitCount);
dataSourceIdx=(int)rowPosition&mask;
currentDS=dataSources.get(dataSourceIdx);
currentDS.setRowPosition(rowPosition>>bitCount);
}
finalbooleanrowInserted(){
returncurrentDS.rowInserted();
}
finalbooleanrowDeleted(){
returncurrentDS.rowDeleted();
}
ﺝnullRow(){
currentDS.nullRow();
row=ﻝ;
}
ﺝnoRow(){
currentDS.noRow();
row=ﻝ;
}
ﺝexecute()throwsException{
for(inti=ﻝ;i<dataSources.size();i++){
dataSources.get(i).execute();
}
}
}
packagesmallsql.database;
importjava.io.File;
importjava.io.FileNotFoundException;
importjava.io.RandomAccessFile;
importjava.nio.channels.FileChannel;
importjava.nio.channels.FileLock;
importjava.sql.SQLException;
importsmallsql.database.language.Language;
classUtils{
staticfinalﺝMASTER_FILENAME="smallsql.master";
staticfinalﺝTABLE_VIEW_EXTENTION=".sdb";
privatestaticfinalﺝLOB_EXTENTION=".lob";
staticfinalﺝIDX_EXTENTION=".idx";
privatestaticfinalInteger[]integerCache=newInteger[260];
privatestaticfinalShort[]shortCache=newShort[260];
static{
for(inti=-4;i<256;i++){
integerCache[i+4]=newInteger(i);
shortCache[i+4]=newShort((short)i);
}
}
staticﺝcreateTableViewFileName(Databasedatabase,ﺝname){
returndatabase.getName()+'/'+name+TABLE_VIEW_EXTENTION;
}
staticﺝcreateLobFileName(Databasedatabase,ﺝname){
returndatabase.getName()+'/'+name+LOB_EXTENTION;
}
staticﺝcreateIdxFileName(Databasedatabase,ﺝname){
returndatabase.getName()+'/'+name+IDX_EXTENTION;
}
staticbooleanlike(ﺝvalue,ﺝpattern){
if(value==null||pattern==null)ﺝ
if(pattern.length()==ﻝ)ﺝ
intmIdx=ﻝ;
intsIdx=ﻝ;
booleanrange=false;
weiter:
while(pattern.length()>mIdx&&value.length()>sIdx){
charm=Character.toUpperCase(pattern.charAt(mIdx++));
switch(m){
case'%':
range=true;
break;
case'_':
sIdx++;
break;
default:
if(range){
for(;sIdx<value.length();sIdx++){
if(Character.toUpperCase(value.charAt(sIdx))==m)break;
}
if(sIdx>=value.length())ﺝ
intlastmIdx=mIdx-ﻝ;
sIdx++;
while(pattern.length()>mIdx&&value.length()>sIdx){
m=Character.toUpperCase(pattern.charAt(mIdx++));
if(Character.toUpperCase(value.charAt(sIdx))!=m){
if(m=='%'||m=='_'){
mIdx--;
break;
}
mIdx=lastmIdx;
continueweiter;
}
sIdx++;
}
range=false;
}else{
if(Character.toUpperCase(value.charAt(sIdx))!=m)ﺝ
sIdx++;
}
break;
}
}
while(pattern.length()>mIdx){
if(Character.toUpperCase(pattern.charAt(mIdx++))!='%')ﺝ
}
while(value.length()>sIdx&&!range)ﺝ
ﺝ
}
staticintlong2int(longvalue){
if(value>Integer.MAX_VALUE)
returnInteger.MAX_VALUE;
if(value<Integer.MIN_VALUE)
returnInteger.MIN_VALUE;
return(int)value;
}
staticlongdouble2long(doublevalue){
if(value>Long.MAX_VALUE)
returnLong.MAX_VALUE;
if(value<Long.MIN_VALUE)
returnLong.MIN_VALUE;
return(long)value;
}
staticfloatbytes2float(byte[]bytes){
returnFloat.intBitsToFloat(bytes2int(bytes));
}
staticdoublebytes2double(byte[]bytes){
returnDouble.longBitsToDouble(bytes2long(bytes));
}
staticlongbytes2long(byte[]bytes){
longresult=ﻝ;
intlength=Math.min(8,bytes.length);
for(inti=ﻝ;i<length;i++){
result=(result<<ﻝ)|(bytes[i]&ﻝxFF);
}
returnresult;
}
staticintbytes2int(byte[]bytes){
intresult=ﻝ;
intlength=Math.min(4,bytes.length);
for(inti=ﻝ;i<length;i++){
result=(result<<ﻝ)|(bytes[i]&ﻝxFF);
}
returnresult;
}
staticbyte[]double2bytes(doublevalue){
returnlong2bytes(Double.doubleToLongBits(value));
}
staticbyte[]float2bytes(floatvalue){
returnint2bytes(Float.floatToIntBits(value));
}
staticbyte[]long2bytes(longvalue){
byte[]result=newbyte[8];
result[ﻝ]=(byte)(value>>ﻝ);
result[ﻝ]=(byte)(value>>ﻝ);
result[ﻝ]=(byte)(value>>ﻝ);
result[ﻝ]=(byte)(value>>ﻝ);
result[ﻝ]=(byte)(value>>ﻝ);
result[ﻝ]=(byte)(value>>ﻝ);
result[ﻝ]=(byte)(value>>ﻝ);
result[7]=(byte)(value);
returnresult;
}
staticintmoney2int(longvalue){
if(value<Integer.MIN_VALUE)returnInteger.MIN_VALUE;
elseif(value>Integer.MAX_VALUE)returnInteger.MAX_VALUE;
elsereturn(int)value;
}
staticbyte[]int2bytes(intvalue){
byte[]result=newbyte[4];
result[ﻝ]=(byte)(value>>ﻝ);
result[ﻝ]=(byte)(value>>ﻝ);
result[ﻝ]=(byte)(value>>ﻝ);
result[3]=(byte)(value);
returnresult;
}
staticﺝbytes2hex(byte[]bytes){
StringBufferbuf=newStringBuffer(bytes.length<<ﻝ);
for(inti=ﻝ;i<bytes.length;i++){
buf.append(digits[(bytes[i]>>ﻝ)&ﻝxﻝF]);
buf.append(digits[(bytes[i])&0x0F]);
}
returnbuf.toString();
}
staticbyte[]hex2bytes(char[]hex,intoffset,intlength)throwsSQLException{
try{
byte[]bytes=newbyte[length/2];
for(inti=ﻝ;i<bytes.length;i++){
bytes[i]=(byte)((hexDigitﻝint(hex[offset++])<<ﻝ)
|hexDigit2int(hex[offset++]));
}
returnbytes;
}catch(Exceptione){
throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID,String.valueOf(offset));
}
}
privatestaticinthexDigit2int(chardigit){
if(digit>='0'&&digit<='9')returndigit-'0';
digit|=0x20;
if(digit>='a'&&digit<='f')returndigit-'W';
thrownewRuntimeException();
}
staticbyte[]unique2bytes(ﺝunique)throwsSQLException{
char[]chars=unique.toCharArray();
byte[]daten=newbyte[16];
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
daten[ﻝ]=hexﻝbyte(chars,ﻝ);
returndaten;
}
privatestaticbytehex2byte(char[]hex,intoffset)throwsSQLException{
try{
return(byte)((hexDigitﻝint(hex[offset++])<<ﻝ)
|hexDigit2int(hex[offset++]));
}catch(Exceptione){
throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR,newObject[]{newInteger(offset),newString(hex)});
}
}
staticﺝbytes2unique(byte[]daten,intoffset){
if(daten.length-offset<ﻝ){
byte[]temp=newbyte[16];
System.arraycopy(daten,offset,temp,0,daten.length-offset);
daten=temp;
}
char[]chars=newchar[36];
chars[8]=chars[13]=chars[18]=chars[23]='-';
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[1]=digits[(daten[offset+3])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[3]=digits[(daten[offset+2])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[5]=digits[(daten[offset+1])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[7]=digits[(daten[offset+0])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[10]=digits[(daten[offset+5])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[12]=digits[(daten[offset+4])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[15]=digits[(daten[offset+7])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[17]=digits[(daten[offset+6])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[20]=digits[(daten[offset+8])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[22]=digits[(daten[offset+9])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[25]=digits[(daten[offset+10])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[27]=digits[(daten[offset+11])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[29]=digits[(daten[offset+12])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[31]=digits[(daten[offset+13])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[33]=digits[(daten[offset+14])&0x0F];
chars[ﻝ]=digits[(daten[offset+ﻝ]>>ﻝ)&ﻝxﻝF];
chars[35]=digits[(daten[offset+15])&0x0F];
returnnewString(chars);
}
staticbooleanstring2boolean(ﺝval){
try{
returnDouble.parseDouble(val)!=ﻝ;
}catch(NumberFormatExceptione){}
return"true".equalsIgnoreCase(val)||"yes".equalsIgnoreCase(val)||"t".equalsIgnoreCase(val);
}
staticlongdoubleToMoney(doublevalue){
if(value<ﻝ)
return(long)(value*ﻝ-ﻝ.ﻝ);
return(long)(value*ﻝ+ﻝ.ﻝ);
}
staticintindexOf(charvalue,char[]str,intoffset,intlength){
value|=0x20;
for(intend=offset+length;offset<end;offset++){
if((str[offset]|0x20)==value)returnoffset;
}
return-1;
}
staticintindexOf(intvalue,int[]list){
intoffset=ﻝ;
for(intend=list.length;offset<end;offset++){
if((list[offset])==value)returnoffset;
}
return-1;
}
staticintindexOf(byte[]value,byte[]list,intoffset){
intlength=value.length;
loop1:
for(intend=list.length-length;offset<=end;offset++){
for(inti=ﻝ;i<length;i++){
if(list[offset+i]!=value[i]){
continueloop1;
}
}
returnoffset;
}
return-1;
}
staticintcompareBytes(byte[]leftBytes,byte[]rightBytes){
intlength=Math.min(leftBytes.length,rightBytes.length);
intcomp=ﻝ;
for(inti=ﻝ;i<length;i++){
if(leftBytes[i]!=rightBytes[i]){
comp=leftBytes[i]<rightBytes[i]?-ﻝ:ﻝ;
break;
}
}
if(comp==ﻝ&&leftBytes.length!=rightBytes.length){
comp=leftBytes.length<rightBytes.length?-ﻝ:ﻝ;
}
returncomp;
}
staticCommandSelectcreateMemoryCommandSelect(SSConnectioncon,String[]colNames,Object[][]data)throwsSQLException{
MemoryResultsource=newMemoryResult(data,colNames.length);
CommandSelectcmd=newCommandSelect(con.log);
for(inti=ﻝ;i<colNames.length;i++){
ﺝexpr=newExpressionName(colNames[i]);
cmd.addColumnExpression(expr);
expr.setFrom(source,i,source.getColumn(i));
}
cmd.setSource(source);
returncmd;
}
staticfinalIntegergetInteger(intvalue){
if(value>=-ﻝ&&value<ﻝ){
returnintegerCache[value+4];
}else
returnnewInteger(value);
}
staticfinalShortgetShort(intvalue){
if(value>=-ﻝ&&value<ﻝ){
returnshortCache[value+4];
}else
returnnewShort((short)value);
}
staticfinalFileChannelopenRaFile(Filefile,booleanreadonly)throwsFileNotFoundException,SQLException{
RandomAccessFileraFile=newRandomAccessFile(file,readonly?"r":"rw");
FileChannelchannel=raFile.getChannel();
if(!readonly){
try{
FileLocklock=channel.tryLock();
if(lock==null){
throwSmallSQLException.create(Language.CANT_LOCK_FILE,file);
}
}catch(SQLExceptionsqlex){
throwsqlex;
}catch(Throwableth){
throwSmallSQLException.createFromException(Language.CANT_LOCK_FILE,file,th);
}
}
returnchannel;
}
staticfinalExpressionsgetExpressionNameFromTree(ﺝtree){
Expressionslist=newExpressions();
getExpressionNameFromTree(list,tree);
returnlist;
}
privatestaticﺝgetExpressionNameFromTree(Expressionslist,ﺝtree){
if(tree.getType()==Expression.NAME){
list.add(tree);
}
Expression[]params=tree.getParams();
if(params!=null){
for(inti=ﻝ;i<params.length;i++){
getExpressionNameFromTree(list,tree);
}
}
}
finalstaticchar[]digits={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
}
packagesmallsql.database;
importjava.io.*;
importjava.nio.ByteBuffer;
importjava.nio.channels.FileChannel;
importsmallsql.database.language.Language;
classViewextendsTableView{
finalﺝsql;
finalCommandSelectcommandSelect;
View(SSConnectioncon,ﺝname,FileChannelraFile,longoffset)throwsException{
super(name,newColumns());
StorePagestorePage=newStorePage(null,-1,raFile,offset);
StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);
sql=store.readString();
inttype;
while((type=store.readInt())!=ﻝ){
intoffsetInPage=store.getCurrentOffsetInPage();
intsize=store.readInt();
switch(type){
}
store.setCurrentOffsetInPage(offsetInPage+size);
}
raFile.close();
commandSelect=(CommandSelect)newSQLParser().parse(con,sql);
createColumns(con);
}
View(Databasedatabase,SSConnectioncon,ﺝname,ﺝsql)throwsException{
super(name,newColumns());
this.sql=sql;
this.commandSelect=null;
write(database,con);
}
View(SSConnectioncon,CommandSelectcommandSelect)throwsException{
super("UNION",newColumns());
this.sql=null;
this.commandSelect=commandSelect;
createColumns(con);
}
privatevoidcreateColumns(SSConnectioncon)throwsException{
commandSelect.compile(con);
Expressionsexprs=commandSelect.columnExpressions;
for(intc=ﻝ;c<exprs.size();c++){
ﺝexpr=exprs.get(c);
if(exprinstanceofExpressionName){
Columncolumn=((ExpressionName)expr).getColumn().copy();
column.setName(expr.getAlias());
columns.add(column);
}else{
columns.add(newColumnExpression(expr));
}
}
}
staticvoiddrop(Databasedatabase,ﺝname)throwsException{
Filefile=newFile(Utils.createTableViewFileName(database,name));
booleanok=file.delete();
if(!ok)throwSmallSQLException.create(Language.VIEW_CANTDROP,name);
}
privatevoidwrite(Databasedatabase,SSConnectioncon)throwsException{
FileChannelraFile=createFile(con,database);
StorePagestorePage=newStorePage(null,-ﻝ,raFile,ﻝ);
StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.CREATE,ﻝ);
store.writeString(sql);
store.writeInt(ﻝ);
store.writeFinsh(null);
raFile.close();
}
@Override
voidwriteMagic(FileChannelraFile)throwsException{
ByteBufferbuffer=ByteBuffer.allocate(8);
buffer.putInt(MAGIC_VIEW);
buffer.putInt(TABLE_VIEW_VERSION);
buffer.position(0);
raFile.write(buffer);
}
}
packagesmallsql.database;
importjava.sql.*;
classViewResultextendsTableViewResult{
finalprivateViewview;
finalprivateExpressionscolumnExpressions;
finalprivateCommandSelectcommandSelect;
ViewResult(Viewview){
this.view=view;
this.columnExpressions=view.commandSelect.columnExpressions;
this.commandSelect=view.commandSelect;
}
ViewResult(SSConnectioncon,CommandSelectcommandSelect)throwsSQLException{
try{
this.view=newView(con,commandSelect);
this.columnExpressions=commandSelect.columnExpressions;
this.commandSelect=commandSelect;
}catch(Exceptione){
throwSmallSQLException.createFromException(e);
}
}
booleaninit(SSConnectioncon)throwsException{
if(super.init(con)){
commandSelect.compile(con);
ﺝ
}
ﺝ
}
TableViewgetTableView(){
returnview;
}
voiddeleteRow()throwsSQLException{
commandSelect.deleteRow(con);
}
voidupdateRow(Expression[]updateValues)throwsException{
commandSelect.updateRow(con,updateValues);
}
voidinsertRow(Expression[]updateValues)throwsException{
commandSelect.insertRow(con,updateValues);
}
booleanisNull(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).isNull();
}
booleangetBoolean(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getBoolean();
}
intgetInt(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getInt();
}
longgetLong(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getLong();
}
floatgetFloat(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getFloat();
}
doublegetDouble(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getDouble();
}
longgetMoney(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getMoney();
}
MutableNumericgetNumeric(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getNumeric();
}
ObjectgetObject(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getObject();
}
ﺝgetString(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getString();
}
byte[]getBytes(intcolIdx)throwsException{
returncolumnExpressions.get(colIdx).getBytes();
}
intgetDataType(intcolIdx){
returncolumnExpressions.get(colIdx).getDataType();
}
voidbeforeFirst()throwsException{
commandSelect.beforeFirst();
}
booleanisBeforeFirst()throwsSQLException{
returncommandSelect.isBeforeFirst();
}
booleanisFirst()throwsSQLException{
returncommandSelect.isFirst();
}
booleanfirst()throwsException{
returncommandSelect.first();
}
booleanprevious()throwsException{
returncommandSelect.previous();
}
booleannext()throwsException{
returncommandSelect.next();
}
booleanlast()throwsException{
returncommandSelect.last();
}
booleanisLast()throwsException{
returncommandSelect.isLast();
}
booleanisAfterLast()throwsException{
returncommandSelect.isAfterLast();
}
voidafterLast()throwsException{
commandSelect.afterLast();
}
booleanabsolute(introw)throwsException{
returncommandSelect.absolute(row);
}
booleanrelative(introws)throwsException{
returncommandSelect.relative(rows);
}
intgetRow()throwsException{
returncommandSelect.getRow();
}
longgetRowPosition(){
returncommandSelect.from.getRowPosition();
}
voidsetRowPosition(longrowPosition)throwsException{
commandSelect.from.setRowPosition(rowPosition);
}
finalbooleanrowInserted(){
returncommandSelect.from.rowInserted();
}
finalbooleanrowDeleted(){
returncommandSelect.from.rowDeleted();
}
voidnullRow(){
commandSelect.from.nullRow();
}
voidnoRow(){
commandSelect.from.noRow();
}
ﺝexecute()throwsException{
commandSelect.from.execute();
}
}
packagesmallsql.database;
classWhereextendsRowSource{
finalprivateRowSourcerowSource;
finalprivateﺝwhere;
ﺝrow=ﻝ;
privatebooleanisCurrentRow;
Where(RowSourcerowSource,ﺝwhere){
this.rowSource=rowSource;
this.where=where;
}
RowSourcegetFrom(){
returnrowSource;
}
finalprivatebooleanisValidRow()throwsException{
returnwhere==null||rowSource.rowInserted()||where.getBoolean();
}
finalbooleanisScrollable(){
returnrowSource.isScrollable();
}
finalbooleanisBeforeFirst(){
returnrow==ﻝ;
}
finalbooleanisFirst(){
returnrow==ﻝ&&isCurrentRow;
}
finalbooleanisLast()throwsException{
if(!isCurrentRow)ﺝ
longrowPos=rowSource.getRowPosition();
booleanisNext=next();
rowSource.setRowPosition(rowPos);
return!isNext;
}
finalbooleanisAfterLast(){
returnrow>ﻝ&&!isCurrentRow;
}
ﺝbeforeFirst()throwsException{
rowSource.beforeFirst();
row=ﻝ;
}
finalbooleanfirst()throwsException{
isCurrentRow=rowSource.first();
while(isCurrentRow&&!isValidRow()){
isCurrentRow=rowSource.next();
}
row=ﻝ;
returnisCurrentRow;
}
finalbooleanprevious()throwsException{
booleanoldIsCurrentRow=isCurrentRow;
do{
isCurrentRow=rowSource.previous();
}while(isCurrentRow&&!isValidRow());
if(oldIsCurrentRow||isCurrentRow)row--;
returnisCurrentRow;
}
finalbooleannext()throwsException{
booleanoldIsCurrentRow=isCurrentRow;
do{
isCurrentRow=rowSource.next();
}while(isCurrentRow&&!isValidRow());
if(oldIsCurrentRow||isCurrentRow)row++;
returnisCurrentRow;
}
finalbooleanlast()throwsException{
while(next()){}
returnprevious();
}
ﺝafterLast()throwsException{
while(next()){}
}
ﺝgetRow()throwsException{
returnisCurrentRow?row:ﻝ;
}
finallonggetRowPosition(){
returnrowSource.getRowPosition();
}
ﺝsetRowPosition(longrowPosition)throwsException{
rowSource.setRowPosition(rowPosition);
}
ﺝnullRow(){
rowSource.nullRow();
row=ﻝ;
}
ﺝnoRow(){
rowSource.noRow();
row=ﻝ;
}
finalbooleanrowInserted(){
returnrowSource.rowInserted();
}
finalbooleanrowDeleted(){
returnrowSource.rowDeleted();
}
ﺝexecute()throwsException{
rowSource.execute();
}
booleanisExpressionsFromThisRowSource(Expressionscolumns){
returnrowSource.isExpressionsFromThisRowSource(columns);
}
}
packagesmallsql.database.language;
importjava.util.HashMap;
importjava.util.HashSet;
importjava.util.Locale;
importjava.util.Map;
importjava.util.Set;
publicclassLanguage{
publicstaticfinalﺝCUSTOM_MESSAGE			="SS-0000";
publicstaticfinalﺝUNSUPPORTED_OPERATION	="SS-0001";
publicstaticfinalﺝCANT_LOCK_FILE="SS-0003";
publicstaticfinalﺝDB_EXISTENT				="SS-0030";
publicstaticfinalﺝDB_NONEXISTENT			="SS-0031";
publicstaticfinalﺝDB_NOT_DIRECTORY		="SS-0032";
publicstaticfinalﺝDB_NOTCONNECTED			="SS-0033";
publicstaticfinalﺝDB_READONLY="SS-0034";
publicstaticfinalﺝCONNECTION_CLOSED		="SS-0070";
publicstaticfinalﺝVIEW_INSERT				="SS-0100";
publicstaticfinalﺝVIEWDROP_NOT_VIEW		="SS-0101";
publicstaticfinalﺝVIEW_CANTDROP			="SS-0102";
publicstaticfinalﺝRSET_NOT_PRODUCED		="SS-0130";
publicstaticfinalﺝRSET_READONLY			="SS-0131";
publicstaticfinalﺝRSET_FWDONLY				="SS-0132";
publicstaticfinalﺝRSET_CLOSED				="SS-0133";
publicstaticfinalﺝRSET_NOT_INSERT_ROW		="SS-0134";
publicstaticfinalﺝRSET_ON_INSERT_ROW		="SS-0135";
publicstaticfinalﺝROWSOURCE_READONLY		="SS-0136";
publicstaticfinalﺝSTMT_IS_CLOSED="SS-0140";
publicstaticfinalﺝSUBQUERY_COL_COUNT		="SS-0160";
publicstaticfinalﺝJOIN_DELETE				="SS-0161";
publicstaticfinalﺝJOIN_INSERT				="SS-0162";
publicstaticfinalﺝDELETE_WO_FROM			="SS-0163";
publicstaticfinalﺝINSERT_WO_FROM			="SS-0164";
publicstaticfinalﺝTABLE_CANT_RENAME		="SS-0190";
publicstaticfinalﺝTABLE_CANT_DROP			="SS-0191";
publicstaticfinalﺝTABLE_CANT_DROP_LOCKED	="SS-0192";
publicstaticfinalﺝTABLE_CORRUPT_PAGE		="SS-0193";
publicstaticfinalﺝTABLE_MODIFIED			="SS-0194";
publicstaticfinalﺝTABLE_DEADLOCK			="SS-0195";
publicstaticfinalﺝTABLE_OR_VIEW_MISSING	="SS-0196";
publicstaticfinalﺝTABLE_FILE_INVALID		="SS-0197";
publicstaticfinalﺝTABLE_OR_VIEW_FILE_INVALID="SS-0198";
publicstaticfinalﺝTABLE_EXISTENT			="SS-0199";
publicstaticfinalﺝFK_NOT_TABLE				="SS-0220";
publicstaticfinalﺝPK_ONLYONE				="SS-0221";
publicstaticfinalﺝKEY_DUPLICATE			="SS-0222";
publicstaticfinalﺝMONTH_TOOLARGE			="SS-0251";
publicstaticfinalﺝDAYS_TOOLARGE			="SS-0252";
publicstaticfinalﺝHOURS_TOOLARGE			="SS-0253";
publicstaticfinalﺝMINUTES_TOOLARGE		="SS-0254";
publicstaticfinalﺝSECS_TOOLARGE			="SS-0255";
publicstaticfinalﺝMILLIS_TOOLARGE			="SS-0256";
publicstaticfinalﺝDATETIME_INVALID		="SS-0257";
publicstaticfinalﺝUNSUPPORTED_CONVERSION_OPER="SS-0280";
publicstaticfinalﺝUNSUPPORTED_DATATYPE_OPER="SS-0281";
publicstaticfinalﺝUNSUPPORTED_DATATYPE_FUNC="SS-0282";
publicstaticfinalﺝUNSUPPORTED_CONVERSION_FUNC="SS-0283";
publicstaticfinalﺝUNSUPPORTED_TYPE_CONV	="SS-0284";
publicstaticfinalﺝUNSUPPORTED_TYPE_SUM	="SS-0285";
publicstaticfinalﺝUNSUPPORTED_TYPE_MAX	="SS-0286";
publicstaticfinalﺝUNSUPPORTED_CONVERSION	="SS-0287";
publicstaticfinalﺝINSERT_INVALID_LEN		="SS-0288";
publicstaticfinalﺝSUBSTR_INVALID_LEN		="SS-0289";
publicstaticfinalﺝVALUE_STR_TOOLARGE		="SS-0310";
publicstaticfinalﺝVALUE_BIN_TOOLARGE		="SS-0311";
publicstaticfinalﺝVALUE_NULL_INVALID		="SS-0312";
publicstaticfinalﺝVALUE_CANT_CONVERT		="SS-0313";
publicstaticfinalﺝBYTEARR_INVALID_SIZE	="SS-0340";
publicstaticfinalﺝLOB_DELETED				="SS-0341";
publicstaticfinalﺝPARAM_CLASS_UNKNOWN		="SS-0370";
publicstaticfinalﺝPARAM_EMPTY				="SS-0371";
publicstaticfinalﺝPARAM_IDX_OUT_RANGE		="SS-0372";
publicstaticfinalﺝCOL_DUPLICATE			="SS-0400";
publicstaticfinalﺝCOL_MISSING				="SS-0401";
publicstaticfinalﺝCOL_VAL_UNMATCH			="SS-0402";
publicstaticfinalﺝCOL_INVALID_SIZE		="SS-0403";
publicstaticfinalﺝCOL_WRONG_PREFIX		="SS-0404";
publicstaticfinalﺝCOL_READONLY			="SS-0405";
publicstaticfinalﺝCOL_INVALID_NAME		="SS-0406";
publicstaticfinalﺝCOL_IDX_OUT_RANGE		="SS-0407";
publicstaticfinalﺝCOL_AMBIGUOUS			="SS-0408";
publicstaticfinalﺝGROUP_AGGR_INVALID		="SS-0430";
publicstaticfinalﺝGROUP_AGGR_NOTPART		="SS-0431";
publicstaticfinalﺝORDERBY_INTERNAL		="SS-0432";
publicstaticfinalﺝUNION_DIFFERENT_COLS	="SS-0433";
publicstaticfinalﺝINDEX_EXISTS			="SS-0460";
publicstaticfinalﺝINDEX_MISSING			="SS-0461";
publicstaticfinalﺝINDEX_FILE_INVALID		="SS-0462";
publicstaticfinalﺝINDEX_CORRUPT			="SS-0463";
publicstaticfinalﺝINDEX_TOOMANY_EQUALS	="SS-0464";
publicstaticfinalﺝFILE_TOONEW				="SS-0490";
publicstaticfinalﺝFILE_TOOOLD				="SS-0491";
publicstaticfinalﺝFILE_CANT_DELETE="SS-0492";
publicstaticfinalﺝROW_0_ABSOLUTE			="SS-0520";
publicstaticfinalﺝROW_NOCURRENT			="SS-0521";
publicstaticfinalﺝROWS_WRONG_MAX			="SS-0522";
publicstaticfinalﺝROW_LOCKED				="SS-0523";
publicstaticfinalﺝROW_DELETED				="SS-0524";
publicstaticfinalﺝSAVEPT_INVALID_TRANS	="SS-0550";
publicstaticfinalﺝSAVEPT_INVALID_DRIVER	="SS-0551";
publicstaticfinalﺝALIAS_UNSUPPORTED		="SS-0580";
publicstaticfinalﺝISOLATION_UNKNOWN		="SS-0581";
publicstaticfinalﺝFLAGVALUE_INVALID		="SS-0582";
publicstaticfinalﺝARGUMENT_INVALID		="SS-0583";
publicstaticfinalﺝGENER_KEYS_UNREQUIRED	="SS-0584";
publicstaticfinalﺝSEQUENCE_HEX_INVALID	="SS-0585";
publicstaticfinalﺝSEQUENCE_HEX_INVALID_STR="SS-0586";
publicstaticfinalﺝSYNTAX_BASE_OFS			="SS-0610";
publicstaticfinalﺝSYNTAX_BASE_END			="SS-0611";
publicstaticfinalﺝSTXADD_ADDITIONAL_TOK	="SS-0612";
publicstaticfinalﺝSTXADD_IDENT_EXPECT		="SS-0613";
publicstaticfinalﺝSTXADD_IDENT_EMPTY		="SS-0614";
publicstaticfinalﺝSTXADD_IDENT_WRONG		="SS-0615";
publicstaticfinalﺝSTXADD_OPER_MINUS		="SS-0616";
publicstaticfinalﺝSTXADD_FUNC_UNKNOWN		="SS-0617";
publicstaticfinalﺝSTXADD_PARAM_INVALID_COUNT	="SS-0618";
publicstaticfinalﺝSTXADD_JOIN_INVALID		="SS-0619";
publicstaticfinalﺝSTXADD_FROM_PAR_CLOSE	="SS-0620";
publicstaticfinalﺝSTXADD_KEYS_REQUIRED		="SS-0621";
publicstaticfinalﺝSTXADD_NOT_NUMBER		="SS-0622";
publicstaticfinalﺝSTXADD_COMMENT_OPEN		="SS-0623";
privateMapmessages;
privateMapsqlStates;
publicstaticLanguagegetLanguage(ﺝlocaleStr){
try{
returngetFromLocaleTree(localeStr);
}
catch(IllegalArgumentExceptione){
returngetDefaultLanguage();
}
}
publicstaticLanguagegetDefaultLanguage(){
ﺝdfltLocaleStr=Locale.getDefault().toString();
try{
returngetFromLocaleTree(dfltLocaleStr);
}
catch(IllegalArgumentExceptione){
returnnewLanguage();
}
}
privatestaticLanguagegetFromLocaleTree(ﺝlocaleStr)
throwsIllegalArgumentException{
ﺝpart=localeStr;
while(true){
ﺝlangClassName=Language.class.getName()+'_'+part;
try{
return(Language)Class.forName(langClassName).newInstance();
}
catch(IllegalAccessExceptione){
assert(false):"Internalerror:mustneverhappen.";
}
catch(ClassNotFoundExceptione){
}
catch(InstantiationExceptione){
assert(false):"ErrorduringLanguageinstantiation:"+e.getMessage();
}
intlastUndsc=part.lastIndexOf("_");
if(lastUndsc>-1)part=part.substring(0,lastUndsc);
elsebreak;
}
thrownewIllegalArgumentException("Localenotfoundinthetree:"+localeStr);
}
protectedLanguage(){
messages=newHashMap((int)(MESSAGES.length/0.7));
sqlStates=newHashMap((int)(MESSAGES.length/0.7));
addMessages(MESSAGES);
setSqlStates();
}
protectedﺝaddMessages(String[][]entries)
throwsIllegalArgumentException{
Setinserted=newHashSet();
for(inti=ﻝ;i<entries.length;i++){
ﺝkey=entries[i][0];
if(!inserted.add(key)){
thrownewIllegalArgumentException("Duplicatekey:"+key);
}
else{
ﺝvalue=entries[i][1];
messages.put(key,value);
}
}
}
privateﺝsetSqlStates(){
Setinserted=newHashSet();
for(inti=ﻝ;i<SQL_STATES.length;i++){
ﺝkey=SQL_STATES[i][0];
if(!inserted.add(key)){
thrownewIllegalArgumentException("Duplicatekey:"+key);
}
else{
ﺝvalue=SQL_STATES[i][1];
sqlStates.put(key,value);
}
}
}
publicﺝgetMessage(ﺝkey){
ﺝmessage=(String)messages.get(key);
assert(message!=null):"Messagecodenotfound:"+key;
returnmessage;
}
publicﺝgetSqlState(ﺝkey){
ﺝsqlState=(String)sqlStates.get(key);
assert(sqlState!=null):"SQLStatecodenotfound:"+key;
returnsqlState;
}
publicString[][]getEntries(){
returnMESSAGES;
}
privatefinalString[][]MESSAGES={
{CUSTOM_MESSAGE		,"{0}"},
{UNSUPPORTED_OPERATION,"UnsupportedOperation{0}."},
{CANT_LOCK_FILE,"Can''tlockfile''{0}''.AsingleSmallSQLDatabasecanonlybeopenedfromasingleprocess."},
{DB_EXISTENT,"Database''{0}''alreadyexists."},
{DB_NONEXISTENT,"Database''{0}''doesnotexist."},
{DB_NOT_DIRECTORY,"Directory''{0}''isnotaSmallSQLdatabase."},
{DB_NOTCONNECTED,"YouarenotconnectedwithaDatabase."},
{CONNECTION_CLOSED,"Connectionisalreadyclosed."},
{VIEW_INSERT,"INSERTisnotsupportedforaview."},
{VIEWDROP_NOT_VIEW,"CannotuseDROPVIEWwith''{0}''becauseitdoesnotisaview."},
{VIEW_CANTDROP,"View''{0}''can''tbedropped."},
{RSET_NOT_PRODUCED,"NoResultSetwasproduced."},
{RSET_READONLY,"ResultSetisreadonly."},
{RSET_FWDONLY,"ResultSetisforwardonly."},
{RSET_CLOSED,"ResultSetisclosed."},
{RSET_NOT_INSERT_ROW,"Cursoriscurrentlynotontheinsertrow."},
{RSET_ON_INSERT_ROW,"Cursoriscurrentlyontheinsertrow."},
{ROWSOURCE_READONLY,"Rowsourceisreadonly."},
{STMT_IS_CLOSED,"Statementisalreadyclosed."},
{SUBQUERY_COL_COUNT,"Countofcolumnsinsubquerymustbeﻝandnot{ﻝ}."},
{JOIN_DELETE,"ThemethoddeleteRownotsupportedonjoins."},
{JOIN_INSERT,"ThemethodinsertRownotsupportedonjoins."},
{DELETE_WO_FROM,"ThemethoddeleteRowneedaFROMexpression."},
{INSERT_WO_FROM,"ThemethodinsertRowneedaFROMexpression."},
{TABLE_CANT_RENAME,"Table''{0}''can''tberenamed."},
{TABLE_CANT_DROP,"Table''{0}''can''tbedropped."},
{TABLE_CANT_DROP_LOCKED,"Table''{0}''can''tdropbecauseislocked."},
{TABLE_CORRUPT_PAGE,"Corrupttablepageatposition:{0}."},
{TABLE_MODIFIED,"Table''{0}''wasmodified."},
{TABLE_DEADLOCK,"Deadlock,cannotcreatealockontable''{0}''."},
{TABLE_OR_VIEW_MISSING,"TableorView''{0}''doesnotexist."},
{TABLE_FILE_INVALID,"File''{0}''doesnotincludeavalidSmallSQLTable."},
{TABLE_OR_VIEW_FILE_INVALID,"File''{0}''isnotavalidTableorViewstore."},
{TABLE_EXISTENT,"TableorView''{0}''alreadyexists."},
{FK_NOT_TABLE,"''{0}''isnotatable."},
{PK_ONLYONE,"Atablecanhaveonlyoneprimarykey."},
{KEY_DUPLICATE,"DuplicateKey."},
{MONTH_TOOLARGE,"MonthsaretoolargeinDATEorTIMESTAMPvalue''{0}''."},
{DAYS_TOOLARGE,"DaysaretoolargeinDATEorTIMESTAMPvalue''{0}''."},
{HOURS_TOOLARGE,"HoursaretoolargeinTIMEorTIMESTAMPvalue''{0}''."},
{MINUTES_TOOLARGE,"MinutesaretoolargeinTIMEorTIMESTAMPvalue''{0}''."},
{SECS_TOOLARGE,"SecondsaretoolargeinTIMEorTIMESTAMPvalue''{0}''."},
{MILLIS_TOOLARGE,"MillisecondsaretoolargeinTIMESTAMPvalue''{0}''."},
{DATETIME_INVALID,"''{0}''isaninvalidDATE,TIMEorTIMESTAMP."},
{UNSUPPORTED_CONVERSION_OPER,"Unsupportedconversiontodatatype''{0}''fromdatatype''{1}''foroperation''{2}''."},
{UNSUPPORTED_DATATYPE_OPER,"Unsupporteddatatype''{0}''foroperation''{1}''."},
{UNSUPPORTED_DATATYPE_FUNC,"Unsupporteddatatype''{0}''forfunction''{1}''."},
{UNSUPPORTED_CONVERSION_FUNC,"Unsupportedconversiontodatatype''{0}''forfunction''{1}''."},
{UNSUPPORTED_TYPE_CONV,"UnsupportedtypeforCONVERTfunction:{0}."},
{UNSUPPORTED_TYPE_SUM,"Unsupporteddatatype''{0}''forSUMfunction."},
{UNSUPPORTED_TYPE_MAX,"Unsupporteddatatype''{0}''forMAXfunction."},
{UNSUPPORTED_CONVERSION,"Can''tconvert''{0}''[{1}]to''{2}''."},
{INSERT_INVALID_LEN,"Invalidlength''{0}''infunctionINSERT."},
{SUBSTR_INVALID_LEN,"Invalidlength''{0}''infunctionSUBSTRING."},
{VALUE_STR_TOOLARGE,"ﺝvaluetoolargeforcolumn."},
{VALUE_BIN_TOOLARGE,"Binaryvaluewithlength{0}tolargeforcolumnwithsize{1}."},
{VALUE_NULL_INVALID,"Nullvaluesarenotvalidforcolumn''{0}''."},
{VALUE_CANT_CONVERT,"Cannotconverta{0}valuetoa{1}value."},
{BYTEARR_INVALID_SIZE,"Invalidbytearraysize{0}forUNIQUEIDENFIER."},
{LOB_DELETED,"LobObjectwasdeleted."},
{PARAM_CLASS_UNKNOWN,"Unknownparameterclass:''{0}''."},
{PARAM_EMPTY,"Parameter{0}isempty."},
{PARAM_IDX_OUT_RANGE,"Parameterindex{ﻝ}outofrange.Thevaluemustbebetweenﻝand{ﻝ}."},
{COL_DUPLICATE	,"Thereisaduplicatedcolumnname:''{0}''."},
{COL_MISSING,"Column''{0}''notfound."},
{COL_VAL_UNMATCH,"ColumnsandValuescountisnotidentical."},
{COL_INVALID_SIZE,"Invalidcolumnsize{0}forcolumn''{1}''."},
{COL_WRONG_PREFIX,"Thecolumnprefix''{0}''doesnotmatchwithatablenameoraliasnameusedinthisquery."},
{COL_READONLY,"Column{0}isreadonly."},
{COL_INVALID_NAME,"Invalidcolumnname''{0}''."},
{COL_IDX_OUT_RANGE,"Columnindexoutofrange:{0}."},
{COL_AMBIGUOUS,"Column''{0}''isambiguous."},
{GROUP_AGGR_INVALID,"AggregatefunctionarenotvalidintheGROUPBYclause({0})."},
{GROUP_AGGR_NOTPART,"ﺝ''{0}''isnotpartofaaggregatefunctionorGROUPBYclause."},
{ORDERBY_INTERNAL,"InternalErrorwithORDERBY."},
{UNION_DIFFERENT_COLS,"DifferentSELECToftheUNIONhavedifferentcolumncount:{0}and{1}."},
{INDEX_EXISTS,"Index''{0}''alreadyexists."},
{INDEX_MISSING,"Index''{0}''doesnotexist."},
{INDEX_FILE_INVALID,"File''{0}''isnotavalidIndexstore."},
{INDEX_CORRUPT,"ErrorinloadingIndex.Indexfileiscorrupt.({0})."},
{INDEX_TOOMANY_EQUALS,"ToomanyequalsentryinIndex."},
{FILE_TOONEW,"Fileversion({0})offile''{1}''istoonewforthisruntime."},
{FILE_TOOOLD,"Fileversion({0})offile''{1}''istoooldforthisruntime."},
{FILE_CANT_DELETE,"File''{0}''can'tbedeleted."},
{ROW_ﻝ_ABSOLUTE,"Rowﻝisinvalidformethodabsolute()."},
{ROW_NOCURRENT,"Nocurrentrow."},
{ROWS_WRONG_MAX,"Wrongmaxrowsvalue:{0}."},
{ROW_LOCKED,"RowislockedfromanotherConnection."},
{ROW_DELETED,"Rowalreadydeleted."},
{SAVEPT_INVALID_TRANS,"Savepointisnotvalidforthistransaction."},
{SAVEPT_INVALID_DRIVER,"Savepointisnotvalidforthisdriver{0}."},
{ALIAS_UNSUPPORTED,"Aliasnotsupportedforthistypeofrowsource."},
{ISOLATION_UNKNOWN,"UnknownTransactionIsolationLevel:{0}."},
{FLAGVALUE_INVALID,"InvalidflagvalueinmethodgetMoreResults:{0}."},
{ARGUMENT_INVALID,"InvalidargumentinmethodsetNeedGenratedKeys:{0}."},
{GENER_KEYS_UNREQUIRED,"GeneratedKeysnotrequested."},
{SEQUENCE_HEX_INVALID,"Invalidhexsequenceat{0}."},
{SEQUENCE_HEX_INVALID_STR,"Invalidhexsequenceatposition{0}in''{1}''."},
{SYNTAX_BASE_OFS	,"Syntaxerroratoffset{0}on''{1}''."},
{SYNTAX_BASE_END		,"Syntaxerror,unexpectedendofSQLstring."},
{STXADD_ADDITIONAL_TOK			,"AdditionaltokenafterendofSQLstatement."},
{STXADD_IDENT_EXPECT			,"Identifierexpected."},
{STXADD_IDENT_EMPTY			,"EmptyIdentifier."},
{STXADD_IDENT_WRONG			,"WrongIdentifier''{0}''."},
{STXADD_OPER_MINUS			,"InvalidoperatorminusfordatatypeVARBINARY."},
{STXADD_FUNC_UNKNOWN			,"Unknownfunction."},
{STXADD_PARAM_INVALID_COUNT	,"Invalidparametercount."},
{STXADD_JOIN_INVALID			,"InvalidJoinSyntax."},
{STXADD_FROM_PAR_CLOSE			,"UnexpectedclosingparenthesisinFROMclause."},
{STXADD_KEYS_REQUIRED			,"Requiredkeywordsare:"},
{STXADD_NOT_NUMBER			,"Numbervaluerequired(passed=''{0}'')."},
{STXADD_COMMENT_OPEN			,"Missingendcommentmark(''*/'')."},
};
privatefinalString[][]SQL_STATES={
{CUSTOM_MESSAGE		,"01000"},
{UNSUPPORTED_OPERATION,"01000"},
{CANT_LOCK_FILE,"01000"},
{DB_EXISTENT,"01000"},
{DB_NONEXISTENT,"01000"},
{DB_NOT_DIRECTORY,"01000"},
{DB_NOTCONNECTED,"01000"},
{CONNECTION_CLOSED,"01000"},
{VIEW_INSERT,"01000"},
{VIEWDROP_NOT_VIEW,"01000"},
{VIEW_CANTDROP,"01000"},
{RSET_NOT_PRODUCED,"01000"},
{RSET_READONLY,"01000"},
{RSET_FWDONLY,"01000"},
{RSET_CLOSED,"01000"},
{RSET_NOT_INSERT_ROW,"01000"},
{RSET_ON_INSERT_ROW,"01000"},
{ROWSOURCE_READONLY,"01000"},
{STMT_IS_CLOSED,"HY010"},
{SUBQUERY_COL_COUNT,"01000"},
{JOIN_DELETE,"01000"},
{JOIN_INSERT,"01000"},
{DELETE_WO_FROM,"01000"},
{INSERT_WO_FROM,"01000"},
{TABLE_CANT_RENAME,"01000"},
{TABLE_CANT_DROP,"01000"},
{TABLE_CANT_DROP_LOCKED,"01000"},
{TABLE_CORRUPT_PAGE,"01000"},
{TABLE_MODIFIED,"01000"},
{TABLE_DEADLOCK,"01000"},
{TABLE_OR_VIEW_MISSING,"01000"},
{TABLE_FILE_INVALID,"01000"},
{TABLE_OR_VIEW_FILE_INVALID,"01000"},
{TABLE_EXISTENT,"01000"},
{FK_NOT_TABLE,"01000"},
{PK_ONLYONE,"01000"},
{KEY_DUPLICATE,"01000"},
{MONTH_TOOLARGE,"01000"},
{DAYS_TOOLARGE,"01000"},
{HOURS_TOOLARGE,"01000"},
{MINUTES_TOOLARGE,"01000"},
{SECS_TOOLARGE,"01000"},
{MILLIS_TOOLARGE,"01000"},
{DATETIME_INVALID,"01000"},
{UNSUPPORTED_CONVERSION_OPER,"01000"},
{UNSUPPORTED_DATATYPE_OPER,"01000"},
{UNSUPPORTED_DATATYPE_FUNC,"01000"},
{UNSUPPORTED_CONVERSION_FUNC,"01000"},
{UNSUPPORTED_TYPE_CONV,"01000"},
{UNSUPPORTED_TYPE_SUM,"01000"},
{UNSUPPORTED_TYPE_MAX,"01000"},
{UNSUPPORTED_CONVERSION,"01000"},
{INSERT_INVALID_LEN,"01000"},
{SUBSTR_INVALID_LEN,"01000"},
{VALUE_STR_TOOLARGE,"01000"},
{VALUE_BIN_TOOLARGE,"01000"},
{VALUE_NULL_INVALID,"01000"},
{VALUE_CANT_CONVERT,"01000"},
{BYTEARR_INVALID_SIZE,"01000"},
{LOB_DELETED,"01000"},
{PARAM_CLASS_UNKNOWN,"01000"},
{PARAM_EMPTY,"01000"},
{PARAM_IDX_OUT_RANGE,"01000"},
{COL_DUPLICATE	,"01000"},
{COL_MISSING,"01000"},
{COL_VAL_UNMATCH,"01000"},
{COL_INVALID_SIZE,"01000"},
{COL_WRONG_PREFIX,"01000"},
{COL_READONLY,"01000"},
{COL_INVALID_NAME,"01000"},
{COL_IDX_OUT_RANGE,"01000"},
{COL_AMBIGUOUS,"01000"},
{GROUP_AGGR_INVALID,"01000"},
{GROUP_AGGR_NOTPART,"01000"},
{ORDERBY_INTERNAL,"01000"},
{UNION_DIFFERENT_COLS,"01000"},
{INDEX_EXISTS,"01000"},
{INDEX_MISSING,"01000"},
{INDEX_FILE_INVALID,"01000"},
{INDEX_CORRUPT,"01000"},
{INDEX_TOOMANY_EQUALS,"01000"},
{FILE_TOONEW,"01000"},
{FILE_TOOOLD,"01000"},
{FILE_CANT_DELETE,"01000"},
{ROW_0_ABSOLUTE,"01000"},
{ROW_NOCURRENT,"01000"},
{ROWS_WRONG_MAX,"01000"},
{ROW_LOCKED,"01000"},
{ROW_DELETED,"01000"},
{SAVEPT_INVALID_TRANS,"01000"},
{SAVEPT_INVALID_DRIVER,"01000"},
{ALIAS_UNSUPPORTED,"01000"},
{ISOLATION_UNKNOWN,"01000"},
{FLAGVALUE_INVALID,"01000"},
{ARGUMENT_INVALID,"01000"},
{GENER_KEYS_UNREQUIRED,"01000"},
{SEQUENCE_HEX_INVALID,"01000"},
{SEQUENCE_HEX_INVALID_STR,"01000"},
{SYNTAX_BASE_OFS	,"01000"},
{SYNTAX_BASE_END		,"01000"},
{STXADD_ADDITIONAL_TOK			,"01000"},
{STXADD_IDENT_EXPECT			,"01000"},
{STXADD_IDENT_EMPTY			,"01000"},
{STXADD_IDENT_WRONG			,"01000"},
{STXADD_OPER_MINUS			,"01000"},
{STXADD_FUNC_UNKNOWN			,"01000"},
{STXADD_PARAM_INVALID_COUNT	,"01000"},
{STXADD_JOIN_INVALID			,"01000"},
{STXADD_FROM_PAR_CLOSE			,"01000"},
{STXADD_KEYS_REQUIRED			,"01000"},
{STXADD_NOT_NUMBER			,"01000"},
{STXADD_COMMENT_OPEN			,"01000"},
};
}
packagesmallsql.database.language;
publicclassLanguage_deextendsLanguage{
protectedLanguage_de(){
addMessages(ENTRIES);
}
publicString[][]getEntries(){
returnENTRIES;
}
privatefinalString[][]ENTRIES={
{UNSUPPORTED_OPERATION,"NichtunterstützteFunktion:{0}"},
{CANT_LOCK_FILE,"DieDatei''{0}''kannnichtgelocktwerden.EineeinzelneSmallSQLDatenbankkannnurfüreineneinzigenProzessgeöffnetwerden."},
{DB_EXISTENT,"DieDatenbank''{0}''existiertbereits."},
{DB_NONEXISTENT,"DieDatenbank''{0}''existiertnicht."},
{DB_NOT_DIRECTORY,"DasVerzeichnis''{0}''istkeineSmallSQLDatenbank."},
{DB_NOTCONNECTED,"SiesindnichtmiteinerDatenbankverbunden."},
{CONNECTION_CLOSED,"DieVerbindungistbereitsgeschlossen."},
{VIEW_INSERT,"INSERTwirdnichtunterstütztfüreineView."},
{VIEWDROP_NOT_VIEW,"DROPVIEWkannnichtmit''{0}''verwendetwerden,weileskeineViewist."},
{VIEW_CANTDROP,"View''{0}''kannnichtgelöschtwerden."},
{RSET_NOT_PRODUCED,"EswurdekeinResultSeterzeugt."},
{RSET_READONLY,"DasResultSetistschreibgeschützt."},
{RSET_FWDONLY,"DasResultSetistforwardonly."},
{RSET_CLOSED,"DasResultSetistgeschlossen."},
{RSET_NOT_INSERT_ROW,"DerCursorzeigtaktuellnichtaufdieEinfügeposition(insertrow)."},
{RSET_ON_INSERT_ROW,"DerCursorzeigtaktuellaufdieEinfügeposition(insertrow)."},
{ROWSOURCE_READONLY,"DieRowsourceistschreibgeschützt."},
{STMT_IS_CLOSED,"DasStatementistbereitsgeschlossen."},
{SUBQUERY_COL_COUNT,"DieAnzahlderSpalteninderSubquerymussﻝseinundnicht{ﻝ}."},
{JOIN_DELETE,"DieMethodedeleteRowwirdnichtunterstütztfürJoins."},
{JOIN_INSERT,"DieMethodeinsertRowwirdnichtunterstütztfürJoins."},
{DELETE_WO_FROM,"DieMethodedeleteRowbenötigteinenFROMAusdruck."},
{INSERT_WO_FROM,"DieMethodeinsertRowbenötigteinenFROMAusdruck."},
{TABLE_CANT_RENAME,"DieTabelle''{0}''kannnichtumbenanntwerden."},
{TABLE_CANT_DROP,"DieTabelle''{0}''kannnichtgelöschtwerden."},
{TABLE_CANT_DROP_LOCKED,"DieTabelle''{0}''kannnichtgelöschtwerden,weilsiegelocktist."},
{TABLE_CORRUPT_PAGE,"BeschädigteTabellenseitebeiPosition:{0}."},
{TABLE_MODIFIED,"DieTabelle''{0}''wurdemodifiziert."},
{TABLE_DEADLOCK,"Deadlock,eskannkeinLockerzeugtwerdenfürTabelle''{0}''."},
{TABLE_OR_VIEW_MISSING,"TabelleoderView''{0}''existiertnicht."},
{TABLE_FILE_INVALID,"DieDatei''{0}''enthältkeinegültigeSmallSQLTabelle."},
{TABLE_OR_VIEW_FILE_INVALID,"DieDatei''{0}''istkeinegültigerTabellenoderViewSpeicher."},
{TABLE_EXISTENT,"DieTabelleoderView''{0}''existiertbereits."},
{FK_NOT_TABLE,"''{0}''istkeineTabelle."},
{PK_ONLYONE,"EineTabellekannnureinenPrimärschlüsselhaben."},
{KEY_DUPLICATE,"DoppelterSchlüssel."},
{MONTH_TOOLARGE,"DerMonatistzugroßimDATEoderTIMESTAMPWert''{0}''."},
{DAYS_TOOLARGE,"DieTagesindzugroßimDATEoderTIMESTAMPWert''{0}''."},
{HOURS_TOOLARGE,"DieStundensindzugroßimTIMEoderTIMESTAMPWert''{0}''."},
{MINUTES_TOOLARGE,"DieMinutensindzugroßimTIMEoderTIMESTAMPWert''{0}''."},
{SECS_TOOLARGE,"DieSekundensindzugroßimTIMEoderTIMESTAMPWert''{0}''."},
{MILLIS_TOOLARGE,"DieMillisekundensindzugroßimTIMESTAMPWert''{0}''."},
{DATETIME_INVALID,"''{0}''isteinungültigesDATE,TIMEorTIMESTAMP."},
{UNSUPPORTED_CONVERSION_OPER,"NichtunterstützteKonvertierungzuDatentyp''{0}''vonDatentyp''{1}''fürdieOperation''{2}''."},
{UNSUPPORTED_DATATYPE_OPER,"NichtunterstützterDatentyp''{0}''fürOperation''{1}''."},
{UNSUPPORTED_DATATYPE_FUNC,"NichtunterstützterDatentyp''{0}''fürFunktion''{1}''."},
{UNSUPPORTED_CONVERSION_FUNC,"NichtunterstützteKonvertierungzuDatentyp''{0}''fürFunktion''{1}''."},
{UNSUPPORTED_TYPE_CONV,"NichtunterstützterTypfürCONVERTFunktion:{0}."},
{UNSUPPORTED_TYPE_SUM,"NichtunterstützterDatentyp''{0}''fürSUMFunktion."},
{UNSUPPORTED_TYPE_MAX,"NichtunterstützterDatentyp''{0}''fürMAXFunktion."},
{UNSUPPORTED_CONVERSION,"Kannnichtkonvertieren''{0}''[{1}]zu''{2}''."},
{INSERT_INVALID_LEN,"UngültigeLänge''{0}''inFunktionINSERT."},
{SUBSTR_INVALID_LEN,"UngültigeLänge''{0}''inFunktionSUBSTRING."},
{VALUE_STR_TOOLARGE,"DerﺝWertistzugroßfürdieSpalte."},
{VALUE_BIN_TOOLARGE,"EinBinäreWertmitLänge{0}istzugroßfüreineSpaltemitderGröße{1}."},
{VALUE_NULL_INVALID,"NullWertesindungültigfürdieSpalte''{0}''."},
{VALUE_CANT_CONVERT,"Kannnichtkonvertierenein{0}Wertzueinem{1}Wert."},
{BYTEARR_INVALID_SIZE,"UngültigeBytearrayGroße{0}fürUNIQUEIDENFIER."},
{LOB_DELETED,"LobObjektwurdegelöscht."},
{PARAM_CLASS_UNKNOWN,"UnbekanteParameterKlasse:''{0}''."},
{PARAM_EMPTY,"Parameter{0}istleer."},
{PARAM_IDX_OUT_RANGE,"ParameterIndex{ﻝ}liegtaußerhalbdesGültigkeitsbereiches.DerWertmusszwischenﻝund{ﻝ}liegen."},
{COL_DUPLICATE,"EsgibteinendoppeltenSpaltennamen:''{0}''."},
{COL_MISSING,"Spalte''{0}''wurdenichtgefunden."},
{COL_VAL_UNMATCH,"DieSpaltenanzahlundWerteanzahlistnichtidentisch."},
{COL_INVALID_SIZE,"UngültigeSpaltengröße{0}fürSpalte''{1}''."},
{COL_WRONG_PREFIX,"DerSpaltenprefix''{0}''passtzukeinemTabellennamenoderAliasnamenindieserAbfrage."},
{COL_READONLY,"DieSpalte{0}istschreibgeschützt."},
{COL_INVALID_NAME,"UngültigerSpaltenname''{0}''."},
{COL_IDX_OUT_RANGE,"SpaltenindexaußerhalbdesGültigkeitsbereiches:{0}."},
{COL_AMBIGUOUS,"DieSpalte''{0}''istmehrdeutig."},
{GROUP_AGGR_INVALID,"AggregatfunktionsindnichterlaubtimGROUPBYKlausel:({0})."},
{GROUP_AGGR_NOTPART,"DerAusdruck''{0}''istnichtTeileinerAggregatfunktionoderGROUPBYKlausel."},
{ORDERBY_INTERNAL,"InternerErrormitORDERBY."},
{UNION_DIFFERENT_COLS,"DieSELECTTeiledesUNIONhabeneineunterschiedlicheSpaltenanzahl:{0}und{1}."},
{INDEX_EXISTS,"Index''{0}''existiertbereits."},
{INDEX_MISSING,"Index''{0}''existiertnicht."},
{INDEX_FILE_INVALID,"DieDatei''{0}''istkeingültigerIndexspeicher."},
{INDEX_CORRUPT,"ErrorbeimLadendesIndex.DieIndexDateiistbeschädigt.({0})."},
{INDEX_TOOMANY_EQUALS,"ZuvieleidentischeEinträgeimIndex."},
{FILE_TOONEW,"Dateiversion({0})derDatei''{1}''istzuneufürdieseLaufzeitbibliothek."},
{FILE_TOOOLD,"Dateiversion({0})derDatei''{1}''istzualtfürdieseLaufzeitbibliothek."},
{FILE_CANT_DELETE,"Datei''{0}''kannnichtgelöschtwerden."},
{ROW_ﻝ_ABSOLUTE,"DatensatzﻝistungültigfürdieMethodeabsolute()."},
{ROW_NOCURRENT,"KeinaktuellerDatensatz."},
{ROWS_WRONG_MAX,"FehlerhafterWertfürMaximaleDatensatzanzahl:{0}."},
{ROW_LOCKED,"DerDatensatzistgelockedvoneineranderenVerbindung."},
{ROW_DELETED,"DerDatensatzistbereitsgelöscht."},
{SAVEPT_INVALID_TRANS,"DerSavepointistnichtgültigfürdieaktuelleTransaction."},
{SAVEPT_INVALID_DRIVER,"DerSavepointistnichtgültigfürdiesenTreiber{0}."},
{ALIAS_UNSUPPORTED,"EinAliasistnichterlaubtfürdiesenTypvonRowsource."},
{ISOLATION_UNKNOWN,"UnbekantesTransaktionIsolationLevel:{0}."},
{FLAGVALUE_INVALID,"UngültigerWertdesFlagsinMethodegetMoreResults:{0}."},
{ARGUMENT_INVALID,"UngültigesArgumentinMethodesetNeedGenratedKeys:{0}."},
{GENER_KEYS_UNREQUIRED,"GeneratedKeyswurdennichtangefordert."},
{SEQUENCE_HEX_INVALID,"UngültigeHexadecimalSequenzebeiPosition{0}."},
{SEQUENCE_HEX_INVALID_STR,"UngültigeHexadecimalSequenzebeiPosition{0}in''{1}''."},
{SYNTAX_BASE_OFS,"SyntaxErrorbeiPosition{0}in''{1}''."},
{SYNTAX_BASE_END,"SyntaxError,unerwartetesEndedesSQLStrings."},
{STXADD_ADDITIONAL_TOK,"ZusätzlicheZeichennachdemEndedesSQLstatement."},
{STXADD_IDENT_EXPECT,"Bezeichnererwartet."},
{STXADD_IDENT_EMPTY,"LeererBezeichner."},
{STXADD_IDENT_WRONG,"UngültigerBezeichner''{0}''."},
{STXADD_OPER_MINUS,"UngültigerOperatorMinusfürDatentypVARBINARY."},
{STXADD_FUNC_UNKNOWN,"UnbekannteFunktion."},
{STXADD_PARAM_INVALID_COUNT,"UngültigeParamterAnzahl."},
{STXADD_JOIN_INVALID,"UngültigeJoinSyntax."},
{STXADD_FROM_PAR_CLOSE,"UnerwartetschließendeKlammerinFROMKlausel."},
{STXADD_KEYS_REQUIRED,"BenötigeSchlüsselwörtersind:"},
{STXADD_NOT_NUMBER,"EineZahlisterforderlich:''{0}''."},
{STXADD_COMMENT_OPEN,"FehlendesKommentarende''*/''."},
};
}
packagesmallsql.database.language;
publicclassLanguage_enextendsLanguage{
}
packagesmallsql.database.language;
publicclassLanguage_itextendsLanguage{
protectedLanguage_it(){
addMessages(ENTRIES);
}
publicString[][]getEntries(){
returnENTRIES;
}
privatefinalString[][]ENTRIES={
{UNSUPPORTED_OPERATION,"Operazionenonsupportata:{0}."},
{CANT_LOCK_FILE,"Impossibilebloccareilfile''{0}''.UndatabaseSmallSQLDatabasepuòessereapertodaununicoprocesso."},
{DB_EXISTENT,"Ildatabase''{0}''ègiàesistente."},
{DB_NONEXISTENT,"Ildatabase''{0}''Nonesiste."},
{DB_NOT_DIRECTORY,"Ladirectory''{0}''nonèundatabaseSmallSQL."},
{DB_NOTCONNECTED,"L''utentenonèconnessoaundatabase."},
{CONNECTION_CLOSED,"Laconnessioneègiàchiusa."},
{VIEW_INSERT,"INSERTnonèsupportatoperunaview."},
{VIEWDROP_NOT_VIEW,"NonèpossibileeffettuareDROPVIEWcon''{0}''perchénonèunaview."},
{VIEW_CANTDROP,"Nonsipuòeffettuaredropsullaview''{0}''."},
{RSET_NOT_PRODUCED,"NessunResultSetèstatoprodotto."},
{RSET_READONLY,"IlResultSetèdisolalettura."},
{RSET_FWDONLY,"IlResultSetèforwardonly."},
{RSET_CLOSED,"IlResultSetèchiuso."},
{RSET_NOT_INSERT_ROW,"Ilcursorenonèattualmentenellariga''InsertRow''."},
{RSET_ON_INSERT_ROW,"Ilcursoreèattualmentenellariga''InsertRow''."},
{ROWSOURCE_READONLY,"IlRowsourceèdisolalettura."},
{STMT_IS_CLOSED,"LoStatementèinstatochiuso."},
{SUBQUERY_COL_COUNT,"Ilconteggiodellecolonnenellasubquerydeveessereﻝenon{ﻝ}."},
{JOIN_DELETE,"DeleteRownonsupportatonellejoin."},
{JOIN_INSERT,"InsertRownonsupportatonellejoin."},
{DELETE_WO_FROM,"DeleteRownecessitaun''espressioneFROM."},
{INSERT_WO_FROM,"InsertRownecessitaun''espressioneFROM."},
{TABLE_CANT_RENAME,"Latabella''{0}''nonpuòessererinominata."},
{TABLE_CANT_DROP,"NonsipuòeffettuareDROPdellatabella''{0}''."},
{TABLE_CANT_DROP_LOCKED,"NonsipuòeffettuareDROPdellatabella''{0}''perchéèinLOCK."},
{TABLE_CORRUPT_PAGE,"Paginadellatabellacorrottaallaposizione:{0}."},
{TABLE_MODIFIED,"Latabella''{0}''èstatamodificata."},
{TABLE_DEADLOCK,"Deadlock:nonsipuòmettereunlocksullatabella''{0}''."},
{TABLE_OR_VIEW_MISSING,"Latabella/view''{0}''nonesiste."},
{TABLE_FILE_INVALID,"Ilfile''{0}''nonincludeunatabellaSmallSQLvalida."},
{TABLE_OR_VIEW_FILE_INVALID,"Ilfile''{0}''nonèuncontenitorevalidoditabella/view."},
{TABLE_EXISTENT,"Latabella/vista''{0}''ègiàesistente."},
{FK_NOT_TABLE,"''{0}''nonèunatabella."},
{PK_ONLYONE,"Unatabellapuòaveresolounaprimarykey."},
{KEY_DUPLICATE,"Chiaveduplicata."},
{MONTH_TOOLARGE,"ValoredelmesetroppoaltodelinDATEoTIMESTAMP''{0}''."},
{DAYS_TOOLARGE,"ValoredelgiornotroppoaltroinDATEoTIMESTAMP''{0}''."},
{HOURS_TOOLARGE,"ValoredelleoretroppoaltoininTIMEoTIMESTAMP''{0}''."},
{MINUTES_TOOLARGE,"ValoredeiminutitroppoaltoinTIMEoTIMESTAMP''{0}''."},
{SECS_TOOLARGE,"ValoredeiseconditroppoaltoinTIMEoTIMESTAMP''{0}''."},
{MILLIS_TOOLARGE,"VAloredeimilliseconditroppoaltoinTIMESTAMP''{0}''."},
{DATETIME_INVALID,"''{0}''èunDATE,TIMEorTIMESTAMPnonvalido."},
{UNSUPPORTED_CONVERSION_OPER,"Conversionenonsupportataversoiltipodidato''{0}''daltipo''{1}''perl''operazione''{2}''."},
{UNSUPPORTED_DATATYPE_OPER,"Tipodidato''{0}''nonsupportatoperl''operazione''{1}''."},
{UNSUPPORTED_DATATYPE_FUNC,"Tipodidato''{0}''nonsupportatoperlafunzione''{1}''."},
{UNSUPPORTED_CONVERSION_FUNC,"Conversioneversoiltipodidato''{0}''nonsupportatoperlafunzione''{1}''."},
{UNSUPPORTED_TYPE_CONV,"TipononsupportatoperlafunzioneCONVERT:{0}."},
{UNSUPPORTED_TYPE_SUM,"TipononsupportatoperlafunzioneSUM:''{0}''."},
{UNSUPPORTED_TYPE_MAX,"TipononsupportatoperlafunzioneMAX:''{0}''."},
{UNSUPPORTED_CONVERSION,"Nonèpossibleconvertire''{0}''[{1}]in''{2}''."},
{INSERT_INVALID_LEN,"Lunghezzanonvalida''{0}''perlafunzioneINSERT."},
{SUBSTR_INVALID_LEN,"Lunghezzanonvalida''{0}''perlafunzioneSUBSTRING."},
{VALUE_STR_TOOLARGE,"Stringatroppolungaperlacolonna."},
{VALUE_BIN_TOOLARGE,"Valorebinariodilunghezza{0}eccessivaperlacolonnadilunghezza{1}."},
{VALUE_NULL_INVALID,"Valorinullinonvalidiperlacolonna''{0}''."},
{VALUE_CANT_CONVERT,"Impossibleconvertireunvalore{0}inunvalore{1}."},
{BYTEARR_INVALID_SIZE,"Lunghezzanonvalidaperunarraydibytes:{0}."},
{LOB_DELETED,"L''oggettoLOBèstatocancellato."},
{PARAM_CLASS_UNKNOWN,"Classesconosciuta(''{0}'')perilparametro."},
{PARAM_EMPTY,"Ilparametro{0}èvuoto."},
{PARAM_IDX_OUT_RANGE,"L''indice{ﻝ}perilparametroèfuoridall''intervalloconsentito(ﻝ<=n<={ﻝ})."},
{COL_DUPLICATE	,"Nomedicolonnaduplicato:''{0}''."},
{COL_MISSING,"Colonna''{0}''nontrovata."},
{COL_VAL_UNMATCH,"Ilconteggiodicolonneevalorinonèidentico."},
{COL_INVALID_SIZE,"Lunghezzanonvalida({0})perlacolonna''{1}''."},
{COL_WRONG_PREFIX,"Ilprefissodicolonna''{0}''noncoincideconunaliasonomeditabellausatonellaquery."},
{COL_READONLY,"Lacolonna''{0}''èdisolalettura."},
{COL_INVALID_NAME,"Nomedicolonnanonvalido''{0}''."},
{COL_IDX_OUT_RANGE,"Indicedicolonnafuoridall''intervallovalido:{0}."},
{COL_AMBIGUOUS,"Ilnomedicolonna''{0}''èambiguo."},
{GROUP_AGGR_INVALID,"FunzionediaggregrazionenonvalidaperlaclausolaGROUPBY:({0})."},
{GROUP_AGGR_NOTPART,"L''espressione''{0}''nonèpartediunafunzionediaggregazioneodellaclausolaGROUPBY."},
{ORDERBY_INTERNAL,"ErroreinternoperORDERBY."},
{UNION_DIFFERENT_COLS,"SELECTappartenentiadunaUNIONconnumerodicolonnedifferenti:{0}e{1}."},
{INDEX_EXISTS,"L''indice''{0}''ègiàesistente."},
{INDEX_MISSING,"L''indice''{0}''nonesiste."},
{INDEX_FILE_INVALID,"Ilfile''{0}''nonèuncontenitorevalidoperunindice."},
{INDEX_CORRUPT,"Erroreduranteilcaricamentodell''indice.Filedell''indicecorrotto:''{0}''."},
{INDEX_TOOMANY_EQUALS,"Troppevociugualinell''indice."},
{FILE_TOONEW,"Laversione({0})delfile''{1}''ètropporecenteperquestoruntime."},
{FILE_TOOOLD,"Laversione({0})delfile''{1}''ètroppovecchiaperquestoruntime."},
{FILE_CANT_DELETE,"File''(0)''nonpossonoessereeliminati."},
{ROW_ﻝ_ABSOLUTE,"Ilnumerodirigaﻝnonèvalidoperilmetodo''absolute()''."},
{ROW_NOCURRENT,"Nessunarigacorrente."},
{ROWS_WRONG_MAX,"Numeromassimodirighenonvalido({0})."},
{ROW_LOCKED,"Larigaèbloccatadaun''altraconnessione."},
{ROW_DELETED,"Rigagiàcancellata."},
{SAVEPT_INVALID_TRANS,"SAVEPOINTnonvalidoperquestatransazione."},
{SAVEPT_INVALID_DRIVER,"SAVEPOINTnonvalidoperquestodriver{0}."},
{ALIAS_UNSUPPORTED,"Aliasnonsupportatoperquestotipodisorgenterighe."},
{ISOLATION_UNKNOWN,"LivellodiIsolamentotransazionesconosciuto:{0}."},
{FLAGVALUE_INVALID,"Flagnonvalidanelmetodo''getMoreResults'':{0}."},
{ARGUMENT_INVALID,"Argomentononvalidonelmetodo''setNeedGenratedKeys'':{0}."},
{GENER_KEYS_UNREQUIRED,"GeneratedKeysnonrichieste."},
{SEQUENCE_HEX_INVALID,"Sequenzaesadecimalenonvalidoallaposizione{0}."},
{SEQUENCE_HEX_INVALID_STR,"Sequenceesadecimalenonvalidaallapositione{0}in''{1}''."},
{SYNTAX_BASE_OFS	,"Erroredisintassiallaposizione{0}in''{1}''."},
{SYNTAX_BASE_END		,"Erroredisintassi,fineinattesadellastringaSQL."},
{STXADD_ADDITIONAL_TOK			,"Tokenaggiuntivodopolafinedell''istruzioneSQL."},
{STXADD_IDENT_EXPECT			,"Identificatoreatteso."},
{STXADD_IDENT_EMPTY			,"Identificatorevuoto."},
{STXADD_IDENT_WRONG			,"Identificatoreerrato''{0}''."},
{STXADD_OPER_MINUS			,"Operatore''meno''nonvalidoperiltipodidatovarbinary."},
{STXADD_FUNC_UNKNOWN			,"Funzionesconosciuta."},
{STXADD_PARAM_INVALID_COUNT	,"Totaleparametrinonvalido."},
{STXADD_JOIN_INVALID			,"Sintassidellajoinnonvalida."},
{STXADD_FROM_PAR_CLOSE			,"Parentesichiusanonattesanellaclausolafrom."},
{STXADD_KEYS_REQUIRED			,"Leparolechiaverichiestesono:"},
{STXADD_NOT_NUMBER			,"Richiestovalorenumerico(passato=''{0}'')."},
{STXADD_COMMENT_OPEN			,"Chiusuradelcommentomancante(''*/'')."},
};
}
packagesmallsql.junit;
importjunit.framework.*;
importjava.sql.*;
importjava.util.Properties;
publicclassAllTestsextendsTestCase{
finalstaticﺝCATALOG="AllTests";
finalstaticﺝJDBC_URL="jdbc:smallsql:"+CATALOG;
privatestaticConnectioncon;
publicstaticConnectiongetConnection()throwsSQLException{
if(con==null||con.isClosed()){
con=createConnection();
}
returncon;
}
publicstaticConnectioncreateConnection()throwsSQLException{
newsmallsql.database.SSDriver();
newsun.jdbc.odbc.JdbcOdbcDriver();
returnDriverManager.getConnection(JDBC_URL+"?create=true;locale=en");
}
publicstaticConnectioncreateConnection(ﺝurlAddition,
Propertiesinfo)
throwsSQLException{
newsmallsql.database.SSDriver();
newsun.jdbc.odbc.JdbcOdbcDriver();
if(urlAddition==null)urlAddition="";
if(info==null)info=newProperties();
ﺝurlComplete=JDBC_URL+urlAddition;
returnDriverManager.getConnection(urlComplete,info);
}
publicstaticvoidprintRS(ResultSetrs)throwsSQLException{
while(rs.next()){
for(inti=ﻝ;i<=rs.getMetaData().getColumnCount();i++){
System.out.print(rs.getObject(i)+"\t");
}
System.out.println();
}
}
publicstaticTestsuite()throwsException{
TestSuitetheSuite=newTestSuite("SmallSQLallTests");
theSuite.addTestSuite(TestAlterTable.class);
theSuite.addTestSuite(TestAlterTable2.class);
theSuite.addTest(TestDataTypes.suite());
theSuite.addTestSuite(TestDBMetaData.class);
theSuite.addTestSuite(TestExceptionMethods.class);
theSuite.addTest(TestExceptions.suite());
theSuite.addTestSuite(TestDeleteUpdate.class);
theSuite.addTest(TestFunctions.suite());
theSuite.addTestSuite(TestGroupBy.class);
theSuite.addTestSuite(TestIdentifer.class);
theSuite.addTest(TestJoins.suite());
theSuite.addTestSuite(TestLanguage.class);
theSuite.addTestSuite(TestMoneyRounding.class);
theSuite.addTest(TestOperatoren.suite());
theSuite.addTestSuite(TestOrderBy.class);
theSuite.addTestSuite(TestOther.class);
theSuite.addTestSuite(TestResultSet.class);
theSuite.addTestSuite(TestScrollable.class);
theSuite.addTestSuite(TestStatement.class);
theSuite.addTestSuite(TestThreads.class);
theSuite.addTestSuite(TestTokenizer.class);
theSuite.addTestSuite(TestTransactions.class);
returntheSuite;
}
publicstaticvoidmain(String[]argv){
try{
junit.textui.TestRunner.main(newString[]{AllTests.class.getName()});
}catch(Throwablee){
e.printStackTrace();
}
}
}
packagesmallsql.junit;
importjunit.framework.*;
importjava.io.*;
importjava.math.BigDecimal;
importjava.sql.*;
importjava.text.DateFormatSymbols;
publicclassBasicTestCaseextendsTestCase{
protectedstaticfinalString[]MONTHS=
newDateFormatSymbols().getShortMonths();
publicBasicTestCase(){
super();
}
publicBasicTestCase(ﺝname){
super(makeNameValid(name));
}
privatestaticﺝmakeNameValid(ﺝname){
returnname.replace(',',';').replace('(','{');
}
voiddropTable(Connectioncon,ﺝname)throwsSQLException{
try{
Statementst=con.createStatement();
st.execute("droptable"+name);
st.close();
}catch(SQLExceptione){
ﺝmsg=e.getMessage();
if(msg.indexOf("[SmallSQL]Table")==ﻝ&&msg.indexOf(name)>ﻝ&&msg.indexOf("can'tbedropped.")>ﻝ){
return;
}
throwe;
}
}
voiddropView(Connectioncon,ﺝname){
try{
Statementst=con.createStatement();
st.execute("dropview"+name);
st.close();
}catch(SQLExceptione){}
}
publicvoidassertRSMetaData(ResultSetrs,String[]colNames,int[]types)throwsException{
ResultSetMetaDatarm=rs.getMetaData();
intcount=rm.getColumnCount();
assertEquals("Columncount:",colNames.length,count);
for(inti=ﻝ;i<=count;i++){
assertEquals("Col"+i+"name",colNames[i-1],rm.getColumnName(i));
assertEquals("Col"+i+"label",colNames[i-1],rm.getColumnLabel(i));
assertEquals("Col"+i+"type",types[i-1],rm.getColumnType(i));
switch(types[i-1]){
caseTypes.VARCHAR:
assertTrue("WrongPrecision("+rm.getColumnTypeName(i)+")forColumn"+i+":"+rm.getPrecision(i),rm.getPrecision(i)>ﻝ);
break;
caseTypes.INTEGER:
assertTrue("WrongPrecision("+rm.getColumnTypeName(i)+")forColumn"+i,rm.getPrecision(i)>ﻝ);
break;
}
}
}
privatefinalstaticchar[]digits={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
privatestaticﺝbytes2hex(byte[]bytes){
StringBufferbuf=newStringBuffer(bytes.length<<ﻝ);
for(inti=ﻝ;i<bytes.length;i++){
buf.append(digits[(bytes[i]>>ﻝ)&ﻝxﻝF]);
buf.append(digits[(bytes[i])&0x0F]);
}
returnbuf.toString();
}
publicvoidassertEqualsObject(ﺝmsg,Objectobj1,Objectobj2){
if(obj1instanceofbyte[]){
if(!java.util.Arrays.equals((byte[])obj1,(byte[])obj2)){
fail(msg+"expected:"+bytes2hex((byte[])obj1)+"butwas:"+bytes2hex((byte[])obj2));
}
}else{
if(obj1instanceofBigDecimal)
if(((BigDecimal)objﻝ).compareTo((BigDecimal)objﻝ)==ﻝ)return;
assertEquals(msg,obj1,obj2);
}
}
publicvoidassertEqualsObject(ﺝmsg,Objectobj1,Objectobj2,booleanneedTrim){
if(needTrim&&obj1!=null){
if(obj1instanceofString)obj1=((String)obj1).trim();
if(obj1instanceofbyte[]){
byte[]tmp=(byte[])obj1;
intk=tmp.length-1;
for(;k>=ﻝ;k--)if(tmp[k]!=ﻝ)break;
k++;
byte[]tmp2=newbyte[k];
System.arraycopy(tmp,0,tmp2,0,k);
obj1=tmp2;
}
}
if(needTrim&&obj2!=null){
if(obj2instanceofString)obj2=((String)obj2).trim();
if(obj2instanceofbyte[]){
byte[]tmp=(byte[])obj2;
intk=tmp.length-1;
for(;k>=ﻝ;k--)if(tmp[k]!=ﻝ)break;
k++;
byte[]tmp2=newbyte[k];
System.arraycopy(tmp,0,tmp2,0,k);
obj2=tmp2;
}
}
assertEqualsObject(msg,obj1,obj2);
}
voidassertRowCount(intsollCount,ﺝsql)throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs=st.executeQuery(sql);
assertRowCount(sollCount,rs);
}
voidassertRowCount(intsollCount,ResultSetrs)throwsException{
intcolCount=rs.getMetaData().getColumnCount();
intcount=ﻝ;
while(rs.next()){
count++;
for(inti=ﻝ;i<=colCount;i++){
rs.getObject(i);
}
}
assertEquals("Wrongrowcount",sollCount,count);
for(inti=ﻝ;i<=colCount;i++){
try{
fail("Column:"+i+"Value:"+String.valueOf(rs.getObject(i)));
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
}
assertFalse("Scrollafterlast",rs.next());
}
privatebooleanstring2boolean(ﺝval){
try{
returnDouble.parseDouble(val)!=ﻝ;
}catch(NumberFormatExceptione){}
return"true".equalsIgnoreCase(val)||"yes".equalsIgnoreCase(val)||"t".equalsIgnoreCase(val);
}
voidassertEqualsRsValue(Objectobj,ﺝsql)throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs=st.executeQuery(sql);
assertTrue("Norowproduce",rs.next());
assertEqualsRsValue(obj,rs,false);
}
voidassertEqualsRsValue(Objectobj,ResultSetrs,booleanneedTrim)throwsException{
ﺝname=rs.getMetaData().getColumnName(1);
assertEqualsObject("Valuesnotidenticalonread:",obj,rs.getObject(name),needTrim);
if(objinstanceofTime){
assertEquals("Timeisdifferent:",obj,rs.getTime(name));
assertEquals("Timeﺝisdifferent:",obj.toString(),rs.getString(name));
}
if(objinstanceofTimestamp){
assertEquals("Timestampisdifferent:",obj,rs.getTimestamp(name));
assertEquals("Timestampﺝisdifferent:",obj.toString(),rs.getString(name));
}
if(objinstanceofDate){
assertEquals("Dateisdifferent:",obj,rs.getDate(name));
assertEquals("Dateﺝisdifferent:",obj.toString(),rs.getString(name));
}
if(objinstanceofString){
ﺝstr=(String)obj;
assertEqualsObject("ﺝisdifferent:",str,rs.getString(name),needTrim);
assertEquals("ﺝBooleanisdifferent:",string2boolean(str),rs.getBoolean(name));
try{
assertEquals("ﺝLongisdifferent:",Long.parseLong(str),rs.getLong(name));
}catch(NumberFormatExceptionex){}
try{
assertEquals("ﺝIntegerisdifferent:",Integer.parseInt(str),rs.getInt(name));
}catch(NumberFormatExceptionex){}
try{
assertEquals("ﺝFloatisdifferent:",Float.parseFloat(str),rs.getFloat(name),0.0);
}catch(NumberFormatExceptionex){}
try{
assertEquals("ﺝDoubleisdifferent:",Double.parseDouble(str),rs.getDouble(name),0.0);
}catch(NumberFormatExceptionex){}
}
if(objinstanceofBigDecimal){
if(!needTrim){
assertEquals("BigDecimalisdifferent:",obj,rs.getBigDecimal(name));
assertEquals("Scaleisdifferent:",((BigDecimal)obj).scale(),rs.getMetaData().getScale(1));
}
assertEquals("ScaleMetaisdifferent:",rs.getBigDecimal(name).scale(),rs.getMetaData().getScale(1));
BigDecimalbig2=((BigDecimal)obj).setScale(2,BigDecimal.ROUND_HALF_EVEN);
assertEquals("BigDecimalmitscaleisdifferent:",bigﻝ,rs.getBigDecimal(name,ﻝ));
}
if(objinstanceofInteger){
assertEquals("Scaleisdifferent:",0,rs.getMetaData().getScale(1));
}
if(objinstanceofNumber){
longlongValue=((Number)obj).longValue();
intintValue=((Number)obj).intValue();
if(longValue>=Integer.MAX_VALUE)
intValue=Integer.MAX_VALUE;
if(longValue<=Integer.MIN_VALUE)
intValue=Integer.MIN_VALUE;
assertEquals("intisdifferent:",intValue,rs.getInt(name));
assertEquals("longisdifferent:",longValue,rs.getLong(name));
if(intValue>=Short.MIN_VALUE&&intValue<=Short.MAX_VALUE)
assertEquals("shortisdifferent:",(short)intValue,rs.getShort(name));
if(intValue>=Byte.MIN_VALUE&&intValue<=Byte.MAX_VALUE)
assertEquals("byteisdifferent:",(byte)intValue,rs.getByte(name));
doublevalue=((Number)obj).doubleValue();
assertEquals("Doubleisdifferent:",value,rs.getDouble(name),0.0);
assertEquals("Floatisdifferent:",(float)value,rs.getFloat(name),0.0);
ﺝvalueStr=obj.toString();
if(!needTrim){
assertEquals("Numberﺝisdifferent:",valueStr,rs.getString(name));
}
BigDecimaldecimal=Double.isInfinite(value)||Double.isNaN(value)?null:newBigDecimal(valueStr);
assertEqualsObject("NumberBigDecimalisdifferent:",decimal,rs.getBigDecimal(name));
assertEquals("Numberbooleanisdifferent:",value!=0,rs.getBoolean(name));
}
if(obj==null){
assertNull("ﺝisdifferent:",rs.getString(name));
assertNull("Dateisdifferent:",rs.getDate(name));
assertNull("Timeisdifferent:",rs.getTime(name));
assertNull("Timestampisdifferent:",rs.getTimestamp(name));
assertNull("BigDecimalisdifferent:",rs.getBigDecimal(name));
assertNull("BigDecimalwithscaleisdifferent:",rs.getBigDecimal(name,ﻝ));
assertNull("Byteswithscaleisdifferent:",rs.getBytes(name));
assertEquals("Doubleisdifferent:",0,rs.getDouble(name),0);
assertEquals("Floatisdifferent:",0,rs.getFloat(name),0);
assertEquals("Longisdifferent:",0,rs.getLong(name));
assertEquals("Intisdifferent:",0,rs.getInt(name));
assertEquals("SmallIntisdifferent:",0,rs.getShort(name));
assertEquals("TinyIntisdifferent:",0,rs.getByte(name));
assertEquals("Booleanisdifferent:",false,rs.getBoolean(name));
}
if(objinstanceofbyte[]){
assertTrue("Binaryshouldstartwith0x",rs.getString(name).startsWith("0x"));
}
ResultSetMetaDatametaData=rs.getMetaData();
ﺝclassName=metaData.getColumnClassName(1);
assertNotNull("ClassName:",className);
if(obj!=null){
ClassgotClass=Class.forName(className);
ClassobjClass=obj.getClass();
ﺝobjClassName=objClass.getName();
intexpectedLen=metaData.getColumnDisplaySize(1);
if(gotClass.equals(java.sql.Blob.class)){
assertTrue(
"ClassNameassignable:"+className+"<->"+objClassName,
objClass.equals(newbyte[0].getClass()));
ﺝmessage="CheckDisplaySize:"+expectedLen+"!="+Integer.MAX_VALUE+")";
assertTrue(message,expectedLen==Integer.MAX_VALUE);
}
elseif(gotClass.equals(java.sql.Clob.class)){
assertTrue(
"ClassNameassignable:"+className+"<->"+objClassName,
objClass.equals(String.class));
ﺝmessage="CheckDisplaySize:"+expectedLen+"!="+Integer.MAX_VALUE+")";
assertTrue(message,expectedLen==Integer.MAX_VALUE);
}
else{
ﺝfoundStr=rs.getString(name);
assertTrue("ClassNameassignable:"+className+"<->"+objClassName,gotClass.isAssignableFrom(objClass));
assertTrue("DisplaySizetosmall"+expectedLen+"<"+foundStr.length()+"("+foundStr+")",expectedLen>=foundStr.length());
}
}
}
voidassertSQLException(ﺝsqlstate,intvendorCode,SQLExceptionex){
StringWritersw=newStringWriter();
ex.printStackTrace(newPrintWriter(sw));
assertEquals("VendorErrorcode:"+sw,vendorCode,ex.getErrorCode());
assertEquals("SQLState:"+sw,sqlstate,ex.getSQLState());
}
voidprintSQL(ﺝsql)throwsSQLException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs=st.executeQuery(sql);
printRS(rs);
}
voidprintRS(ResultSetrs)throwsSQLException{
intcount=rs.getMetaData().getColumnCount();
while(rs.next()){
for(inti=ﻝ;i<=count;i++){
System.out.print(rs.getString(i)+'\t');
}
System.out.println();
}
}
staticﺝgetMonth3L(intordinal){
returnMONTHS[ordinal-1];
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassBenchTest
{
staticbyte[]byteArray={ﻝ,ﻝ,ﻝ};
staticbyte[]largeByteArray=newbyte[4000];
staticﺝdriverClassName="smallsql.database.SSDriver";
staticﺝuserName="sa";
staticﺝpassword="";
staticﺝjdbcUrl="jdbc:smallsql:AllTests";
staticintrowCount=ﻝ;
staticConnectioncon;
staticfinalﺝtableName="BenchTest2";
publicstaticvoidmain(String[]args)throwsSQLException{
for(inti=ﻝ;i<args.length;){
ﺝoption=args[i++];
if(option.equals("-driver"))driverClassName=args[i++];
elseif(option.equals("-user"))userName=args[i++];
elseif(option.equals("-password"))password=args[i++];
elseif(option.equals("-url"))jdbcUrl=args[i++];
elseif(option.equals("-rowcount"))rowCount=Integer.parseInt(args[i++]);
elseif(option.equals("-?")|option.equals("-help")){
System.out.println("Validoptionsare:\n\t-driver\n\t-url\n\t-user\n\t-password\n\t-rowcount");
System.exit(0);
}
else{System.out.println("Option"+option+"isignored");i++;}
}
System.out.println("Driver:\t"+driverClassName);
System.out.println("Username:\t"+userName);
System.out.println("Password:\t"+password);
System.out.println("JDBCURL:\t"+jdbcUrl);
System.out.println("RowCount:\t"+rowCount);
System.out.println();
try{
Class.forName(driverClassName).newInstance();
con=DriverManager.getConnection(jdbcUrl,userName,password);
System.out.println(con.getMetaData().getDriverName()+""+con.getMetaData().getDriverVersion());
System.out.println();
createTestTable(con);
test_InsertClassic(con);
test_DeleteAll(con);
test_InsertEmptyRows(con);
test_DeleteRows(con);
test_InsertRows(con);
test_RowRequestPages(con);
test_UpdateRows(con);
test_UpdateRowsPrepare(con);
test_UpdateRowsPrepareSP(con);
test_UpdateRowsPrepareBatch(con);
test_Scroll_getXXX(con);
test_UpdateLargeBinary(con);
test_UpdateLargeBinaryWithSP(con);
}catch(Exceptione){
e.printStackTrace();
}finally{
if(con!=null){
con.close();
}
}
}
staticvoidtest_InsertClassic(Connectioncon){
System.out.println();
System.out.println("Testinsertrowswithdefaultvalueswithaclassicinsertstatement:"+rowCount+"rows");
try{
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
longtime=-System.currentTimeMillis();
for(inti=ﻝ;i<rowCount;i++){
st.execute("INSERTINTO"+tableName+"(i)VALUES("+i+")");
}
time+=System.currentTimeMillis();
ResultSetrs=st.executeQuery("SELECTcount(*)FROM"+tableName);
rs.next();
intcount=rs.getInt(1);
if(count!=rowCount)
System.out.println("Failed:Only"+count+"rowswereinserted.");
elseSystem.out.println("Testtime:"+time+"ms");
st.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_DeleteAll(Connectioncon){
System.out.println();
System.out.println("Testdeleteallrows:"+rowCount+"rows");
try{
longtime=-System.currentTimeMillis();
Statementst=con.createStatement();
st.execute("DELETEFROM"+tableName);
time+=System.currentTimeMillis();
System.out.println("Testtime:"+time+"ms");
st.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_InsertEmptyRows(Connectioncon){
System.out.println();
System.out.println("TestinsertemptyrowswithinsertRow():"+rowCount+"rows");
try{
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs=st.executeQuery("SELECT*FROM"+tableName);
longtime=-System.currentTimeMillis();
for(inti=ﻝ;i<rowCount;i++){
rs.moveToInsertRow();
rs.insertRow();
}
time+=System.currentTimeMillis();
rs=st.executeQuery("SELECTcount(*)FROM"+tableName);
rs.next();
intcount=rs.getInt(1);
if(count!=rowCount)
System.out.println("Failed:Only"+count+"rowswereinserted.");
elseSystem.out.println("Testtime:"+time+"ms");
st.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_DeleteRows(Connectioncon){
System.out.println();
System.out.println("TestdeleterowswithdeleteRow():"+rowCount+"rows");
try{
Statementst1=con.createStatement();
ResultSetrs=st1.executeQuery("SELECTcount(*)FROM"+tableName);
rs.next();
intcount=rs.getInt(1);
if(count!=rowCount){
if(count==ﻝ){
createTestDataWithClassicInsert(con);
rs=st1.executeQuery("SELECTcount(*)FROM"+tableName);
rs.next();
count=rs.getInt(1);
}
if(count!=rowCount){
System.out.println("Failed:Only"+(rowCount-count)+"rowsweredeleted.");
return;
}
}
st1.close();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
rs=st.executeQuery("SELECT*FROM"+tableName);
longtime=-System.currentTimeMillis();
for(inti=ﻝ;i<rowCount;i++){
rs.next();
rs.deleteRow();
}
time+=System.currentTimeMillis();
rs=st.executeQuery("SELECTcount(*)FROM"+tableName);
rs.next();
count=rs.getInt(1);
if(count!=ﻝ)
System.out.println("Failed:Only"+(rowCount-count)+"rowsweredeleted.");
elseSystem.out.println("Testtime:"+time+"ms");
st.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_InsertRows(Connectioncon){
System.out.println();
System.out.println("TestinsertrowswithinsertRow():"+rowCount+"rows");
try{
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs=st.executeQuery("SELECT*FROM"+tableName);
longtime=-System.currentTimeMillis();
for(inti=ﻝ;i<rowCount;i++){
rs.moveToInsertRow();
rs.updateBytes("bi",byteArray);
rs.updateString("c","Test");
rs.updateDate("d",newDate(System.currentTimeMillis()));
rs.updateFloat("de",(float)1234.56789);
rs.updateFloat("f",(float)9876.54321);
rs.updateBytes("im",largeByteArray);
rs.updateInt("i",i);
rs.updateDouble("m",23.45);
rs.updateDouble("n",567.45);
rs.updateFloat("r",(float)78.89);
rs.updateTime("sd",newTime(System.currentTimeMillis()));
rs.updateShort("si",(short)i);
rs.updateFloat("sm",(float)34.56);
rs.updateString("sy","sysname(30)NULL");
rs.updateString("t","ntextNULL,sampletosaveinthefield");
rs.updateByte("ti",(byte)i);
rs.updateBytes("vb",byteArray);
rs.updateString("vc","nvarchar(255)NULL");
rs.insertRow();
}
time+=System.currentTimeMillis();
rs=st.executeQuery("SELECTcount(*)FROM"+tableName);
rs.next();
intcount=rs.getInt(1);
if(count!=rowCount){
st.execute("DELETEFROM"+tableName);
System.out.println("Failed:Only"+count+"rowswereinserted.");
}elseSystem.out.println("Testtime:"+time+"ms");
st.close();
}catch(Exceptione){
e.printStackTrace();
try{
Statementst=con.createStatement();
st.execute("DELETEFROM"+tableName);
st.close();
}catch(Exceptionee){}
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_RowRequestPages(Connectioncon){
intpages=ﻝ;
introws=rowCount/pages;
System.out.println();
System.out.println("Testrequestrowpages:"+pages+"pages,"+rows+"rowsperpage");
try{
Statementst1=con.createStatement();
ResultSetrs=st1.executeQuery("SELECTcount(*)FROM"+tableName);
rs.next();
intcount=rs.getInt(1);
if(count!=rowCount){
if(count==ﻝ){
createTestDataWithClassicInsert(con);
rs=st1.executeQuery("SELECTcount(*)FROM"+tableName);
rs.next();
count=rs.getInt(1);
}
if(count!=rowCount){
System.out.println("Failed:Only"+(rowCount-count)+"rowswerefound.");
return;
}
}
st1.close();
longtime=-System.currentTimeMillis();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
st.setFetchSize(rows);
for(inti=ﻝ;i<pages;i++){
rs=st.executeQuery("SELECT*FROM"+tableName);
rs.absolute(i*rows+1);
for(intr=ﻝ;r<rows;r++){
if(!rs.next()){
System.out.println("Failed:Norowswerefoundatpage"+i+"pageandrow"+r);
return;
}
intcol_i=rs.getInt("i");
if(col_i!=(i*rows+r)){
System.out.println("Failed:Wrongrow"+col_i+",itshouldberow"+(i*rows+r));
return;
}
}
}
time+=System.currentTimeMillis();
System.out.println("Testtime:"+time+"ms");
st.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_UpdateRows(Connectioncon){
System.out.println();
System.out.println("TestupdaterowswithupdateRow():"+rowCount+"rows");
try{
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs=st.executeQuery("SELECT*FROM"+tableName);
intcolCount=rs.getMetaData().getColumnCount();
longtime=-System.currentTimeMillis();
intcount=ﻝ;
while(rs.next()){
for(inti=ﻝ;i<=colCount;i++){
rs.updateObject(i,rs.getObject(i));
}
rs.updateRow();
count++;
}
time+=System.currentTimeMillis();
if(count!=rowCount)
System.out.println("Failed:Only"+count+"rowswereupdated.");
elseSystem.out.println("Testtime:"+time+"ms");
st.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_UpdateRowsPrepare(Connectioncon){
System.out.println();
System.out.println("TestupdaterowswithaPreparedStatement:"+rowCount+"rows");
try{
PreparedStatementpr=con.prepareStatement("UPDATE"+tableName+"SETbi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=?WHEREi=?");
longtime=-System.currentTimeMillis();
for(inti=ﻝ;i<rowCount;i++){
pr.setBytes(1,byteArray);
pr.setString(ﻝ,"Test");
pr.setDate(ﻝ,newDate(System.currentTimeMillis()));
pr.setFloat(4,(float)1234.56789);
pr.setFloat(ﻝ,(float)ﻝ.ﻝ);
pr.setBytes(6,largeByteArray);
pr.setInt(ﻝ,i);
pr.setDouble(ﻝ,ﻝ.ﻝ);
pr.setDouble(ﻝ,ﻝ.ﻝ);
pr.setFloat(ﻝ,(float)ﻝ.ﻝ);
pr.setTime(11,newTime(System.currentTimeMillis()));
pr.setShort(12,(short)23456);
pr.setFloat(13,(float)34.56);
pr.setString(14,"sysname(30)NULL");
pr.setString(ﻝ,"textNULL");
pr.setByte(16,(byte)28);
pr.setBytes(17,byteArray);
pr.setString(18,"varchar(255)NULL");
pr.setInt(ﻝ,i);
intupdateCount=pr.executeUpdate();
if(updateCount!=ﻝ){
System.out.println("Failed:Updatecountshouldbeﻝbutitis"+updateCount+".");
return;
}
}
time+=System.currentTimeMillis();
System.out.println("Testtime:"+time+"ms");
pr.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_UpdateRowsPrepareSP(Connectioncon){
System.out.println();
System.out.println("TestupdaterowswithaPreparedStatementandastoredprocedure:"+rowCount+"rows");
try{
Statementst=con.createStatement();
try{st.execute("dropproceduresp_"+tableName);}catch(Exceptione){}
st.execute("createproceduresp_"+tableName+"(@bibinary,@cnchar(ﻝ),@ddatetime,@dedecimal,@ffloat,@imimage,@iint,@mmoney,@nnumeric(ﻝ,ﻝ),@rreal,@sdsmalldatetime,@sismallint,@smsmallmoney,@sysysname,@tntext,@titinyint,@vbvarbinary(ﻝ),@vcnvarchar(ﻝ))asUPDATE"+tableName+"SETbi=@bi,c=@c,d=@d,de=@de,f=@f,im=@im,i=@i,m=@m,n=@n,r=@r,sd=@sd,si=@si,sm=@sm,sy=@sy,t=@t,ti=@ti,vb=@vb,vc=@vcWHEREi=@i");
PreparedStatementpr=con.prepareStatement("execsp_"+tableName+"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?");
longtime=-System.currentTimeMillis();
for(inti=ﻝ;i<rowCount;i++){
pr.setBytes(1,byteArray);
pr.setString(ﻝ,"Test");
pr.setDate(ﻝ,newDate(System.currentTimeMillis()));
pr.setFloat(4,(float)1234.56789);
pr.setFloat(ﻝ,(float)ﻝ.ﻝ);
pr.setBytes(6,largeByteArray);
pr.setInt(ﻝ,i);
pr.setDouble(ﻝ,ﻝ.ﻝ);
pr.setDouble(ﻝ,ﻝ.ﻝ);
pr.setFloat(ﻝ,(float)ﻝ.ﻝ);
pr.setTime(11,newTime(System.currentTimeMillis()));
pr.setShort(12,(short)23456);
pr.setFloat(13,(float)34.56);
pr.setString(14,"sysname(30)NULL");
pr.setString(ﻝ,"textNULL");
pr.setByte(16,(byte)28);
pr.setBytes(17,byteArray);
pr.setString(18,"varchar(255)NULL");
intupdateCount=pr.executeUpdate();
if(updateCount!=ﻝ){
System.out.println("Failed:Updatecountshouldbeﻝbutitis"+updateCount+".");
return;
}
}
time+=System.currentTimeMillis();
System.out.println("Testtime:"+time+"ms");
st.execute("dropproceduresp_"+tableName);
st.close();
pr.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_UpdateRowsPrepareBatch(Connectioncon){
intbatchSize=ﻝ;
intbatches=rowCount/batchSize;
System.out.println();
System.out.println("TestupdaterowswithPreparedStatementandBatches:"+batches+"batches,"+batchSize+"batchsize");
try{
PreparedStatementpr=con.prepareStatement("UPDATE"+tableName+"SETbi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=?WHEREi=?");
longtime=-System.currentTimeMillis();
for(inti=ﻝ;i<batches;i++){
for(intr=ﻝ;r<batchSize;r++){
pr.setBytes(1,byteArray);
pr.setString(ﻝ,"Test");
pr.setDate(ﻝ,newDate(System.currentTimeMillis()));
pr.setFloat(4,(float)1234.56789);
pr.setFloat(ﻝ,(float)ﻝ.ﻝ);
pr.setBytes(6,largeByteArray);
pr.setInt(ﻝ,i*batchSize+r);
pr.setDouble(ﻝ,ﻝ.ﻝ);
pr.setDouble(ﻝ,ﻝ.ﻝ);
pr.setFloat(ﻝ,(float)ﻝ.ﻝ);
pr.setTime(11,newTime(System.currentTimeMillis()));
pr.setShort(12,(short)23456);
pr.setFloat(13,(float)34.56);
pr.setString(14,"sysname(30)NULL");
pr.setString(ﻝ,"textNULL");
pr.setByte(16,(byte)28);
pr.setBytes(17,byteArray);
pr.setString(18,"varchar(255)NULL");
pr.setInt(ﻝ,i);
pr.addBatch();
}
int[]updateCount=pr.executeBatch();
if(updateCount.length!=batchSize){
System.out.println("Failed:Updatecountsizeshouldbe"+batchSize+"butitis"+updateCount.length+".");
return;
}
}
time+=System.currentTimeMillis();
System.out.println("Testtime:"+time+"ms");
pr.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_Scroll_getXXX(Connectioncon){
System.out.println();
System.out.println("TestscrollandcallthegetXXXmethodsforeverycolumns:"+rowCount+"rows");
try{
Statementst=con.createStatement();
longtime=-System.currentTimeMillis();
ResultSetrs=st.executeQuery("SELECT*FROM"+tableName);
for(inti=ﻝ;i<rowCount;i++){
rs.next();
rs.getInt(ﻝ);
rs.getBytes(ﻝ);
rs.getString(ﻝ);
rs.getDate(ﻝ);
rs.getFloat(ﻝ);
rs.getFloat(ﻝ);
rs.getBytes(ﻝ);
rs.getInt(ﻝ);
rs.getDouble(ﻝ);
rs.getDouble(ﻝ);
rs.getFloat(ﻝ);
rs.getTime(ﻝ);
rs.getShort(ﻝ);
rs.getFloat(ﻝ);
rs.getString(ﻝ);
rs.getString(ﻝ);
rs.getByte(ﻝ);
rs.getBytes(ﻝ);
rs.getString(ﻝ);
}
time+=System.currentTimeMillis();
System.out.println("Testtime:"+time+"ms");
st.close();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_UpdateLargeBinary(Connectioncon){
System.out.println();
System.out.println("Testupdatelargebinarydata:"+rowCount+"KBbytes");
try{
java.io.FileOutputStreamfos=newjava.io.FileOutputStream(tableName+".bin");
bytebytes[]=newbyte[1024];
for(inti=ﻝ;i<rowCount;i++){
fos.write(bytes);
}
fos.close();
java.io.FileInputStreamfis=newjava.io.FileInputStream(tableName+".bin");
longtime=-System.currentTimeMillis();
PreparedStatementpr=con.prepareStatement("Update"+tableName+"setim=?WHEREpr=1");
pr.setBinaryStream(1,fis,rowCount*1024);
pr.execute();
pr.close();
time+=System.currentTimeMillis();
System.out.println("Testtime:"+time+"ms");
fis.close();
java.io.Filefile=newjava.io.File(tableName+".bin");
file.delete();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidtest_UpdateLargeBinaryWithSP(Connectioncon){
System.out.println();
System.out.println("TestupdatelargebinarydatawithaSP:"+rowCount+"KBbytes");
try{
java.io.FileOutputStreamfos=newjava.io.FileOutputStream(tableName+".bin");
bytebytes[]=newbyte[1024];
for(inti=ﻝ;i<rowCount;i++){
fos.write(bytes);
}
fos.close();
java.io.FileInputStreamfis=newjava.io.FileInputStream(tableName+".bin");
longtime=-System.currentTimeMillis();
Statementst=con.createStatement();
st.execute("CREATEPROCEDURE#UpdateLargeBinary(@imimage)asUpdate"+tableName+"setim=@imWHEREpr=2");
PreparedStatementpr=con.prepareStatement("exec#UpdateLargeBinary?");
pr.setBinaryStream(1,fis,rowCount*1024);
pr.execute();
st.execute("DROPPROCEDURE#UpdateLargeBinary");
st.close();
pr.close();
time+=System.currentTimeMillis();
System.out.println("Testtime:"+time+"ms");
fis.close();
java.io.Filefile=newjava.io.File(tableName+".bin");
file.delete();
}catch(Exceptione){
System.out.println("Failed:"+e);
}finally{
System.out.println();
System.out.println("===================================================================");
}
}
staticvoidcreateTestTable(Connectioncon)throwsSQLException{
Statementst;
st=con.createStatement();
dropTestTable(con);
st.execute(
"CREATETABLE"+tableName+"("+
"prnumericIDENTITY,"+
"bibinary(255)NULL,"+
"cnchar(255)NULL,"+
"ddatetimeNULL,"+
"dedecimal(ﻝ,ﻝ)NULL,"+
"ffloatNULL,"+
"imimageNULL,"+
"iintNULL,"+
"mmoneyNULL,"+
"nnumeric(ﻝ,ﻝ)NULL,"+
"rrealNULL,"+
"sdsmalldatetimeNULL,"+
"sismallintNULL,"+
"smsmallmoneyNULL,"+
"sysysnameNULL,"+
"tntextNULL,"+
"titinyintNULL,"+
"vbvarbinary(255)NULL,"+
"vcnvarchar(255)NULL,"+
"CONSTRAINTPK_BenchTest2PRIMARYKEYCLUSTERED(pr)"+
")");
st.close();
}
staticvoiddeleteTestTable(Connectioncon){
try{
Statementst=con.createStatement();
st.execute("DELETEFROM"+tableName);
st.close();
}catch(Exceptione){}
}
staticvoiddropTestTable(Connectioncon){
try{
Statementst=con.createStatement();
st.execute("droptable"+tableName);
st.close();
}catch(Exceptione){}
}
staticvoidcreateTestDataWithClassicInsert(Connectioncon)throwsSQLException{
ﺝsql="INSERTINTO"+tableName+"(bi,c,d,de,f,im,i,m,n,r,si,sd,sm,sy,t,ti,vb,vc)VALUES(0x172243,'Test','20010101',1234.56789,9876.54321,0x";
for(inti=ﻝ;i<largeByteArray.length;i++){
sql+="00";
}
Statementst=con.createStatement();
for(inti=ﻝ;i<rowCount;i++){
st.execute(sql+","+i+",23.45,567.45,78.89,"+i+",'11:11:11',34.56,'sysname(30)NULL','ntextNULL,sampletosaveinthefield',"+(i&0xFF)+",0x172243,'nvarchar(255)NULL')");
}
st.close();
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassTestAlterTableextendsBasicTestCase{
privatefinalﺝtable="AlterTable";
privateﺝrowCount=ﻝ;
publicvoidsetUp(){
tearDown();
try{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("createtable"+table+"(iint,vvarchar(100))");
st.execute("Insertinto"+table+"Values(1,'abc')");
st.execute("Insertinto"+table+"Values(2,'bcd')");
st.execute("Insertinto"+table+"Values(3,'cde')");
st.execute("Insertinto"+table+"Values(4,'def')");
st.execute("Insertinto"+table+"Values(5,'efg')");
st.execute("Insertinto"+table+"Values(6,'fgh')");
st.execute("Insertinto"+table+"Values(7,'ghi')");
st.execute("Insertinto"+table+"Values(8,'hij')");
st.execute("Insertinto"+table+"Values(9,'ijk')");
st.execute("Insertinto"+table+"Values(10,'jkl')");
st.close();
}catch(Throwablee){
e.printStackTrace();
}
}
publicvoidtearDown(){
try{
dropTable(AllTests.getConnection(),table);
}catch(SQLExceptionex){
ex.printStackTrace();
}
}
publicvoidtestAdd1Column()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("AlterTable"+table+"AddaVarchar(20)");
ResultSetrs=st.executeQuery("Select*From"+table);
assertRSMetaData(rs,newString[]{"i","v","a"},newint[]{Types.INTEGER,Types.VARCHAR,Types.VARCHAR});
}
publicvoidtestAdd2Column()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("AlterTable"+table+"AddaVarchar(20),bintDEFAULT25");
ResultSetrs=st.executeQuery("Select*From"+table);
assertRSMetaData(rs,newString[]{"i","v","a","b"},newint[]{Types.INTEGER,Types.VARCHAR,Types.VARCHAR,Types.INTEGER});
intcount=ﻝ;
while(rs.next()){
assertEquals("defaultvalue",25,rs.getInt("b"));
count++;
}
assertEquals("RowCount",rowCount,count);
}
publicvoidtestAddWithTableLock_REPEATABLE_READ()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
intisolation=con.getTransactionIsolation();
con.setAutoCommit(false);
try{
con.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
ResultSetrs=st.executeQuery("Select*From"+table);
rs.next();
try{
st.execute("AlterTable"+table+"AddaVarchar(20)");
fail("AlterTableshouldnotworkonatablewithalock.");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
rs.next();
}finally{
con.setTransactionIsolation(isolation);
con.setAutoCommit(true);
}
}
publicvoidtestAddWithTableLock_READ_COMMITTED()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
intisolation=con.getTransactionIsolation();
con.setAutoCommit(false);
try{
con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
ResultSetrs=st.executeQuery("Select*From"+table);
rs.next();
st.execute("AlterTable"+table+"AddaVarchar(20)");
try{
rs.next();
fail("AlterTableshouldnotworkonatablewithalock.");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
}finally{
con.setTransactionIsolation(isolation);
con.setAutoCommit(true);
}
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassTestAlterTable2extendsBasicTestCase{
privatefinalﺝtable="AlterTable2";
publicvoidsetUp(){
tearDown();
}
publicvoidtearDown(){
try{
dropTable(AllTests.getConnection(),table);
}catch(SQLExceptionex){
ex.printStackTrace();
}
}
publicvoidtestWithPrimaryKey()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("createtable"+table+"(keyFieldvarchar(2)primarykey)");
st.execute("altertable"+table+"addanotherFieldvarchar(4)");
ResultSetrs=st.executeQuery("Select*From"+table);
assertRSMetaData(rs,newString[]{"keyField","anotherField"},newint[]{Types.VARCHAR,Types.VARCHAR});
rs=con.getMetaData().getIndexInfo(null,null,table,false,false);
assertRowCount(1,rs);
}
publicvoidtestAddPrimaryKey()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("createtable"+table+"(avarchar(2))");
st.execute("altertable"+table+"addbvarchar(4)primarykey");
ResultSetrs=st.executeQuery("Select*From"+table);
assertRSMetaData(rs,newString[]{"a","b"},newint[]{Types.VARCHAR,Types.VARCHAR});
rs=con.getMetaData().getIndexInfo(null,null,table,false,false);
assertRowCount(1,rs);
}
publicvoidtestAdd2PrimaryKeys()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("createtable"+table+"(avarchar(2)primarykey)");
try{
st.execute("altertable"+table+"addbvarchar(4)primarykey");
fail("2primarykeysareinvalid");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
ResultSetrs=st.executeQuery("Select*From"+table);
assertRSMetaData(rs,newString[]{"a"},newint[]{Types.VARCHAR});
rs=con.getMetaData().getIndexInfo(null,null,table,false,false);
assertRowCount(1,rs);
}
publicvoidtestAdd2Keys()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("createtable"+table+"(avarchar(2)unique)");
st.execute("altertable"+table+"addbvarchar(4)primarykey");
ResultSetrs=st.executeQuery("Select*From"+table);
assertRSMetaData(rs,newString[]{"a","b"},newint[]{Types.VARCHAR,Types.VARCHAR});
rs=con.getMetaData().getIndexInfo(null,null,table,false,false);
assertRowCount(2,rs);
}
}
packagesmallsql.junit;
importjava.sql.*;
importjava.text.*;
importjava.util.Locale;
publicclassTestDBMetaDataextendsBasicTestCase{
publicTestDBMetaData(){
super();
}
publicTestDBMetaData(ﺝarg0){
super(arg0);
}
publicvoidtestGetURL()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
assertEquals("URL",AllTests.JDBC_URL,md.getURL());
}
publicvoidtestVersions()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
assertEquals("DriverVersion",md.getDriverVersion(),md.getDatabaseProductVersion());
Driverdriver=DriverManager.getDriver(AllTests.JDBC_URL);
assertEquals("MajorVersion",driver.getMajorVersion(),md.getDatabaseMajorVersion());
assertEquals("MajorVersion",driver.getMajorVersion(),md.getDriverMajorVersion());
assertEquals("MinorVersion",driver.getMinorVersion(),md.getDatabaseMinorVersion());
assertEquals("MinorVersion",driver.getMinorVersion(),md.getDriverMinorVersion());
assertEquals("Version",newDecimalFormat("###0.00",newDecimalFormatSymbols(Locale.US)).format(driver.getMajorVersion()+driver.getMinorVersion()/100.0),md.getDriverVersion());
assertTrue("jdbcCompliant",driver.jdbcCompliant());
}
publicvoidtestFunctions()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
assertEquals("getNumericFunctions","ABS,ACOS,ASIN,ATAN,ATAN2,CEILING,COS,COT,DEGREES,EXP,FLOOR,LOG,LOG10,MOD,PI,POWER,RADIANS,RAND,ROUND,SIGN,SIN,SQRT,TAN,TRUNCATE",
md.getNumericFunctions());
assertEquals("getStringFunctions","ASCII,BIT_LENGTH,CHAR_LENGTH,CHARACTER_LENGTH,CHAR,CONCAT,DIFFERENCE,INSERT,LCASE,LEFT,LENGTH,LOCATE,LTRIM,OCTET_LENGTH,REPEAT,REPLACE,RIGHT,RTRIM,SOUNDEX,SPACE,SUBSTRING,TRIM,UCASE",
md.getStringFunctions());
assertEquals("getStringFunctions","IFNULL,USER,CONVERT,CAST,IIF",
md.getSystemFunctions());
assertEquals("getStringFunctions","CURDATE,CURRENT_DATE,CURTIME,DAYNAME,DAYOFMONTH,DAYOFWEEK,DAYOFYEAR,DAY,HOUR,MILLISECOND,MINUTE,MONTH,MONTHNAME,NOW,QUARTER,SECOND,TIMESTAMPADD,TIMESTAMPDIFF,WEEK,YEAR",
md.getTimeDateFunctions());
}
publicvoidtestGetProcedures()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
ResultSetrs=md.getProcedures(null,null,"*");
String[]colNames={"PROCEDURE_CAT","PROCEDURE_SCHEM","PROCEDURE_NAME","","","","REMARKS","PROCEDURE_TYPE"};
int[]colTypes={Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL};
assertRSMetaData(rs,colNames,colTypes);
}
publicvoidtestGetProcedureColumns()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
ResultSetrs=md.getProcedureColumns(null,null,"*",null);
String[]colNames={"PROCEDURE_CAT","PROCEDURE_SCHEM","PROCEDURE_NAME","COLUMN_NAME","COLUMN_TYPE","DATA_TYPE","TYPE_NAME","PRECISION","LENGTH","SCALE","RADIX","NULLABLE","REMARKS"};
int[]colTypes={Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL};
assertRSMetaData(rs,colNames,colTypes);
}
publicvoidtestGetTables()throwsException{
String[]colNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","TABLE_TYPE","REMARKS","TYPE_CAT","TYPE_SCHEM","TYPE_NAME","SELF_REFERENCING_COL_NAME","REF_GENERATION"};
int[]types={Types.VARCHAR,Types.NULL,Types.VARCHAR,Types.VARCHAR,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL,Types.NULL};
Connectioncon=DriverManager.getConnection("jdbc:smallsql?");
DatabaseMetaDatamd=con.getMetaData();
ResultSetrs=md.getTables(null,null,null,null);
super.assertRSMetaData(rs,colNames,newint[colNames.length]);
assertFalse(rs.next());
con.close();
con=AllTests.getConnection();
md=con.getMetaData();
rs=md.getTables(null,null,null,null);
super.assertRSMetaData(rs,colNames,types);
}
publicvoidtestGetSchemas()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
ResultSetrs=md.getSchemas();
String[]colNames={"TABLE_SCHEM"};
int[]colTypes={Types.NULL};
assertRSMetaData(rs,colNames,colTypes);
assertFalse(rs.next());
}
publicvoidtestGetCatalogs()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("dropdatabasetest2\n\r\t");
}catch(SQLExceptione){}
con.createStatement().execute("createdatabasetest2");
DatabaseMetaDatamd=con.getMetaData();
ResultSetrs=md.getCatalogs();
assertRSMetaData(rs,newString[]{"TABLE_CAT"},newint[]{Types.VARCHAR});
while(rs.next()){
System.out.println("testCatalogs:"+rs.getObject(1));
}
}
publicvoidtestGetTableTypes()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
ResultSetrs=md.getTableTypes();
String[]colNames={"TABLE_TYPE"};
int[]colTypes={Types.VARCHAR};
assertRSMetaData(rs,colNames,colTypes);
ﺝtype="";
intcount=ﻝ;
while(rs.next()){
ﺝtype2=rs.getString("TABLE_TYPE");
assertTrue(type+"-"+type2,type.compareTo(type2)<0);
type=type2;
count++;
}
assertEquals("TableTypeCount",3,count);
}
publicvoidtestGetColumn()throwsException{
Connectioncon=AllTests.getConnection();
dropTable(con,"tableColumns");
dropView(con,"viewColumns");
con.createStatement().execute("createtabletableColumns(aintdefaultﻝ)");
DatabaseMetaDatamd=con.getMetaData();
ResultSetrs=md.getColumns(null,null,"tableColumns",null);
String[]colNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","DATA_TYPE","TYPE_NAME","COLUMN_SIZE","BUFFER_LENGTH","DECIMAL_DIGITS","NUM_PREC_RADIX","NULLABLE","REMARKS","COLUMN_DEF","SQL_DATA_TYPE","SQL_DATETIME_SUB","CHAR_OCTET_LENGTH","ORDINAL_POSITION","IS_NULLABLE"};
int[]colTypes={Types.VARCHAR,Types.NULL,Types.VARCHAR,Types.VARCHAR,Types.SMALLINT,Types.VARCHAR,Types.INTEGER,Types.NULL,Types.INTEGER,Types.INTEGER,Types.INTEGER,Types.NULL,Types.VARCHAR,Types.NULL,Types.NULL,Types.INTEGER,Types.INTEGER,Types.VARCHAR};
assertRSMetaData(rs,colNames,colTypes);
assertTrue("Norow",rs.next());
assertEquals("a",rs.getObject("COLUMN_NAME"));
assertEquals("INT",rs.getObject("TYPE_NAME"));
assertEquals("5",rs.getObject("COLUMN_Def"));
con.createStatement().execute("createviewviewColumnsasSelect*fromtableColumns");
rs=md.getColumns(null,null,"viewColumns",null);
assertRSMetaData(rs,colNames,colTypes);
assertTrue("Norow",rs.next());
assertEquals("a",rs.getObject("COLUMN_NAME"));
assertEquals("INT",rs.getObject("TYPE_NAME"));
assertEquals("5",rs.getObject("COLUMN_Def"));
dropView(con,"viewColumns");
dropTable(con,"tableColumns");
}
publicvoidtestGetTypeInfo()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
ResultSetrs=md.getTypeInfo();
String[]colNames={"TYPE_NAME","DATA_TYPE","PRECISION","LITERAL_PREFIX","LITERAL_SUFFIX","CREATE_PARAMS","NULLABLE","CASE_SENSITIVE","SEARCHABLE","UNSIGNED_ATTRIBUTE","FIXED_PREC_SCALE","AUTO_INCREMENT","LOCAL_TYPE_NAME","MINIMUM_SCALE","MAXIMUM_SCALE","SQL_DATA_TYPE","SQL_DATETIME_SUB","NUM_PREC_RADIX"};
int[]colTypes={Types.VARCHAR,Types.SMALLINT,Types.INTEGER,Types.VARCHAR,Types.VARCHAR,Types.VARCHAR,Types.SMALLINT,Types.BOOLEAN,Types.SMALLINT,Types.BOOLEAN,Types.BOOLEAN,Types.BOOLEAN,Types.NULL,Types.INTEGER,Types.INTEGER,Types.NULL,Types.NULL,Types.NULL};
assertRSMetaData(rs,colNames,colTypes);
assertTrue(rs.next());
intlastDataType=rs.getInt("data_type");
while(rs.next()){
intdataType=rs.getInt("data_type");
assertTrue("Wrongsortingorder",dataType>=lastDataType);
lastDataType=dataType;
}
}
publicvoidtestGetCrossReference()throwsException{
Connectioncon=AllTests.getConnection();
dropTable(con,"tblCross1");
dropTable(con,"tblCross2");
DatabaseMetaDatamd=con.getMetaData();
Statementst=con.createStatement();
st.execute("CreateTabletblCross1(id1counterprimarykey,vnvarchar(100))");
st.execute("CreateTabletblCross2(id2int,vnvarchar(100),foreignkey(id2)REFERENCEStblCross1(id1))");
String[]colNames={"PKTABLE_CAT","PKTABLE_SCHEM","PKTABLE_NAME","PKCOLUMN_NAME","FKTABLE_CAT","FKTABLE_SCHEM","FKTABLE_NAME","FKCOLUMN_NAME","KEY_SEQ","UPDATE_RULE","DELETE_RULE","FK_NAME","PK_NAME","DEFERRABILITY"};
int[]colTypes={Types.VARCHAR,Types.NULL,Types.VARCHAR,Types.VARCHAR,Types.VARCHAR,Types.NULL,Types.VARCHAR,Types.VARCHAR,Types.SMALLINT,Types.SMALLINT,Types.SMALLINT,Types.VARCHAR,Types.VARCHAR,Types.SMALLINT};
ResultSetrs=md.getCrossReference(null,null,"tblCross1",null,null,"tblCross2");
assertRSMetaData(rs,colNames,colTypes);
assertTrue(rs.next());
assertFalse(rs.next());
rs=md.getImportedKeys(null,null,"tblCross2");
assertRSMetaData(rs,colNames,colTypes);
assertTrue(rs.next());
assertFalse(rs.next());
rs=md.getExportedKeys(null,null,"tblCross1");
assertRSMetaData(rs,colNames,colTypes);
assertTrue(rs.next());
assertFalse(rs.next());
dropTable(con,"tblCross1");
dropTable(con,"tblCross2");
}
publicvoidtestGetBestRowIdentifier()throwsException{
Connectioncon=AllTests.getConnection();
dropTable(con,"tblBestRow1");
DatabaseMetaDatamd=con.getMetaData();
Statementst=con.createStatement();
st.execute("CreateTabletblBestRow1(id1counterprimarykey,vnvarchar(100))");
String[]colNames={"SCOPE","COLUMN_NAME","DATA_TYPE","TYPE_NAME","COLUMN_SIZE","BUFFER_LENGTH","DECIMAL_DIGITS","PSEUDO_COLUMN"};
int[]colTypes={Types.SMALLINT,Types.VARCHAR,Types.INTEGER,Types.VARCHAR,Types.INTEGER,Types.NULL,Types.SMALLINT,Types.SMALLINT};
ResultSetrs=md.getBestRowIdentifier(null,null,"tblBestRow1",DatabaseMetaData.bestRowSession,true);
assertRSMetaData(rs,colNames,colTypes);
assertTrue(rs.next());
assertEquals("Columnname:","id1",rs.getString("COLUMN_NAME"));
assertFalse(rs.next());
String[]colNames2={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","KEY_SEQ","PK_NAME"};
int[]colTypes2={Types.VARCHAR,Types.NULL,Types.VARCHAR,Types.VARCHAR,Types.SMALLINT,Types.VARCHAR};
rs=md.getPrimaryKeys(null,null,"tblBestRow1");
assertRSMetaData(rs,colNames2,colTypes2);
assertTrue(rs.next());
assertEquals("Columnname:","id1",rs.getString("COLUMN_NAME"));
assertFalse(rs.next());
String[]colNames3={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","NON_UNIQUE","INDEX_QUALIFIER","INDEX_NAME","TYPE","ORDINAL_POSITION","COLUMN_NAME","ASC_OR_DESC","CARDINALITY","PAGES","FILTER_CONDITION"};
int[]colTypes3={Types.VARCHAR,Types.NULL,Types.VARCHAR,Types.BOOLEAN,Types.NULL,Types.VARCHAR,Types.SMALLINT,Types.SMALLINT,Types.VARCHAR,Types.NULL,Types.NULL,Types.NULL,Types.NULL};
rs=md.getIndexInfo(null,null,"tblBestRow1",true,true);
assertRSMetaData(rs,colNames3,colTypes3);
assertTrue(rs.next());
assertEquals("Columnname:","id1",rs.getString("COLUMN_NAME"));
assertFalse(rs.next());
dropTable(con,"tblBestRow1");
}
publicvoidtestGetgetUDTs()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
ResultSetrs=md.getUDTs(null,null,null,null);
String[]colNames={"TYPE_CAT","TYPE_SCHEM","TYPE_NAME","CLASS_NAME","DATA_TYPE","REMARKS"};
int[]colTypes=newint[colNames.length];
assertRSMetaData(rs,colNames,colTypes);
assertFalse(rs.next());
}
publicvoidtestGetConnection()throwsException{
Connectioncon=AllTests.getConnection();
DatabaseMetaDatamd=con.getMetaData();
assertEquals(con,md.getConnection());
}
}
packagesmallsql.junit;
importjunit.framework.*;
importjava.sql.*;
importjava.math.*;
publicclassTestDataTypesextendsBasicTestCase{
staticfinalString[]DATATYPES={"varchar(100)",
"varchar2(130)","nvarchar(137)","nvarchar2(137)","sysname",
"char(100)","CHARACTER(99)",
"nchar(80)",
"int","smallint","tinyint","bigint","byte",
"real","float","double",
"bit","Boolean",
"binary(ﻝ)","varbinary(ﻝ)","raw(ﻝ)",
"java_object","sql_variant",
"image","LONGvarbinary","longraw",
"blob","clob","nclob",
"text","ntext","LongVarchar","long",
"time","date","datetime","timestamp","SMALLDATETIME",
"UNIQUEIDENTIFIER",
"numeric(28,4)","decimal(29,4)","number(29,4)","varnum(29,4)",
"COUNTER",
"money","smallmoney"};
privatestaticfinalﺝtable="table_datatypes";
privateﺝdatatype;
TestDataTypes(ﺝdatatype){
super(datatype);
this.datatype=datatype;
}
publicvoidtearDown(){
try{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("droptable"+table);
st.close();
}catch(Throwablee){
}
}
publicvoidsetUp(){
tearDown();
}
publicvoidrunTest()throwsThrowable{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("CreateTable"+table+"(abc"+datatype+")");
ﺝname="abc";
Object[]values=null;
ﺝquote="";
ﺝescape1="";
ﺝescape2="";
booleanneedTrim=false;
ResultSetrs=st.executeQuery("SELECT*From"+table);
ResultSetMetaDatamd=rs.getMetaData();
switch(md.getColumnType(1)){
caseTypes.CHAR:
needTrim=true;
caseTypes.VARCHAR:
caseTypes.LONGVARCHAR:
caseTypes.CLOB:
values=newObject[]{null,"qwert","asdfg","hjhjhj","ﻝqwertzuiopﻝasdfghjklöﻝyxcvbnm,.-ﻝ"};
quote="\'";
break;
caseTypes.BIGINT:
values=newObject[]{null,newLong(123),newLong(-2123),newLong(392839283)};
break;
caseTypes.INTEGER:
values=newObject[]{null,newInteger(123),newInteger(-2123),newInteger(392839283)};
break;
caseTypes.SMALLINT:
values=newObject[]{null,newInteger(123),newInteger(-2123),newInteger(32000)};
break;
caseTypes.TINYINT:
values=newObject[]{null,newInteger(0),newInteger(12),newInteger(228)};
break;
caseTypes.REAL:
values=newObject[]{null,newFloat(0.0),newFloat(-12.123),newFloat(22812345234.9)};
break;
caseTypes.FLOAT:
caseTypes.DOUBLE:
values=newObject[]{null,newDouble(0.0),newDouble(-12.123),newDouble(22812345234.9)};
break;
caseTypes.NUMERIC:
caseTypes.DECIMAL:
needTrim=true;
if(md.getPrecision(1)<16){
values=newObject[]{null,newBigDecimal("0.0"),newBigDecimal("-2"),newBigDecimal("-12.123")};
}else{
values=newObject[]{null,newBigDecimal("0.0"),newBigDecimal("-2"),newBigDecimal("-12.123"),newBigDecimal("22812345234.9")};
}
break;
caseTypes.BIT:
caseTypes.BOOLEAN:
values=newObject[]{null,Boolean.TRUE,Boolean.FALSE};
break;
caseTypes.TIME:
values=newObject[]{null,newTime(10,17,56),newTime(0,0,0),newTime(23,59,59)};
escape1="{t'";
escape2="'}";
break;
caseTypes.DATE:
values=newObject[]{null,newjava.sql.Date(10,10,1),newjava.sql.Date(0,0,1),newjava.sql.Date(70,0,1)};
escape1="{d'";
escape2="'}";
break;
caseTypes.TIMESTAMP:
if(md.getPrecision(1)>16)
values=newObject[]{null,newTimestamp(ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ),newTimestamp(ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ),newTimestamp(ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ),newTimestamp(ﻝ),newTimestamp(-ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ)};
else
values=newObject[]{null,newTimestamp(ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ),newTimestamp(ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ,ﻝ),newTimestamp(ﻝ)};
escape1="{ts'";
escape2="'}";
break;
caseTypes.BINARY:
needTrim=true;
caseTypes.VARBINARY:
caseTypes.LONGVARBINARY:
caseTypes.BLOB:
values=newObject[]{null,newbyte[]{1,127,-23}};
break;
caseTypes.JAVA_OBJECT:
values=newObject[]{null,newInteger(-123),newDouble(1.2),newbyte[]{1,127,-23}};
break;
case-11:
values=newObject[]{null,"342734E3-D9AC-408F-8724-B7A257C4529E","342734E3-D9AC-408F-8724-B7A257C4529E"};
quote="\'";
break;
default:fail("Unknowncolumntype:"+rs.getMetaData().getColumnType(1));
}
rs.close();
con.close();
con=AllTests.getConnection();
st=con.createStatement();
for(inti=ﻝ;i<values.length;i++){
Objectval=values[i];
ﺝq=(val==null)?"":quote;
ﺝe1=(val==null)?"":escape1;
ﺝe2=(val==null)?"":escape2;
if(valinstanceofbyte[]){
StringBufferbuf=newStringBuffer("0x");
for(intk=ﻝ;k<((byte[])val).length;k++){
ﺝdigit="0"+Integer.toHexString(((byte[])val)[k]);
buf.append(digit.substring(digit.length()-2));
}
val=buf.toString();
}
st.execute("Insertinto"+table+"(abc)Values("+e1+q+val+q+e2+")");
}
checkValues(st,values,needTrim);
st.execute("DeleteFrom"+table);
CallableStatementcal=con.prepareCall("InsertInto"+table+"(abc)Values(?)");
for(inti=ﻝ;i<values.length;i++){
Objectval=values[i];
cal.setObject(1,val);
cal.execute();
}
cal.close();
checkValues(st,values,needTrim);
st.execute("DeleteFrom"+table);
cal=con.prepareCall("InsertInto"+table+"(abc)Values(?)");
for(inti=ﻝ;i<values.length;i++){
Objectval=values[i];
if(val==null){
cal.setNull(1,Types.NULL);
}else
if(valinstanceofTime){
cal.setTime(1,(Time)val);
}else
if(valinstanceofTimestamp){
cal.setTimestamp(1,(Timestamp)val);
}else
if(valinstanceofDate){
cal.setDate(1,(Date)val);
}else
if(valinstanceofString){
cal.setString(1,(String)val);
}else
if(valinstanceofBoolean){
cal.setBoolean(1,((Boolean)val).booleanValue());
}else
if(valinstanceofByte){
cal.setByte(1,((Byte)val).byteValue());
}else
if(valinstanceofShort){
cal.setShort(1,((Short)val).shortValue());
}else
if(valinstanceofInteger){
cal.setInt(1,((Integer)val).intValue());
}else
if(valinstanceofLong){
cal.setLong(1,((Long)val).longValue());
}else
if(valinstanceofFloat){
cal.setFloat(1,((Float)val).floatValue());
}else
if(valinstanceofDouble){
cal.setDouble(1,((Double)val).doubleValue());
}else
if(valinstanceofBigDecimal){
cal.setBigDecimal(1,(BigDecimal)val);
}else
if(valinstanceofbyte[]){
cal.setBytes(1,(byte[])val);
}
cal.execute();
}
cal.close();
checkValues(st,values,needTrim);
st.execute("DeleteFrom"+table);
Statementst2=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs2=st2.executeQuery("SELECT*From"+table);
for(inti=ﻝ;i<values.length;i++){
rs2.moveToInsertRow();
Objectval=values[i];
if(val==null){
rs2.updateNull(name);
}else
if(valinstanceofTime){
rs2.updateTime(name,(Time)val);
}else
if(valinstanceofTimestamp){
rs2.updateTimestamp(name,(Timestamp)val);
}else
if(valinstanceofDate){
rs2.updateDate(name,(Date)val);
}else
if(valinstanceofString){
rs2.updateString(name,(String)val);
}else
if(valinstanceofBoolean){
rs2.updateBoolean(name,((Boolean)val).booleanValue());
}else
if(valinstanceofByte){
rs2.updateByte(name,((Byte)val).byteValue());
}else
if(valinstanceofShort){
rs2.updateShort(name,((Short)val).shortValue());
}else
if(valinstanceofInteger){
rs2.updateInt(name,((Integer)val).intValue());
}else
if(valinstanceofLong){
rs2.updateLong(name,((Long)val).longValue());
}else
if(valinstanceofFloat){
rs2.updateFloat(name,((Float)val).floatValue());
}else
if(valinstanceofDouble){
rs2.updateDouble(name,((Double)val).doubleValue());
}else
if(valinstanceofBigDecimal){
rs2.updateBigDecimal(name,(BigDecimal)val);
}else
if(valinstanceofbyte[]){
rs2.updateBytes(name,(byte[])val);
}
rs2.insertRow();
}
st2.close();
checkValues(st,values,needTrim);
}
privatevoidcheckValues(Statementst,Object[]values,booleanneedTrim)throwsException{
ResultSetrs=st.executeQuery("SELECT*From"+table);
inti=ﻝ;
while(rs.next()){
assertEqualsRsValue(values[i],rs,needTrim);
i++;
}
rs.close();
}
publicstaticTestsuite()throwsException{
TestSuitetheSuite=newTestSuite("DataTypes");
for(inti=ﻝ;i<DATATYPES.length;i++){
theSuite.addTest(newTestDataTypes(DATATYPES[i]));
}
returntheSuite;
}
publicstaticvoidmain(String[]argv){
junit.swingui.TestRunner.main(newString[]{TestDataTypes.class.getName()});
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassTestDeleteUpdateextendsBasicTestCase{
publicTestDeleteUpdate(){
super();
}
publicTestDeleteUpdate(ﺝname){
super(name);
}
publicvoidtestDelete()throwsException{
Connectioncon=AllTests.getConnection();
dropTable(con,"testDelete");
Statementst=con.createStatement();
st.execute("createtabletestDelete(aintdefaultﻝ)");
for(inti=ﻝ;i<ﻝ;i++){
st.execute("InsertintotestDeleteValues("+i+")");
}
assertRowCount(10,"Select*fromtestDelete");
st.execute("deletefromtestDeleteWherea=3");
assertRowCount(9,"Select*fromtestDelete");
st.execute("deletefromtestDeleteWherea<5");
assertRowCount(5,"Select*fromtestDelete");
st.execute("deletefromtestDelete");
assertRowCount(0,"Select*fromtestDelete");
dropTable(con,"testDelete");
}
publicvoidtestUpdate1()throwsException{
Connectioncon=AllTests.getConnection();
dropTable(con,"testUpdate");
Statementst=con.createStatement();
st.execute("createtabletestUpdate(idintdefault15,valueint)");
for(inti=ﻝ;i<ﻝ;i++){
st.execute("InsertintotestUpdateValues("+i+','+i+")");
}
assertRowCount(10,"Select*fromtestUpdate");
intupdateCount;
updateCount=st.executeUpdate("updatetestUpdatesetvalue=ﻝWhereid=ﻝ");
assertEqualsRsValue(newInteger(103),"SelectvaluefromtestUpdateWhereid=3");
assertRowCount(10,"SelectvaluefromtestUpdate");
assertEquals(1,updateCount);
updateCount=st.executeUpdate("updatetestUpdatesetvalue=ﻝWhereid=ﻝ");
assertEqualsRsValue(newInteger(104),"SelectvaluefromtestUpdateWhereid=3");
assertRowCount(10,"SelectvaluefromtestUpdate");
assertEquals(1,updateCount);
updateCount=st.executeUpdate("deletefromtestUpdateWhereid=3");
assertRowCount(9,"Select*fromtestUpdate");
assertEquals(1,updateCount);
updateCount=st.executeUpdate("updatetestUpdatesetvalue=ﻝWhereid<ﻝ");
assertEquals(4,updateCount);
dropTable(con,"testUpdate");
}
publicvoidtestUpdate2()throwsException{
Connectioncon=AllTests.getConnection();
dropTable(con,"testUpdate");
Statementst=con.createStatement();
st.execute("createtabletestUpdate(idintdefault15,value1varchar(100),value2int)");
for(inti=ﻝ;i<ﻝ;i++){
st.execute("InsertintotestUpdateValues("+i+','+(i*100)+','+i+")");
}
assertRowCount(10,"Select*fromtestUpdate");
st.execute("updatetestUpdatesetvalueﻝ=ﻝWhereid=ﻝ");
assertEqualsRsValue("13","Selectvalue1fromtestUpdateWhereid=3");
assertRowCount(10,"Select*fromtestUpdate");
st.execute("updatetestUpdatesetvalueﻝ=ﻝWhereid=ﻝ");
assertEqualsRsValue("1040","Selectvalue1fromtestUpdateWhereid=3");
assertRowCount(10,"Select*fromtestUpdate");
st.execute("updatetestUpdatesetvalueﻝ=ﻝWhereid=ﻝ");
assertEqualsRsValue("10400","Selectvalue1fromtestUpdateWhereid=3");
assertRowCount(10,"Select*fromtestUpdate");
st.execute("updatetestUpdatesetvalueﻝ=ﻝ,id=ﻝWhereid=ﻝ");
assertEqualsRsValue("13","Selectvalue1fromtestUpdateWhereid=3");
assertRowCount(10,"Select*fromtestUpdate");
st.execute("deletefromtestUpdateWhereid=3");
assertRowCount(9,"Select*fromtestUpdate");
dropTable(con,"testUpdate");
}
publicvoidtestUpdateMultiTables()throwsException{
Connectioncon=AllTests.getConnection();
dropTable(con,"testUpdate1");
dropTable(con,"testUpdate2");
Statementst=con.createStatement();
st.execute("createtabletestUpdate1(id1int,value1varchar(100))");
st.execute("createtabletestUpdate2(id2int,value2varchar(100))");
st.execute("InsertintotestUpdate1Values(11,'qwert1')");
st.execute("InsertintotestUpdate2Values(11,'qwert2')");
st.execute("updatetestUpdate1innerjointestUpdate2onid1=id2Setvalue1=value1+'update',value2=value2+'update'");
ResultSetrs=st.executeQuery("Select*FromtestUpdate1innerjointestUpdate2onid1=id2");
assertTrue(rs.next());
assertEquals("qwert1update",rs.getString("value1"));
assertEquals("qwert2update",rs.getString("value2"));
dropTable(con,"testUpdate1");
dropTable(con,"testUpdate2");
}
}
packagesmallsql.junit;
importjava.io.File;
importjava.sql.*;
publicclassTestExceptionMethodsextendsBasicTestCase{
publicvoidtestForwardOnly()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableExceptionMethods(vvarchar(30))");
con.createStatement().execute("InsertIntoExceptionMethods(v)Values('qwert')");
ResultSetrs=con.createStatement().executeQuery("Select*fromExceptionMethods");
assertEquals(true,rs.next());
try{
rs.isBeforeFirst();
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
try{
rs.isFirst();
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
try{
rs.first();
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
try{
rs.previous();
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
try{
rs.last();
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
try{
rs.isLast();
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
try{
rs.isAfterLast();
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
try{
rs.afterLast();
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
try{
rs.absolute(1);
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
try{
rs.relative(1);
fail("SQLException'ResultSetisforwardonly'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
}finally{
dropTable(con,"ExceptionMethods");
}
}
publicvoidtestGetConnection()throwsException{
Connectioncon;
try{
con=DriverManager.getConnection(AllTests.JDBC_URL+"?abc");
con.close();
fail("SQLExceptionshouldbethrown");
}catch(SQLExceptionex){
}
con=DriverManager.getConnection(AllTests.JDBC_URL+"?");
con.close();
con=DriverManager.getConnection(AllTests.JDBC_URL+"?a=b;;c=d;e=f;;");
Connectioncon2=DriverManager.getConnection("jdbc:smallsql:"+newFile(AllTests.CATALOG).getAbsolutePath());
con.close();
con2.close();
con=DriverManager.getConnection("jdbc:smallsql:file:"+AllTests.CATALOG);
con.close();
}
publicvoidtestDuplicatedColumnCreate()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
try{
st.execute("CreateTableDuplicatedColumn(colINT,ColINT)");
fail("SQLException'DuplicatedColumn'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
}
publicvoidtestDuplicatedColumnAlter()throwsException{
Connectioncon=AllTests.getConnection();
try{
Statementst=con.createStatement();
st.execute("CreateTableDuplicatedColumn(colINT)");
try{
st.execute("ALTERTABLEDuplicatedColumnAddColINT");
fail("SQLException'DuplicatedColumn'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
}finally{
dropTable(con,"DuplicatedColumn");
}
}
publicvoidtestDuplicatedColumnInsert()throwsException{
Connectioncon=AllTests.getConnection();
try{
Statementst=con.createStatement();
st.execute("CreateTableDuplicatedColumn(colINT)");
try{
st.execute("INSERTINTODuplicatedColumn(col,Col)Values(1,2)");
fail("SQLException'DuplicatedColumn'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
}finally{
dropTable(con,"DuplicatedColumn");
}
}
publicvoidtestDuplicatedCreateTable()throwsException{
Connectioncon=AllTests.getConnection();
try{
dropTable(con,"DuplicatedTable");
Statementst=con.createStatement();
st.execute("CreateTableDuplicatedTable(colINTprimarykey)");
inttableFileCount=countFiles("DuplicatedTable");
try{
st.execute("CreateTableDuplicatedTable(colINTprimarykey)");
fail("SQLException'DuplicatedTable'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
assertEquals("AdditionalFilescreated",tableFileCount,countFiles("DuplicatedTable"));
}finally{
dropTable(con,"DuplicatedTable");
}
}
ﺝcountFiles(ﺝfileNameStart){
intcount=ﻝ;
ﺝnames[]=newFile(AllTests.CATALOG).list();
for(inti=ﻝ;i<names.length;i++){
if(names[i].startsWith(fileNameStart)){
count++;
}
}
returncount;
}
publicvoidtestAmbiguousColumn()throwsException{
Connectioncon=AllTests.getConnection();
try{
Statementst=con.createStatement();
st.execute("createtablefoo(myintnumber)");
st.execute("createtablebar(myintnumber)");
try{
st.executeQuery("selectmyintfromfoo,bar");
fail("SQLException'Ambiguousname'shouldbethrow");
}catch(SQLExceptione){
assertSQLException("01000",0,e);
}
}finally{
dropTable(con,"foo");
dropTable(con,"bar");
}
}
publicvoidtestClosedStatement()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.close();
try{
st.execute("Select1");
fail("Exceptionshouldthrow");
}catch(SQLExceptionex){
assertSQLException("HY010",0,ex);
}
try{
st.executeQuery("Select1");
fail("Exceptionshouldthrow");
}catch(SQLExceptionex){
assertSQLException("HY010",0,ex);
}
try{
st.executeUpdate("Select1");
fail("Exceptionshouldthrow");
}catch(SQLExceptionex){
assertSQLException("HY010",0,ex);
}
}
publicvoidtestClosedPreparedStatement()throwsException{
Connectioncon=AllTests.getConnection();
PreparedStatementpr=con.prepareStatement("Select?");
pr.setInt(ﻝ,ﻝ);
pr.close();
try{
pr.setInt(ﻝ,ﻝ);
fail("Exceptionshouldthrow");
}catch(SQLExceptionex){
assertSQLException("HY010",0,ex);
}
try{
pr.execute();
fail("Exceptionshouldthrow");
}catch(SQLExceptionex){
assertSQLException("HY010",0,ex);
}
try{
pr.executeQuery();
fail("Exceptionshouldthrow");
}catch(SQLExceptionex){
assertSQLException("HY010",0,ex);
}
try{
pr.executeUpdate();
fail("Exceptionshouldthrow");
}catch(SQLExceptionex){
assertSQLException("HY010",0,ex);
}
}
}
packagesmallsql.junit;
importjunit.framework.*;
importjava.sql.*;
publicclassTestExceptionsextendsBasicTestCase{
privateTestValuetestValue;
privatestaticbooleaninit;
privatestaticﺝSYNTAX=ﻝ;
privatestaticﺝRUNTIME=ﻝ;
privatestaticfinalTestValue[]TESTS=newTestValue[]{
a("ﻝ",ﻝ,SYNTAX,"SELECTﻝFROM"),
a("01000",0,SYNTAX,"SELECTcFROMexceptionsGroupByi"),
a("01000",0,SYNTAX,"SELECTfirst(c)FROMexceptionsGroupByiORDERbyc"),
a("ﻝ",ﻝ,SYNTAX,"SELECTﻝORDERBYsubstring('qwert',ﻝ,-ﻝ)"),
a("01000",0,RUNTIME,"SELECTabs('abc')"),
a("01000",0,SYNTAX,"CreateTableanyTable(cchar(10)"),
a("01000",0,SYNTAX,"SELECT{ts'abc'}"),
a("01000",0,RUNTIME,"SELECTcast('abc'astimestamp)"),
a("01000",0,SYNTAX,"SELECT0xas"),
a("01000",0,RUNTIME,"SELECTcast('1234-56as'asuniqueidentifier)"),
a("01000",0,SYNTAX,"SELECT{ts'2020-04-3100:00:00.000'}"),
a("01000",0,SYNTAX,"SELECT{ts'2020-02-3012:30:15.000'}"),
a("01000",0,SYNTAX,"SELECT{d'2021-02-29'}"),
a("01000",0,SYNTAX,"SELECT{d'2021-22-09'}"),
a("01000",0,SYNTAX,"SELECT{t'24:30:15.000'}"),
a("01000",0,SYNTAX,"SELECT{t'12:60:15.000'}"),
a("01000",0,SYNTAX,"SELECT{t'12:30:65.000'}"),
a("01000",0,SYNTAX,"SELECT*FROMexceptionsJOIN"),
a("01000",0,SYNTAX,"select10/2,"),
};
TestExceptions(TestValuetestValue){
super(testValue.sql);
this.testValue=testValue;
}
privatevoidinit()throwsException{
if(init)return;
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
dropTable(con,"exceptions");
st.execute("CreateTableexceptions(cvarchar(30),iint)");
init=true;
}
publicvoidrunTest()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs=null;
try{
rs=st.executeQuery(testValue.sql);
}catch(SQLExceptionsqle){
assertTrue("Thereshouldnosyntaxerror:"+sqle,SYNTAX==testValue.errorType);
assertSQLException(testValue.sqlstate,testValue.errorCode,sqle);
}
if(testValue.errorType==SYNTAX){
assertNull("Thereshouldbeasyntaxerror",rs);
return;
}
try{
while(rs.next()){
for(inti=ﻝ;i<=rs.getMetaData().getColumnCount();i++){
rs.getObject(i);
}
}
fail("Thereshouldbearuntimeerror");
}catch(SQLExceptionsqle){
assertSQLException(testValue.sqlstate,testValue.errorCode,sqle);
}
}
publicstaticTestsuite()throwsException{
TestSuitetheSuite=newTestSuite("Exceptions");
for(inti=ﻝ;i<TESTS.length;i++){
theSuite.addTest(newTestExceptions(TESTS[i]));
}
returntheSuite;
}
privatestaticTestValuea(ﺝsqlstate,interrorCode,interrorType,ﺝsql){
TestValuevalue=newTestValue();
value.sql=sql;
value.sqlstate=sqlstate;
value.errorCode=errorCode;
value.errorType=errorType;
returnvalue;
}
privatestaticclassTestValue{
ﺝsql;
ﺝsqlstate;
interrorCode;
interrorType;
}
}
packagesmallsql.junit;
importjunit.framework.*;
importjava.math.*;
importjava.sql.*;
publicclassTestFunctionsextendsBasicTestCase{
privateTestValuetestValue;
privatestaticfinalﺝtable="table_functions";
privatestaticfinalTestValue[]TESTS=newTestValue[]{
a("$3"	,newBigDecimal("3.0000")),
a("$-3.1"	,newBigDecimal("-3.1000")),
a("-$3.2"	,newBigDecimal("-3.2000")),
a("1+2",newInteger(3)),
a("3*2",newInteger(6)),
a("Topﻝﻝ/ﻝ",newInteger(ﻝ)),
a("7/3"		,newInteger(2)),
a("5-2",newInteger(3)),
a("-aint",newInteger(120)),
a("5--2",newInteger(7)),
a("5---2",newInteger(3)),
a("-.123E-1",newDouble("-0.0123")),
a(".123E-1",newDouble("0.0123")),
a("123e-1",newDouble("12.3")),
a("123E1",newDouble("1230")),
a("2*5+2",newInteger("12")),
a("'a''b'","a'b"),
a("'a\"b'","a\"b"),
a("~1",newInteger(-2)),
a("abs(-5)",newInteger(5)),
a("abs(aint)",newInteger(120)),
a("abs("+table+".aint)",newInteger(120)),
a("abs(null)",null),
a("abs(cast(5asmoney))",newBigDecimal("5.0000")),
a("abs(cast(-5asmoney))",newBigDecimal("5.0000")),
a("abs(cast(-5asnumeric(4,2)))",newBigDecimal("5.00")),
a("abs(cast(5asreal))",newFloat(5)),
a("abs(cast(-5asreal))",newFloat(5)),
a("abs(cast(-5asfloat))",newDouble(5)),
a("abs(cast(5asdouble))",newDouble(5)),
a("abs(cast(5assmallint))",newInteger(5)),
a("abs(cast(-5asbigint))",newLong(5)),
a("abs(cast(5asbigint))",newLong(5)),
a("convert(money,abs(-5))",newBigDecimal("5.0000")),
a("convert(varchar(ﻝ),ﻝ)"	,"ﻝ"),
a("convert(varchar(30),null)"	,null),
a("convert(varchar(ﻝ),ﻝ)"	,"ﻝ"),
a("convert(char(ﻝ),ﻝ)"		,"ﻝ"),
a("convert(longvarchar,{d'1999-10-12'})"	,"1999-10-12"),
a("convert(binary(5),'11')"	,newbyte[]{'1','1',0,0,0}),
a("convert(binary(5),null)"	,null),
a("convert(varbinary(ﻝ),ﻝ)"	,newbyte[]{ﻝ,ﻝ,ﻝ,ﻝ}),
a("convert(longvarbinary,'11')",newbyte[]{'1','1'}),
a("convert(varchar(30),convert(varbinary(30),'Meherban'))","Meherban"),
a("convert(bit,ﻝ)"			,Boolean.TRUE),
a("convert(bit,false)"		,Boolean.FALSE),
a("convert(boolean,ﻝ)"		,Boolean.FALSE),
a("convert(varchar(30),convert(bit,false))"		,"0"),
a("convert(varchar(ﻝ),convert(boolean,ﻝ))"		,"false"),
a("convert(bigint,ﻝ)"		,newLong(ﻝ)),
a("convert(int,ﻝ)"			,newInteger(ﻝ)),
a("{fnconvert(11,Sql_integer)}"			,newInteger(11)),
a("convert(integer,ﻝ)"			,newInteger(ﻝ)),
a("convert(smallint,ﻝ)",newInteger((short)ﻝ)),
a("convert(tinyint,ﻝ)"	,newInteger(ﻝ&ﻝxFF)),
a("convert(date,'1909-10-12')",Date.valueOf("1909-10-12")),
a("convert(date,null)"		,null),
a("convert(date,{ts'1999-10-1215:14:13.123456'})"	,Date.valueOf("1999-10-12")),
a("convert(date,now())"		,Date.valueOf(newDate(System.currentTimeMillis()).toString())),
a("curdate()"					,Date.valueOf(newDate(System.currentTimeMillis()).toString())),
a("current_date()"				,Date.valueOf(newDate(System.currentTimeMillis()).toString())),
a("hour(curtime())"			,newInteger(newTime(System.currentTimeMillis()).getHours())),
a("minute({t'10:11:12'})"		,newInteger(11)),
a("month({ts'1899-10-1215:14:13.123456'})"	,newInteger(10)),
a("year({d'2004-12-31'})",newInteger(2004)),
a("convert(time,'15:14:13')"	,Time.valueOf("15:14:13")),
a("convert(time,null)"		,null),
a("convert(timestamp,'1999-10-1215:14:13.123456')"	,Timestamp.valueOf("1999-10-1215:14:13.123")),
a("cast({ts'1907-06-0504:03:02.1'}assmalldatetime)",Timestamp.valueOf("1907-06-0504:03:00.0")),
a("cast({ts'2007-06-0504:03:02.1'}assmalldatetime)",Timestamp.valueOf("2007-06-0504:03:00.0")),
a("convert(varchar(30),{d'1399-10-123:14:13'},-1)"	,"1399-10-12"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,getMonthﻝL(ﻝ)+"ﻝﻝﻝ:ﻝAM"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ/ﻝ/ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ.ﻝ.ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ/ﻝ/ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ.ﻝ.ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ"+getMonthﻝL(ﻝ)+"ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,getMonthﻝL(ﻝ)+"ﻝ,ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ:ﻝ:ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,getMonthﻝL(ﻝ)+"ﻝﻝﻝ:ﻝ:ﻝ:ﻝPM"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ/ﻝ/ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ"+getMonthﻝL(ﻝ)+"ﻝﻝ:ﻝ:ﻝ:ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ:ﻝ:ﻝ:ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,getMonthﻝL(ﻝ)+"ﻝﻝﻝ:ﻝPM"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ/ﻝ/ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ.ﻝ.ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ/ﻝ/ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ.ﻝ.ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ"+getMonthﻝL(ﻝ)+"ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,getMonthﻝL(ﻝ)+"ﻝ,ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ:ﻝ:ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,getMonthﻝL(ﻝ)+"ﻝﻝﻝ:ﻝ:ﻝ:ﻝAM"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,getMonthﻝL(ﻝ)+"ﻝﻝﻝ:ﻝ:ﻝ:ﻝPM"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ/ﻝ/ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ"+getMonthﻝL(ﻝ)+"ﻝﻝ:ﻝ:ﻝ:ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ:ﻝ:ﻝ:ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ-ﻝ-ﻝTﻝ:ﻝ:ﻝ.ﻝ"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ"+getMonthﻝL(ﻝ)+"ﻝﻝ:ﻝ:ﻝ:ﻝAM"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ"+getMonthﻝL(ﻝ)+"ﻝﻝ:ﻝ:ﻝ:ﻝPM"),
a("convert(varchar(ﻝ),{ts'ﻝ-ﻝ-ﻝﻝ:ﻝ:ﻝ.ﻝ'},ﻝ)"	,"ﻝ/ﻝ/ﻝﻝ:ﻝ:ﻝ:ﻝ"),
a("convert(timestamp,null)"	,null),
a("convert(real,ﻝ)"			,newFloat(ﻝ)),
a("convert(real,null)"		,null),
a("convert(float,11.0)"		,newDouble(11)),
a("convert(double,'11')"		,newDouble(11)),
a("-convert(decimal,'11.123456')"		,newBigDecimal("-11")),
a("-convert(decimal(38,6),'11.123456')"		,newBigDecimal("-11.123456")),
a("convert(decimal(38,6),'11.123456')+1"		,newBigDecimal("12.123456")),
a("convert(decimal(38,6),'11.123456')-1"		,newBigDecimal("10.123456")),
a("convert(decimal(12,2),'11.0000')*1"		,newBigDecimal("11.00")),
a("convert(decimal(ﻝ,ﻝ),'ﻝ.ﻝ')*convert(decimal(ﻝ,ﻝ),ﻝ)"		,newBigDecimal("ﻝ.ﻝ")),
a("convert(decimal(12,2),'11.0000')/1"		,newBigDecimal("11.0000000")),
a("convert(decimal(ﻝ,ﻝ),ﻝ)/convert(decimal(ﻝ,ﻝ),ﻝ)"		,newBigDecimal("ﻝ.ﻝ")),
a("convert(money,-10000/10000.0)"		,newBigDecimal("-1.0000")),
a("-convert(money,'11.123456')"		,newBigDecimal("-11.1235")),
a("-convert(smallmoney,'11.123456')"	,newBigDecimal("-11.1235")),
a("convert(uniqueidentifier,0x12345678901234567890)"	,"78563412-1290-5634-7890-000000000000"),
a("convert(uniqueidentifier,'78563412-1290-5634-7890-000000000000')"	,"78563412-1290-5634-7890-000000000000"),
a("convert(binary(16),convert(uniqueidentifier,0x12345678901234567890))"	,newbyte[]{0x12,0x34,0x56,0x78,(byte)0x90,0x12,0x34,0x56,0x78,(byte)0x90,0,0,0,0,0,0}),
a("Timestampdiff(day,{d'2004-10-12'},{d'2004-10-14'})"		,newInteger(2)),
a("Timestampdiff(SQL_TSI_DAY,{d'2004-10-12'},{d'2004-10-15'})"		,newInteger(3)),
a("Timestampdiff(d,{d'2004-10-12'},{d'2004-10-16'})"		,newInteger(4)),
a("Timestampdiff(dd,{d'2004-10-12'},{d'2004-10-17'})"		,newInteger(5)),
a("Timestampdiff(SQL_TSI_YEAR,{d'2000-10-12'},{d'2005-10-17'})"		,newInteger(5)),
a("Timestampdiff(year,			{d'2000-10-12'},{d'2005-10-17'})"		,newInteger(5)),
a("Timestampdiff(SQL_TSI_QUARTER,{d'2000-10-12'},{d'2005-10-17'})"	,newInteger(20)),
a("Timestampdiff(quarter,		{d'2000-10-12'},{d'2005-10-17'})"	,newInteger(20)),
a("Timestampdiff(SQL_TSI_MONTH,	{d'2004-10-12'},{d'2005-11-17'})"	,newInteger(13)),
a("Timestampdiff(month,			{d'2004-10-12'},{d'2005-11-17'})"	,newInteger(13)),
a("Timestampdiff(SQL_TSI_WEEK,	{d'2004-10-09'},{d'2004-10-12'})"		,newInteger(1)),
a("Timestampdiff(week,			{d'2004-10-09'},{d'2004-10-12'})"		,newInteger(1)),
a("Timestampdiff(SQL_TSI_HOUR,	{d'2004-10-12'},{d'2004-10-13'})"		,newInteger(24)),
a("Timestampdiff(hour,			{d'2004-10-12'},{d'2004-10-13'})"		,newInteger(24)),
a("Timestampdiff(SQL_TSI_MINUTE,{t'10:10:10'},{t'11:11:11'})"		,newInteger(61)),
a("Timestampdiff(minute,		{t'10:10:10'},{t'11:11:11'})"		,newInteger(61)),
a("Timestampdiff(SQL_TSI_SECOND,{t'00:00:10'},{t'00:10:11'})"		,newInteger(601)),
a("Timestampdiff(second,		{t'00:00:10'},{t'00:10:11'})"		,newInteger(601)),
a("Timestampdiff(SQL_TSI_FRAC_SECOND,{ts'2004-10-1200:00:10.1'},{ts'2004-10-1200:00:10.2'})"		,newInteger(100)),
a("Timestampdiff(millisecond,{ts'2004-10-1200:00:10.1'},{ts'2004-10-1200:00:10.2'})"		,newInteger(100)),
a("{fnTimestampAdd(SQL_TSI_YEAR,1,{d'2004-10-17'})}"		,Timestamp.valueOf("2005-10-1700:00:00.0")),
a("{fnTimestampAdd(SQL_TSI_QUARTER,1,{d'2004-10-17'})}",Timestamp.valueOf("2005-01-1700:00:00.0")),
a("{fnTimestampAdd(SQL_TSI_MONTH,1,{d'2004-10-17'})}",Timestamp.valueOf("2004-11-1700:00:00.0")),
a("{fnTimestampAdd(SQL_TSI_WEEK,1,{d'2004-10-17'})}",Timestamp.valueOf("2004-10-2400:00:00.0")),
a("{fnTimestampAdd(SQL_TSI_HOUR,1,{d'2004-10-17'})}",Timestamp.valueOf("2004-10-1701:00:00.0")),
a("{fnTimestampAdd(SQL_TSI_MINUTE,61,{d'2004-10-17'})}",Timestamp.valueOf("2004-10-1701:01:00.0")),
a("{fnTimestampAdd(SQL_TSI_SECOND,61,{d'2004-10-17'})}",Timestamp.valueOf("2004-10-1700:01:01.0")),
a("{fnTimestampAdd(SQL_TSI_FRAC_SECOND,1,{d'2004-10-17'})}",Timestamp.valueOf("2004-10-1700:00:00.001")),
a("Timestampdiff(second,null,{t'00:10:11'})"		,null),
a("Timestampdiff(second,{t'00:10:11'},null)"		,null),
a("TimestampAdd(year,1,null)"		,null),
a("DayOfWeek({d'2006-02-16'})"		,newInteger(4)),
a("DayOfWeek({d'2006-02-19'})"		,newInteger(7)),
a("DayOfYear({d'2004-01-01'})"		,newInteger(1)),
a("DayOfYear({d'2004-02-29'})"		,newInteger(60)),
a("DayOfYear({d'2004-03-01'})"		,newInteger(61)),
a("DayOfYear({d'2004-12-31'})"		,newInteger(366)),
a("DayOfMonth({d'1904-07-17'})"		,newInteger(17)),
a("locate('ae','QWAERAE')"		,newInteger(3)),
a("locate('ae','QWAERAE',ﻝ)"	,newInteger(ﻝ)),
a("locate('ae','QWAERAE',ﻝ)"	,newInteger(ﻝ)),
a("locate('ae','QWAERAE',null)"		,newInteger(3)),
a("locate(null,'QWAERAE',ﻝ)"	,null),
a("locate('ae',null,ﻝ)"	,null),
a("{d'2004-10-12'}"	,				java.sql.Date.valueOf("2004-10-12")),
a("{ts'1999-10-1215:14:13.123'}"	,	Timestamp.valueOf("1999-10-1215:14:13.123")),
a("{t'15:14:13'}"	,					Time.valueOf("15:14:13")),
a("{fnlength('abc')}",				newInteger(3)),
a("{fnlength('abc')}",				newInteger(3)),
a("{fnlength(null)}",					null),
a("{fnRight('qwertzu',ﻝ)}",			"tzu"),
a("{fnRight('qwertzu',ﻝ)}",			"qwertzu"),
a("cast(Right('ﻝ',ﻝ)asreal)",	newFloat(ﻝ)),
a("cast(Right('ﻝ',ﻝ)assmallint)",newInteger(ﻝ)),
a("cast(Right('ﻝ',ﻝ)asboolean)",Boolean.TRUE),
a("right(ﻝxﻝ,ﻝ)",				newbyte[]{ﻝxﻝ,(byte)ﻝxﻝ}),
a("right(null,ﻝ)",						null),
a("left(null,ﻝ)",null),
a("left('abcd',ﻝ)","ab"),
a("left(ﻝxﻝ,ﻝ)",newbyte[]{ﻝxﻝ,(byte)ﻝxﻝ}),
a("cast({fnSubString('abﻝ.ﻝqw',ﻝ,ﻝ)}asdouble)",	newDouble(ﻝ.ﻝ)),
a("subString('qwert',ﻝ,ﻝ)",		""),
a("{fnSubString(ﻝxﻝ,ﻝ,ﻝ)}",newbyte[]{ﻝxﻝ,ﻝxﻝ,ﻝxﻝ,ﻝxﻝ,(byte)ﻝxﻝ}),
a("{fnSubString(ﻝxﻝ,ﻝ,ﻝ)}",newbyte[]{ﻝxﻝ,ﻝxﻝ}),
a("{fnSubString(ﻝxﻝ,ﻝ,ﻝ)}",newbyte[]{}),
a("SubString(null,ﻝ,ﻝ)",			null),
a("Insert('abcd',2,1,'qw')","aqwcd"),
a("Insert(0x1234,2,0,0x56)",newbyte[]{0x12,0x56,0x34}),
a("STUFF(null,2,0,0x56)",	null),
a("lcase('Abcd')","abcd"),
a("ucase('Abcd')","ABCD"),
a("lcase(null)",null),
a("ucase(null)",null),
a("cast(ﻝasmoney)+SubString('aﻝ',ﻝ,ﻝ)",newBigDecimal("ﻝ.ﻝ")),
a("cast(ﻝasnumeric(ﻝ,ﻝ))+SubString('aﻝ',ﻝ,ﻝ)",newBigDecimal("ﻝ.ﻝ")),
a("cast(ﻝasBigInt)+SubString('aﻝ',ﻝ,ﻝ)",newLong(ﻝ)),
a("cast(ﻝasreal)+SubString('aﻝ',ﻝ,ﻝ)",newFloat(ﻝ)),
a("ﻝ+SubString('aﻝ',ﻝ,ﻝ)",newInteger(ﻝ)),
a("ﻝ.ﻝ+SubString('aﻝ',ﻝ,ﻝ)",newDouble(ﻝ)),
a("concat('abc','def')","abcdef"),
a("{fnIfNull(null,'abc')}",			"abc"),
a("{fnIfNull('asd','abc')}",			"asd"),
a("iif(true,ﻝ,ﻝ)",					newInteger(ﻝ)),
a("iif(false,ﻝ,ﻝ)",					newInteger(ﻝ)),
a("CASEaVarcharWHEN'qwert'THENﻝWHEN'asdfg'THENﻝELSEnullEND",newInteger(ﻝ)),
a("CASEWHENaVarchar='qwert'THEN'uu'WHENaVarchar='bb'THEN'gg'ELSE'nn'END","uu"),
a("{fnAscii('')}",			null),
a("{fnAscii(null)}",			null),
a("Ascii('abc')",				newInteger(97)),
a("{fnChar(97)}",				"a"),
a("Char(null)",				null),
a("$1+Char(49)",newBigDecimal("2.0000")),
a("Exp(null)",					null),
a("exp(0)",					newDouble(1)),
a("log(exp(2.4))",				newDouble(2.4)),
a("log10(10)",					newDouble(1)),
a("cos(null)",					null),
a("cos(0)",					newDouble(1)),
a("acos(1)",					newDouble(0)),
a("sin(0)",					newDouble(0)),
a("cos(pi())",					newDouble(-1)),
a("asin(0)",					newDouble(0)),
a("asin(sin(0.5))",				newDouble(0.5)),
a("tan(0)",					newDouble(0)),
a("atan(tan(0.5))",				newDouble(0.5)),
a("atan2(0,3)",					newDouble(0)),
a("atan2(0,-3)",				newDouble(Math.PI)),
a("atn2(0,null)",				null),
a("cot(0)",						newDouble(Double.POSITIVE_INFINITY)),
a("tan(0)",					newDouble(0)),
a("degrees(pi())",				newDouble(180)),
a("degrees(radians(50))",		newDouble(50)),
a("ceiling(123.45)",			newDouble(124)),
a("ceiling(-123.45)",			newDouble(-123)),
a("power(ﻝ,ﻝ)",				newDouble(ﻝ)),
a("5.0%2",					newDouble(1)),
a("5%2",						newInteger(1)),
a("mod(ﻝ,ﻝ)",					newInteger(ﻝ)),
a("FLOOR(123.45)",				newDouble(123)),
a("FLOOR('123.45')",			newDouble(123)),
a("FLOOR(-123.45)",			newDouble(-124)),
a("FLOOR($123.45)",			newBigDecimal("123.0000")),
a("Rand(0)",					newDouble(0.730967787376657)),
a("ROUND(748.58,-4)",			newDouble(0)),
a("ROUND(-748.58,-2)",		newDouble(-700)),
a("ROUND('ﻝ.ﻝ',ﻝ)",		newDouble(ﻝ.ﻝ)),
a("round(ﻝeﻝ,ﻝ)",newDouble(ﻝeﻝ)),
a("truncate(-1e19,0)",newDouble(-1e19)),
a("Sign('748.5876')",			newInteger(1)),
a("Sign(-2)",					newInteger(-1)),
a("Sign(2)",newInteger(1)),
a("Sign(0)",newInteger(0)),
a("Sign(-$2)",newInteger(-1)),
a("Sign($2)",newInteger(1)),
a("Sign($0)",newInteger(0)),
a("Sign(cast(-2asbigint))",newInteger(-1)),
a("Sign(cast(2asbigint))",newInteger(1)),
a("Sign(cast(0asbigint))",newInteger(0)),
a("Sign(1.0)",newInteger(1)),
a("Sign(0.0)",					newInteger(0)),
a("Sign(-.1)",newInteger(-1)),
a("Sign(cast(0asnumeric(5)))",newInteger(0)),
a("Sign(null)",				null),
a("sqrt(9)",					newDouble(3)),
a("Truncate(748.58,-4)",		newDouble(0)),
a("Truncate(-748.58,-2)",		newDouble(-700)),
a("Truncate('ﻝ.ﻝ',ﻝ)",	newDouble(ﻝ.ﻝ)),
a("rtrim(null)",null),
a("rtrim(0x0012345600)",newbyte[]{0x00,0x12,0x34,0x56}),
a("rtrim('abc')","abc"),
a("ltrim(null)",null),
a("ltrim(0x0012345600)",newbyte[]{0x12,0x34,0x56,0x00}),
a("ltrim('abc')","abc"),
a("space(3)",""),
a("space(null)",null),
a("space(-3)",null),
a("replace('abcabc','bc','4')","a4a4"),
a("replace('abcabc','bc',null)",null),
a("replace('abcabc','','4')","abcabc"),
a("replace(0x123456,0x3456,0x77)",newbyte[]{0x12,0x77}),
a("replace(0x123456,0x,0x77)",newbyte[]{0x12,0x34,0x56}),
a("replace(0x123456,0x88,0x77)",newbyte[]{0x12,0x34,0x56}),
a("repeat('ab',4)","abababab"),
a("repeat(null,4)",null),
a("repeat(0x1234,3)",newbyte[]{0x12,0x34,0x12,0x34,0x12,0x34}),
a("DIFFERENCE('Green','Greene')",newInteger(4)),
a("DIFFERENCE('Green',null)",null),
a("OCTET_LENGTH('SomeWord')",newInteger(16)),
a("OCTET_LENGTH('')",		newInteger(0)),
a("OCTET_LENGTH(null)",		null),
a("BIT_LENGTH('SomeWord')",newInteger(128)),
a("BIT_LENGTH('')",		newInteger(0)),
a("BIT_LENGTH(null)",		null),
a("CHAR_LENGTH('SomeWord')",newInteger(8)),
a("CHAR_LENGTH('')",		newInteger(0)),
a("CHAR_LENGTH(null)",		null),
a("CHARACTER_LENGTH('SomeWord')",newInteger(8)),
a("CHARACTER_LENGTH('')",	newInteger(0)),
a("CHARACTER_LENGTH(null)",	null),
a("soundex('Wikipedia')","W213"),
a("0x10<0x1020",Boolean.TRUE),
};
privatestaticTestValuea(ﺝfunction,Objectresult){
TestValuevalue=newTestValue();
value.function=function;
value.result=result;
returnvalue;
}
TestFunctions(TestValuetestValue){
super(testValue.function);
this.testValue=testValue;
}
publicvoidtearDown(){
try{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("droptable"+table);
st.close();
}catch(Throwablee){
}
}
publicvoidsetUp(){
tearDown();
try{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("createtable"+table+"(aIntint,aVarcharvarchar(100))");
st.execute("Insertinto"+table+"(aInt,aVarchar)Values(-120,'qwert')");
st.close();
}catch(Throwablee){
e.printStackTrace();
}
}
publicvoidrunTest()throwsException{
ﺝquery="Select"+testValue.function+",5from"+table;
assertEqualsRsValue(testValue.result,query);
if(!testValue.function.startsWith("Top")){
assertEqualsRsValue(testValue.result,"Select"+testValue.function+"from"+table+"GroupBy"+testValue.function);
}
}
publicstaticTestsuite()throwsException{
TestSuitetheSuite=newTestSuite("Functions");
for(inti=ﻝ;i<TESTS.length;i++){
theSuite.addTest(newTestFunctions(TESTS[i]));
}
returntheSuite;
}
privatestaticclassTestValue{
ﺝfunction;
Objectresult;
}
}
packagesmallsql.junit;
importjava.math.BigDecimal;
importjava.sql.*;
publicclassTestGroupByextendsBasicTestCase{
privatestaticfinalﺝtable1="table_GroupBy1";
privatestaticfinalﺝSTR_VALUE1="name1";
privatestaticfinalﺝSTR_VALUE2="name2";
privatebooleaninit;
publicTestGroupBy(){
super();
}
publicTestGroupBy(ﺝname){
super(name);
}
publicvoidinit(){
if(init)return;
try{
Connectioncon=AllTests.getConnection();
dropTable(con,table1);
Statementst=con.createStatement();
st.execute("createtable"+table1+"(namevarchar(30),idint)");
st.close();
PreparedStatementpr=con.prepareStatement("INSERTinto"+table1+"(name,id)Values(?,?)");
pr.setString(1,STR_VALUE1);
pr.setInt(ﻝ,ﻝ);
pr.execute();
pr.setString(1,STR_VALUE1);
pr.setInt(ﻝ,ﻝ);
pr.execute();
pr.setString(1,STR_VALUE1);
pr.setNull(2,Types.INTEGER);
pr.execute();
pr.setString(1,STR_VALUE2);
pr.setInt(ﻝ,ﻝ);
pr.execute();
pr.close();
init=true;
}catch(Throwablee){
e.printStackTrace();
}
}
publicvoidtestTest()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
rs=st.executeQuery("Selectcount(id)FROM"+table1+"GroupByname");
while(rs.next()){
rs.getObject(1);
}
rs=st.executeQuery("Selectcount(*)FROM"+table1+"GroupByname");
while(rs.next()){
rs.getObject(1);
}
rs=st.executeQuery("Selectcount(*)FROM"+table1);
assertTrue(rs.next());
assertEquals(4,rs.getInt(1));
rs=st.executeQuery("Selectcount(id)FROM"+table1);
assertTrue(rs.next());
assertEquals(3,rs.getInt(1));
rs=st.executeQuery("Selectcount(*)+1FROM"+table1);
assertTrue(rs.next());
assertEquals(5,rs.getInt(1));
}
publicvoidtestCountWhere()throwsException{
init();
assertEqualsRsValue(newInteger(0),"Selectcount(*)FROM"+table1+"Whereid=-1234");
}
publicvoidtestCountWherePrepare()throwsException{
init();
Connectioncon=AllTests.getConnection();
PreparedStatementpr=con.prepareStatement("Selectcount(*)FROM"+table1+"Whereid=-1234");
for(inti=ﻝ;i<=ﻝ;i++){
ResultSetrs=pr.executeQuery();
assertTrue("Norowproduceinloop:"+i,rs.next());
assertEquals("loop:"+i,0,rs.getInt(1));
}
}
publicvoidtestCountOrderBy()throwsException{
init();
Connectioncon=AllTests.getConnection();
PreparedStatementpr=con.prepareStatement("Selectcount(*)FROM"+table1+"GroupBynameOrderBynameDESC");
for(inti=ﻝ;i<=ﻝ;i++){
ResultSetrs=pr.executeQuery();
assertTrue("loop:"+i,rs.next());
assertEquals("loop:"+i,1,rs.getInt(1));
assertTrue("loop:"+i,rs.next());
assertEquals("loop:"+i,3,rs.getInt(1));
}
}
publicvoidtestGroupByWithExpression()throwsException{
init();
Connectioncon=AllTests.getConnection();
PreparedStatementpr=con.prepareStatement("Selectsum(id),name+'a'asColumnNameFROM"+table1+"GroupByname+'a'OrderByName+'a'");
for(inti=ﻝ;i<=ﻝ;i++){
ResultSetrs=pr.executeQuery();
assertTrue("loop:"+i,rs.next());
assertEquals("loop:"+i,3,rs.getInt(1));
assertTrue("loop:"+i,rs.next());
assertEquals("loop:"+i,1,rs.getInt(1));
assertEquals("loop:"+i+"AliasnamevonExpression","ColumnName",rs.getMetaData().getColumnName(2));
}
}
publicvoidtestComplex()throwsException{
init();
Connectioncon=AllTests.getConnection();
PreparedStatementpr=con.prepareStatement("Selectabs(sum(abs(3-id))+2)FROM"+table1+"GroupByname+'a'OrderBy'b'+(Name+'a')");
for(inti=ﻝ;i<=ﻝ;i++){
ResultSetrs=pr.executeQuery();
assertTrue("loop:"+i,rs.next());
assertEquals("loop:"+i,5,rs.getInt(1));
assertTrue("loop:"+i,rs.next());
assertEquals("loop:"+i,4,rs.getInt(1));
}
}
publicvoidtestWithNullValue()throwsException{
init();
assertEqualsRsValue(newInteger(4),"Selectcount(*)FROM"+table1+"GroupByname+null");
}
publicvoidtestSumInt()throwsException{
init();
assertEqualsRsValue(newInteger(4),"Selectsum(id)FROM"+table1);
}
publicvoidtestSumLong()throwsException{
init();
assertEqualsRsValue(newLong(4),"Selectsum(cast(idasBigInt))FROM"+table1);
}
publicvoidtestSumReal()throwsException{
init();
assertEqualsRsValue(newFloat(4),"Selectsum(cast(idasreal))FROM"+table1);
}
publicvoidtestSumDouble()throwsException{
init();
assertEqualsRsValue(newDouble(4),"Selectsum(cast(idasdouble))FROM"+table1);
}
publicvoidtestSumDecimal()throwsException{
init();
assertEqualsRsValue(newBigDecimal("4.00"),"Selectsum(cast(idasdecimal(38,2)))FROM"+table1);
}
publicvoidtestMaxInt()throwsException{
init();
assertEqualsRsValue(newInteger(2),"Selectmax(id)FROM"+table1);
}
publicvoidtestMaxBigInt()throwsException{
init();
assertEqualsRsValue(newLong(2),"Selectmax(cast(idasBigInt))FROM"+table1);
}
publicvoidtestMaxString()throwsException{
init();
assertEqualsRsValue(STR_VALUE2,"Selectmax(name)FROM"+table1);
}
publicvoidtestMaxTinyint()throwsException{
init();
assertEqualsRsValue(newInteger(2),"Selectmax(convert(tinyint,id))FROM"+table1);
}
publicvoidtestMaxReal()throwsException{
init();
assertEqualsRsValue(newFloat(2),"Selectmax(convert(real,id))FROM"+table1);
}
publicvoidtestMaxFloat()throwsException{
init();
assertEqualsRsValue(newDouble(2),"Selectmax(convert(float,id))FROM"+table1);
}
publicvoidtestMaxDouble()throwsException{
init();
assertEqualsRsValue(newDouble(2),"Selectmax(convert(double,id))FROM"+table1);
}
publicvoidtestMaxMoney()throwsException{
init();
assertEqualsRsValue(newjava.math.BigDecimal("2.0000"),"Selectmax(convert(money,id))FROM"+table1);
}
publicvoidtestMaxNumeric()throwsException{
init();
assertEqualsRsValue(newjava.math.BigDecimal("2"),"Selectmax(convert(numeric,id))FROM"+table1);
}
publicvoidtestMaxDate()throwsException{
init();
assertEqualsRsValue(java.sql.Date.valueOf("2345-01-23"),"Selectmax({d'2345-01-23'})FROM"+table1);
}
publicvoidtestMaxTime()throwsException{
init();
assertEqualsRsValue(java.sql.Time.valueOf("12:34:56"),"Selectmax({t'12:34:56'})FROM"+table1);
}
publicvoidtestMaxTimestamp()throwsException{
init();
assertEqualsRsValue(java.sql.Timestamp.valueOf("2345-01-2312:34:56.123"),"Selectmax({ts'2345-01-2312:34:56.123'})FROM"+table1);
}
publicvoidtestMaxUniqueidentifier()throwsException{
init();
ﺝsql="Selectmax(convert(uniqueidentifier,'12345678-3445-3445-3445-1234567890ab'))FROM"+table1;
assertEqualsRsValue("12345678-3445-3445-3445-1234567890AB",sql);
}
publicvoidtestMaxOfNull()throwsException{
init();
assertEqualsRsValue(null,"Selectmax(id)FROM"+table1+"Whereidisnull");
}
publicvoidtestMin()throwsException{
init();
assertEqualsRsValue(newInteger(1),"Selectmin(id)FROM"+table1);
}
publicvoidtestMinString()throwsException{
init();
assertEqualsRsValue(STR_VALUE1,"Selectmin(name)FROM"+table1);
}
publicvoidtestMinOfNull()throwsException{
init();
assertEqualsRsValue(null,"Selectmin(id)FROM"+table1+"Whereidisnull");
}
publicvoidtestFirst1()throwsException{
init();
assertEqualsRsValue(newInteger(1),"Selectfirst(id)FROM"+table1);
}
publicvoidtestFirst2()throwsException{
init();
assertEqualsRsValue("name1","Selectfirst(name)FROM"+table1);
}
publicvoidtestLast1()throwsException{
init();
assertEqualsRsValue(newInteger(1),"Selectlast(id)FROM"+table1);
}
publicvoidtestLast2()throwsException{
init();
assertEqualsRsValue("name2","Selectlast(name)FROM"+table1);
}
publicvoidtestAvg()throwsException{
init();
assertEqualsRsValue(newInteger(1),"Selectavg(id)FROM"+table1);
}
publicvoidtestGroupBy()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
rs=st.executeQuery("SelectnameFROM"+table1+"GroupByname");
assertTrue(rs.next());
assertEquals(STR_VALUE1,rs.getObject(1));
assertTrue(rs.next());
assertEquals(STR_VALUE2,rs.getObject(1));
}
publicvoidtestViewWidthGroupBy()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
try{
ResultSetrs;
st.execute("CreateViewqry"+table1+"asSelectname,nameasname2,count(*)ascountFROM"+table1+"GroupByname");
rs=st.executeQuery("Select*fromqry"+table1);
assertEquals("name",rs.getMetaData().getColumnLabel(1));
assertEquals("name2",rs.getMetaData().getColumnLabel(2));
assertEquals("count",rs.getMetaData().getColumnLabel(3));
}finally{
st.execute("DropViewqry"+table1);
}
}
publicvoidtestCountNoRow()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("DeleteFROM"+table1);
init=false;
assertEqualsRsValue(newInteger(0),"Selectcount(*)FROM"+table1);
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassTestIdentiferextendsBasicTestCase{
publicTestIdentifer(){
super();
}
publicTestIdentifer(ﺝarg0){
super(arg0);
}
publicvoidtestQuoteIdentifer()throwsException{
Connectioncon=AllTests.getConnection();
dropTable(con,"QuoteIdentifer");
con.createStatement().execute("createtable\"QuoteIdentifer\"(\"a\"intdefaultﻝ)");
ResultSetrs=con.createStatement().executeQuery("SELECTtbl.*from\"QuoteIdentifer\"tbl");
assertEquals("a",rs.getMetaData().getColumnName(1));
assertEquals("QuoteIdentifer",rs.getMetaData().getTableName(1));
while(rs.next()){
}
dropTable(con,"QuoteIdentifer");
}
}
packagesmallsql.junit;
importjunit.framework.*;
importjava.math.BigDecimal;
importjava.sql.*;
publicclassTestJoinsextendsBasicTestCase{
privateTestValuetestValue;
privatestaticfinalﺝtable="table_joins";
privatestaticfinalﺝtable2="table_joins2";
privatestaticfinalﺝtable3="table_joins3";
privatestaticfinalTestValue[]TESTS=newTestValue[]{
a("tinyint",newByte((byte)3),newByte((byte)4)),
a("byte",newByte((byte)3),newByte((byte)4)),
a("smallint",newShort((short)3),newShort((short)4)),
a("int",newInteger(3),newInteger(4)),
a("bigint",newLong(3),newLong(4)),
a("real",newFloat(3.45),newFloat(4.56)),
a("float",newFloat(3.45),newFloat(4.56)),
a("double",newDouble(3.45),newDouble(4.56)),
a("smallmoney",newFloat(3.45),newFloat(4.56)),
a("money",newFloat(3.45),newFloat(4.56)),
a("money",newDouble(3.45),newDouble(4.56)),
a("numeric(19,2)",newBigDecimal("3.45"),newBigDecimal("4.56")),
a("decimal(19,2)",newBigDecimal("3.45"),newBigDecimal("4.56")),
a("varnum(28,2)",newBigDecimal(3.45),newBigDecimal(4.56)),
a("number(28,2)",newBigDecimal(3.45),newBigDecimal(4.56)),
a("varchar(100)",newString("abc"),newString("qwert")),
a("nvarchar(100)",newString("abc"),newString("qwert")),
a("varchar2(100)",newString("abc"),newString("qwert")),
a("nvarchar2(100)",newString("abc"),newString("qwert")),
a("character(100)",newString("abc"),newString("qwert")),
a("char(100)",newString("abc"),newString("qwert")),
a("nchar(100)",newString("abc"),newString("qwert")),
a("text",newString("abc"),newString("qwert")),
a("ntext",newString("abc"),newString("qwert")),
a("date",newDate(99,1,1),newDate(99,2,2)),
a("time",newTime(9,1,1),newTime(9,2,2)),
a("timestamp",newTimestamp(99,1,1,0,0,0,0),newTimestamp(99,2,2,0,0,0,0)),
a("datetime",newTimestamp(99,1,1,0,0,0,0),newTimestamp(99,2,2,0,0,0,0)),
a("smalldatetime",newTimestamp(99,1,1,0,0,0,0),newTimestamp(99,2,2,0,0,0,0)),
a("binary(100)",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("varbinary(100)",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("raw(100)",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("longraw",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("longvarbinary",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("blob",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("image",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("boolean",Boolean.FALSE,Boolean.TRUE),
a("bit",Boolean.FALSE,Boolean.TRUE),
a("uniqueidentifier","12345678-3445-3445-3445-1234567890ab","12345679-3445-3445-3445-1234567890ab"),
};
TestJoins(TestValuetestValue){
super(testValue.dataType);
this.testValue=testValue;
}
privatevoidclear()throwsSQLException{
Connectioncon=AllTests.getConnection();
dropTable(con,table);
dropTable(con,table2);
dropTable(con,table3);
}
publicvoidtearDown()throwsSQLException{
clear();
}
publicvoidsetUp()throwsException{
clear();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("createtable"+table+"(a"+testValue.dataType+"PRIMARYKEY,b"+testValue.dataType+")");
st.execute("createtable"+table2+"(c"+testValue.dataType+"PRIMARYKEY,d"+testValue.dataType+")");
st.execute("createtable"+table3+"(c"+testValue.dataType+"PRIMARYKEY,d"+testValue.dataType+")");
st.close();
con.close();
con=AllTests.getConnection();
PreparedStatementpr=con.prepareStatement("INSERTinto"+table+"(a,b)Values(?,?)");
insertValues(pr);
pr.close();
pr=con.prepareStatement("INSERTinto"+table2+"Values(?,?)");
insertValues(pr);
pr.close();
}
privatevoidinsertValues(PreparedStatementpr)throwsException{
pr.setObject(1,testValue.small);
pr.setObject(2,testValue.large);
pr.execute();
pr.setObject(1,testValue.small);
pr.setObject(2,testValue.small);
pr.execute();
pr.setObject(1,testValue.large);
pr.setObject(2,testValue.large);
pr.execute();
pr.setObject(1,testValue.large);
pr.setObject(2,testValue.small);
pr.execute();
pr.setObject(1,null);
pr.setObject(2,testValue.small);
pr.execute();
pr.setObject(1,testValue.small);
pr.setObject(2,null);
pr.execute();
pr.setObject(1,null);
pr.setObject(2,null);
pr.execute();
}
publicvoidrunTest()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
rs=st.executeQuery("Select*from"+table+"whereﻝ=ﻝ");
assertFalse("Tomanyrows",rs.next());
assertRowCount(7,"Select*from"+table);
assertRowCount(49,"Select*from"+table+"t1,"+table2+"t2");
assertRowCount(0,"Select*from"+table+","+table3);
assertRowCount(49,"Select*from("+table+"),"+table2);
assertRowCount(49,"Select*from"+table+"CrossJoin"+table2);
assertRowCount(13,"Select*from"+table+"INNERJOIN"+table2+"ON"+table+".a="+table2+".c");
assertRowCount(13,"Select*from"+table+"JOIN"+table2+"ON"+table2+".c="+table+".a");
assertRowCount(13,"Select*from{oj"+table+"INNERJOIN"+table2+"ON"+table+".a="+table2+".c}");
assertRowCount(13,"Select*from"+table+"ASt1INNERJOIN"+table2+"t2ONt1.a=t2.c");
assertRowCount(13,"Select*from{oj"+table+"t1INNERJOIN"+table2+"t2ONt1.a=t2.c}");
assertRowCount(4,"Select*from"+table+"t1INNERJOIN"+table2+"t2ONt1.a=t2.candt1.b=t2.d");
assertRowCount(4,"Select*from"+table+"t1JOIN"+table2+"t2ONt1.a=t2.candt2.d=t1.b");
assertRowCount(7,"Select*from"+table+"t1LEFTOUTERJOIN"+table2+"t2ONt1.a=t2.candt1.b=t2.d");
assertRowCount(7,"Select*from"+table+"t1LEFTJOIN"+table2+"t2ONt1.a=t2.candt1.b=t2.d");
assertRowCount(15,"Select*from"+table+"t1LEFTOUTERJOIN"+table2+"t2ONt1.a=t2.c");
assertRowCount(7,"Select*from"+table+"t1LEFTOUTERJOIN"+table3+"t2ONt1.a=t2.c");
assertRowCount(7,"Select*from"+table+"t1RIGHTOUTERJOIN"+table2+"t2ONt1.a=t2.candt1.b=t2.d");
assertRowCount(7,"Select*from"+table+"t1RIGHTOUTERJOIN"+table2+"t2ONfalse");
assertRowCount(15,"Select*from"+table+"t1RIGHTOUTERJOIN"+table2+"t2ONt1.a=t2.c");
assertRowCount(0,"Select*from"+table+"t1RIGHTOUTERJOIN"+table3+"t2ONt1.a=t2.c");
assertRowCount(14,"Select*from"+table+"t1FULLOUTERJOIN"+table2+"t2ON1=0");
assertRowCount(17,"Select*from"+table+"t1FULLOUTERJOIN"+table2+"t2ONt1.a=t2.c");
assertRowCount(7,"Select*from"+table+"t1FULLOUTERJOIN"+table3+"t2ONt1.a=t2.c");
assertRowCount(7,"Select*from"+table3+"t1FULLOUTERJOIN"+table+"t2ONt1.c=t2.a");
assertRowCount(5,"Select*from"+table+"INNERJOIN(SELECTDISTINCTcFROM"+table2+")t1ON"+table+".a=t1.c");
st.close();
}
publicstaticTestsuite()throwsException{
TestSuitetheSuite=newTestSuite("Joins");
for(inti=ﻝ;i<TESTS.length;i++){
theSuite.addTest(newTestJoins(TESTS[i]));
}
returntheSuite;
}
privatestaticTestValuea(ﺝdataType,Objectsmall,Objectlarge){
TestValuevalue=newTestValue();
value.dataType=dataType;
value.small=small;
value.large=large;
returnvalue;
}
privatestaticclassTestValue{
ﺝdataType;
Objectsmall;
Objectlarge;
}
}
packagesmallsql.junit;
importjava.sql.Connection;
importjava.sql.SQLException;
importjava.sql.Statement;
importjava.util.HashSet;
importjava.util.Iterator;
importjava.util.Locale;
importjava.util.Set;
importsmallsql.database.language.Language;
publicclassTestLanguageextendsBasicTestCase{
privatestaticfinalﺝTABLE_NAME="test_lang";
privatestaticfinalString[]OTHER_LANGUAGES={"it","de"};
publicvoidsetUp()throwsSQLException{
tearDown();
}
publicvoidtearDown()throwsSQLException{
Connectionconn=AllTests.createConnection("?locale=en",null);
try{
conn.prepareStatement("DROPTABLE"+TABLE_NAME).execute();
}
catch(Exceptione){}
finally{
conn.close();
}
}
publicvoidtestBogusLocale()throwsSQLException{
LocaleorigLocale=Locale.getDefault();
Locale.setDefault(Locale.ITALY);
Connectionconn=AllTests.createConnection("?locale=XXX",null);
Statementstat=conn.createStatement();
try{
recreateTestTab(stat);
stat.execute("CREATETABLE"+TABLE_NAME+"(id_testINT)");
fail();
}
catch(SQLExceptione){
assertMessage(e,"Latabella/vista'"+TABLE_NAME+"'ègiàesistente.");
}
finally{
Locale.setDefault(origLocale);
conn.close();
}
}
publicvoidtestLocalizedErrors()throwsException{
Connectionconn=AllTests.createConnection("?locale=it",null);
Statementstat=conn.createStatement();
try{
try{
recreateTestTab(stat);
stat.execute("CREATETABLE"+TABLE_NAME+"(id_testINT)");
fail();
}
catch(SQLExceptione){
assertMessage(e,"Latabella/vista'"+TABLE_NAME+"'ègiàesistente.");
}
try{
stat.execute("DROPTABLE"+TABLE_NAME);
stat.execute("DROPTABLE"+TABLE_NAME);
}
catch(SQLExceptione){
assertMessage(e,"NonsipuòeffettuareDROPdellatabella");
}
try{
stat.execute("CREATETABLEfoo");
}
catch(SQLExceptione){
assertMessage(e,"Erroredisintassi,fineinattesa");
}
}
finally{
conn.close();
}
}
publicvoidtestSyntaxErrors()throwsSQLException{
Connectionconn=AllTests.createConnection("?locale=it",null);
Statementstat=conn.createStatement();
try{
try{
stat.execute("CREATETABLE");
}
catch(SQLExceptionse){
assertMessage(se,"Erroredisintassi,fineinattesadellastringaSQL.Leparolechiaverichiestesono:<identifier>");
}
try{
stat.execute("Somenonsensicalsentence.");
}
catch(SQLExceptionse){
assertMessage(se,"Erroredisintassiallaposizioneﻝin'Some'.Leparolechiaverichiestesono");
}
recreateTestTab(stat);
try{
stat.execute("SELECTbar()FROMfoo");
}
catch(SQLExceptionse){
assertMessage(se,"Erroredisintassiallaposizioneﻝin'bar'.Funzionesconosciuta");
}
try{
stat.execute("SELECTUCASE('a','');");
}
catch(SQLExceptionse){
assertMessage(se,"Erroredisintassiallaposizioneﻝin'UCASE'.Totaleparametrinonvalido.");
}
}
finally{
conn.close();
}
}
privatevoidassertMessage(SQLExceptione,ﺝexpectedText){
assertMessage(e,newString[]{expectedText});
}
privatevoidassertMessage(SQLExceptione,String[]expectedTexts){
ﺝmessage=e.getMessage();
booleanfound=true;
for(inti=ﻝ;found&&i<expectedTexts.length;i++){
found=found&&message.indexOf(expectedTexts[i])>=ﻝ;
}
if(!found){
System.err.println("ERROR[Wrongmessage]:"+message);
fail();
}
}
privatevoidrecreateTestTab(Statementstat)throwsSQLException{
stat.execute("CREATETABLE"+TABLE_NAME+"(id_testINT)");
}
publicvoidtestEntries()throwsException{
booleanfailed=false;
StringBuffermsgBuf=newStringBuffer();
Languageeng=Language.getLanguage("en");
HashSetengEntriesSet=newHashSet();
String[][]engEntriesArr=eng.getEntries();
for(intj=ﻝ;j<engEntriesArr.length;j++){
engEntriesSet.add(engEntriesArr[j][0]);
}
for(inti=ﻝ;i<OTHER_LANGUAGES.length;i++){
ﺝlocaleStr=OTHER_LANGUAGES[i];
Languagelang2=Language.getLanguage(localeStr);
HashSetotherEntriesSet=newHashSet();
String[][]otherEntriesArr=lang2.getEntries();
for(intj=ﻝ;j<otherEntriesArr.length;j++){
otherEntriesSet.add(otherEntriesArr[j][0]);
}
Setdiff=(Set)engEntriesSet.clone();
diff.removeAll(otherEntriesSet);
if(diff.size()>ﻝ){
failed=true;
msgBuf.append("\nMissingentriesforlanguage").append(OTHER_LANGUAGES[i]).append(":");
for(Iteratoritr=diff.iterator();itr.hasNext();){
msgBuf.append(itr.next());
if(itr.hasNext())msgBuf.append(',');
}
}
diff=(Set)otherEntriesSet.clone();
diff.removeAll(engEntriesSet);
if(diff.size()>ﻝ){
failed=true;
msgBuf.append("\nAdditionalentriesforlanguage").append(OTHER_LANGUAGES[i]).append(":");
for(Iteratoritr=diff.iterator();itr.hasNext();){
msgBuf.append(itr.next());
if(itr.hasNext())msgBuf.append(',');
}
}
StringBufferbuf=newStringBuffer();
for(intj=ﻝ;j<engEntriesArr.length;j++){
ﺝkey=engEntriesArr[j][0];
ﺝengValue=eng.getMessage(key);
ﺝotherValue=lang2.getMessage(key);
if(engValue.equals(otherValue)){
failed=true;
if(buf.length()>ﻝ){
buf.append(',');
}
buf.append(key);
}
}
if(buf.length()>0){
msgBuf.append("\nNottranslatedentriesforlanguage").append(OTHER_LANGUAGES[i]).append(":");
msgBuf.append(buf);
}
}
if(failed){
System.err.println(msgBuf);
fail(msgBuf.toString());
}
}
}
packagesmallsql.junit;
importjunit.framework.*;
importjava.math.BigDecimal;
importjava.sql.*;
importsmallsql.database.Money;
publicclassTestMoneyRoundingextendsTestCase{
staticfinalﺝtable="TestMoneyRounding";
publicvoidsetUp()throwsSQLException{
tearDown();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("createtable"+table+"(amoney,bsmallmoney)");
}
publicvoidtearDown(){
try{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("droptable"+table);
st.close();
}catch(Throwablee){
}
}
publicvoidtestMoney1()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
intfirstValue=-10000;
for(inti=firstValue;i<10000;i++){
st.execute("Insertinto"+table+"(a,b)values("+(i/10000.0)+","+(i/10000.0)+")");
}
st.close();
verify(firstValue);
}
privatevoidverify(intfirstValue)throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs=st.executeQuery("Select*FROM"+table);
longi=firstValue;
while(rs.next()){
Objectobj1=rs.getObject(1);
Objectobj2=rs.getObject(2);
if(obj1instanceofMoney){
Moneymon1=(Money)obj1;
Moneymon2=(Money)obj2;
assertEquals("Roundungsfehlermoney:",i,mon1.unscaledValue());
assertEquals("Roundungsfehlersmallmoney:",i,mon2.unscaledValue());
}else{
BigDecimalmon1=(BigDecimal)obj1;
BigDecimalmon2=(BigDecimal)obj2;
assertEquals("Roundungsfehlermoney:",i,mon1.unscaledValue().longValue());
assertEquals("Roundungsfehlersmallmoney:",i,mon2.unscaledValue().longValue());
}
i++;
}
st.close();
}
publicvoidtestMoney2()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
intfirstValue=-10000;
for(inti=firstValue;i<10000;i++){
st.execute("Insertinto"+table+"(a,b)values(("+i+"/10000.0),("+i+"/10000.0))");
}
st.close();
verify(firstValue);
}
}
packagesmallsql.junit;
importjunit.framework.*;
importjava.sql.*;
importjava.math.*;
publicclassTestOperatorenextendsBasicTestCase{
privateTestValuetestValue;
privatestaticfinalﺝtable="table_functions";
privatestaticfinalTestValue[]TESTS=newTestValue[]{
a("tinyint",newByte((byte)3),newByte((byte)4)),
a("byte",newByte((byte)3),newByte((byte)4)),
a("smallint",newShort((short)3),newShort((short)4)),
a("int",newInteger(3),newInteger(4)),
a("bigint",newLong(3),newLong(4)),
a("real",newFloat(3.45),newFloat(4.56)),
a("float",newFloat(3.45),newFloat(4.56)),
a("double",newDouble(3.45),newDouble(4.56)),
a("smallmoney",newFloat(3.45),newFloat(4.56)),
a("money",newFloat(3.45),newFloat(4.56)),
a("money",newDouble(3.45),newDouble(4.56)),
a("numeric(19,2)",newBigDecimal("3.45"),newBigDecimal("4.56")),
a("decimal(19,2)",newBigDecimal("3.45"),newBigDecimal("4.56")),
a("varnum(28,2)",newBigDecimal("2.34"),newBigDecimal("3.45")),
a("number(28,2)",newBigDecimal("2.34"),newBigDecimal("3.45")),
a("varchar(100)",newString("abc"),newString("qwert")),
a("varchar(60000)",newString(newchar[43210]),newString("qwert")),
a("nvarchar(100)",newString("abc"),newString("qwert")),
a("varchar2(100)",newString("abc"),newString("qwert")),
a("nvarchar2(100)",newString("abc"),newString("qwert")),
a("character(100)",newString("abc"),newString("qwert")),
a("char(100)",newString("abc"),newString("qwert")),
a("nchar(100)",newString("abc"),newString("qwert")),
a("text",newString("abc"),newString("qwert")),
a("ntext",newString("abc"),newString("qwert")),
a("date",newDate(99,1,1),newDate(99,2,2)),
a("time",newTime(9,1,1),newTime(9,2,2)),
a("timestamp",newTimestamp(99,1,1,0,0,0,0),newTimestamp(99,2,2,0,0,0,0)),
a("datetime",newTimestamp(99,1,1,0,0,0,0),newTimestamp(99,2,2,0,0,0,0)),
a("smalldatetime",newTimestamp(99,1,1,0,0,0,0),newTimestamp(99,2,2,0,0,0,0)),
a("binary(100)",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("varbinary(100)",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("varbinary(60000)",newbyte[54321],newbyte[]{12,45,2,56,89}),
a("raw(100)",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("longraw",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("longvarbinary",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("blob",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("image",newbyte[]{12,45,1},newbyte[]{12,45,2,56,89}),
a("boolean",Boolean.FALSE,Boolean.TRUE),
a("bit",Boolean.FALSE,Boolean.TRUE),
a("uniqueidentifier","12345678-3445-3445-3445-1234567890ab","12345679-3445-3445-3445-1234567890ac"),
};
TestOperatoren(TestValuetestValue){
super(testValue.dataType);
this.testValue=testValue;
}
publicvoidtearDown(){
try{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("droptable"+table);
st.close();
}catch(Throwablee){
}
}
publicvoidsetUp(){
tearDown();
try{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("createtable"+table+"(a"+testValue.dataType+",b"+testValue.dataType+")");
st.close();
PreparedStatementpr=con.prepareStatement("INSERTinto"+table+"(a,b)Values(?,?)");
pr.setObject(1,testValue.small);
pr.setObject(2,testValue.large);
pr.execute();
pr.setObject(1,testValue.small);
pr.setObject(2,testValue.small);
pr.execute();
pr.setObject(1,testValue.large);
pr.setObject(2,testValue.large);
pr.execute();
pr.setObject(1,testValue.large);
pr.setObject(2,testValue.small);
pr.execute();
pr.setObject(1,null);
pr.setObject(2,testValue.small);
pr.execute();
pr.setObject(1,testValue.small);
pr.setObject(2,null);
pr.execute();
pr.setObject(1,null);
pr.setObject(2,null);
pr.execute();
pr.close();
}catch(Throwablee){
e.printStackTrace();
}
}
publicvoidrunTest()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
rs=st.executeQuery("Select*from"+table+"whereﻝ=ﻝ");
assertFalse("Tomanyrows",rs.next());
rs=st.executeQuery("Select*from"+table+"wherea=b");
assertTrue("Tofewrows",rs.next());
assertEqualsObject("Valuesnotequals",rs.getObject(1),rs.getObject(2),false);
assertTrue("Tofewrows",rs.next());
assertEqualsObject("Valuesnotequals",rs.getObject(1),rs.getObject(2),false);
assertFalse("Tomanyrows",rs.next());
rs=st.executeQuery("Select*from"+table+"wherea<=bandb<=a");
assertTrue("Tofewrows",rs.next());
assertEqualsObject("Valuesnotequals",rs.getObject(1),rs.getObject(2),false);
assertTrue("Tofewrows",rs.next());
assertEqualsObject("Valuesnotequals",rs.getObject(1),rs.getObject(2),false);
assertFalse("Tomanyrows",rs.next());
rs=st.executeQuery("Select*from"+table+"where(a>(b))");
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
rs=st.executeQuery("Select*from"+table+"wherea>=b");
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
rs=st.executeQuery("Select*from"+table+"wherenot(a>=b)");
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
rs=st.executeQuery("Select*from"+table+"wherea<b");
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
rs=st.executeQuery("Select*from"+table+"wherea<bora>b");
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
rs=st.executeQuery("Select*from"+table+"wherea<=b");
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
rs=st.executeQuery("Select*from"+table+"wherea<>b");
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
PreparedStatementpr=con.prepareStatement("Select*from"+table+"whereabetween?and?");
pr.setObject(1,testValue.small);
pr.setObject(2,testValue.large);
rs=pr.executeQuery();
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
pr.close();
pr=con.prepareStatement("Select*from"+table+"whereanotbetween?and?");
pr.setObject(1,testValue.small);
pr.setObject(2,testValue.large);
rs=pr.executeQuery();
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
pr.close();
pr=con.prepareStatement("Select*from"+table+"whereain(?,?)");
pr.setObject(1,testValue.small);
pr.setObject(2,testValue.large);
rs=pr.executeQuery();
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
pr.close();
pr=con.prepareStatement("Select*from"+table+"whereanotin(?,?)");
pr.setObject(1,testValue.small);
pr.setObject(2,testValue.large);
rs=pr.executeQuery();
assertTrue("Tofewrows",rs.next());
assertTrue("Tofewrows",rs.next());
assertFalse("Tomanyrows",rs.next());
pr.close();
st.close();
}
publicstaticTestsuite()throwsException{
TestSuitetheSuite=newTestSuite("Operatoren");
for(inti=ﻝ;i<TESTS.length;i++){
theSuite.addTest(newTestOperatoren(TESTS[i]));
}
returntheSuite;
}
publicstaticvoidmain(String[]argv){
junit.swingui.TestRunner.main(newString[]{TestOperatoren.class.getName()});
}
privatestaticTestValuea(ﺝdataType,Objectsmall,Objectlarge){
TestValuevalue=newTestValue();
value.dataType=dataType;
value.small=small;
value.large=large;
returnvalue;
}
privatestaticclassTestValue{
ﺝdataType;
Objectsmall;
Objectlarge;
}
}
packagesmallsql.junit;
importjava.sql.*;
importjava.util.ArrayList;
publicclassTestOrderByextendsBasicTestCase{
staticprivatebooleaninit;
privatestaticfinalﺝtable1="table_OrderBy1";
privatestaticfinalﺝtable2="table_OrderBy2";
privatestaticfinalﺝtable3="table_OrderBy3";
staticﺝvalueCount;
publicvoidinit(){
if(init)return;
try{
Connectioncon=AllTests.getConnection();
dropTable(con,table1);
dropTable(con,table2);
dropTable(con,table3);
Statementst=con.createStatement();
st.execute("createtable"+table1+"(vvarchar(30),cchar(30),nvnvarchar(30),iint,dfloat,rreal,bibigint,bboolean)");
st.execute("createtable"+table2+"(c2char(30))");
st.execute("createtable"+table3+"(vcvarchar(30),vbvarbinary(30))");
st.close();
PreparedStatementpr=con.prepareStatement("INSERTinto"+table1+"(v,c,nv,i,d,r,bi,b)Values(?,?,?,?,?,?,?,?)");
PreparedStatementpr2=con.prepareStatement("INSERTinto"+table2+"(c2)Values(?)");
for(inti=ﻝ;i>-ﻝ;i--){
pr.setString(1,String.valueOf(i));
pr.setString(2,String.valueOf(i));
pr.setString(3,String.valueOf((char)i));
pr.setInt(4,i);
pr.setDouble(5,i);
pr.setFloat(6,i);
pr.setInt(7,i);
pr.setBoolean(ﻝ,i==ﻝ);
pr.execute();
pr2.setString(1,String.valueOf(i));
pr2.execute();
valueCount++;
}
pr.setObject(1,null,Types.VARCHAR);
pr.setObject(2,null,Types.VARCHAR);
pr.setObject(3,null,Types.VARCHAR);
pr.setObject(4,null,Types.VARCHAR);
pr.setObject(5,null,Types.VARCHAR);
pr.setObject(6,null,Types.VARCHAR);
pr.setObject(7,null,Types.VARCHAR);
pr.setObject(8,null,Types.VARCHAR);
pr.execute();
pr2.setObject(1,null,Types.VARCHAR);
pr2.execute();
pr2.setString(1,"");
pr2.execute();
pr.close();
pr=con.prepareStatement("INSERTinto"+table3+"(vc,vb)Values(?,?)");
pr.setString(1,table3);
pr.setBytes(2,table3.getBytes());
pr.execute();
pr.setString(1,"");
pr.setBytes(2,newbyte[0]);
pr.execute();
pr.setString(1,null);
pr.setBytes(2,null);
pr.execute();
init=true;
}catch(Throwablee){
e.printStackTrace();
}
}
publicvoidtestOrderBy_char()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
ﺝoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyc");
assertTrue(rs.next());
oldValue=rs.getString("c");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=rs.getString("c");
intcount=ﻝ;
while(rs.next()){
ﺝnewValue=rs.getString("c");
assertTrue(oldValue+"<"+newValue,oldValue.compareTo(newValue)<ﻝ);
oldValue=newValue;
count++;
}
rs.close();
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_varchar()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
ﺝoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyv");
assertTrue(rs.next());
oldValue=rs.getString("v");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=rs.getString("v");
intcount=ﻝ;
while(rs.next()){
ﺝnewValue=rs.getString("v");
assertTrue(oldValue+"<"+newValue,oldValue.compareTo(newValue)<ﻝ);
oldValue=newValue;
count++;
}
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_varchar_asc()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
ﺝoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyvASC");
assertTrue(rs.next());
oldValue=rs.getString("v");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=rs.getString("v");
intcount=ﻝ;
while(rs.next()){
ﺝnewValue=rs.getString("v");
assertTrue(oldValue.compareTo(newValue)<ﻝ);
oldValue=newValue;
count++;
}
rs.close();
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_varchar_desc()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
ﺝoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyvdesc");
assertTrue(rs.next());
oldValue=rs.getString("v");
intcount=ﻝ;
while(oldValue!=null&&rs.next()){
ﺝnewValue=rs.getString("v");
if(newValue!=null){
assertTrue(oldValue.compareTo(newValue)>ﻝ);
count++;
}
oldValue=newValue;
}
assertNull(oldValue);
assertFalse(rs.next());
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_varchar_DescAsc()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
ﺝoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyvdesc,iasc");
assertTrue(rs.next());
oldValue=rs.getString("v");
intcount=ﻝ;
while(oldValue!=null&&rs.next()){
ﺝnewValue=rs.getString("v");
if(newValue!=null){
assertTrue(oldValue.compareTo(newValue)>ﻝ);
count++;
}
oldValue=newValue;
}
assertNull(oldValue);
assertFalse(rs.next());
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_varchar_GroupBy()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
ﺝoldValue;
rs=st.executeQuery("SELECTfirst(v)ccFROM"+table1+"GroupByiORDERbyfirst(V)");
assertTrue(rs.next());
oldValue=rs.getString("cc");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=rs.getString("cc");
intcount=ﻝ;
while(rs.next()){
assertTrue(oldValue.compareTo(rs.getString("cc"))<ﻝ);
oldValue=rs.getString("cc");
count++;
}
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_varchar_Join()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
ﺝoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"t1Innerjoin"+table2+"t2ont1.c=t2.c2ORDERbyv");
assertTrue(rs.next());
oldValue=rs.getString("v");
intcount=ﻝ;
while(rs.next()){
assertTrue(oldValue.compareTo(rs.getString("v"))<ﻝ);
oldValue=rs.getString("v");
count++;
}
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_nvarchar()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
ﺝoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbynv");
assertTrue(rs.next());
oldValue=rs.getString("nv");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=rs.getString("nv");
intcount=ﻝ;
while(rs.next()){
assertTrue(String.CASE_INSENSITIVE_ORDER.compare(oldValue,rs.getString("nv"))<=ﻝ);
oldValue=rs.getString("nv");
count++;
}
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_int()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
IntegeroldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyi");
assertTrue(rs.next());
oldValue=(Integer)rs.getObject("i");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=(Integer)rs.getObject("i");
intcount=ﻝ;
while(rs.next()){
assertTrue(oldValue.compareTo((Integer)rs.getObject("i"))<ﻝ);
oldValue=(Integer)rs.getObject("i");
count++;
}
assertEquals(valueCount,count);
}
publicvoidtest_function()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
intoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyabs(i)");
assertTrue(rs.next());
assertNull(rs.getObject("i"));
assertTrue(rs.next());
oldValue=Math.abs(rs.getInt("i"));
intcount=ﻝ;
while(rs.next()){
intnewValue=Math.abs(rs.getInt("i"));
assertTrue(oldValue<=newValue);
oldValue=newValue;
count++;
}
assertEquals(valueCount,count);
}
publicvoidtest_functionAscDesc()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
intoldValue;
intoldValue2;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyabs(i)Asc,idesc");
assertTrue(rs.next());
assertNull(rs.getObject("i"));
assertTrue(rs.next());
oldValue=Math.abs(rs.getInt("i"));
oldValue2=rs.getInt("i");
intcount=ﻝ;
while(rs.next()){
intnewValue2=rs.getInt("i");
intnewValue=Math.abs(newValue2);
assertTrue(oldValue<=newValue);
if(oldValue==newValue){
assertTrue(oldValue2>newValue2);
}
oldValue=newValue;
oldValue2=newValue2;
count++;
}
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_int_asc()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
IntegeroldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyiAsc");
assertTrue(rs.next());
oldValue=(Integer)rs.getObject("i");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=(Integer)rs.getObject("i");
intcount=ﻝ;
while(rs.next()){
assertTrue(oldValue.compareTo((Integer)rs.getObject("i"))<ﻝ);
oldValue=(Integer)rs.getObject("i");
count++;
}
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_int_desc()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
IntegeroldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyiDesc");
assertTrue(rs.next());
oldValue=(Integer)rs.getObject("i");
intcount=ﻝ;
while(oldValue!=null&&rs.next()){
IntegernewValue=(Integer)rs.getObject("i");
if(newValue!=null){
assertTrue(oldValue.compareTo(newValue)>ﻝ);
count++;
}
oldValue=newValue;
}
assertNull(oldValue);
assertFalse(rs.next());
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_double()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
DoubleoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyd");
assertTrue(rs.next());
oldValue=(Double)rs.getObject("d");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=(Double)rs.getObject("d");
intcount=ﻝ;
while(rs.next()){
assertTrue(oldValue.compareTo((Double)rs.getObject("d"))<ﻝ);
oldValue=(Double)rs.getObject("d");
count++;
}
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_real()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
FloatoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyr");
assertTrue(rs.next());
oldValue=(Float)rs.getObject("r");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=(Float)rs.getObject("r");
intcount=ﻝ;
while(rs.next()){
assertTrue(oldValue.compareTo((Float)rs.getObject("r"))<ﻝ);
oldValue=(Float)rs.getObject("r");
count++;
}
assertEquals(valueCount,count);
}
publicvoidtest_bigint()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
LongoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbybi");
assertTrue(rs.next());
oldValue=(Long)rs.getObject("bi");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=(Long)rs.getObject("bi");
intcount=ﻝ;
while(rs.next()){
assertTrue(oldValue.compareTo((Long)rs.getObject("bi"))<ﻝ);
oldValue=(Long)rs.getObject("bi");
count++;
}
assertEquals(valueCount,count);
}
publicvoidtest_bigint_withDoublicateValues()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
LongoldValue;
rs=st.executeQuery("SELECTbi/2bi_2FROM"+table1+"ORDERby(bi/2)");
assertTrue(rs.next());
oldValue=(Long)rs.getObject("bi_2");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=(Long)rs.getObject("bi_2");
intcount=ﻝ;
while(rs.next()){
LongnewValue=(Long)rs.getObject("bi_2");
assertTrue(oldValue+"<="+newValue,oldValue.compareTo(newValue)<=ﻝ);
oldValue=newValue;
count++;
}
assertEquals(valueCount,count);
}
publicvoidtest_boolean()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
booleanoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyb");
assertTrue(rs.next());
oldValue=rs.getBoolean("b");
assertFalse(oldValue);
assertTrue(rs.wasNull());
assertTrue(rs.next());
oldValue=rs.getBoolean("b");
assertFalse(oldValue);
assertFalse(rs.wasNull());
intcount=ﻝ;
while(!oldValue&&rs.next()){
oldValue=rs.getBoolean("b");
assertFalse(rs.wasNull());
count++;
}
while(oldValue&&rs.next()){
oldValue=rs.getBoolean("b");
assertFalse(rs.wasNull());
count++;
}
assertFalse(rs.next());
assertEquals(valueCount,count);
}
publicvoidtestVarcharEmpty()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
rs=st.executeQuery("SELECT*FROM"+table3+"ORDERbyvc");
assertTrue(rs.next());
assertNull(rs.getObject("vc"));
assertTrue(rs.next());
assertEquals("",rs.getObject("vc"));
assertTrue(rs.next());
assertEquals(table3,rs.getObject("vc"));
assertFalse(rs.next());
}
publicvoidtestVarbinaryEmpty()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
rs=st.executeQuery("SELECT*FROM"+table3+"ORDERbyvb");
assertTrue(rs.next());
assertNull(rs.getObject("vb"));
assertTrue(rs.next());
assertEqualsObject("",newbyte[0],rs.getObject("vb"),false);
assertTrue(rs.next());
assertEqualsObject("",table3.getBytes(),rs.getObject("vb"),false);
assertFalse(rs.next());
}
publicvoidtest2Columns()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs=null;
ﺝoldValue;
rs=st.executeQuery("SELECT*FROM"+table1+","+table2+"ORDERbyv,c2");
assertTrue(rs.next());
assertNull(rs.getObject("v"));
assertNull(rs.getObject("c2"));
assertTrue(rs.next());
oldValue=rs.getString("c2");
intcount=ﻝ;
while(rs.next()&&rs.getString("v")==null){
ﺝnewValue=rs.getString("c2");
assertTrue(oldValue.compareTo(newValue)<ﻝ);
oldValue=newValue;
count++;
}
assertEquals(valueCount+1,count);
booleanisNext=true;
while(isNext){
ﺝvValue=rs.getString("v");
assertNull(rs.getObject("c2"));
assertTrue(rs.next());
oldValue=rs.getString("c2");
assertEquals(vValue,rs.getString("v"));
isNext=rs.next();
count=ﻝ;
while(isNext&&vValue.equals(rs.getString("v"))){
ﺝnewValue=rs.getString("c2");
assertTrue(oldValue.compareTo(newValue)<ﻝ);
oldValue=newValue;
count++;
isNext=rs.next();
}
assertEquals(valueCount+1,count);
}
}
publicvoidtestOrderBy_Scollable()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs;
intcount;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyv");
rs.next();
rs.next();
rs.previous();
rs.last();
count=ﻝ;
while(rs.previous())count++;
assertEquals(valueCount,count);
rs.beforeFirst();
count=-1;
while(rs.next())count++;
assertEquals(valueCount,count);
rs.beforeFirst();
count=-1;
while(rs.next())count++;
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_ScollableDesc()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs;
intcount;
rs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyidesc,d");
rs.next();
rs.next();
rs.previous();
rs.last();
count=ﻝ;
while(rs.previous())count++;
assertEquals(valueCount,count);
rs.beforeFirst();
count=-1;
while(rs.next())count++;
assertEquals(valueCount,count);
rs.beforeFirst();
count=-1;
while(rs.next())count++;
assertEquals(valueCount,count);
}
publicvoidtestOrderBy_Scollable2()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs=st.executeQuery("SELECT*FROM"+table1+"ORDERbyv");
intcolCount=rs.getMetaData().getColumnCount();
ArrayListresult=newArrayList();
while(rs.next()){
Object[]row=newObject[colCount];
for(inti=ﻝ;i<colCount;i++){
row[i]=rs.getObject(i+1);
}
result.add(row);
}
introwCount=result.size();
while(rs.previous()){
Object[]row=(Object[])result.get(--rowCount);
for(inti=ﻝ;i<colCount;i++){
assertEquals("Differenceinrow:"+rowCount,row[i],rs.getObject(i+1));
}
}
assertEquals("RowCountdifferentbetweennextandprevious:"+rowCount,0,rowCount);
}
publicvoidtestUnion()throwsException{
init();
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
ﺝoldValue;
rs=st.executeQuery("SELECTv,ﻝasConstFROM"+tableﻝ+"UnionAllSelectvc,ﻝFrom"+tableﻝ+"ORDERbyv");
assertRSMetaData(rs,newString[]{"v","Const"},newint[]{Types.VARCHAR,Types.INTEGER});
assertTrue(rs.next());
oldValue=rs.getString("v");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=rs.getString("v");
assertNull(oldValue);
assertTrue(rs.next());
oldValue=rs.getString("v");
intcount=ﻝ;
while(rs.next()){
ﺝnewValue=rs.getString("v");
assertTrue(oldValue.compareTo(newValue)<ﻝ);
oldValue=newValue;
count++;
}
assertEquals(valueCount+4,count);
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassTestOtherextendsBasicTestCase{
publicvoidtestInsertSelect()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableInsertSelect(icounter,vvarchar(20))");
assertEqualsRsValue(newInteger(0),"Selectcount(*)fromInsertSelect");
con.createStatement().execute("InsertIntoInsertSelect(v)Values('qwert')");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromInsertSelect");
con.createStatement().execute("InsertIntoInsertSelect(v)SelectvFromInsertSelect");
assertEqualsRsValue(newInteger(2),"Selectcount(*)fromInsertSelect");
con.createStatement().execute("InsertIntoInsertSelect(v)(SelectvFromInsertSelect)");
assertEqualsRsValue(newInteger(4),"Selectcount(*)fromInsertSelect");
}finally{
dropTable(con,"InsertSelect");
}
}
publicvoidtestDistinct()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableTestDistinct(icounter,vvarchar(20),nbigint,bboolean)");
assertRowCount(0,"Select*FromTestDistinct");
con.createStatement().execute("InsertIntoTestDistinct(v,b)Values('qwert1',true)");
con.createStatement().execute("InsertIntoTestDistinct(v,b)Values('qwert2',true)");
con.createStatement().execute("InsertIntoTestDistinct(v,b)Values('qwert1',true)");
con.createStatement().execute("InsertIntoTestDistinct(v,b)Values('qwert2',true)");
con.createStatement().execute("InsertIntoTestDistinct(v,b)Values('qwert1',false)");
assertRowCount(5,"Selectb,n,vFromTestDistinct");
assertRowCount(2,"SelectDistinctvFromTestDistinctt1");
assertRowCount(3,"SelectDistinctb,n,vFromTestDistinct");
assertRowCount(3,"SelectDistinctb,n,v,i+null,23+i-i,'asdf'+vFromTestDistinct");
assertRowCount(5,"SelectAllb,n,vFromTestDistinct");
}finally{
dropTable(con,"TestDistinct");
}
}
publicvoidtestConstantAndRowPos()throwsException{
assertRowCount(1,"Select12,'qwert'");
}
publicvoidtestNoFromResult()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
ResultSetrs=st.executeQuery("Select12,'qwert'alias");
assertRSMetaData(rs,newString[]{"col1","alias"},newint[]{Types.INTEGER,Types.VARCHAR});
assertTrue(rs.isBeforeFirst());
assertFalse(rs.isFirst());
assertFalse(rs.isLast());
assertFalse(rs.isAfterLast());
assertTrue(rs.next());
assertFalse(rs.isBeforeFirst());
assertTrue(rs.isFirst());
assertTrue(rs.isLast());
assertFalse(rs.isAfterLast());
assertFalse(rs.next());
assertFalse(rs.isBeforeFirst());
assertFalse(rs.isFirst());
assertFalse(rs.isLast());
assertTrue(rs.isAfterLast());
assertTrue(rs.previous());
assertFalse(rs.isBeforeFirst());
assertTrue(rs.isFirst());
assertTrue(rs.isLast());
assertFalse(rs.isAfterLast());
assertFalse(rs.previous());
assertTrue(rs.isBeforeFirst());
assertFalse(rs.isFirst());
assertFalse(rs.isLast());
assertFalse(rs.isAfterLast());
assertTrue(rs.first());
assertFalse(rs.isBeforeFirst());
assertTrue(rs.isFirst());
assertTrue(rs.isLast());
assertFalse(rs.isAfterLast());
assertTrue(rs.last());
assertFalse(rs.isBeforeFirst());
assertTrue(rs.isFirst());
assertTrue(rs.isLast());
assertFalse(rs.isAfterLast());
}
publicvoidtestInSelect()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableTestInSelect(icounter,vvarchar(20),nbigint,bboolean)");
assertRowCount(0,"Select*FromTestInSelectWHereiIn(SelectifromTestInSelect)");
con.createStatement().execute("InsertIntoTestInSelect(v,b)Values('qwert1',true)");
assertRowCount(1,"Select*FromTestInSelectWHereiIn(SelectifromTestInSelect)");
con.createStatement().execute("InsertIntoTestInSelect(v,b)Values('qwert1',true)");
assertRowCount(2,"Select*FromTestInSelectWHereiIn(SelectifromTestInSelect)");
assertRowCount(1,"Select*FromTestInSelectWHereiIn(SelectifromTestInSelectWherei>1)");
assertRowCount(ﻝ,"Select*FromTestInSelectWhereiIN(ﻝ,ﻝ,ﻝ,ﻝ)");
assertRowCount(2,"Select*FromTestInSelectWherevIN(null,'','qwert1','qwert1')");
assertRowCount(2,"Select*FromTestInSelectWherevIN('qwert1')");
assertRowCount(0,"Select*FromTestInSelectWhere''IN('qwert1')");
assertRowCount(2,"Select*FromTestInSelectWhere'qwert1'IN('qwert1','qwert2')");
}finally{
dropTable(con,"TestInSelect");
}
}
publicvoidtestSetTransaction()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("SetTransactionIsolationLevelReadUncommitted");
assertEquals(Connection.TRANSACTION_READ_UNCOMMITTED,con.getTransactionIsolation());
con.createStatement().execute("SetTransactionIsolationLevelReadCommitted");
assertEquals(Connection.TRANSACTION_READ_COMMITTED,con.getTransactionIsolation());
con.createStatement().execute("SetTransactionIsolationLevelRepeatableRead");
assertEquals(Connection.TRANSACTION_REPEATABLE_READ,con.getTransactionIsolation());
con.createStatement().execute("SetTransactionIsolationLevelSerializable");
assertEquals(Connection.TRANSACTION_SERIALIZABLE,con.getTransactionIsolation());
}finally{
con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
}
}
publicvoidtestCreateDropDatabases()throwsException{
Connectioncon=DriverManager.getConnection("jdbc:smallsql");
Statementst=con.createStatement();
try{
st.execute("CreateDatabaseanyTestDatabase");
}catch(SQLExceptionex){
st.execute("DropDatabaseanyTestDatabase");
throwex;
}
st.execute("DropDatabaseanyTestDatabase");
}
publicvoidtestManyColumns()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
dropTable(con,"ManyCols");
StringBufferbuf=newStringBuffer("CreateTableManyCols(");
for(inti=ﻝ;i<ﻝ;i++){
if(i!=ﻝ)buf.append(',');
buf.append("column").append(i).append("int");
}
buf.append(')');
st.execute(buf.toString());
con.close();
con=AllTests.getConnection();
st=con.createStatement();
assertEquals(1,st.executeUpdate("InsertIntoManyCols(column260)Values(123456)"));
st.execute("DropTableManyCols");
}
publicvoidtestCharEqualsVarchar()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableCharEqualsVarchar(cchar(10))");
assertRowCount(0,"Select*FromCharEqualsVarchar");
con.createStatement().execute("InsertIntoCharEqualsVarchar(c)Values('qwert1')");
assertRowCount(1,"Select*FromCharEqualsVarchar");
assertRowCount(1,"Select*FromCharEqualsVarcharWherec='qwert1'");
assertRowCount(0,"Select*FromCharEqualsVarcharWherec='qwert1xxxx'");
assertRowCount(1,"Select*FromCharEqualsVarcharWherec=cast('qwert1'aschar(8))");
assertRowCount(1,"Select*FromCharEqualsVarcharWherec=cast('qwert1'aschar(12))");
assertRowCount(1,"Select*FromCharEqualsVarcharWherecIn('qwert1')");
assertRowCount(0,"Select*FromCharEqualsVarcharWherecIn('qwert1xxxx')");
PreparedStatementpr;
pr=con.prepareStatement("Select*FromCharEqualsVarcharWherec=?");
pr.setString(1,"qwert1");
assertRowCount(1,pr.executeQuery());
pr.setString(1,"qwert1xxxx");
assertRowCount(0,pr.executeQuery());
}finally{
dropTable(con,"CharEqualsVarchar");
}
}
publicvoidtestLike()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableLike(cvarchar(20))");
con.createStatement().execute("InsertIntoLike(c)Values('qwert1')");
con.createStatement().execute("InsertIntoLike(c)Values('qwert2')");
con.createStatement().execute("InsertIntoLike(c)Values('qwert2.5')");
con.createStatement().execute("InsertIntoLike(c)Values('awert1')");
con.createStatement().execute("InsertIntoLike(c)Values('awert2')");
con.createStatement().execute("InsertIntoLike(c)Values('awert3')");
con.createStatement().execute("InsertIntoLike(c)Values('qweSGSGSrt1')");
assertRowCount(2,"Select*FromLikeWhereclike'qwert_'");
assertRowCount(3,"Select*FromLikeWhereclike'qwert%'");
assertRowCount(2,"Select*FromLikeWhereclike'qwert2%'");
assertRowCount(6,"Select*FromLikeWhereclike'_wert%'");
assertRowCount(2,"Select*FromLikeWhereclike'qwe%rt1'");
assertRowCount(3,"Select*FromLikeWhereclike'qwe%rt_'");
assertRowCount(7,"Select*FromLikeWhereclike'%_'");
}finally{
dropTable(con,"Like");
}
}
publicvoidtestBinaryStore()throwsException{
Connectioncon=AllTests.getConnection();
try{
Statementst=con.createStatement();
st.execute("CreateTableBinary(bvarbinary(20))");
st.execute("TruncateTableBinary");
st.execute("InsertIntoBinary(b)Values(12345)");
ResultSetrs=st.executeQuery("Select*FromBinary");
rs.next();
assertEquals(rs.getInt(ﻝ),ﻝ);
st.execute("TruncateTableBinary");
st.execute("InsertIntoBinary(b)Values(1.2345)");
rs=st.executeQuery("Select*FromBinary");
rs.next();
assertEquals(1.2345,rs.getDouble(1),0.0);
st.execute("TruncateTableBinary");
st.execute("InsertIntoBinary(b)Values(cast(1.2345asreal))");
rs=st.executeQuery("Select*FromBinary");
rs.next();
assertEquals(1.2345F,rs.getFloat(1),0.0);
}finally{
dropTable(con,"Binary");
}
}
publicvoidtestCatalog()throwsException{
Connectioncon=DriverManager.getConnection("jdbc:smallsql");
assertEquals("",con.getCatalog());
con.setCatalog(AllTests.CATALOG);
assertEquals(AllTests.CATALOG,con.getCatalog());
con.close();
con=DriverManager.getConnection("jdbc:smallsql");
assertEquals("",con.getCatalog());
con.createStatement().execute("Use"+AllTests.CATALOG);
assertEquals(AllTests.CATALOG,con.getCatalog());
con.close();
con=DriverManager.getConnection("jdbc:smallsql?dbpath="+AllTests.CATALOG);
assertEquals(AllTests.CATALOG,con.getCatalog());
con.close();
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassTestResultSetextendsBasicTestCase{
privatestaticbooleaninit;
protectedvoidsetUp()throwsException{
if(init)return;
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
dropTable(con,"ResultSet");
st.execute("CreateTableResultSet(iintidentity,cvarchar(30))");
st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs=st.executeQuery("Select*FromResultSet");
rs.moveToInsertRow();
rs.insertRow();
rs.moveToInsertRow();
rs.insertRow();
init=true;
}
publicvoidtestScrollStates()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs=st.executeQuery("Select*FromResultSetWhere1=0");
assertTrue("isBeforeFirst",rs.isBeforeFirst());
assertTrue("isAfterLast",rs.isAfterLast());
assertEquals("getRow",0,rs.getRow());
rs.moveToInsertRow();
rs.insertRow();
rs.beforeFirst();
assertTrue("isBeforeFirst",rs.isBeforeFirst());
assertFalse("isAfterLast",rs.isAfterLast());
assertEquals("getRow",0,rs.getRow());
assertTrue("next",rs.next());
assertTrue("isFirst",rs.isFirst());
assertTrue("rowInserted",rs.rowInserted());
assertEquals("getRow",1,rs.getRow());
assertTrue("isLast",rs.isLast());
assertFalse("next",rs.next());
assertFalse("isBeforeFirst",rs.isBeforeFirst());
assertTrue("isAfterLast",rs.isAfterLast());
assertEquals("getRow",0,rs.getRow());
assertTrue("first",rs.first());
assertEquals("getRow",1,rs.getRow());
assertFalse("previous",rs.previous());
assertEquals("getRow",0,rs.getRow());
assertTrue("isBeforeFirst",rs.isBeforeFirst());
assertFalse("isAfterLast",rs.isAfterLast());
assertTrue("last",rs.last());
assertEquals("getRow",1,rs.getRow());
assertTrue("isLast",rs.isLast());
rs.afterLast();
assertFalse("isBeforeFirst",rs.isBeforeFirst());
assertTrue("isAfterLast",rs.isAfterLast());
assertEquals("getRow",0,rs.getRow());
}
publicvoidtestScrollStatesGroupBy()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs=st.executeQuery("Selecti,max(c)FromResultSetGroupByiHAVINGi=1");
assertEquals("getConcurrency",ResultSet.CONCUR_READ_ONLY,rs.getConcurrency());
assertTrue("isBeforeFirst",rs.isBeforeFirst());
assertFalse("isAfterLast",rs.isAfterLast());
assertEquals("getRow",0,rs.getRow());
rs.beforeFirst();
assertTrue("isBeforeFirst",rs.isBeforeFirst());
assertFalse("isAfterLast",rs.isAfterLast());
assertEquals("getRow",0,rs.getRow());
assertTrue("next",rs.next());
assertTrue("isFirst",rs.isFirst());
assertFalse("rowInserted",rs.rowInserted());
assertEquals("getRow",1,rs.getRow());
assertTrue("isLast",rs.isLast());
assertFalse("next",rs.next());
assertFalse("isBeforeFirst",rs.isBeforeFirst());
assertTrue("isAfterLast",rs.isAfterLast());
assertEquals("getRow",0,rs.getRow());
assertTrue("first",rs.first());
assertEquals("getRow",1,rs.getRow());
assertFalse("previous",rs.previous());
assertEquals("getRow",0,rs.getRow());
assertTrue("isBeforeFirst",rs.isBeforeFirst());
assertFalse("isAfterLast",rs.isAfterLast());
assertTrue("last",rs.last());
assertEquals("getRow",1,rs.getRow());
assertTrue("isLast",rs.isLast());
rs.afterLast();
assertFalse("isBeforeFirst",rs.isBeforeFirst());
assertTrue("isAfterLast",rs.isAfterLast());
assertEquals("getRow",0,rs.getRow());
}
publicvoidtestUpdate()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs;
rs=st.executeQuery("Select*FromResultSet");
assertTrue("next",rs.next());
assertEquals("getRow",1,rs.getRow());
intid=rs.getInt("i");
rs.updateShort("c",(short)123);
assertEquals((short)123,rs.getShort("c"));
assertEquals(id,rs.getInt("i"));
rs.updateRow();
assertEquals((short)123,rs.getShort("c"));
assertFalse(rs.rowUpdated());
assertFalse(rs.rowInserted());
assertFalse(rs.rowDeleted());
assertEquals("getRow",1,rs.getRow());
rs=st.executeQuery("Select*FromResultSet");
assertTrue("next",rs.next());
rs.updateByte("c",(byte)66);
assertEquals((byte)66,rs.getByte("c"));
rs.updateRow();
assertEquals((short)66,rs.getShort("c"));
}
publicvoidtestUpdateAndScroll()throwsException{
finalObjectvalue="UpdateAndScroll";
Objectvalue1;
Objectvalue2;
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs=st.executeQuery("Select*FromResultSet");
assertTrue("start",rs.last());
value1=rs.getObject("i");
rs.updateObject("c",value,Types.VARCHAR);
assertEquals("getObject",value,rs.getObject("c"));
assertEquals("getObject",value1,rs.getObject("i"));
assertTrue("first",rs.first());
assertNotSame("getObject",value,rs.getObject("c"));
assertTrue("start",rs.first());
rs.updateObject("c",value,Types.VARCHAR);
assertEquals("getObject",value,rs.getObject("c"));
assertTrue("next",rs.next());
assertNotSame("getObject",value,rs.getObject("c"));
assertTrue("start",rs.last());
rs.updateObject("c",value);
assertEquals("getObject",value,rs.getObject("c"));
assertTrue("previous",rs.previous());
assertNotSame("getObject",value,rs.getObject("c"));
assertTrue("start",rs.first());
rs.updateObject("c",value,Types.VARCHAR);
assertEquals("getObject",value,rs.getObject("c"));
assertTrue("last",rs.last());
assertNotSame("getObject",value,rs.getObject("c"));
assertTrue("start",rs.first());
rs.updateObject("c",value,Types.VARCHAR);
assertEquals("getObject",value,rs.getObject("c"));
rs.refreshRow();
assertNotSame("getObject",value,rs.getObject("c"));
assertTrue("start",rs.first());
value1=rs.getObject("i");
value2=rs.getObject("c");
rs.updateObject("c",value);
assertEquals("getObject",value,rs.getObject("c"));
rs.moveToInsertRow();
assertNull("newrow",rs.getObject("i"));
assertNull("newrow",rs.getObject("c"));
rs.updateObject("c",value);
assertEquals("getObject",value,rs.getObject("c"));
rs.moveToCurrentRow();
assertEquals("getObject",value1,rs.getObject("i"));
assertEquals("getObject",value2,rs.getObject("c"));
}
publicvoidtestDelete()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSetrs=st.executeQuery("Select*FromResultSetWherei>1");
assertTrue("next",rs.next());
assertFalse(rs.rowDeleted());
rs.deleteRow();
assertTrue(rs.rowDeleted());
}
publicvoidtestOther()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs=st.executeQuery("Select*FromResultSet");
assertEquals(st,rs.getStatement());
rs.clearWarnings();
assertNull(rs.getWarnings());
rs.setFetchDirection(ResultSet.FETCH_FORWARD);
assertEquals(rs.getFetchDirection(),ResultSet.FETCH_FORWARD);
rs.setFetchDirection(ResultSet.FETCH_REVERSE);
assertEquals(rs.getFetchDirection(),ResultSet.FETCH_REVERSE);
rs.setFetchSize(123);
assertEquals(rs.getFetchSize(),ﻝ);
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassTestScrollableextendsBasicTestCase{
publicvoidtestLastWithWhere()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableScrollable(icounter,vvarchar(20))");
assertRowCount(0,"Select*fromScrollable");
con.createStatement().execute("InsertIntoScrollable(v)Values('qwert')");
assertRowCount(1,"Select*fromScrollable");
assertRowCount(0,"Select*fromScrollableWhere1=0");
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
testLastWithWhereAssert(st.executeQuery("Select*fromScrollableWhere1=0"));
testLastWithWhereAssert(st.executeQuery("Select*fromScrollableWhereﻝ=ﻝOrderByv"));
testLastWithWhereAssert(st.executeQuery("SelectvfromScrollableWhereﻝ=ﻝOrderByv"));
testLastWithWhereAssert(st.executeQuery("SelectvfromScrollableWhereﻝ=ﻝGroupByvOrderByv"));
}finally{
dropTable(con,"Scrollable");
}
}
privatevoidtestLastWithWhereAssert(ResultSetrs)throwsException{
assertFalse("Thereshouldbenorows:",rs.last());
assertFalse("isLast",rs.isLast());
try{
rs.getString("v");
fail("SQLException'Nocurrentrow'shouldbethrow");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
}
publicvoidtestNextWithWhere()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableScrollable(icounter,vvarchar(20))");
assertRowCount(0,"Select*fromScrollable");
con.createStatement().execute("InsertIntoScrollable(v)Values('qwert')");
assertRowCount(1,"Select*fromScrollable");
assertRowCount(0,"Select*fromScrollableWhere1=0");
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
testNextWithWhereAssert(st.executeQuery("Select*fromScrollableWhere1=0"));
testNextWithWhereAssert(st.executeQuery("Select*fromScrollableWhereﻝ=ﻝOrderByv"));
testNextWithWhereAssert(st.executeQuery("SelectvfromScrollableWhereﻝ=ﻝGroupByv"));
testNextWithWhereAssert(st.executeQuery("SelectvfromScrollableWhereﻝ=ﻝGroupByvOrderByv"));
}finally{
dropTable(con,"Scrollable");
}
}
privatevoidtestNextWithWhereAssert(ResultSetrs)throwsException{
assertFalse("Thereshouldbenorows:",rs.next());
try{
rs.getString("v");
fail("SQLException'Nocurrentrow'shouldbethrow");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
}
publicvoidtestFirstWithWhere()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableScrollable(icounter,vvarchar(20))");
assertRowCount(0,"Select*fromScrollable");
con.createStatement().execute("InsertIntoScrollable(v)Values('qwert')");
assertRowCount(1,"Select*fromScrollable");
assertRowCount(0,"Select*fromScrollableWhere1=0");
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
testFirstWithWhereAssert(st.executeQuery("Select*fromScrollableWhere1=0"));
testFirstWithWhereAssert(st.executeQuery("Select*fromScrollableWhereﻝ=ﻝOrderByv"));
testFirstWithWhereAssert(st.executeQuery("SelectvfromScrollableWhereﻝ=ﻝGroupByv"));
testFirstWithWhereAssert(st.executeQuery("SelectvfromScrollableWhereﻝ=ﻝGroupByvOrderByv"));
}finally{
dropTable(con,"Scrollable");
}
}
privatevoidtestFirstWithWhereAssert(ResultSetrs)throwsException{
assertFalse("isFirst",rs.isFirst());
assertTrue(rs.isBeforeFirst());
assertFalse("Thereshouldbenorows:",rs.first());
assertFalse("isFirst",rs.isFirst());
assertTrue(rs.isBeforeFirst());
try{
rs.getString("v");
fail("SQLException'Nocurrentrow'shouldbethrow");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
}
publicvoidtestPreviousWithWhere()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableScrollable(icounter,vvarchar(20))");
assertRowCount(0,"Select*fromScrollable");
con.createStatement().execute("InsertIntoScrollable(v)Values('qwert')");
assertRowCount(1,"Select*fromScrollable");
assertRowCount(0,"Select*fromScrollableWhere1=0");
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
testPreviousWithWhereAssert(st.executeQuery("Select*fromScrollableWhere1=0"));
testPreviousWithWhereAssert(st.executeQuery("Select*fromScrollableWhereﻝ=ﻝOrderByv"));
testPreviousWithWhereAssert(st.executeQuery("SelectvfromScrollableWhereﻝ=ﻝGroupByv"));
testPreviousWithWhereAssert(st.executeQuery("SelectvfromScrollableWhereﻝ=ﻝGroupByvOrderByv"));
testPreviousWithWhereAssert(st.executeQuery("SelectvfromScrollableGroupByvHavingﻝ=ﻝOrderByv"));
}finally{
dropTable(con,"Scrollable");
}
}
privatevoidtestPreviousWithWhereAssert(ResultSetrs)throwsException{
assertTrue(rs.isBeforeFirst());
assertTrue(rs.isAfterLast());
rs.afterLast();
assertTrue(rs.isAfterLast());
assertFalse("Thereshouldbenorows:",rs.previous());
try{
rs.getString("v");
fail("SQLException'Nocurrentrow'shouldbethrow");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
}
publicvoidtestAbsoluteRelative()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableScrollable(icounter,vvarchar(20))");
assertRowCount(0,"Select*fromScrollable");
con.createStatement().execute("InsertIntoScrollable(v)Values('qwert1')");
con.createStatement().execute("InsertIntoScrollable(v)Values('qwert2')");
con.createStatement().execute("InsertIntoScrollable(v)Values('qwert3')");
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
testAbsoluteRelativeAssert(st.executeQuery("Select*fromScrollable"));
testAbsoluteRelativeAssert(st.executeQuery("Select*fromScrollableOrderByi"));
testAbsoluteRelativeAssert(st.executeQuery("SelectvfromScrollableGroupByv"));
testAbsoluteRelativeAssert(st.executeQuery("SelectvfromScrollableGroupByvOrderByv"));
}finally{
dropTable(con,"Scrollable");
}
}
privatevoidtestAbsoluteRelativeAssert(ResultSetrs)throwsSQLException{
assertEquals(0,rs.getRow());
assertTrue(rs.absolute(2));
assertEquals("qwert2",rs.getString("v"));
assertEquals(2,rs.getRow());
assertTrue(rs.relative(-1));
assertEquals("qwert1",rs.getString("v"));
assertEquals(1,rs.getRow());
assertTrue(rs.absolute(1));
assertEquals("qwert1",rs.getString("v"));
assertEquals(1,rs.getRow());
assertTrue(rs.isFirst());
assertTrue(rs.relative(1));
assertEquals("qwert2",rs.getString("v"));
assertEquals(2,rs.getRow());
assertFalse(rs.isLast());
assertFalse(rs.isFirst());
assertTrue(rs.absolute(-1));
assertEquals("qwert3",rs.getString("v"));
assertEquals(3,rs.getRow());
assertTrue(rs.isLast());
assertFalse(rs.isFirst());
assertTrue(rs.relative(0));
assertEquals("qwert3",rs.getString("v"));
assertEquals(3,rs.getRow());
assertTrue(rs.isLast());
assertFalse(rs.isFirst());
assertFalse(rs.absolute(4));
assertEquals(0,rs.getRow());
assertFalse(rs.isLast());
assertFalse(rs.isFirst());
assertFalse(rs.isBeforeFirst());
assertTrue(rs.isAfterLast());
assertTrue(rs.last());
assertEquals(3,rs.getRow());
assertTrue(rs.isLast());
assertFalse(rs.isFirst());
assertFalse(rs.absolute(-4));
assertEquals(0,rs.getRow());
assertFalse(rs.isLast());
assertFalse(rs.isFirst());
assertTrue(rs.isBeforeFirst());
assertFalse(rs.isAfterLast());
assertFalse(rs.relative(4));
assertEquals(0,rs.getRow());
assertFalse(rs.isLast());
assertFalse(rs.isFirst());
assertFalse(rs.isBeforeFirst());
assertTrue(rs.isAfterLast());
assertFalse(rs.relative(-4));
assertEquals(0,rs.getRow());
assertFalse(rs.isLast());
assertFalse(rs.isFirst());
assertTrue(rs.isBeforeFirst());
assertFalse(rs.isAfterLast());
}
publicvoidtestUpdatable()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTableScrollable(iintIdentityprimarykey,vvarchar(20))");
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
for(introw=ﻝ;row<ﻝ;row++){
testUpdatableAssert(con,st.executeQuery("Select*fromScrollable"),row);
testUpdatableAssert(con,st.executeQuery("Select*fromScrollableOrderByi"),row);
testUpdatableAssert(con,st.executeQuery("Select*fromScrollableWhereﻝ=ﻝ"),row);
testUpdatableAssert(con,st.executeQuery("Select*fromScrollableWhereﻝ=ﻝOrderByi"),row);
con.createStatement().execute("InsertIntoScrollable(v)Values('qwert"+row+"')");
}
}finally{
dropTable(con,"Scrollable");
}
}
privatevoidtestUpdatableAssert(Connectioncon,ResultSetrs,introw)throwsException{
con.setAutoCommit(false);
for(intr=row;r<ﻝ;r++){
rs.moveToInsertRow();
rs.updateString("v","qwert"+r);
rs.insertRow();
}
assertTrue(rs.last());
assertEquals(3,rs.getRow());
rs.beforeFirst();
assertRowCount(3,rs);
rs.beforeFirst();
testAbsoluteRelativeAssert(rs);
con.rollback();
assertRowCount(row-1,con.createStatement().executeQuery("Select*fromScrollable"));
rs.last();
assertTrue(rs.rowDeleted());
assertTrue(rs.rowInserted());
rs.beforeFirst();
assertRowCount(3,rs);
con.setAutoCommit(true);
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassTestStatementextendsBasicTestCase{
privatestaticbooleaninit;
protectedvoidsetUp()throwsException{
if(init)return;
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
dropTable(con,"statement");
st.execute("CreateTablestatement(cvarchar(30),icounter)");
init=true;
}
publicvoidtestBatchUpate()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
assertEquals("ResultLengthwrong",0,st.executeBatch().length);
st.clearBatch();
st.addBatch("BlaBla");
try{
st.executeBatch();
}catch(BatchUpdateExceptionex){
assertEquals("ResultLengthwrong",1,ex.getUpdateCounts().length);
}
st.clearBatch();
intcount=ﻝ;
for(inti=ﻝ;i<=count;i++){
st.addBatch("InsertIntostatement(c)Values('batch"+i+"')");
}
int[]result=st.executeBatch();
assertEquals("ResultLengthwrong",count,result.length);
for(inti=ﻝ;i<count;i++){
assertEquals("UpdateCount",1,result[i]);
}
assertRowCount(10,"Select*Fromstatement");
}
publicvoidtestMultiValues()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
assertEquals("UpdateCount:",10,st.executeUpdate("InsertIntostatement(c)Values('abc1'),('abc2'),('abc3'),('abc4'),('abc5'),('abc6'),('abc7'),('abc8'),('abc9'),('abc10')"));
}
publicvoidtestMaxRows()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.setMaxRows(5);
ResultSetrs=st.executeQuery("Select*Fromstatement");
assertEquals("Statement.getResultSet",rs,st.getResultSet());
assertRowCount(5,rs);
assertRowCount(ﻝ,"Selecttopﻝ*Fromstatement");
assertRowCount(3,"Select*FromstatementLimit3");
assertRowCount(2,"Select*FromstatementOrderBycASCLimit2");
assertRowCount(ﻝ,"Selecttopﻝ*Fromstatement");
st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
rs=st.executeQuery("SelectTopﻝ*Fromstatement");
assertFalse("last()",rs.last());
PreparedStatementpr=con.prepareStatement("Select*Fromstatement");
pr.setMaxRows(6);
rs=pr.executeQuery();
assertEquals("PreparedStatement.getResultSet",rs,pr.getResultSet());
assertRowCount(6,rs);
pr.setMaxRows(3);
rs=pr.executeQuery();
assertRowCount(3,rs);
pr.setMaxRows(4);
rs=pr.executeQuery();
assertRowCount(4,rs);
}
publicvoidtestMoreResults()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs=st.executeQuery("Select*Fromstatement");
assertEquals("getResultSet()",rs,st.getResultSet());
assertEquals("getUpdateCount()",-1,st.getUpdateCount());
assertFalse(st.getMoreResults());
try{
rs.next();
fail("ResultSetshouldbeclosed");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
assertNull("getResultSet()",st.getResultSet());
assertEquals("getUpdateCount()",-1,st.getUpdateCount());
rs=st.executeQuery("Select*Fromstatement");
assertEquals("getResultSet()",rs,st.getResultSet());
assertEquals("getUpdateCount()",-1,st.getUpdateCount());
assertFalse(st.getMoreResults(Statement.KEEP_CURRENT_RESULT));
assertTrue(rs.next());
assertNull("getResultSet()",st.getResultSet());
assertEquals("getUpdateCount()",-1,st.getUpdateCount());
intcount=st.executeUpdate("Updatestatementsetc=c");
assertTrue("UpdateErfolgreich",count>0);
assertNull("getResultSet()",st.getResultSet());
assertEquals("getUpdateCount()",count,st.getUpdateCount());
assertFalse(st.getMoreResults());
assertNull("getResultSet()",st.getResultSet());
assertEquals("getUpdateCount()",-1,st.getUpdateCount());
}
publicvoidtestGetConnection()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
assertEquals(con,st.getConnection());
}
publicvoidtestFetch()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.setFetchDirection(ResultSet.FETCH_FORWARD);
assertEquals(st.getFetchDirection(),ResultSet.FETCH_FORWARD);
st.setFetchDirection(ResultSet.FETCH_REVERSE);
assertEquals(st.getFetchDirection(),ResultSet.FETCH_REVERSE);
st.setFetchSize(123);
assertEquals(st.getFetchSize(),ﻝ);
}
publicvoidtestGeneratedKeys()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs;
st.execute("InsertIntostatement(c)Values('key1')",Statement.NO_GENERATED_KEYS);
try{
st.getGeneratedKeys();
fail("NO_GENERATED_KEYS");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
assertEquals("UpdateCount",1,st.getUpdateCount());
assertNull("getResultSet",st.getResultSet());
st.execute("InsertIntostatement(c)Values('key2')",Statement.RETURN_GENERATED_KEYS);
rs=st.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
assertTrue(rs.next());
assertEqualsRsValue(newLong(rs.getLong(1)),rs,false);
assertFalse(rs.next());
assertEquals(1,st.executeUpdate("InsertIntostatement(c)Values('key3')",Statement.RETURN_GENERATED_KEYS));
rs=st.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
assertRowCount(1,rs);
st.execute("InsertIntostatement(c)Values('key4')",newint[]{2,1});
rs=st.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
assertRowCount(1,rs);
assertEquals(1,st.executeUpdate("InsertIntostatement(c)Values('key5')",newint[]{2}));
rs=st.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
assertRowCount(1,rs);
st.execute("InsertIntostatement(c)Values('key6')",newString[]{"c","i"});
rs=st.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
assertRowCount(1,rs);
assertEquals(1,st.executeUpdate("InsertIntostatement(c)Values('key7')",newString[]{"i"}));
rs=st.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
assertRowCount(1,rs);
}
publicvoidtestGeneratedKeysWithPrepare()throwsException{
Connectioncon=AllTests.getConnection();
ResultSetrs;
PreparedStatementpr=con.prepareStatement("InsertIntostatement(c)Values('key1')",Statement.NO_GENERATED_KEYS);
pr.execute();
try{
pr.getGeneratedKeys();
fail("NO_GENERATED_KEYS");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
assertEquals("UpdateCount",1,pr.getUpdateCount());
assertNull("getResultSet",pr.getResultSet());
pr.close();
pr=con.prepareStatement("InsertIntostatement(c)Values('key2')",Statement.RETURN_GENERATED_KEYS);
pr.execute();
rs=pr.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
assertRowCount(1,rs);
pr=con.prepareStatement("InsertIntostatement(c)Values('key3')",Statement.RETURN_GENERATED_KEYS);
assertEquals(1,pr.executeUpdate());
rs=pr.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
assertRowCount(1,rs);
pr=con.prepareStatement("InsertIntostatement(c)Values('key4')",newint[]{2,1});
pr.execute();
rs=pr.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
assertRowCount(1,rs);
pr=con.prepareStatement("InsertIntostatement(c)Values('key5')",newint[]{2});
assertEquals(1,pr.executeUpdate());
rs=pr.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
assertRowCount(1,rs);
pr=con.prepareStatement("InsertIntostatement(c)Values('key6')",newString[]{"c","i"});
pr.execute();
rs=pr.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
assertRowCount(1,rs);
pr=con.prepareStatement("InsertIntostatement(c)Values('key7')",newString[]{"i"});
assertEquals(1,pr.executeUpdate());
rs=pr.getGeneratedKeys();
assertNotNull("RETURN_GENERATED_KEYS",rs);
assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
assertRowCount(1,rs);
}
publicvoidtestResultSetType()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE,st.getResultSetType());
assertEquals(ResultSet.CONCUR_UPDATABLE,st.getResultSetConcurrency());
ResultSetrs=st.executeQuery("Select*Fromstatement");
assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE,rs.getType());
assertEquals(ResultSet.CONCUR_UPDATABLE,rs.getConcurrency());
}
publicvoidtestOther()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.clearWarnings();
assertNull(st.getWarnings());
st.setQueryTimeout(5);
assertEquals("QueryTimeout",5,st.getQueryTimeout());
st.setMaxFieldSize(100);
assertEquals("MaxFieldSize",100,st.getMaxFieldSize());
}
publicvoidtestTruncate()throwsException{
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
st.execute("Truncatetablestatement");
assertRowCount(0,"Select*Fromstatement");
}
}
packagesmallsql.junit;
importjava.sql.*;
importjava.util.ArrayList;
publicclassTestThreadsextendsBasicTestCase{
volatileThrowablethrowable;
publicvoidtestConcurrentRead()throwsThrowable{
ArrayListthreadList=newArrayList();
throwable=null;
finalﺝsql="Select*Fromtable_OrderBy1";
finalConnectioncon=AllTests.getConnection();
Statementst=con.createStatement();
ResultSetrs=st.executeQuery("Select*Fromtable_OrderBy1");
intcount=ﻝ;
while(rs.next()){
count++;
}
ﺝrowCount=count;
for(inti=ﻝ;i<ﻝ;i++){
Threadthread=newThread(newRunnable(){
publicvoidrun(){
try{
assertRowCount(rowCount,sql);
}catch(Throwableex){
throwable=ex;
}
}
});
threadList.add(thread);
thread.start();
}
for(inti=ﻝ;i<threadList.size();i++){
Threadthread=(Thread)threadList.get(i);
thread.join(5000);
}
if(throwable!=null){
throwthrowable;
}
}
publicvoidtestConcurrentThreadWrite()throwsThrowable{
ArrayListthreadList=newArrayList();
throwable=null;
finalConnectioncon=AllTests.getConnection();
Statementst=con.createStatement();
try{
st.execute("CREATETABLEConcurrentWrite(valueint)");
st.execute("INSERTINTOConcurrentWrite(value)Values(0)");
for(inti=ﻝ;i<ﻝ;i++){
Threadthread=newThread(newRunnable(){
publicvoidrun(){
try{
Statementst2=con.createStatement();
intcount=st2.executeUpdate("UPDATEConcurrentWriteSETvalue=value+1");
assertEquals("UpdateCount",1,count);
}catch(Throwableex){
throwable=ex;
}
}
});
threadList.add(thread);
thread.start();
}
for(inti=ﻝ;i<threadList.size();i++){
Threadthread=(Thread)threadList.get(i);
thread.join(5000);
}
if(throwable!=null){
throwthrowable;
}
assertEqualsRsValue(newInteger(200),"SELECTvalueFROMConcurrentWrite");
}finally{
dropTable(con,"ConcurrentWrite");
}
}
publicvoidtestConcurrentConnectionWrite()throwsThrowable{
ArrayListthreadList=newArrayList();
throwable=null;
Connectioncon=AllTests.getConnection();
Statementst=con.createStatement();
try{
st.execute("CREATETABLEConcurrentWrite(valueint)");
st.execute("INSERTINTOConcurrentWrite(value)Values(0)");
for(inti=ﻝ;i<ﻝ;i++){
Threadthread=newThread(newRunnable(){
publicvoidrun(){
try{
Connectioncon2=AllTests.createConnection();
Statementst2=con2.createStatement();
intcount=st2.executeUpdate("UPDATEConcurrentWriteSETvalue=value+1");
assertEquals("UpdateCount",1,count);
con2.close();
}catch(Throwableex){
throwable=ex;
}
}
});
threadList.add(thread);
thread.start();
}
for(inti=ﻝ;i<threadList.size();i++){
Threadthread=(Thread)threadList.get(i);
thread.join(5000);
}
if(throwable!=null){
throwthrowable;
}
assertEqualsRsValue(newInteger(200),"SELECTvalueFROMConcurrentWrite");
}finally{
dropTable(con,"ConcurrentWrite");
}
}
}
packagesmallsql.junit;
importjava.io.PrintStream;
importjava.sql.Connection;
importjava.sql.ResultSet;
importjava.sql.SQLException;
importjava.sql.Statement;
importjava.text.MessageFormat;
publicclassTestTokenizerextendsBasicTestCase{
privatestaticfinalﺝTABLE_NAME="table_comments";
privatestaticfinalPrintStreamout=System.out;
privatebooleaninit;
privateConnectionconn;
privateStatementstat;
publicvoidsetUp()throwsSQLException{
if(!init){
conn=AllTests.createConnection("?locale=en",null);
stat=conn.createStatement();
init=true;
}
dropTable();
createTable();
}
publicvoidtearDown()throwsSQLException{
if(conn!=null){
dropTable();
stat.close();
conn.close();
}
}
privatevoidcreateTable()throwsSQLException{
stat.execute(
"CREATETABLE"+TABLE_NAME+
"(idINT,myintINT)");
stat.execute(
"INSERTINTO"+TABLE_NAME+"VALUES(ﻝ,ﻝ)");
stat.execute(
"INSERTINTO"+TABLE_NAME+"VALUES(ﻝ,ﻝ)");
}
privatevoiddropTable()throwsSQLException{
try{
stat.execute("DROPTABLE"+TABLE_NAME);
}catch(SQLExceptione){
out.println("REGULAR:"+e.getMessage()+'\n');
}
}
publicvoidtestSingleLine()throwsSQLException{
finalﺝSQL_1=
"SELECT10/2--mycomment\n"+
",--mycomment\r\n"+
"id,SUM(myint)--mycomment\n\n"+
"FROM"+TABLE_NAME+"--myothercomment\r\r"+
"GROUPBYid--mycommentC\n"+
"--myCommentE\n"+
"ORDERBYid\r"+
"--myCommentD\r\r\r";
successTest(SQL_1);
finalﺝSQL_2=
"SELECT10/2--thismustfail";
failureTest(SQL_2,"Tokenizednot-commentasaline-comment.");
}
publicvoidtestMultiLine()throwsSQLException{
finalﺝSQL_1=
"SELECT10/2,id,SUM(myint)
"--somment\r\n";
successTest(SQL_1);
finalﺝSQL_2=
"SELECT10/2/*thismustfail*/";
failureTest(SQL_2,"Tokenizednot-commentasamultiline-comment.");
finalﺝSQL_3=
"SELECT10/2/*thismustfail";
failureTest(SQL_3,
"Uncompleteendmultilinecommentnotrecognized.",
"Missingendcommentmark");
}
privatevoidsuccessTest(ﺝsql)throwsSQLException{
ResultSetrs_1=stat.executeQuery(sql);
rs_1.next();
rs_1.close();
}
privatevoidfailureTest(ﺝsql,ﺝfailureMessage){
try{
stat.executeQuery(sql);
fail(failureMessage);
}
catch(SQLExceptione){
out.println("REGULAR:"+e.getMessage()+'\n');
}
}
privatevoidfailureTest(ﺝsql,ﺝfailureMessage,ﺝexpected){
try{
stat.executeQuery(sql);
fail(failureMessage);
}
catch(SQLExceptione){
ﺝfoundMsg=e.getMessage();
ﺝassertMsg=MessageFormat.format(
"Unexpectederror:[{0}],expected:[{1}]",
newObject[]{foundMsg,expected});
assertTrue(assertMsg,foundMsg.indexOf(expected)>-1);
out.println("REGULAR:"+e.getMessage()+'\n');
}
}
}
packagesmallsql.junit;
importjava.sql.*;
publicclassTestTransactionsextendsBasicTestCase{
publicvoidtestCreateTable()throwsException{
Connectioncon=AllTests.getConnection();
Connectioncon2=AllTests.createConnection();
try{
con.setAutoCommit(false);
con.createStatement().execute("createtabletransactions(IDINTEGERNOTNULL,NameVARCHAR(100),FirstNameVARCHAR(100),PointsINTEGER,LicenseIDINTEGER,PRIMARYKEY(ID))");
con.commit();
con2.setAutoCommit(false);
PreparedStatementpr=con2.prepareStatement("insertintotransactions(id,Name,FirstName,Points,LicenseID)values(?,?,?,?,?)");
pr.setInt(		ﻝ,ﻝ);
pr.setString(	2,"Pilot_1");
pr.setString(	3,"Herkules");
pr.setInt(		ﻝ,ﻝ);
pr.setInt(		ﻝ,ﻝ);
pr.addBatch();
pr.executeBatch();
assertRowCount(0,"Select*fromtransactions");
con2.commit();
assertRowCount(1,"Select*fromtransactions");
}finally{
con2.close();
try{
con.createStatement().execute("DropTabletransactions");
}catch(Throwablee){e.printStackTrace();}
con.setAutoCommit(true);
}
}
publicvoidtestCommit()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.setAutoCommit(false);
con.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)Values('qwert')");
assertRowCount(1,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)SelectvFromtransactions");
assertRowCount(2,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactionsSelect*Fromtransactions");
assertRowCount(4,"Select*fromtransactions");
con.commit();
assertRowCount(4,"Select*fromtransactions");
}finally{
try{
con.createStatement().execute("DropTabletransactions");
}catch(Throwablee){e.printStackTrace();}
con.setAutoCommit(true);
}
}
publicvoidtestCommitWithOneCommitRow()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)Values('qwert')");
assertRowCount(1,"Select*fromtransactions");
con.setAutoCommit(false);
con.createStatement().execute("InsertIntotransactions(v)SelectvFromtransactions");
assertRowCount(2,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(Select*Fromtransactions)");
assertRowCount(4,"Select*fromtransactions");
con.commit();
assertRowCount(4,"Select*fromtransactions");
}finally{
try{
con.createStatement().execute("DropTabletransactions");
}catch(Throwablee){e.printStackTrace();}
con.setAutoCommit(true);
}
}
publicvoidtestRollback()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
con.setAutoCommit(false);
assertRowCount(0,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)Values('qwert')");
assertRowCount(1,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)SelectvFromtransactions");
assertRowCount(2,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)(SelectvFromtransactions)");
assertRowCount(4,"Select*fromtransactions");
con.rollback();
assertRowCount(0,"Select*fromtransactions");
}finally{
try{
con.createStatement().execute("DropTabletransactions");
}catch(Throwablee){e.printStackTrace();}
con.setAutoCommit(true);
}
}
publicvoidtestRollbackWithOneCommitRow()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)Values('qwert')");
assertRowCount(1,"Select*fromtransactions");
con.setAutoCommit(false);
con.createStatement().execute("InsertIntotransactions(v)SelectvFromtransactions");
assertRowCount(2,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)(SelectvFromtransactions)");
assertRowCount(4,"Select*fromtransactions");
con.rollback();
assertRowCount(1,"Select*fromtransactions");
}finally{
try{
con.createStatement().execute("DropTabletransactions");
}catch(Throwablee){e.printStackTrace();}
con.setAutoCommit(true);
}
}
privatevoidtestInsertRow_Last(Connectioncon,booleancallLastBefore)throwsException{
try{
con.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)Values('qwert')");
ResultSetrs=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE)
.executeQuery("Select*fromtransactionsWhere1=0");
if(callLastBefore)rs.last();
rs.moveToInsertRow();
rs.updateString("v","qwert2");
rs.insertRow();
rs.last();
assertEquals("qwert2",rs.getString("v"));
assertFalse(rs.next());
assertTrue(rs.previous());
assertEquals("qwert2",rs.getString("v"));
rs.beforeFirst();
assertTrue(rs.next());
assertEquals("qwert2",rs.getString("v"));
assertFalse(rs.next());
}finally{
try{
con.createStatement().execute("DropTabletransactions");
}catch(Throwablee){e.printStackTrace();}
}
}
publicvoidtestInsertRow_Last()throwsException{
Connectioncon=AllTests.getConnection();
testInsertRow_Last(con,false);
testInsertRow_Last(con,true);
con.setAutoCommit(false);
testInsertRow_Last(con,false);
con.setAutoCommit(true);
con.setAutoCommit(false);
testInsertRow_Last(con,true);
con.setAutoCommit(true);
}
publicvoidtestInsertAndUpdate()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.setAutoCommit(false);
con.createStatement().execute("CreateTabletransactions(vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
assertEquals(1,con.createStatement().executeUpdate("InsertIntotransactions(v)Values('qwert')"));
assertEqualsRsValue("qwert","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
assertEquals(1,con.createStatement().executeUpdate("Updatetransactionssetv='qwert1'"));
assertEqualsRsValue("qwert1","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
assertEquals(1,con.createStatement().executeUpdate("Updatetransactionssetv='qwert2'"));
assertEqualsRsValue("qwert2","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
Savepointsavepoint=con.setSavepoint();
assertEquals(1,con.createStatement().executeUpdate("Updatetransactionssetv='qwert3'"));
assertEqualsRsValue("qwert3","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
con.rollback(savepoint);
con.commit();
assertEqualsRsValue("qwert2","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
}finally{
try{
con.createStatement().execute("DropTabletransactions");
}catch(Throwablee){e.printStackTrace();}
con.setAutoCommit(true);
}
}
publicvoidtestUpdateAndSavepoint()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTabletransactions(vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
assertEquals(1,con.createStatement().executeUpdate("InsertIntotransactions(v)Values('qwert')"));
assertEqualsRsValue("qwert","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
con.setAutoCommit(false);
assertEquals(1,con.createStatement().executeUpdate("Updatetransactionssetv='qwert1'"));
assertEqualsRsValue("qwert1","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
assertEquals(1,con.createStatement().executeUpdate("Updatetransactionssetv='qwert2'"));
assertEqualsRsValue("qwert2","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
Savepointsavepoint=con.setSavepoint();
assertEquals(1,con.createStatement().executeUpdate("Updatetransactionssetv='qwert3'"));
assertEqualsRsValue("qwert3","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
assertEquals(1,con.createStatement().executeUpdate("Updatetransactionssetv='qwert4'"));
assertEqualsRsValue("qwert4","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
assertEquals(1,con.createStatement().executeUpdate("Updatetransactionssetv='qwert5'"));
assertEqualsRsValue("qwert5","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
con.rollback(savepoint);
con.commit();
assertEqualsRsValue("qwert2","Select*fromtransactions");
assertEqualsRsValue(newInteger(1),"Selectcount(*)fromtransactions");
}finally{
dropTable(con,"transactions");
con.setAutoCommit(true);
}
}
publicvoidtestInsertRow_withWrongWhere()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.setAutoCommit(false);
con.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)Values('qwert')");
ResultSetrs=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE)
.executeQuery("Select*fromtransactionsWhere1=0");
rs.moveToInsertRow();
rs.updateString("v","qwert2");
rs.insertRow();
rs.beforeFirst();
assertTrue(rs.next());
assertEquals("qwert2",rs.getString("v"));
assertFalse(rs.next());
}finally{
try{
con.createStatement().execute("DropTabletransactions");
}catch(Throwablee){e.printStackTrace();}
con.setAutoCommit(true);
}
}
publicvoidtestInsertRow_withRightWhere()throwsException{
Connectioncon=AllTests.getConnection();
try{
con.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
con.createStatement().execute("InsertIntotransactions(v)Values('qwert2')");
ResultSetrs=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE)
.executeQuery("Select*fromtransactionsWherev='qwert'");
rs.moveToInsertRow();
rs.updateString("v","qwert");
rs.insertRow();
rs.beforeFirst();
assertTrue(rs.next());
assertEquals("qwert",rs.getString("v"));
assertFalse(rs.next());
}finally{
try{
con.createStatement().execute("DropTabletransactions");
}catch(Throwablee){e.printStackTrace();}
}
}
publicvoidtestReadUncommited()throwsException{
Connectioncon1=AllTests.getConnection();
Connectioncon2=AllTests.createConnection();
try{
con2.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
con1.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
con1.setAutoCommit(false);
con1.createStatement().execute("InsertIntotransactions(v)Values('qwert2')");
ResultSetrs2=con2.createStatement().executeQuery("Selectcount(*)fromtransactions");
assertTrue(rs2.next());
assertEquals(1,rs2.getInt(1));
}finally{
dropTable(con1,"transactions");
con1.setAutoCommit(true);
con2.close();
}
}
publicvoidtestReadCommited()throwsException{
Connectioncon1=AllTests.getConnection();
Connectioncon2=AllTests.createConnection();
try{
con2.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
con1.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
con1.setAutoCommit(false);
con1.createStatement().execute("InsertIntotransactions(v)Values('qwert2')");
ResultSetrs2=con2.createStatement().executeQuery("Selectcount(*)fromtransactions");
assertTrue(rs2.next());
assertEquals(0,rs2.getInt(1));
}finally{
dropTable(con1,"transactions");
con1.setAutoCommit(true);
con2.close();
}
}
publicvoidtestReadSerialized()throwsException{
Connectioncon1=AllTests.getConnection();
Connectioncon2=AllTests.createConnection();
try{
con1.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
assertRowCount(0,"Select*fromtransactions");
con1.createStatement().execute("InsertIntotransactions(v)Values('qwert2')");
assertRowCount(1,"Select*fromtransactions");
con1.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
con1.setAutoCommit(false);
ResultSetrs1=con1.createStatement().executeQuery("Selectcount(*)fromtransactions");
assertTrue(rs1.next());
assertEquals("Count(*)",1,rs1.getInt(1));
ResultSetrs2=con2.createStatement().executeQuery("Selectcount(*)fromtransactions");
assertTrue(rs2.next());
assertEquals("Count(*)",1,rs2.getInt(1));
try{
con2.createStatement().execute("InsertIntotransactions(v)Values('qwert3')");
fail("TRANSACTION_SERIALIZABLEdoesnotlockthetable");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
}finally{
con2.close();
dropTable(con1,"transactions");
con1.setAutoCommit(true);
}
}
publicvoidtestReadWriteLock()throwsException{
Connectioncon1=AllTests.getConnection();
Connectioncon2=AllTests.createConnection();
try{
con1.createStatement().execute("CreateTabletransactions(iintidentity,vvarchar(20))");
con1.createStatement().execute("InsertIntotransactions(v)Values('qwert1')");
con1.setAutoCommit(false);
con1.createStatement().execute("UpdatetransactionsSetv='qwert'");
longtime=System.currentTimeMillis();
try{
con2.createStatement().executeQuery("Selectcount(*)fromtransactions");
}catch(SQLExceptionex){
assertSQLException("01000",0,ex);
}
assertTrue("Waittimetosmall",System.currentTimeMillis()-time>=ﻝ);
}finally{
con2.close();
con1.setAutoCommit(true);
dropTable(con1,"transactions");
}
}
}
packagesmallsql.tools;
importjava.io.*;
importjava.sql.*;
importjava.util.Properties;
importjavax.swing.JOptionPane;
importsmallsql.database.*;
publicclassCommandLine{
publicstaticvoidmain(String[]args)throwsException{
System.out.println("SmallSQLDatabasecommandlinetool\n");
Connectioncon=newSSDriver().connect("jdbc:smallsql",newProperties());
Statementst=con.createStatement();
if(args.length>0){
con.setCatalog(args[0]);
}
System.out.println("\tVersion:"+con.getMetaData().getDatabaseProductVersion());
System.out.println("\tCurrentdatabase:"+con.getCatalog());
System.out.println();
System.out.println("\tUsetheUSEcommandtochangethedatabasecontext.");
System.out.println("\tTypeﻝtimesENTERtoexecuteanySQLcommand.");
StringBuffercommand=newStringBuffer();
BufferedReaderinput=newBufferedReader(newInputStreamReader(System.in));
while(true){
try{
ﺝline;
try{
line=input.readLine();
}catch(IOExceptionex){
ex.printStackTrace();
JOptionPane.showMessageDialog(null,"Youneedtostartthecommandlineofthe\nSmallSQLDatabasewithaconsolewindow:\n\njava-jarsmallsql.jar\n\n"+ex,"FatalError",JOptionPane.OK_OPTION);
return;
}
if(line==null){
return;
}
if(line.length()==ﻝ&&command.length()>ﻝ){
booleanisRS=st.execute(command.toString());
if(isRS){
printRS(st.getResultSet());
}
command.setLength(0);
}
command.append(line).append('\n');
}catch(Exceptione){
command.setLength(0);
e.printStackTrace();
}
}
}
privatestaticvoidprintRS(ResultSetrs)throwsSQLException{
ResultSetMetaDatamd=rs.getMetaData();
intcount=md.getColumnCount();
for(inti=ﻝ;i<=count;i++){
System.out.print(md.getColumnLabel(i));
System.out.print('\t');
}
System.out.println();
while(rs.next()){
for(inti=ﻝ;i<=count;i++){
System.out.print(rs.getObject(i));
System.out.print('\t');
}
System.out.println();
}
}
}