smallsql/database/Column.java۞33۩package smallsql.database;
smallsql/database/Column.java۞35۩import java.io.*;
smallsql/database/Column.java۞36۩import java.nio.channels.FileChannel;
smallsql/database/Column.java۞37۩import java.sql.*;
smallsql/database/Column.java۞39۩import smallsql.database.language.Language;
smallsql/database/Column.java۞42۩class Column implements Cloneable{
smallsql/database/Column.java۞45۩private Expression defaultValue = Expression.NULL;
smallsql/database/Column.java۞46۩private String defaultDefinition;
smallsql/database/Column.java۞47۩private String name;
smallsql/database/Column.java۞48۩private boolean identity;
smallsql/database/Column.java۞49۩private boolean caseSensitive;
smallsql/database/Column.java۞50۩private boolean nullable = true;
smallsql/database/Column.java۞51۩private int scale;
smallsql/database/Column.java۞52۩private int precision;
smallsql/database/Column.java۞53۩private int dataType;
smallsql/database/Column.java۞54۩private Identity counter;
smallsql/database/Column.java۞57۩void setName( String name ){
smallsql/database/Column.java۞58۩this.name = name;
smallsql/database/Column.java۞59۩}
smallsql/database/Column.java۞62۩void setDefaultValue(Expression defaultValue, String defaultDefinition){
smallsql/database/Column.java۞63۩this.defaultValue 		= defaultValue;
smallsql/database/Column.java۞64۩this.defaultDefinition	= defaultDefinition;
smallsql/database/Column.java۞65۩}
smallsql/database/Column.java۞71۩Expression getDefaultValue(SSConnection con) throws SQLException{
smallsql/database/Column.java۞72۩if(identity)
smallsql/database/Column.java۞73۩counter.createNextValue(con);
smallsql/database/Column.java۞74۩return defaultValue;
smallsql/database/Column.java۞75۩}
smallsql/database/Column.java۞77۩String getDefaultDefinition(){
smallsql/database/Column.java۞78۩return defaultDefinition;
smallsql/database/Column.java۞79۩}
smallsql/database/Column.java۞81۩String getName(){
smallsql/database/Column.java۞82۩return name;
smallsql/database/Column.java۞83۩}
smallsql/database/Column.java۞85۩boolean isAutoIncrement(){
smallsql/database/Column.java۞86۩return identity;
smallsql/database/Column.java۞87۩}
smallsql/database/Column.java۞89۩void setAutoIncrement(boolean identity){
smallsql/database/Column.java۞90۩this.identity = identity;
smallsql/database/Column.java۞91۩}
smallsql/database/Column.java۞93۩int initAutoIncrement(FileChannel raFile, long filePos) throws IOException{
smallsql/database/Column.java۞94۩if(identity){
smallsql/database/Column.java۞95۩counter = new Identity(raFile, filePos);
smallsql/database/Column.java۞96۩defaultValue = new ExpressionValue( counter, SQLTokenizer.BIGINT );
smallsql/database/Column.java۞97۩}
smallsql/database/Column.java۞98۩return 8;
smallsql/database/Column.java۞99۩}
smallsql/database/Column.java۞101۩void setNewAutoIncrementValue(Expression obj) throws Exception{
smallsql/database/Column.java۞102۩if(identity){
smallsql/database/Column.java۞103۩counter.setNextValue(obj);
smallsql/database/Column.java۞104۩}
smallsql/database/Column.java۞105۩}
smallsql/database/Column.java۞107۩boolean isCaseSensitive(){
smallsql/database/Column.java۞108۩return caseSensitive;
smallsql/database/Column.java۞109۩}
smallsql/database/Column.java۞111۩void setNullable(boolean nullable){
smallsql/database/Column.java۞112۩this.nullable = nullable;
smallsql/database/Column.java۞113۩}
smallsql/database/Column.java۞115۩boolean isNullable(){
smallsql/database/Column.java۞116۩return nullable;
smallsql/database/Column.java۞117۩}
smallsql/database/Column.java۞119۩void setDataType(int dataType){
smallsql/database/Column.java۞120۩this.dataType = dataType;
smallsql/database/Column.java۞121۩}
smallsql/database/Column.java۞123۩int getDataType(){
smallsql/database/Column.java۞124۩return dataType;
smallsql/database/Column.java۞125۩}
smallsql/database/Column.java۞128۩int getDisplaySize(){
smallsql/database/Column.java۞129۩return SSResultSetMetaData.getDisplaySize( dataType, precision, scale);
smallsql/database/Column.java۞130۩}
smallsql/database/Column.java۞132۩void setScale(int scale){
smallsql/database/Column.java۞133۩this.scale = scale;
smallsql/database/Column.java۞134۩}
smallsql/database/Column.java۞136۩int getScale(){
smallsql/database/Column.java۞137۩switch(dataType){
smallsql/database/Column.java۞138۩case SQLTokenizer.DECIMAL:
smallsql/database/Column.java۞139۩case SQLTokenizer.NUMERIC:
smallsql/database/Column.java۞140۩return scale;
smallsql/database/Column.java۞141۩default:
smallsql/database/Column.java۞142۩return Expression.getScale(dataType);
smallsql/database/Column.java۞143۩}
smallsql/database/Column.java۞144۩}
smallsql/database/Column.java۞146۩void setPrecision(int precision) throws SQLException{
smallsql/database/Column.java۞147۩if(precision<0) throw SmallSQLException.create(Language.COL_INVALID_SIZE, new Object[] { new Integer(precision), name});
smallsql/database/Column.java۞148۩this.precision = precision;
smallsql/database/Column.java۞149۩}
smallsql/database/Column.java۞151۩int getPrecision(){
smallsql/database/Column.java۞152۩return SSResultSetMetaData.getDataTypePrecision( dataType, precision );
smallsql/database/Column.java۞153۩}
smallsql/database/Column.java۞155۩int getColumnSize(){
smallsql/database/Column.java۞156۩if(SSResultSetMetaData.isNumberDataType(dataType))
smallsql/database/Column.java۞157۩return getPrecision();
smallsql/database/Column.java۞158۩else return getDisplaySize();
smallsql/database/Column.java۞159۩}
smallsql/database/Column.java۞162۩int getFlag(){
smallsql/database/Column.java۞163۩return (identity        ? 1 : 0) |
smallsql/database/Column.java۞164۩(caseSensitive   ? 2 : 0) |
smallsql/database/Column.java۞165۩(nullable        ? 4 : 0);
smallsql/database/Column.java۞166۩}
smallsql/database/Column.java۞169۩void setFlag(int flag){
smallsql/database/Column.java۞170۩identity        = (flag & 1) > 0;
smallsql/database/Column.java۞171۩caseSensitive   = (flag & 2) > 0;
smallsql/database/Column.java۞172۩nullable        = (flag & 4) > 0;
smallsql/database/Column.java۞173۩}
smallsql/database/Column.java۞176۩Column copy(){
smallsql/database/Column.java۞177۩try{
smallsql/database/Column.java۞178۩return (Column)clone();
smallsql/database/Column.java۞179۩}catch(Exception e){return null;}
smallsql/database/Column.java۞181۩}
smallsql/database/Column.java۞182۩}
smallsql/database/ColumnExpression.java۞34۩package smallsql.database;
smallsql/database/ColumnExpression.java۞43۩class ColumnExpression extends Column {
smallsql/database/ColumnExpression.java۞45۩final private Expression expr;
smallsql/database/ColumnExpression.java۞47۩ColumnExpression(Expression expr){
smallsql/database/ColumnExpression.java۞48۩this.expr = expr;
smallsql/database/ColumnExpression.java۞49۩}
smallsql/database/ColumnExpression.java۞52۩String getName(){
smallsql/database/ColumnExpression.java۞53۩return expr.getAlias();
smallsql/database/ColumnExpression.java۞54۩}
smallsql/database/ColumnExpression.java۞57۩boolean isAutoIncrement(){
smallsql/database/ColumnExpression.java۞58۩return expr.isAutoIncrement();
smallsql/database/ColumnExpression.java۞59۩}
smallsql/database/ColumnExpression.java۞62۩boolean isCaseSensitive(){
smallsql/database/ColumnExpression.java۞63۩return expr.isCaseSensitive();
smallsql/database/ColumnExpression.java۞64۩}
smallsql/database/ColumnExpression.java۞67۩boolean isNullable(){
smallsql/database/ColumnExpression.java۞68۩return expr.isNullable();
smallsql/database/ColumnExpression.java۞69۩}
smallsql/database/ColumnExpression.java۞72۩int getDataType(){
smallsql/database/ColumnExpression.java۞73۩return expr.getDataType();
smallsql/database/ColumnExpression.java۞74۩}
smallsql/database/ColumnExpression.java۞77۩int getDisplaySize(){
smallsql/database/ColumnExpression.java۞78۩return expr.getDisplaySize();
smallsql/database/ColumnExpression.java۞79۩}
smallsql/database/ColumnExpression.java۞82۩int getScale(){
smallsql/database/ColumnExpression.java۞83۩return expr.getScale();
smallsql/database/ColumnExpression.java۞84۩}
smallsql/database/ColumnExpression.java۞87۩int getPrecision(){
smallsql/database/ColumnExpression.java۞88۩return expr.getPrecision();
smallsql/database/ColumnExpression.java۞89۩}
smallsql/database/ColumnExpression.java۞91۩}
smallsql/database/Columns.java۞33۩package smallsql.database;
smallsql/database/Columns.java۞42۩final class Columns {
smallsql/database/Columns.java۞43۩private int size;
smallsql/database/Columns.java۞44۩private Column[] data;
smallsql/database/Columns.java۞46۩Columns(){
smallsql/database/Columns.java۞47۩data = new Column[16];
smallsql/database/Columns.java۞48۩}
smallsql/database/Columns.java۞54۩final int size(){
smallsql/database/Columns.java۞55۩return size;
smallsql/database/Columns.java۞56۩}
smallsql/database/Columns.java۞58۩final Column get(int idx){
smallsql/database/Columns.java۞59۩if (idx >= size)
smallsql/database/Columns.java۞60۩throw new IndexOutOfBoundsException("Column index: "+idx+", Size: "+size);
smallsql/database/Columns.java۞61۩return data[idx];
smallsql/database/Columns.java۞62۩}
smallsql/database/Columns.java۞73۩final Column get(String name){
smallsql/database/Columns.java۞74۩for(int i = 0; i < size; i++){
smallsql/database/Columns.java۞75۩Column column = data[i];
smallsql/database/Columns.java۞76۩if(name.equalsIgnoreCase(column.getName())){
smallsql/database/Columns.java۞77۩return column;
smallsql/database/Columns.java۞78۩}
smallsql/database/Columns.java۞79۩}
smallsql/database/Columns.java۞80۩return null;
smallsql/database/Columns.java۞81۩}
smallsql/database/Columns.java۞92۩final void add(Column column){
smallsql/database/Columns.java۞93۩if(column == null){
smallsql/database/Columns.java۞94۩throw new NullPointerException("Column is null.");
smallsql/database/Columns.java۞95۩}
smallsql/database/Columns.java۞96۩if(size >= data.length){
smallsql/database/Columns.java۞97۩resize(size << 1);
smallsql/database/Columns.java۞98۩}
smallsql/database/Columns.java۞99۩data[size++] = column;
smallsql/database/Columns.java۞100۩}
smallsql/database/Columns.java۞145۩Columns copy(){
smallsql/database/Columns.java۞146۩Columns copy = new Columns();
smallsql/database/Columns.java۞147۩Column[] cols = copy.data = (Column[]) data.clone();
smallsql/database/Columns.java۞148۩for(int i=0; i<size; i++){
smallsql/database/Columns.java۞149۩cols[i] = cols[i].copy();
smallsql/database/Columns.java۞150۩}
smallsql/database/Columns.java۞151۩copy.size = size;
smallsql/database/Columns.java۞152۩return copy;
smallsql/database/Columns.java۞153۩}
smallsql/database/Columns.java۞156۩private final void resize(int newSize){
smallsql/database/Columns.java۞157۩Column[] dataNew = new Column[newSize];
smallsql/database/Columns.java۞158۩System.arraycopy(data, 0, dataNew, 0, size);
smallsql/database/Columns.java۞159۩data = dataNew;
smallsql/database/Columns.java۞160۩}
smallsql/database/Columns.java۞161۩}
smallsql/database/Command.java۞33۩package smallsql.database;
smallsql/database/Command.java۞35۩import java.sql.*;
smallsql/database/Command.java۞37۩import smallsql.database.language.Language;
smallsql/database/Command.java۞40۩abstract class Command {
smallsql/database/Command.java۞42۩int type;
smallsql/database/Command.java۞43۩String catalog;
smallsql/database/Command.java۞44۩String name;
smallsql/database/Command.java۞46۩SSResultSet rs;
smallsql/database/Command.java۞47۩int updateCount = -1;
smallsql/database/Command.java۞50۩final Expressions columnExpressions;
smallsql/database/Command.java۞53۩Expressions params  = new Expressions();
smallsql/database/Command.java۞55۩final Logger log;
smallsql/database/Command.java۞57۩Command(Logger log){
smallsql/database/Command.java۞58۩this.log = log;
smallsql/database/Command.java۞59۩this.columnExpressions = new Expressions();
smallsql/database/Command.java۞60۩}
smallsql/database/Command.java۞62۩Command(Logger log, Expressions columnExpressions){
smallsql/database/Command.java۞63۩this.log = log;
smallsql/database/Command.java۞64۩this.columnExpressions = columnExpressions;
smallsql/database/Command.java۞65۩}
smallsql/database/Command.java۞74۩void addColumnExpression( Expression column ) throws SQLException{
smallsql/database/Command.java۞75۩columnExpressions.add( column );
smallsql/database/Command.java۞76۩}
smallsql/database/Command.java۞78۩void addParameter( ExpressionValue param ){
smallsql/database/Command.java۞79۩params.add( param );
smallsql/database/Command.java۞80۩}
smallsql/database/Command.java۞86۩void verifyParams() throws SQLException{
smallsql/database/Command.java۞87۩for(int p=0; p<params.size(); p++){
smallsql/database/Command.java۞88۩if(((ExpressionValue)params.get(p)).isEmpty())
smallsql/database/Command.java۞89۩throw SmallSQLException.create(Language.PARAM_EMPTY, new Integer(p+1));
smallsql/database/Command.java۞90۩}
smallsql/database/Command.java۞91۩}
smallsql/database/Command.java۞96۩void clearParams(){
smallsql/database/Command.java۞97۩for(int p=0; p<params.size(); p++){
smallsql/database/Command.java۞98۩((ExpressionValue)params.get(p)).clear();
smallsql/database/Command.java۞99۩}
smallsql/database/Command.java۞100۩}
smallsql/database/Command.java۞106۩private ExpressionValue getParam(int idx) throws SQLException{
smallsql/database/Command.java۞107۩if(idx < 1 || idx > params.size())
smallsql/database/Command.java۞108۩throw SmallSQLException.create(Language.PARAM_IDX_OUT_RANGE, new Object[] { new Integer(idx), new Integer(params.size())});
smallsql/database/Command.java۞109۩return ((ExpressionValue)params.get(idx-1));
smallsql/database/Command.java۞110۩}
smallsql/database/Command.java۞116۩void setParamValue(int idx, Object value, int dataType) throws SQLException{
smallsql/database/Command.java۞117۩getParam(idx).set( value, dataType );
smallsql/database/Command.java۞118۩if(log.isLogging()){
smallsql/database/Command.java۞119۩log.println("param"+idx+'='+value+"; type="+dataType);
smallsql/database/Command.java۞120۩}
smallsql/database/Command.java۞121۩}
smallsql/database/Command.java۞127۩void setParamValue(int idx, Object value, int dataType, int length) throws SQLException{
smallsql/database/Command.java۞128۩getParam(idx).set( value, dataType, length );
smallsql/database/Command.java۞129۩if(log.isLogging()){
smallsql/database/Command.java۞130۩log.println("param"+idx+'='+value+"; type="+dataType+"; length="+length);
smallsql/database/Command.java۞131۩}
smallsql/database/Command.java۞132۩}
smallsql/database/Command.java۞134۩final void execute(SSConnection con, SSStatement st) throws SQLException{
smallsql/database/Command.java۞135۩int savepoint = con.getSavepoint();
smallsql/database/Command.java۞136۩try{
smallsql/database/Command.java۞137۩executeImpl( con, st );
smallsql/database/Command.java۞138۩}catch(Throwable e){
smallsql/database/Command.java۞139۩con.rollback(savepoint);
smallsql/database/Command.java۞140۩throw SmallSQLException.createFromException(e);
smallsql/database/Command.java۞141۩}finally{
smallsql/database/Command.java۞142۩if(con.getAutoCommit()) con.commit();
smallsql/database/Command.java۞143۩}
smallsql/database/Command.java۞144۩}
smallsql/database/Command.java۞146۩abstract void executeImpl(SSConnection con, SSStatement st) throws Exception;
smallsql/database/Command.java۞148۩SSResultSet getQueryResult() throws SQLException{
smallsql/database/Command.java۞149۩if(rs == null)
smallsql/database/Command.java۞150۩throw SmallSQLException.create(Language.RSET_NOT_PRODUCED);
smallsql/database/Command.java۞151۩return rs;
smallsql/database/Command.java۞152۩}
smallsql/database/Command.java۞154۩SSResultSet getResultSet(){
smallsql/database/Command.java۞155۩return rs;
smallsql/database/Command.java۞156۩}
smallsql/database/Command.java۞158۩int getUpdateCount(){
smallsql/database/Command.java۞159۩return updateCount;
smallsql/database/Command.java۞160۩}
smallsql/database/Command.java۞167۩boolean getMoreResults(){
smallsql/database/Command.java۞168۩rs = null;
smallsql/database/Command.java۞169۩updateCount = -1;
smallsql/database/Command.java۞170۩return false;
smallsql/database/Command.java۞171۩}
smallsql/database/Command.java۞177۩void setMaxRows(int max){}
smallsql/database/Command.java۞180۩int getMaxRows(){return -1;}
smallsql/database/Command.java۞181۩}
smallsql/database/CommandCreateDatabase.java۞33۩package smallsql.database;
smallsql/database/CommandCreateDatabase.java۞35۩import java.io.*;
smallsql/database/CommandCreateDatabase.java۞36۩import smallsql.database.language.Language;
smallsql/database/CommandCreateDatabase.java۞38۩public class CommandCreateDatabase extends Command{
smallsql/database/CommandCreateDatabase.java۞41۩CommandCreateDatabase( Logger log, String name ){
smallsql/database/CommandCreateDatabase.java۞42۩super(log);
smallsql/database/CommandCreateDatabase.java۞43۩this.type = SQLTokenizer.DATABASE;
smallsql/database/CommandCreateDatabase.java۞44۩if(name.startsWith("file:"))
smallsql/database/CommandCreateDatabase.java۞45۩name = name.substring(5);
smallsql/database/CommandCreateDatabase.java۞46۩this.name = name;
smallsql/database/CommandCreateDatabase.java۞47۩}
smallsql/database/CommandCreateDatabase.java۞50۩@Override
smallsql/database/CommandCreateDatabase.java۞51۩void executeImpl(SSConnection con, SSStatement st) throws Exception{
smallsql/database/CommandCreateDatabase.java۞52۩if( con.isReadOnly() ){
smallsql/database/CommandCreateDatabase.java۞53۩throw SmallSQLException.create(Language.DB_READONLY);
smallsql/database/CommandCreateDatabase.java۞54۩}
smallsql/database/CommandCreateDatabase.java۞55۩File dir = new File( name );
smallsql/database/CommandCreateDatabase.java۞56۩dir.mkdirs();
smallsql/database/CommandCreateDatabase.java۞57۩if(!new File(dir, Utils.MASTER_FILENAME).createNewFile()){
smallsql/database/CommandCreateDatabase.java۞58۩throw SmallSQLException.create(Language.DB_EXISTENT, name);
smallsql/database/CommandCreateDatabase.java۞59۩}
smallsql/database/CommandCreateDatabase.java۞60۩}
smallsql/database/CommandCreateDatabase.java۞61۩}
smallsql/database/CommandCreateView.java۞33۩package smallsql.database;
smallsql/database/CommandCreateView.java۞37۩public class CommandCreateView extends Command{
smallsql/database/CommandCreateView.java۞39۩private Columns columns = new Columns();
smallsql/database/CommandCreateView.java۞40۩String sql;
smallsql/database/CommandCreateView.java۞42۩CommandCreateView( Logger log, String name ){
smallsql/database/CommandCreateView.java۞43۩super(log);
smallsql/database/CommandCreateView.java۞44۩this.type = SQLTokenizer.VIEW;
smallsql/database/CommandCreateView.java۞45۩this.name = name;
smallsql/database/CommandCreateView.java۞46۩}
smallsql/database/CommandCreateView.java۞52۩void addColumn( Column column ){
smallsql/database/CommandCreateView.java۞53۩columns.add( column );
smallsql/database/CommandCreateView.java۞54۩}
smallsql/database/CommandCreateView.java۞56۩void executeImpl(SSConnection con, SSStatement st) throws Exception{
smallsql/database/CommandCreateView.java۞57۩con.getDatabase(false).createView(con, name, sql);
smallsql/database/CommandCreateView.java۞58۩}
smallsql/database/CommandCreateView.java۞59۩}
smallsql/database/CommandDelete.java۞33۩package smallsql.database;
smallsql/database/CommandDelete.java۞40۩class CommandDelete extends CommandSelect {
smallsql/database/CommandDelete.java۞43۩CommandDelete(Logger log){
smallsql/database/CommandDelete.java۞44۩super(log);
smallsql/database/CommandDelete.java۞45۩}
smallsql/database/CommandDelete.java۞48۩void executeImpl(SSConnection con, SSStatement st) throws Exception {
smallsql/database/CommandDelete.java۞49۩compile(con);
smallsql/database/CommandDelete.java۞50۩TableViewResult result = TableViewResult.getTableViewResult(from);
smallsql/database/CommandDelete.java۞52۩updateCount = 0;
smallsql/database/CommandDelete.java۞53۩from.execute();
smallsql/database/CommandDelete.java۞54۩while(next()){
smallsql/database/CommandDelete.java۞55۩result.deleteRow();
smallsql/database/CommandDelete.java۞56۩updateCount++;
smallsql/database/CommandDelete.java۞57۩}
smallsql/database/CommandDelete.java۞58۩}
smallsql/database/CommandDelete.java۞60۩}
smallsql/database/CommandDrop.java۞33۩package smallsql.database;
smallsql/database/CommandDrop.java۞35۩import java.io.*;
smallsql/database/CommandDrop.java۞36۩import smallsql.database.language.Language;
smallsql/database/CommandDrop.java۞38۩public class CommandDrop extends Command {
smallsql/database/CommandDrop.java۞40۩CommandDrop( Logger log, String catalog, String name, int type ){
smallsql/database/CommandDrop.java۞41۩super(log);
smallsql/database/CommandDrop.java۞42۩this.type 		= type;
smallsql/database/CommandDrop.java۞43۩this.catalog 	= catalog;
smallsql/database/CommandDrop.java۞44۩this.name 		= name;
smallsql/database/CommandDrop.java۞45۩}
smallsql/database/CommandDrop.java۞47۩void executeImpl(SSConnection con, SSStatement st) throws Exception {
smallsql/database/CommandDrop.java۞48۩switch(type){
smallsql/database/CommandDrop.java۞49۩case SQLTokenizer.DATABASE:
smallsql/database/CommandDrop.java۞50۩if(name.startsWith("file:"))
smallsql/database/CommandDrop.java۞51۩name = name.substring(5);
smallsql/database/CommandDrop.java۞52۩File dir = new File( name );
smallsql/database/CommandDrop.java۞53۩if(!dir.isDirectory() ||
smallsql/database/CommandDrop.java۞54۩!new File( dir, Utils.MASTER_FILENAME ).exists())
smallsql/database/CommandDrop.java۞55۩throw SmallSQLException.create(Language.DB_NONEXISTENT, name);
smallsql/database/CommandDrop.java۞56۩File files[] = dir.listFiles();
smallsql/database/CommandDrop.java۞57۩if(files != null)
smallsql/database/CommandDrop.java۞58۩for(int i=0; i<files.length; i++){
smallsql/database/CommandDrop.java۞59۩files[i].delete();
smallsql/database/CommandDrop.java۞60۩}
smallsql/database/CommandDrop.java۞61۩dir.delete();
smallsql/database/CommandDrop.java۞62۩break;
smallsql/database/CommandDrop.java۞63۩case SQLTokenizer.TABLE:
smallsql/database/CommandDrop.java۞64۩Database.dropTable( con, catalog, name );
smallsql/database/CommandDrop.java۞65۩break;
smallsql/database/CommandDrop.java۞66۩case SQLTokenizer.VIEW:
smallsql/database/CommandDrop.java۞67۩Database.dropView( con, catalog, name );
smallsql/database/CommandDrop.java۞68۩break;
smallsql/database/CommandDrop.java۞69۩case SQLTokenizer.INDEX:
smallsql/database/CommandDrop.java۞70۩case SQLTokenizer.PROCEDURE:
smallsql/database/CommandDrop.java۞71۩throw new java.lang.UnsupportedOperationException();
smallsql/database/CommandDrop.java۞72۩default:
smallsql/database/CommandDrop.java۞73۩throw new Error();
smallsql/database/CommandDrop.java۞74۩}
smallsql/database/CommandDrop.java۞75۩}
smallsql/database/CommandDrop.java۞76۩}
smallsql/database/CommandInsert.java۞33۩package smallsql.database;
smallsql/database/CommandInsert.java۞35۩import java.sql.SQLException;
smallsql/database/CommandInsert.java۞36۩import java.util.ArrayList;
smallsql/database/CommandInsert.java۞37۩import smallsql.database.language.Language;
smallsql/database/CommandInsert.java۞40۩public class CommandInsert extends Command {
smallsql/database/CommandInsert.java۞42۩boolean noColumns;
smallsql/database/CommandInsert.java۞43۩private CommandSelect cmdSel;
smallsql/database/CommandInsert.java۞45۩private Table table;
smallsql/database/CommandInsert.java۞46۩private long tableTimestamp;
smallsql/database/CommandInsert.java۞47۩private int[] matrix;
smallsql/database/CommandInsert.java۞49۩CommandInsert(Logger log, String name){
smallsql/database/CommandInsert.java۞50۩super(log);
smallsql/database/CommandInsert.java۞51۩this.name = name;
smallsql/database/CommandInsert.java۞52۩}
smallsql/database/CommandInsert.java۞55۩void addColumnExpression(Expression column) throws SQLException{
smallsql/database/CommandInsert.java۞56۩if(columnExpressions.indexOf(column) >= 0){
smallsql/database/CommandInsert.java۞57۩throw SmallSQLException.create(Language.COL_DUPLICATE, column);
smallsql/database/CommandInsert.java۞58۩}
smallsql/database/CommandInsert.java۞59۩super.addColumnExpression(column);
smallsql/database/CommandInsert.java۞60۩}
smallsql/database/CommandInsert.java۞63۩void addValues(Expressions values){
smallsql/database/CommandInsert.java۞65۩this.cmdSel = new CommandSelect(log, values );
smallsql/database/CommandInsert.java۞66۩}
smallsql/database/CommandInsert.java۞69۩void addValues( CommandSelect cmdSel ){
smallsql/database/CommandInsert.java۞70۩this.cmdSel = cmdSel;
smallsql/database/CommandInsert.java۞71۩}
smallsql/database/CommandInsert.java۞76۩private void compile(SSConnection con) throws Exception{
smallsql/database/CommandInsert.java۞77۩TableView tableView = con.getDatabase(false).getTableView( con, name);
smallsql/database/CommandInsert.java۞78۩if(!(tableView instanceof Table))
smallsql/database/CommandInsert.java۞79۩throw SmallSQLException.create(Language.VIEW_INSERT);
smallsql/database/CommandInsert.java۞80۩table = (Table)tableView;
smallsql/database/CommandInsert.java۞81۩tableTimestamp = table.getTimestamp();
smallsql/database/CommandInsert.java۞82۩cmdSel.compile(con);
smallsql/database/CommandInsert.java۞83۩int count = table.columns.size();
smallsql/database/CommandInsert.java۞84۩matrix = new int[count];
smallsql/database/CommandInsert.java۞85۩if(noColumns){
smallsql/database/CommandInsert.java۞88۩columnExpressions.clear();
smallsql/database/CommandInsert.java۞89۩for(int i=0; i<count; i++){
smallsql/database/CommandInsert.java۞90۩matrix[i] = i;
smallsql/database/CommandInsert.java۞91۩}
smallsql/database/CommandInsert.java۞92۩if(count != cmdSel.columnExpressions.size())
smallsql/database/CommandInsert.java۞93۩throw SmallSQLException.create(Language.COL_VAL_UNMATCH);
smallsql/database/CommandInsert.java۞94۩}else{
smallsql/database/CommandInsert.java۞95۩for(int i=0; i<count; i++) matrix[i] = -1;
smallsql/database/CommandInsert.java۞96۩for(int c=0; c<columnExpressions.size(); c++){
smallsql/database/CommandInsert.java۞98۩Expression sqlCol = columnExpressions.get(c);
smallsql/database/CommandInsert.java۞99۩String sqlColName = sqlCol.getName();
smallsql/database/CommandInsert.java۞100۩int idx = table.findColumnIdx( sqlColName );
smallsql/database/CommandInsert.java۞101۩if(idx >= 0){
smallsql/database/CommandInsert.java۞102۩matrix[idx] = c;
smallsql/database/CommandInsert.java۞103۩}else{
smallsql/database/CommandInsert.java۞104۩throw SmallSQLException.create(Language.COL_MISSING, sqlColName);
smallsql/database/CommandInsert.java۞105۩}
smallsql/database/CommandInsert.java۞106۩}
smallsql/database/CommandInsert.java۞107۩if(columnExpressions.size() != cmdSel.columnExpressions.size())
smallsql/database/CommandInsert.java۞108۩throw SmallSQLException.create(Language.COL_VAL_UNMATCH);
smallsql/database/CommandInsert.java۞109۩}
smallsql/database/CommandInsert.java۞110۩}
smallsql/database/CommandInsert.java۞114۩void executeImpl(SSConnection con, SSStatement st) throws Exception {
smallsql/database/CommandInsert.java۞116۩if(table == null || tableTimestamp != table.getTimestamp()) compile( con );
smallsql/database/CommandInsert.java۞118۩final IndexDescriptions indexes = table.indexes;
smallsql/database/CommandInsert.java۞120۩updateCount = 0;
smallsql/database/CommandInsert.java۞121۩cmdSel.from.execute();
smallsql/database/CommandInsert.java۞122۩cmdSel.beforeFirst();
smallsql/database/CommandInsert.java۞125۩Strings keyColumnNames = null;
smallsql/database/CommandInsert.java۞126۩ArrayList keys = null;
smallsql/database/CommandInsert.java۞127۩boolean needGeneratedKeys = st.needGeneratedKeys();
smallsql/database/CommandInsert.java۞128۩int generatedKeysType = 0;
smallsql/database/CommandInsert.java۞130۩while(cmdSel.next()){
smallsql/database/CommandInsert.java۞131۩if(needGeneratedKeys){
smallsql/database/CommandInsert.java۞132۩keyColumnNames = new Strings();
smallsql/database/CommandInsert.java۞133۩keys = new ArrayList();
smallsql/database/CommandInsert.java۞134۩if(st.getGeneratedKeyNames() != null)
smallsql/database/CommandInsert.java۞135۩generatedKeysType = 1;
smallsql/database/CommandInsert.java۞136۩if(st.getGeneratedKeyIndexes() != null)
smallsql/database/CommandInsert.java۞137۩generatedKeysType = 2;
smallsql/database/CommandInsert.java۞138۩}
smallsql/database/CommandInsert.java۞139۩StoreImpl store = table.getStoreInsert( con );
smallsql/database/CommandInsert.java۞140۩for(int c=0; c<matrix.length; c++){
smallsql/database/CommandInsert.java۞141۩Column column = table.columns.get(c);
smallsql/database/CommandInsert.java۞142۩int idx = matrix[c];
smallsql/database/CommandInsert.java۞143۩Expression valueExpress;
smallsql/database/CommandInsert.java۞144۩if(idx >= 0){
smallsql/database/CommandInsert.java۞145۩valueExpress = cmdSel.columnExpressions.get(idx);
smallsql/database/CommandInsert.java۞146۩}else{
smallsql/database/CommandInsert.java۞147۩valueExpress = column.getDefaultValue(con);
smallsql/database/CommandInsert.java۞148۩if(needGeneratedKeys && generatedKeysType == 0 && valueExpress != Expression.NULL){
smallsql/database/CommandInsert.java۞149۩keyColumnNames.add(column.getName());
smallsql/database/CommandInsert.java۞150۩keys.add(valueExpress.getObject());
smallsql/database/CommandInsert.java۞151۩}
smallsql/database/CommandInsert.java۞152۩}
smallsql/database/CommandInsert.java۞153۩if(needGeneratedKeys && generatedKeysType == 1){
smallsql/database/CommandInsert.java۞154۩String[] keyNames = st.getGeneratedKeyNames();
smallsql/database/CommandInsert.java۞155۩for(int i=0; i<keyNames.length; i++){
smallsql/database/CommandInsert.java۞156۩if(column.getName().equalsIgnoreCase(keyNames[i])){
smallsql/database/CommandInsert.java۞157۩keyColumnNames.add(column.getName());
smallsql/database/CommandInsert.java۞158۩keys.add(valueExpress.getObject());
smallsql/database/CommandInsert.java۞159۩break;
smallsql/database/CommandInsert.java۞160۩}
smallsql/database/CommandInsert.java۞161۩}
smallsql/database/CommandInsert.java۞162۩}
smallsql/database/CommandInsert.java۞163۩if(needGeneratedKeys && generatedKeysType == 2){
smallsql/database/CommandInsert.java۞164۩int[] keyIndexes = st.getGeneratedKeyIndexes();
smallsql/database/CommandInsert.java۞165۩for(int i=0; i<keyIndexes.length; i++){
smallsql/database/CommandInsert.java۞166۩if(c+1 == keyIndexes[i]){
smallsql/database/CommandInsert.java۞167۩keyColumnNames.add(column.getName());
smallsql/database/CommandInsert.java۞168۩keys.add(valueExpress.getObject());
smallsql/database/CommandInsert.java۞169۩break;
smallsql/database/CommandInsert.java۞170۩}
smallsql/database/CommandInsert.java۞171۩}
smallsql/database/CommandInsert.java۞172۩}
smallsql/database/CommandInsert.java۞173۩store.writeExpression( valueExpress, column );
smallsql/database/CommandInsert.java۞174۩for(int i=0; i<indexes.size(); i++){
smallsql/database/CommandInsert.java۞175۩indexes.get(i).writeExpression( c, valueExpress );
smallsql/database/CommandInsert.java۞176۩}
smallsql/database/CommandInsert.java۞177۩}
smallsql/database/CommandInsert.java۞178۩store.writeFinsh( con );
smallsql/database/CommandInsert.java۞179۩for(int i=0; i<indexes.size(); i++){
smallsql/database/CommandInsert.java۞180۩indexes.get(i).writeFinish( con );
smallsql/database/CommandInsert.java۞181۩}
smallsql/database/CommandInsert.java۞182۩updateCount++;
smallsql/database/CommandInsert.java۞183۩if(needGeneratedKeys){
smallsql/database/CommandInsert.java۞184۩Object[][] data = new Object[1][keys.size()];
smallsql/database/CommandInsert.java۞185۩keys.toArray(data[0]);
smallsql/database/CommandInsert.java۞186۩st.setGeneratedKeys(new SSResultSet( st, Utils.createMemoryCommandSelect( con, keyColumnNames.toArray(), data)));
smallsql/database/CommandInsert.java۞187۩}
smallsql/database/CommandInsert.java۞188۩}
smallsql/database/CommandInsert.java۞189۩}
smallsql/database/CommandInsert.java۞191۩}
smallsql/database/CommandSelect.java۞33۩package smallsql.database;
smallsql/database/CommandSelect.java۞35۩import java.sql.*;
smallsql/database/CommandSelect.java۞36۩import smallsql.database.language.Language;
smallsql/database/CommandSelect.java۞38۩class CommandSelect extends Command{
smallsql/database/CommandSelect.java۞40۩private DataSources tables;
smallsql/database/CommandSelect.java۞41۩private Expression where;
smallsql/database/CommandSelect.java۞42۩RowSource from;
smallsql/database/CommandSelect.java۞43۩private Expressions groupBy;
smallsql/database/CommandSelect.java۞44۩private Expression having;
smallsql/database/CommandSelect.java۞45۩private Expressions orderBy;
smallsql/database/CommandSelect.java۞46۩private boolean isAggregateFunction;
smallsql/database/CommandSelect.java۞47۩private int maxRows = -1;
smallsql/database/CommandSelect.java۞49۩private boolean isDistinct;
smallsql/database/CommandSelect.java۞51۩CommandSelect(Logger log){
smallsql/database/CommandSelect.java۞52۩super(log);
smallsql/database/CommandSelect.java۞53۩}
smallsql/database/CommandSelect.java۞55۩CommandSelect(Logger log, Expressions columnExpressions){
smallsql/database/CommandSelect.java۞56۩super(log, columnExpressions);
smallsql/database/CommandSelect.java۞57۩}
smallsql/database/CommandSelect.java۞60۩boolean compile(SSConnection con) throws Exception{
smallsql/database/CommandSelect.java۞61۩boolean needCompile = false;
smallsql/database/CommandSelect.java۞62۩if(tables != null){
smallsql/database/CommandSelect.java۞63۩for(int i=0; i<tables.size(); i++){
smallsql/database/CommandSelect.java۞64۩DataSource fromEntry = tables.get(i);
smallsql/database/CommandSelect.java۞65۩needCompile |= fromEntry.init( con );
smallsql/database/CommandSelect.java۞66۩}
smallsql/database/CommandSelect.java۞67۩}
smallsql/database/CommandSelect.java۞69۩if(from == null){
smallsql/database/CommandSelect.java۞70۩from = new NoFromResult();
smallsql/database/CommandSelect.java۞71۩tables = new DataSources();
smallsql/database/CommandSelect.java۞72۩needCompile = true;
smallsql/database/CommandSelect.java۞73۩}
smallsql/database/CommandSelect.java۞74۩if(!needCompile) return false;
smallsql/database/CommandSelect.java۞76۩for(int i=0; i<columnExpressions.size(); i++){
smallsql/database/CommandSelect.java۞77۩Expression col = columnExpressions.get(i);
smallsql/database/CommandSelect.java۞78۩if(col.getAlias() == null){
smallsql/database/CommandSelect.java۞80۩col.setAlias("col" + (i+1));
smallsql/database/CommandSelect.java۞81۩}
smallsql/database/CommandSelect.java۞83۩if(col.getType() != Expression.NAME){
smallsql/database/CommandSelect.java۞84۩compileLinkExpressionParams(col);
smallsql/database/CommandSelect.java۞85۩continue;
smallsql/database/CommandSelect.java۞86۩}
smallsql/database/CommandSelect.java۞88۩ExpressionName expr = (ExpressionName)col;
smallsql/database/CommandSelect.java۞90۩if("*".equals( expr.getName() )){
smallsql/database/CommandSelect.java۞91۩String tableAlias = expr.getTableAlias();
smallsql/database/CommandSelect.java۞92۩if(tableAlias != null){
smallsql/database/CommandSelect.java۞94۩int t=0;
smallsql/database/CommandSelect.java۞95۩for(; t<tables.size(); t++){
smallsql/database/CommandSelect.java۞96۩DataSource fromEntry = tables.get(t);
smallsql/database/CommandSelect.java۞97۩if(tableAlias.equalsIgnoreCase( fromEntry.getAlias() )){
smallsql/database/CommandSelect.java۞98۩TableView table = fromEntry.getTableView();
smallsql/database/CommandSelect.java۞99۩columnExpressions.remove(i);
smallsql/database/CommandSelect.java۞100۩i = compileAdd_All_Table_Columns( fromEntry, table, i ) - 1;
smallsql/database/CommandSelect.java۞101۩break;
smallsql/database/CommandSelect.java۞102۩}
smallsql/database/CommandSelect.java۞103۩}
smallsql/database/CommandSelect.java۞104۩if(t==tables.size()) throw SmallSQLException.create(Language.COL_WRONG_PREFIX, new Object[] {tableAlias});
smallsql/database/CommandSelect.java۞105۩}else{
smallsql/database/CommandSelect.java۞107۩columnExpressions.remove(i);
smallsql/database/CommandSelect.java۞108۩for(int t=0; t<tables.size(); t++){
smallsql/database/CommandSelect.java۞109۩DataSource fromEntry = tables.get(t);
smallsql/database/CommandSelect.java۞110۩TableView table = fromEntry.getTableView();
smallsql/database/CommandSelect.java۞111۩i = compileAdd_All_Table_Columns( fromEntry, table, i );
smallsql/database/CommandSelect.java۞112۩}
smallsql/database/CommandSelect.java۞113۩i--;
smallsql/database/CommandSelect.java۞114۩}
smallsql/database/CommandSelect.java۞115۩}else{
smallsql/database/CommandSelect.java۞117۩compileLinkExpressionName( expr );
smallsql/database/CommandSelect.java۞118۩}
smallsql/database/CommandSelect.java۞120۩}
smallsql/database/CommandSelect.java۞121۩if(where != null) compileLinkExpression( where );
smallsql/database/CommandSelect.java۞122۩if(having != null) compileLinkExpression( having );
smallsql/database/CommandSelect.java۞123۩if(orderBy != null) {
smallsql/database/CommandSelect.java۞124۩for(int i=0; i<orderBy.size(); i++){
smallsql/database/CommandSelect.java۞125۩compileLinkExpression( orderBy.get(i));
smallsql/database/CommandSelect.java۞126۩}
smallsql/database/CommandSelect.java۞127۩}
smallsql/database/CommandSelect.java۞128۩if(groupBy != null){
smallsql/database/CommandSelect.java۞129۩for(int i=0; i<groupBy.size(); i++){
smallsql/database/CommandSelect.java۞130۩compileLinkExpression( groupBy.get(i) );
smallsql/database/CommandSelect.java۞131۩}
smallsql/database/CommandSelect.java۞132۩}
smallsql/database/CommandSelect.java۞134۩if(from instanceof Join){
smallsql/database/CommandSelect.java۞135۩compileJoin( (Join)from );
smallsql/database/CommandSelect.java۞136۩}
smallsql/database/CommandSelect.java۞138۩if(where != null){
smallsql/database/CommandSelect.java۞139۩from = new Where( from, where );
smallsql/database/CommandSelect.java۞140۩}
smallsql/database/CommandSelect.java۞142۩if(isGroupResult()) {
smallsql/database/CommandSelect.java۞143۩from = new GroupResult( this, from, groupBy, having, orderBy);
smallsql/database/CommandSelect.java۞144۩if(having != null){
smallsql/database/CommandSelect.java۞145۩from = new Where( from, having );
smallsql/database/CommandSelect.java۞146۩}
smallsql/database/CommandSelect.java۞147۩}
smallsql/database/CommandSelect.java۞149۩if(isDistinct){
smallsql/database/CommandSelect.java۞150۩from = new Distinct( from, columnExpressions );
smallsql/database/CommandSelect.java۞151۩}
smallsql/database/CommandSelect.java۞153۩if(orderBy != null){
smallsql/database/CommandSelect.java۞154۩from = new SortedResult( from, orderBy );
smallsql/database/CommandSelect.java۞155۩}
smallsql/database/CommandSelect.java۞157۩return true;
smallsql/database/CommandSelect.java۞158۩}
smallsql/database/CommandSelect.java۞165۩final boolean isGroupResult(){
smallsql/database/CommandSelect.java۞166۩return groupBy != null || having != null || isAggregateFunction;
smallsql/database/CommandSelect.java۞167۩}
smallsql/database/CommandSelect.java۞175۩private void compileJoin( Join singleJoin ) throws Exception{
smallsql/database/CommandSelect.java۞176۩if(singleJoin.condition != null) compileLinkExpressionParams( singleJoin.condition );
smallsql/database/CommandSelect.java۞177۩if(singleJoin.left instanceof Join){
smallsql/database/CommandSelect.java۞178۩compileJoin( (Join)singleJoin.left );
smallsql/database/CommandSelect.java۞179۩}
smallsql/database/CommandSelect.java۞180۩if(singleJoin.right instanceof Join){
smallsql/database/CommandSelect.java۞181۩compileJoin( (Join)singleJoin.right );
smallsql/database/CommandSelect.java۞182۩}
smallsql/database/CommandSelect.java۞183۩}
smallsql/database/CommandSelect.java۞186۩private void compileLinkExpression( Expression expr) throws Exception{
smallsql/database/CommandSelect.java۞187۩if(expr.getType() == Expression.NAME)
smallsql/database/CommandSelect.java۞188۩compileLinkExpressionName( (ExpressionName)expr);
smallsql/database/CommandSelect.java۞189۩else compileLinkExpressionParams( expr );
smallsql/database/CommandSelect.java۞190۩}
smallsql/database/CommandSelect.java۞197۩private void compileLinkExpressionName(ExpressionName expr) throws Exception{
smallsql/database/CommandSelect.java۞198۩String tableAlias = expr.getTableAlias();
smallsql/database/CommandSelect.java۞199۩if(tableAlias != null){
smallsql/database/CommandSelect.java۞200۩int t = 0;
smallsql/database/CommandSelect.java۞201۩for(; t < tables.size(); t++){
smallsql/database/CommandSelect.java۞202۩DataSource fromEntry = tables.get(t);
smallsql/database/CommandSelect.java۞203۩if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){
smallsql/database/CommandSelect.java۞204۩TableView table = fromEntry.getTableView();
smallsql/database/CommandSelect.java۞205۩int colIdx = table.findColumnIdx(expr.getName());
smallsql/database/CommandSelect.java۞206۩if(colIdx >= 0){
smallsql/database/CommandSelect.java۞208۩expr.setFrom(fromEntry, colIdx, table);
smallsql/database/CommandSelect.java۞209۩break;
smallsql/database/CommandSelect.java۞210۩}else
smallsql/database/CommandSelect.java۞211۩throw SmallSQLException.create(Language.COL_INVALID_NAME, new Object[]{expr.getName()});
smallsql/database/CommandSelect.java۞212۩}
smallsql/database/CommandSelect.java۞213۩}
smallsql/database/CommandSelect.java۞214۩if(t == tables.size())
smallsql/database/CommandSelect.java۞215۩throw SmallSQLException.create(Language.COL_WRONG_PREFIX, tableAlias);
smallsql/database/CommandSelect.java۞216۩}else{
smallsql/database/CommandSelect.java۞218۩boolean isSetFrom = false;
smallsql/database/CommandSelect.java۞219۩for(int t = 0; t < tables.size(); t++){
smallsql/database/CommandSelect.java۞220۩DataSource fromEntry = tables.get(t);
smallsql/database/CommandSelect.java۞221۩TableView table = fromEntry.getTableView();
smallsql/database/CommandSelect.java۞222۩int colIdx = table.findColumnIdx(expr.getName());
smallsql/database/CommandSelect.java۞223۩if(colIdx >= 0){
smallsql/database/CommandSelect.java۞224۩if(isSetFrom){
smallsql/database/CommandSelect.java۞226۩throw SmallSQLException.create(Language.COL_AMBIGUOUS, expr.getName());
smallsql/database/CommandSelect.java۞227۩}
smallsql/database/CommandSelect.java۞229۩isSetFrom = true;
smallsql/database/CommandSelect.java۞230۩expr.setFrom(fromEntry, colIdx, table);
smallsql/database/CommandSelect.java۞231۩}
smallsql/database/CommandSelect.java۞232۩}
smallsql/database/CommandSelect.java۞233۩if(!isSetFrom){
smallsql/database/CommandSelect.java۞234۩throw SmallSQLException.create(Language.COL_INVALID_NAME, expr.getName());
smallsql/database/CommandSelect.java۞235۩}
smallsql/database/CommandSelect.java۞236۩}
smallsql/database/CommandSelect.java۞237۩compileLinkExpressionParams(expr);
smallsql/database/CommandSelect.java۞238۩}
smallsql/database/CommandSelect.java۞241۩private void compileLinkExpressionParams(Expression expr) throws Exception{
smallsql/database/CommandSelect.java۞243۩Expression[] expParams = expr.getParams();
smallsql/database/CommandSelect.java۞244۩isAggregateFunction = isAggregateFunction || expr.getType() >= Expression.GROUP_BEGIN;
smallsql/database/CommandSelect.java۞245۩if(expParams != null){
smallsql/database/CommandSelect.java۞246۩for(int k=0; k<expParams.length; k++){
smallsql/database/CommandSelect.java۞247۩Expression param = expParams[k];
smallsql/database/CommandSelect.java۞248۩int paramType = param.getType();
smallsql/database/CommandSelect.java۞249۩isAggregateFunction = isAggregateFunction || paramType >= Expression.GROUP_BEGIN;
smallsql/database/CommandSelect.java۞250۩if(paramType == Expression.NAME)
smallsql/database/CommandSelect.java۞251۩compileLinkExpressionName( (ExpressionName)param );
smallsql/database/CommandSelect.java۞252۩else compileLinkExpressionParams( param );
smallsql/database/CommandSelect.java۞253۩}
smallsql/database/CommandSelect.java۞254۩}
smallsql/database/CommandSelect.java۞255۩expr.optimize();
smallsql/database/CommandSelect.java۞256۩}
smallsql/database/CommandSelect.java۞259۩private final int compileAdd_All_Table_Columns( DataSource fromEntry, TableView table, int position){
smallsql/database/CommandSelect.java۞260۩for(int k=0; k<table.columns.size(); k++){
smallsql/database/CommandSelect.java۞261۩ExpressionName expr = new ExpressionName( table.columns.get(k).getName() );
smallsql/database/CommandSelect.java۞262۩expr.setFrom( fromEntry, k, table );
smallsql/database/CommandSelect.java۞263۩columnExpressions.add( position++, expr );
smallsql/database/CommandSelect.java۞264۩}
smallsql/database/CommandSelect.java۞265۩return position;
smallsql/database/CommandSelect.java۞266۩}
smallsql/database/CommandSelect.java۞272۩void executeImpl(SSConnection con, SSStatement st) throws Exception{
smallsql/database/CommandSelect.java۞273۩compile(con);
smallsql/database/CommandSelect.java۞274۩if((st.rsType == ResultSet.TYPE_SCROLL_INSENSITIVE || st.rsType == ResultSet.TYPE_SCROLL_SENSITIVE) &&
smallsql/database/CommandSelect.java۞275۩!from.isScrollable()){
smallsql/database/CommandSelect.java۞276۩from = new Scrollable(from);
smallsql/database/CommandSelect.java۞277۩}
smallsql/database/CommandSelect.java۞278۩from.execute();
smallsql/database/CommandSelect.java۞279۩rs =  new SSResultSet( st, this );
smallsql/database/CommandSelect.java۞280۩}
smallsql/database/CommandSelect.java۞287۩void beforeFirst() throws Exception{
smallsql/database/CommandSelect.java۞288۩from.beforeFirst();
smallsql/database/CommandSelect.java۞289۩}
smallsql/database/CommandSelect.java۞295۩boolean isBeforeFirst() throws SQLException{
smallsql/database/CommandSelect.java۞296۩return from.isBeforeFirst();
smallsql/database/CommandSelect.java۞297۩}
smallsql/database/CommandSelect.java۞303۩boolean isFirst() throws SQLException{
smallsql/database/CommandSelect.java۞304۩return from.isFirst();
smallsql/database/CommandSelect.java۞305۩}
smallsql/database/CommandSelect.java۞311۩boolean first() throws Exception{
smallsql/database/CommandSelect.java۞312۩return from.first();
smallsql/database/CommandSelect.java۞313۩}
smallsql/database/CommandSelect.java۞319۩boolean previous() throws Exception{
smallsql/database/CommandSelect.java۞320۩return from.previous();
smallsql/database/CommandSelect.java۞321۩}
smallsql/database/CommandSelect.java۞329۩boolean next() throws Exception{
smallsql/database/CommandSelect.java۞330۩if(maxRows >= 0 && from.getRow() >= maxRows){
smallsql/database/CommandSelect.java۞331۩from.afterLast();
smallsql/database/CommandSelect.java۞332۩return false;
smallsql/database/CommandSelect.java۞333۩}
smallsql/database/CommandSelect.java۞334۩return from.next();
smallsql/database/CommandSelect.java۞335۩}
smallsql/database/CommandSelect.java۞341۩final boolean last() throws Exception{
smallsql/database/CommandSelect.java۞342۩if(maxRows >= 0){
smallsql/database/CommandSelect.java۞343۩if(maxRows == 0){
smallsql/database/CommandSelect.java۞344۩from.beforeFirst();
smallsql/database/CommandSelect.java۞345۩return false;
smallsql/database/CommandSelect.java۞346۩}
smallsql/database/CommandSelect.java۞347۩return from.absolute(maxRows);
smallsql/database/CommandSelect.java۞348۩}
smallsql/database/CommandSelect.java۞349۩return from.last();
smallsql/database/CommandSelect.java۞350۩}
smallsql/database/CommandSelect.java۞356۩final void afterLast() throws Exception{
smallsql/database/CommandSelect.java۞357۩from.afterLast();
smallsql/database/CommandSelect.java۞358۩}
smallsql/database/CommandSelect.java۞364۩boolean isLast() throws Exception{
smallsql/database/CommandSelect.java۞365۩return from.isLast();
smallsql/database/CommandSelect.java۞366۩}
smallsql/database/CommandSelect.java۞372۩boolean isAfterLast() throws Exception{
smallsql/database/CommandSelect.java۞373۩return from.isAfterLast();
smallsql/database/CommandSelect.java۞374۩}
smallsql/database/CommandSelect.java۞380۩final boolean absolute(int row) throws Exception{
smallsql/database/CommandSelect.java۞381۩return from.absolute(row);
smallsql/database/CommandSelect.java۞382۩}
smallsql/database/CommandSelect.java۞388۩final boolean relative(int rows) throws Exception{
smallsql/database/CommandSelect.java۞389۩return from.relative(rows);
smallsql/database/CommandSelect.java۞390۩}
smallsql/database/CommandSelect.java۞396۩final int getRow() throws Exception{
smallsql/database/CommandSelect.java۞397۩int row = from.getRow();
smallsql/database/CommandSelect.java۞398۩if(maxRows >= 0 && row > maxRows) return 0;
smallsql/database/CommandSelect.java۞399۩return row;
smallsql/database/CommandSelect.java۞400۩}
smallsql/database/CommandSelect.java۞403۩final void updateRow(SSConnection con, Expression[] newRowSources) throws SQLException{
smallsql/database/CommandSelect.java۞404۩int savepoint = con.getSavepoint();
smallsql/database/CommandSelect.java۞405۩try{
smallsql/database/CommandSelect.java۞407۩for(int t=0; t<tables.size(); t++){
smallsql/database/CommandSelect.java۞408۩TableViewResult result = TableViewResult.getTableViewResult( tables.get(t) );
smallsql/database/CommandSelect.java۞409۩TableView table = result.getTableView();
smallsql/database/CommandSelect.java۞410۩Columns tableColumns = table.columns;
smallsql/database/CommandSelect.java۞411۩int count = tableColumns.size();
smallsql/database/CommandSelect.java۞414۩Expression[] updateValues = new Expression[count];
smallsql/database/CommandSelect.java۞415۩boolean isUpdateNeeded = false;
smallsql/database/CommandSelect.java۞416۩for(int i=0; i<columnExpressions.size(); i++){
smallsql/database/CommandSelect.java۞417۩Expression src = newRowSources[i];
smallsql/database/CommandSelect.java۞418۩if(src != null && (!(src instanceof ExpressionValue) || !((ExpressionValue)src).isEmpty())){
smallsql/database/CommandSelect.java۞419۩Expression col = columnExpressions.get(i);
smallsql/database/CommandSelect.java۞420۩if(!col.isDefinitelyWritable())
smallsql/database/CommandSelect.java۞421۩throw SmallSQLException.create(Language.COL_READONLY, new Integer(i));
smallsql/database/CommandSelect.java۞422۩ExpressionName exp = (ExpressionName)col;
smallsql/database/CommandSelect.java۞423۩if(table == exp.getTable()){
smallsql/database/CommandSelect.java۞424۩updateValues[exp.getColumnIndex()] = src;
smallsql/database/CommandSelect.java۞425۩isUpdateNeeded = true;
smallsql/database/CommandSelect.java۞426۩continue;
smallsql/database/CommandSelect.java۞427۩}
smallsql/database/CommandSelect.java۞428۩}
smallsql/database/CommandSelect.java۞429۩}
smallsql/database/CommandSelect.java۞432۩if(isUpdateNeeded){
smallsql/database/CommandSelect.java۞433۩result.updateRow(updateValues);
smallsql/database/CommandSelect.java۞434۩}
smallsql/database/CommandSelect.java۞435۩}
smallsql/database/CommandSelect.java۞436۩}catch(Throwable e){
smallsql/database/CommandSelect.java۞437۩con.rollback(savepoint);
smallsql/database/CommandSelect.java۞438۩throw SmallSQLException.createFromException(e);
smallsql/database/CommandSelect.java۞439۩}finally{
smallsql/database/CommandSelect.java۞440۩if(con.getAutoCommit()) con.commit();
smallsql/database/CommandSelect.java۞441۩}
smallsql/database/CommandSelect.java۞442۩}
smallsql/database/CommandSelect.java۞444۩final void insertRow(SSConnection con, Expression[] newRowSources) throws SQLException{
smallsql/database/CommandSelect.java۞445۩if(tables.size() > 1)
smallsql/database/CommandSelect.java۞446۩throw SmallSQLException.create(Language.JOIN_INSERT);
smallsql/database/CommandSelect.java۞447۩if(tables.size() == 0)
smallsql/database/CommandSelect.java۞448۩throw SmallSQLException.create(Language.INSERT_WO_FROM);
smallsql/database/CommandSelect.java۞450۩int savepoint = con.getSavepoint();
smallsql/database/CommandSelect.java۞451۩try{
smallsql/database/CommandSelect.java۞452۩TableViewResult result = TableViewResult.getTableViewResult( tables.get(0) );
smallsql/database/CommandSelect.java۞453۩TableView table = result.getTableView();
smallsql/database/CommandSelect.java۞454۩Columns tabColumns = table.columns;
smallsql/database/CommandSelect.java۞455۩int count = tabColumns.size();
smallsql/database/CommandSelect.java۞458۩Expression[] updateValues = new Expression[count];
smallsql/database/CommandSelect.java۞459۩if(newRowSources != null){
smallsql/database/CommandSelect.java۞460۩for(int i=0; i<columnExpressions.size(); i++){
smallsql/database/CommandSelect.java۞461۩Expression src = newRowSources[i];
smallsql/database/CommandSelect.java۞462۩if(src != null && (!(src instanceof ExpressionValue) || !((ExpressionValue)src).isEmpty())){
smallsql/database/CommandSelect.java۞463۩Expression rsColumn = columnExpressions.get(i);
smallsql/database/CommandSelect.java۞464۩if(!rsColumn.isDefinitelyWritable())
smallsql/database/CommandSelect.java۞465۩throw SmallSQLException.create(Language.COL_READONLY, new Integer(i));
smallsql/database/CommandSelect.java۞466۩ExpressionName exp = (ExpressionName)rsColumn;
smallsql/database/CommandSelect.java۞467۩if(table == exp.getTable()){
smallsql/database/CommandSelect.java۞468۩updateValues[exp.getColumnIndex()] = src;
smallsql/database/CommandSelect.java۞469۩continue;
smallsql/database/CommandSelect.java۞470۩}
smallsql/database/CommandSelect.java۞471۩}
smallsql/database/CommandSelect.java۞472۩updateValues[i] = null;
smallsql/database/CommandSelect.java۞473۩}
smallsql/database/CommandSelect.java۞474۩}
smallsql/database/CommandSelect.java۞477۩result.insertRow(updateValues);
smallsql/database/CommandSelect.java۞478۩}catch(Throwable e){
smallsql/database/CommandSelect.java۞479۩con.rollback(savepoint);
smallsql/database/CommandSelect.java۞480۩throw SmallSQLException.createFromException(e);
smallsql/database/CommandSelect.java۞481۩}finally{
smallsql/database/CommandSelect.java۞482۩if(con.getAutoCommit()) con.commit();
smallsql/database/CommandSelect.java۞483۩}
smallsql/database/CommandSelect.java۞484۩}
smallsql/database/CommandSelect.java۞486۩final void deleteRow(SSConnection con) throws SQLException{
smallsql/database/CommandSelect.java۞487۩int savepoint = con.getSavepoint();
smallsql/database/CommandSelect.java۞488۩try{
smallsql/database/CommandSelect.java۞489۩if(tables.size() > 1)
smallsql/database/CommandSelect.java۞490۩throw SmallSQLException.create(Language.JOIN_DELETE);
smallsql/database/CommandSelect.java۞491۩if(tables.size() == 0)
smallsql/database/CommandSelect.java۞492۩throw SmallSQLException.create(Language.DELETE_WO_FROM);
smallsql/database/CommandSelect.java۞493۩TableViewResult.getTableViewResult( tables.get(0) ).deleteRow();
smallsql/database/CommandSelect.java۞494۩}catch(Throwable e){
smallsql/database/CommandSelect.java۞495۩con.rollback(savepoint);
smallsql/database/CommandSelect.java۞496۩throw SmallSQLException.createFromException(e);
smallsql/database/CommandSelect.java۞497۩}finally{
smallsql/database/CommandSelect.java۞498۩if(con.getAutoCommit()) con.commit();
smallsql/database/CommandSelect.java۞499۩}
smallsql/database/CommandSelect.java۞500۩}
smallsql/database/CommandSelect.java۞506۩public int findColumn(String columnName) throws SQLException {
smallsql/database/CommandSelect.java۞507۩Expressions columns = columnExpressions;
smallsql/database/CommandSelect.java۞509۩for(int i=0; i<columns.size(); i++){
smallsql/database/CommandSelect.java۞510۩if(columnName.equalsIgnoreCase(columns.get(i).getAlias()))
smallsql/database/CommandSelect.java۞511۩return i;
smallsql/database/CommandSelect.java۞512۩}
smallsql/database/CommandSelect.java۞513۩throw SmallSQLException.create(Language.COL_MISSING, columnName);
smallsql/database/CommandSelect.java۞514۩}
smallsql/database/CommandSelect.java۞520۩final void setDistinct(boolean distinct){
smallsql/database/CommandSelect.java۞521۩this.isDistinct = distinct;
smallsql/database/CommandSelect.java۞522۩}
smallsql/database/CommandSelect.java۞529۩final void setSource(RowSource join){
smallsql/database/CommandSelect.java۞530۩this.from = join;
smallsql/database/CommandSelect.java۞531۩}
smallsql/database/CommandSelect.java۞537۩final void setTables( DataSources from ){
smallsql/database/CommandSelect.java۞538۩this.tables = from;
smallsql/database/CommandSelect.java۞539۩}
smallsql/database/CommandSelect.java۞545۩final void setWhere( Expression where ){
smallsql/database/CommandSelect.java۞546۩this.where = where;
smallsql/database/CommandSelect.java۞547۩}
smallsql/database/CommandSelect.java۞549۩final void setGroup(Expressions group){
smallsql/database/CommandSelect.java۞550۩this.groupBy = group;
smallsql/database/CommandSelect.java۞551۩}
smallsql/database/CommandSelect.java۞553۩final void setHaving(Expression having){
smallsql/database/CommandSelect.java۞554۩this.having = having;
smallsql/database/CommandSelect.java۞555۩}
smallsql/database/CommandSelect.java۞557۩final void setOrder(Expressions order){
smallsql/database/CommandSelect.java۞558۩this.orderBy = order;
smallsql/database/CommandSelect.java۞559۩}
smallsql/database/CommandSelect.java۞562۩final void setMaxRows(int max){
smallsql/database/CommandSelect.java۞563۩maxRows = max;
smallsql/database/CommandSelect.java۞564۩}
smallsql/database/CommandSelect.java۞567۩final int getMaxRows(){
smallsql/database/CommandSelect.java۞568۩return maxRows;
smallsql/database/CommandSelect.java۞569۩}
smallsql/database/CommandSelect.java۞570۩}
smallsql/database/CommandSet.java۞33۩package smallsql.database;
smallsql/database/CommandSet.java۞36۩public class CommandSet extends Command {
smallsql/database/CommandSet.java۞38۩int isolationLevel;
smallsql/database/CommandSet.java۞40۩CommandSet( Logger log, int type ){
smallsql/database/CommandSet.java۞41۩super(log);
smallsql/database/CommandSet.java۞42۩this.type = type;
smallsql/database/CommandSet.java۞43۩}
smallsql/database/CommandSet.java۞45۩void executeImpl(SSConnection con, SSStatement st) throws java.sql.SQLException {
smallsql/database/CommandSet.java۞46۩switch(type){
smallsql/database/CommandSet.java۞47۩case SQLTokenizer.LEVEL:
smallsql/database/CommandSet.java۞48۩con.isolationLevel = isolationLevel;
smallsql/database/CommandSet.java۞49۩break;
smallsql/database/CommandSet.java۞50۩case SQLTokenizer.USE:
smallsql/database/CommandSet.java۞51۩con.setCatalog(name);
smallsql/database/CommandSet.java۞52۩break;
smallsql/database/CommandSet.java۞53۩default:
smallsql/database/CommandSet.java۞54۩throw new Error();
smallsql/database/CommandSet.java۞55۩}
smallsql/database/CommandSet.java۞56۩}
smallsql/database/CommandSet.java۞57۩}
smallsql/database/CommandTable.java۞33۩package smallsql.database;
smallsql/database/CommandTable.java۞35۩import java.sql.SQLException;
smallsql/database/CommandTable.java۞36۩import smallsql.database.language.Language;
smallsql/database/CommandTable.java۞39۩final class CommandTable extends Command{
smallsql/database/CommandTable.java۞41۩final private Columns columns = new Columns();
smallsql/database/CommandTable.java۞42۩final private IndexDescriptions indexes = new IndexDescriptions();
smallsql/database/CommandTable.java۞43۩final private ForeignKeys foreignKeys = new ForeignKeys();
smallsql/database/CommandTable.java۞44۩final private int tableCommandType;
smallsql/database/CommandTable.java۞47۩CommandTable( Logger log, String catalog, String name, int tableCommandType ){
smallsql/database/CommandTable.java۞48۩super(log);
smallsql/database/CommandTable.java۞49۩this.type = SQLTokenizer.TABLE;
smallsql/database/CommandTable.java۞50۩this.catalog = catalog;
smallsql/database/CommandTable.java۞51۩this.name = name;
smallsql/database/CommandTable.java۞52۩this.tableCommandType = tableCommandType;
smallsql/database/CommandTable.java۞53۩}
smallsql/database/CommandTable.java۞63۩void addColumn(Column column) throws SQLException{
smallsql/database/CommandTable.java۞64۩addColumn(columns, column);
smallsql/database/CommandTable.java۞65۩}
smallsql/database/CommandTable.java۞68۩void addIndex( IndexDescription indexDescription ) throws SQLException{
smallsql/database/CommandTable.java۞69۩indexes.add(indexDescription);
smallsql/database/CommandTable.java۞70۩}
smallsql/database/CommandTable.java۞73۩void addForeingnKey(ForeignKey key){
smallsql/database/CommandTable.java۞74۩foreignKeys.add(key);
smallsql/database/CommandTable.java۞75۩}
smallsql/database/CommandTable.java۞78۩void executeImpl(SSConnection con, SSStatement st) throws Exception{
smallsql/database/CommandTable.java۞79۩Database database = catalog == null ?
smallsql/database/CommandTable.java۞80۩con.getDatabase(false) :
smallsql/database/CommandTable.java۞81۩Database.getDatabase( catalog, con, false );
smallsql/database/CommandTable.java۞82۩switch(tableCommandType){
smallsql/database/CommandTable.java۞83۩case SQLTokenizer.CREATE:
smallsql/database/CommandTable.java۞84۩database.createTable( con, name, columns, indexes, foreignKeys );
smallsql/database/CommandTable.java۞85۩break;
smallsql/database/CommandTable.java۞86۩case SQLTokenizer.ADD:
smallsql/database/CommandTable.java۞87۩con = new SSConnection(con);
smallsql/database/CommandTable.java۞89۩Table oldTable = (Table)database.getTableView( con, name);
smallsql/database/CommandTable.java۞92۩TableStorePage tableLock = oldTable.requestLock( con, SQLTokenizer.ALTER, -1);
smallsql/database/CommandTable.java۞93۩String newName = "#" + System.currentTimeMillis() + this.hashCode();
smallsql/database/CommandTable.java۞94۩try{
smallsql/database/CommandTable.java۞95۩Columns oldColumns = oldTable.columns;
smallsql/database/CommandTable.java۞96۩Columns newColumns = oldColumns.copy();
smallsql/database/CommandTable.java۞97۩for(int i = 0; i < columns.size(); i++){
smallsql/database/CommandTable.java۞98۩addColumn(newColumns, columns.get(i));
smallsql/database/CommandTable.java۞99۩}
smallsql/database/CommandTable.java۞101۩Table newTable = database.createTable( con, newName, newColumns, oldTable.indexes, indexes, foreignKeys );
smallsql/database/CommandTable.java۞102۩StringBuffer buffer = new StringBuffer(256);
smallsql/database/CommandTable.java۞103۩buffer.append("INSERT INTO ").append( newName ).append( '(' );
smallsql/database/CommandTable.java۞104۩for(int c=0; c<oldColumns.size(); c++){
smallsql/database/CommandTable.java۞105۩if(c != 0){
smallsql/database/CommandTable.java۞106۩buffer.append( ',' );
smallsql/database/CommandTable.java۞107۩}
smallsql/database/CommandTable.java۞108۩buffer.append( oldColumns.get(c).getName() );
smallsql/database/CommandTable.java۞109۩}
smallsql/database/CommandTable.java۞110۩buffer.append( ")  SELECT * FROM " ).append( name );
smallsql/database/CommandTable.java۞111۩con.createStatement().execute( buffer.toString() );
smallsql/database/CommandTable.java۞113۩database.replaceTable( oldTable, newTable );
smallsql/database/CommandTable.java۞114۩}catch(Exception ex){
smallsql/database/CommandTable.java۞116۩try {
smallsql/database/CommandTable.java۞117۩database.dropTable(con, newName);
smallsql/database/CommandTable.java۞118۩} catch (Exception ex1) {}
smallsql/database/CommandTable.java۞119۩try{
smallsql/database/CommandTable.java۞120۩indexes.drop(database);
smallsql/database/CommandTable.java۞121۩} catch (Exception ex1) {}
smallsql/database/CommandTable.java۞122۩throw ex;
smallsql/database/CommandTable.java۞123۩}finally{
smallsql/database/CommandTable.java۞124۩tableLock.freeLock();
smallsql/database/CommandTable.java۞125۩}
smallsql/database/CommandTable.java۞126۩break;
smallsql/database/CommandTable.java۞127۩default:
smallsql/database/CommandTable.java۞128۩throw new Error();
smallsql/database/CommandTable.java۞129۩}
smallsql/database/CommandTable.java۞130۩}
smallsql/database/CommandTable.java۞133۩private void addColumn(Columns cols, Column column) throws SQLException{
smallsql/database/CommandTable.java۞134۩if(cols.get(column.getName()) != null){
smallsql/database/CommandTable.java۞135۩throw SmallSQLException.create(Language.COL_DUPLICATE, column.getName());
smallsql/database/CommandTable.java۞136۩}
smallsql/database/CommandTable.java۞137۩cols.add(column);
smallsql/database/CommandTable.java۞138۩}
smallsql/database/CommandTable.java۞139۩}
smallsql/database/CommandUpdate.java۞33۩package smallsql.database;
smallsql/database/CommandUpdate.java۞40۩class CommandUpdate extends CommandSelect {
smallsql/database/CommandUpdate.java۞42۩private Expressions sources = new Expressions();
smallsql/database/CommandUpdate.java۞44۩private Expression[] newRowSources;
smallsql/database/CommandUpdate.java۞46۩CommandUpdate( Logger log ){
smallsql/database/CommandUpdate.java۞47۩super(log);
smallsql/database/CommandUpdate.java۞48۩}
smallsql/database/CommandUpdate.java۞58۩void addSetting(Expression dest, Expression source){
smallsql/database/CommandUpdate.java۞60۩columnExpressions.add(dest);
smallsql/database/CommandUpdate.java۞61۩sources.add(source);
smallsql/database/CommandUpdate.java۞62۩}
smallsql/database/CommandUpdate.java۞85۩void executeImpl(SSConnection con, SSStatement st) throws Exception {
smallsql/database/CommandUpdate.java۞86۩int count = columnExpressions.size();
smallsql/database/CommandUpdate.java۞87۩columnExpressions.addAll(sources);
smallsql/database/CommandUpdate.java۞88۩compile(con);
smallsql/database/CommandUpdate.java۞89۩columnExpressions.setSize(count);
smallsql/database/CommandUpdate.java۞90۩newRowSources = sources.toArray();
smallsql/database/CommandUpdate.java۞91۩updateCount = 0;
smallsql/database/CommandUpdate.java۞92۩from.execute();
smallsql/database/CommandUpdate.java۞96۩for(int i=0; i<columnExpressions.size(); i++){
smallsql/database/CommandUpdate.java۞97۩ExpressionName expr = (ExpressionName)columnExpressions.get(i);
smallsql/database/CommandUpdate.java۞98۩DataSource ds = expr.getDataSource();
smallsql/database/CommandUpdate.java۞99۩TableResult tableResult = (TableResult)ds;
smallsql/database/CommandUpdate.java۞100۩tableResult.lock = SQLTokenizer.UPDATE;
smallsql/database/CommandUpdate.java۞101۩}
smallsql/database/CommandUpdate.java۞103۩while(true){
smallsql/database/CommandUpdate.java۞105۩synchronized(con.getMonitor()){
smallsql/database/CommandUpdate.java۞106۩if(!next()){
smallsql/database/CommandUpdate.java۞107۩return;
smallsql/database/CommandUpdate.java۞108۩}
smallsql/database/CommandUpdate.java۞109۩updateRow(con, newRowSources);
smallsql/database/CommandUpdate.java۞110۩}
smallsql/database/CommandUpdate.java۞111۩updateCount++;
smallsql/database/CommandUpdate.java۞112۩}
smallsql/database/CommandUpdate.java۞113۩}
smallsql/database/CommandUpdate.java۞114۩}
smallsql/database/CreateFile.java۞33۩package smallsql.database;
smallsql/database/CreateFile.java۞35۩import java.io.File;
smallsql/database/CreateFile.java۞36۩import java.nio.channels.FileChannel;
smallsql/database/CreateFile.java۞37۩import java.sql.SQLException;
smallsql/database/CreateFile.java۞39۩import smallsql.database.language.Language;
smallsql/database/CreateFile.java۞41۩public class CreateFile extends TransactionStep{
smallsql/database/CreateFile.java۞43۩private final File file;
smallsql/database/CreateFile.java۞44۩private final SSConnection con;
smallsql/database/CreateFile.java۞45۩private final Database database;
smallsql/database/CreateFile.java۞48۩CreateFile(File file, FileChannel raFile,SSConnection con, Database database){
smallsql/database/CreateFile.java۞49۩super(raFile);
smallsql/database/CreateFile.java۞50۩this.file = file;
smallsql/database/CreateFile.java۞51۩this.con = con;
smallsql/database/CreateFile.java۞52۩this.database = database;
smallsql/database/CreateFile.java۞53۩}
smallsql/database/CreateFile.java۞59۩@Override
smallsql/database/CreateFile.java۞60۩long commit(){
smallsql/database/CreateFile.java۞61۩raFile = null;
smallsql/database/CreateFile.java۞62۩return -1;
smallsql/database/CreateFile.java۞63۩}
smallsql/database/CreateFile.java۞69۩@Override
smallsql/database/CreateFile.java۞70۩void rollback() throws SQLException{
smallsql/database/CreateFile.java۞71۩FileChannel currentRaFile = raFile;
smallsql/database/CreateFile.java۞72۩if(raFile == null){
smallsql/database/CreateFile.java۞73۩return;
smallsql/database/CreateFile.java۞74۩}
smallsql/database/CreateFile.java۞75۩raFile = null;
smallsql/database/CreateFile.java۞76۩try{
smallsql/database/CreateFile.java۞77۩currentRaFile.close();
smallsql/database/CreateFile.java۞78۩}catch(Throwable ex){
smallsql/database/CreateFile.java۞80۩}
smallsql/database/CreateFile.java۞81۩con.rollbackFile(currentRaFile);
smallsql/database/CreateFile.java۞82۩if(!file.delete()){
smallsql/database/CreateFile.java۞83۩file.deleteOnExit();
smallsql/database/CreateFile.java۞84۩throw SmallSQLException.create(Language.FILE_CANT_DELETE, file.getPath());
smallsql/database/CreateFile.java۞85۩}
smallsql/database/CreateFile.java۞87۩String name = file.getName();
smallsql/database/CreateFile.java۞88۩name = name.substring(0, name.lastIndexOf('.'));
smallsql/database/CreateFile.java۞89۩database.removeTableView(name);
smallsql/database/CreateFile.java۞90۩}
smallsql/database/CreateFile.java۞92۩}
smallsql/database/DataSource.java۞33۩package smallsql.database;
smallsql/database/DataSource.java۞49۩abstract class DataSource extends RowSource{
smallsql/database/DataSource.java۞52۩abstract boolean isNull( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞53۩abstract boolean getBoolean( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞55۩abstract int getInt( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞57۩abstract long getLong( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞59۩abstract float getFloat( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞61۩abstract double getDouble( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞63۩abstract long getMoney( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞65۩abstract MutableNumeric getNumeric( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞67۩abstract Object getObject( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞69۩abstract String getString( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞71۩abstract byte[] getBytes( int colIdx ) throws Exception;
smallsql/database/DataSource.java۞73۩abstract int getDataType( int colIdx );
smallsql/database/DataSource.java۞76۩boolean init( SSConnection con ) throws Exception{return false;}
smallsql/database/DataSource.java۞77۩String getAlias(){return null;}
smallsql/database/DataSource.java۞79۩abstract TableView getTableView();
smallsql/database/DataSource.java۞85۩boolean isExpressionsFromThisRowSource(Expressions columns){
smallsql/database/DataSource.java۞86۩for(int i=0; i<columns.size(); i++){
smallsql/database/DataSource.java۞87۩ExpressionName expr = (ExpressionName)columns.get(i);
smallsql/database/DataSource.java۞88۩if(this != expr.getDataSource()){
smallsql/database/DataSource.java۞89۩return false;
smallsql/database/DataSource.java۞90۩}
smallsql/database/DataSource.java۞91۩}
smallsql/database/DataSource.java۞92۩return true;
smallsql/database/DataSource.java۞93۩}
smallsql/database/DataSource.java۞95۩}
smallsql/database/DataSources.java۞33۩package smallsql.database;
smallsql/database/DataSources.java۞39۩final class DataSources {
smallsql/database/DataSources.java۞41۩private int size;
smallsql/database/DataSources.java۞42۩private DataSource[] data = new DataSource[4];
smallsql/database/DataSources.java۞44۩final int size(){
smallsql/database/DataSources.java۞45۩return size;
smallsql/database/DataSources.java۞46۩}
smallsql/database/DataSources.java۞48۩final DataSource get(int idx){
smallsql/database/DataSources.java۞49۩if (idx >= size)
smallsql/database/DataSources.java۞50۩throw new IndexOutOfBoundsException("Index: "+idx+", Size: "+size);
smallsql/database/DataSources.java۞51۩return data[idx];
smallsql/database/DataSources.java۞52۩}
smallsql/database/DataSources.java۞54۩final void add(DataSource table){
smallsql/database/DataSources.java۞55۩if(size >= data.length ){
smallsql/database/DataSources.java۞56۩DataSource[] dataNew = new DataSource[size << 1];
smallsql/database/DataSources.java۞57۩System.arraycopy(data, 0, dataNew, 0, size);
smallsql/database/DataSources.java۞58۩data = dataNew;
smallsql/database/DataSources.java۞59۩}
smallsql/database/DataSources.java۞60۩data[size++] = table;
smallsql/database/DataSources.java۞61۩}
smallsql/database/DataSources.java۞62۩}
smallsql/database/Database.java۞33۩package smallsql.database;
smallsql/database/Database.java۞35۩import java.util.*;
smallsql/database/Database.java۞36۩import java.io.*;
smallsql/database/Database.java۞37۩import java.nio.channels.FileChannel;
smallsql/database/Database.java۞38۩import java.sql.*;
smallsql/database/Database.java۞39۩import smallsql.database.language.Language;
smallsql/database/Database.java۞47۩final class Database{
smallsql/database/Database.java۞49۩static private HashMap databases = new HashMap();
smallsql/database/Database.java۞51۩private final TableViewMap tableViews = new TableViewMap();
smallsql/database/Database.java۞52۩private final String name;
smallsql/database/Database.java۞53۩private final boolean readonly;
smallsql/database/Database.java۞54۩private final File directory;
smallsql/database/Database.java۞55۩private final FileChannel master;
smallsql/database/Database.java۞56۩private final WeakHashMap connections = new WeakHashMap();
smallsql/database/Database.java۞67۩static Database getDatabase(String name, SSConnection con, boolean create) throws SQLException{
smallsql/database/Database.java۞68۩if(name == null){
smallsql/database/Database.java۞69۩return null;
smallsql/database/Database.java۞70۩}
smallsql/database/Database.java۞71۩if(name.startsWith("file:")){
smallsql/database/Database.java۞72۩name = name.substring(5);
smallsql/database/Database.java۞73۩}
smallsql/database/Database.java۞74۩File file;
smallsql/database/Database.java۞75۩try{
smallsql/database/Database.java۞76۩file = new File(name).getCanonicalFile();
smallsql/database/Database.java۞77۩}catch(Throwable th){
smallsql/database/Database.java۞78۩throw SmallSQLException.createFromException( th );
smallsql/database/Database.java۞79۩}
smallsql/database/Database.java۞80۩String dbKey = file.getName() + ";readonly=" + con.isReadOnly();
smallsql/database/Database.java۞81۩synchronized(databases){
smallsql/database/Database.java۞82۩Database db = (Database)databases.get(dbKey);
smallsql/database/Database.java۞83۩if(db == null){
smallsql/database/Database.java۞84۩if(create && !file.isDirectory()){
smallsql/database/Database.java۞85۩CommandCreateDatabase command = new CommandCreateDatabase(con.log, name);
smallsql/database/Database.java۞86۩command.execute(con, null);
smallsql/database/Database.java۞87۩}
smallsql/database/Database.java۞88۩db = new Database( name, file, con.isReadOnly() );
smallsql/database/Database.java۞89۩databases.put(dbKey, db);
smallsql/database/Database.java۞90۩}
smallsql/database/Database.java۞91۩db.connections.put(con, null);
smallsql/database/Database.java۞92۩return db;
smallsql/database/Database.java۞93۩}
smallsql/database/Database.java۞94۩}
smallsql/database/Database.java۞97۩private static Database getDatabase(SSConnection con, String name) throws SQLException{
smallsql/database/Database.java۞98۩return name == null ?
smallsql/database/Database.java۞99۩con.getDatabase(false) :
smallsql/database/Database.java۞100۩getDatabase( name, con, false );
smallsql/database/Database.java۞101۩}
smallsql/database/Database.java۞111۩private Database( String name, File canonicalFile, boolean readonly ) throws SQLException{
smallsql/database/Database.java۞112۩try{
smallsql/database/Database.java۞113۩this.name = name;
smallsql/database/Database.java۞114۩this.readonly = readonly;
smallsql/database/Database.java۞115۩directory = canonicalFile;
smallsql/database/Database.java۞116۩if(!directory.isDirectory()){
smallsql/database/Database.java۞117۩throw SmallSQLException.create(Language.DB_NONEXISTENT, name);
smallsql/database/Database.java۞118۩}
smallsql/database/Database.java۞119۩File file = new File( directory, Utils.MASTER_FILENAME);
smallsql/database/Database.java۞120۩if(!file.exists())
smallsql/database/Database.java۞121۩throw SmallSQLException.create(Language.DB_NOT_DIRECTORY, name);
smallsql/database/Database.java۞122۩master = Utils.openRaFile( file, readonly );
smallsql/database/Database.java۞123۩}catch(Exception e){
smallsql/database/Database.java۞124۩throw SmallSQLException.createFromException(e);
smallsql/database/Database.java۞125۩}
smallsql/database/Database.java۞126۩}
smallsql/database/Database.java۞128۩String getName(){
smallsql/database/Database.java۞129۩return name;
smallsql/database/Database.java۞130۩}
smallsql/database/Database.java۞132۩boolean isReadOnly(){
smallsql/database/Database.java۞133۩return readonly;
smallsql/database/Database.java۞134۩}
smallsql/database/Database.java۞140۩static final void closeConnection(SSConnection con) throws SQLException{
smallsql/database/Database.java۞141۩synchronized(databases){
smallsql/database/Database.java۞142۩Iterator iterator = databases.values().iterator();
smallsql/database/Database.java۞143۩while(iterator.hasNext()){
smallsql/database/Database.java۞144۩Database database = (Database)iterator.next();
smallsql/database/Database.java۞145۩WeakHashMap connections = database.connections;
smallsql/database/Database.java۞146۩connections.remove(con);
smallsql/database/Database.java۞147۩if(connections.size() == 0){
smallsql/database/Database.java۞148۩try {
smallsql/database/Database.java۞149۩iterator.remove();
smallsql/database/Database.java۞150۩database.close();
smallsql/database/Database.java۞151۩} catch (Exception e) {
smallsql/database/Database.java۞152۩throw SmallSQLException.createFromException(e);
smallsql/database/Database.java۞153۩}
smallsql/database/Database.java۞154۩}
smallsql/database/Database.java۞155۩}
smallsql/database/Database.java۞156۩}
smallsql/database/Database.java۞157۩}
smallsql/database/Database.java۞163۩private final void close() throws Exception{
smallsql/database/Database.java۞164۩synchronized(tableViews){
smallsql/database/Database.java۞165۩Iterator iterator = tableViews.values().iterator();
smallsql/database/Database.java۞166۩while(iterator.hasNext()){
smallsql/database/Database.java۞167۩TableView tableView = (TableView)iterator.next();
smallsql/database/Database.java۞168۩tableView.close();
smallsql/database/Database.java۞169۩iterator.remove();
smallsql/database/Database.java۞170۩}
smallsql/database/Database.java۞171۩}
smallsql/database/Database.java۞172۩master.close();
smallsql/database/Database.java۞173۩}
smallsql/database/Database.java۞175۩static TableView getTableView(SSConnection con, String catalog, String tableName) throws SQLException{
smallsql/database/Database.java۞176۩return getDatabase( con, catalog).getTableView( con, tableName);
smallsql/database/Database.java۞177۩}
smallsql/database/Database.java۞187۩TableView getTableView(SSConnection con, String tableName) throws SQLException{
smallsql/database/Database.java۞188۩synchronized(tableViews){
smallsql/database/Database.java۞189۩TableView tableView = tableViews.get(tableName);
smallsql/database/Database.java۞190۩if(tableView == null){
smallsql/database/Database.java۞192۩tableView = TableView.load(con, this, tableName);
smallsql/database/Database.java۞193۩tableViews.put( tableName, tableView);
smallsql/database/Database.java۞194۩}
smallsql/database/Database.java۞195۩return tableView;
smallsql/database/Database.java۞196۩}
smallsql/database/Database.java۞197۩}
smallsql/database/Database.java۞200۩static void dropTable(SSConnection con, String catalog, String tableName) throws Exception{
smallsql/database/Database.java۞201۩getDatabase( con, catalog).dropTable( con, tableName);
smallsql/database/Database.java۞202۩}
smallsql/database/Database.java۞205۩void dropTable(SSConnection con, String tableName) throws Exception{
smallsql/database/Database.java۞206۩synchronized(tableViews){
smallsql/database/Database.java۞207۩Table table = (Table)tableViews.get( tableName );
smallsql/database/Database.java۞208۩if(table != null){
smallsql/database/Database.java۞209۩tableViews.remove( tableName );
smallsql/database/Database.java۞210۩table.drop(con);
smallsql/database/Database.java۞211۩}else{
smallsql/database/Database.java۞212۩Table.drop( this, tableName );
smallsql/database/Database.java۞213۩}
smallsql/database/Database.java۞214۩}
smallsql/database/Database.java۞215۩}
smallsql/database/Database.java۞222۩void removeTableView(String tableViewName){
smallsql/database/Database.java۞223۩synchronized(tableViews){
smallsql/database/Database.java۞224۩tableViews.remove( tableViewName );
smallsql/database/Database.java۞225۩}
smallsql/database/Database.java۞226۩}
smallsql/database/Database.java۞229۩void replaceTable( Table oldTable, Table newTable) throws Exception{
smallsql/database/Database.java۞230۩synchronized(tableViews){
smallsql/database/Database.java۞231۩tableViews.remove( oldTable.name );
smallsql/database/Database.java۞232۩tableViews.remove( newTable.name );
smallsql/database/Database.java۞233۩oldTable.close();
smallsql/database/Database.java۞234۩newTable.close();
smallsql/database/Database.java۞235۩File oldFile = oldTable.getFile(this);
smallsql/database/Database.java۞236۩File newFile = newTable.getFile(this);
smallsql/database/Database.java۞237۩File tmpFile = new File(Utils.createTableViewFileName( this, "#" + System.currentTimeMillis() + this.hashCode() ));
smallsql/database/Database.java۞238۩if( !oldFile.renameTo(tmpFile) ){
smallsql/database/Database.java۞239۩throw SmallSQLException.create(Language.TABLE_CANT_RENAME, oldTable.name);
smallsql/database/Database.java۞240۩}
smallsql/database/Database.java۞241۩if( !newFile.renameTo(oldFile) ){
smallsql/database/Database.java۞242۩tmpFile.renameTo(oldFile);
smallsql/database/Database.java۞243۩throw SmallSQLException.create(Language.TABLE_CANT_RENAME, oldTable.name);
smallsql/database/Database.java۞244۩}
smallsql/database/Database.java۞245۩tmpFile.delete();
smallsql/database/Database.java۞246۩}
smallsql/database/Database.java۞247۩}
smallsql/database/Database.java۞250۩static void dropView(SSConnection con, String catalog, String tableName) throws Exception{
smallsql/database/Database.java۞251۩getDatabase( con, catalog).dropView(tableName);
smallsql/database/Database.java۞252۩}
smallsql/database/Database.java۞255۩void dropView(String viewName) throws Exception{
smallsql/database/Database.java۞256۩synchronized(tableViews){
smallsql/database/Database.java۞257۩Object view = tableViews.remove( viewName );
smallsql/database/Database.java۞258۩if(view != null && !(view instanceof View))
smallsql/database/Database.java۞259۩throw SmallSQLException.create(Language.VIEWDROP_NOT_VIEW, viewName);
smallsql/database/Database.java۞261۩View.drop( this, viewName );
smallsql/database/Database.java۞262۩}
smallsql/database/Database.java۞263۩}
smallsql/database/Database.java۞266۩private void checkForeignKeys( SSConnection con, ForeignKeys foreignKeys ) throws SQLException{
smallsql/database/Database.java۞267۩for(int i=0; i<foreignKeys.size(); i++){
smallsql/database/Database.java۞268۩ForeignKey foreignKey = foreignKeys.get(i);
smallsql/database/Database.java۞269۩TableView pkTable = getTableView(con, foreignKey.pkTable);
smallsql/database/Database.java۞270۩if(!(pkTable instanceof Table)){
smallsql/database/Database.java۞271۩throw SmallSQLException.create(Language.FK_NOT_TABLE, foreignKey.pkTable);
smallsql/database/Database.java۞272۩}
smallsql/database/Database.java۞273۩}
smallsql/database/Database.java۞274۩}
smallsql/database/Database.java۞285۩void createTable(SSConnection con, String name, Columns columns, IndexDescriptions indexes, ForeignKeys foreignKeys) throws Exception{
smallsql/database/Database.java۞286۩checkForeignKeys( con, foreignKeys );
smallsql/database/Database.java۞289۩Table table = new Table( this, con, name, columns, indexes, foreignKeys);
smallsql/database/Database.java۞290۩synchronized(tableViews){
smallsql/database/Database.java۞291۩tableViews.put( name, table);
smallsql/database/Database.java۞292۩}
smallsql/database/Database.java۞293۩}
smallsql/database/Database.java۞299۩Table createTable(SSConnection con, String tableName, Columns columns, IndexDescriptions oldIndexes, IndexDescriptions newIndexes, ForeignKeys foreignKeys) throws Exception{
smallsql/database/Database.java۞300۩checkForeignKeys( con, foreignKeys );
smallsql/database/Database.java۞301۩Table table = new Table( this, con, tableName, columns, oldIndexes, newIndexes, foreignKeys);
smallsql/database/Database.java۞302۩synchronized(tableViews){
smallsql/database/Database.java۞303۩tableViews.put( tableName, table);
smallsql/database/Database.java۞304۩}
smallsql/database/Database.java۞305۩return table;
smallsql/database/Database.java۞306۩}
smallsql/database/Database.java۞309۩void createView(SSConnection con, String viewName, String sql) throws Exception{
smallsql/database/Database.java۞312۩new View( this, con, viewName, sql);
smallsql/database/Database.java۞313۩}
smallsql/database/Database.java۞322۩static Object[][] getCatalogs(Database database){
smallsql/database/Database.java۞323۩List catalogs = new ArrayList();
smallsql/database/Database.java۞324۩File baseDir = (database != null) ?
smallsql/database/Database.java۞325۩database.directory.getParentFile() :
smallsql/database/Database.java۞326۩new File(".");
smallsql/database/Database.java۞327۩File dirs[] = baseDir.listFiles();
smallsql/database/Database.java۞328۩if(dirs != null)
smallsql/database/Database.java۞329۩for(int i=0; i<dirs.length; i++){
smallsql/database/Database.java۞330۩if(dirs[i].isDirectory()){
smallsql/database/Database.java۞331۩if(new File(dirs[i], Utils.MASTER_FILENAME).exists()){
smallsql/database/Database.java۞332۩Object[] catalog = new Object[1];
smallsql/database/Database.java۞333۩catalog[0] = dirs[i].getPath();
smallsql/database/Database.java۞334۩catalogs.add(catalog);
smallsql/database/Database.java۞335۩}
smallsql/database/Database.java۞336۩}
smallsql/database/Database.java۞337۩}
smallsql/database/Database.java۞338۩Object[][] result = new Object[catalogs.size()][];
smallsql/database/Database.java۞339۩catalogs.toArray(result);
smallsql/database/Database.java۞340۩return result;
smallsql/database/Database.java۞341۩}
smallsql/database/Database.java۞344۩Strings getTables(String tablePattern){
smallsql/database/Database.java۞345۩Strings list = new Strings();
smallsql/database/Database.java۞346۩File dirs[] = directory.listFiles();
smallsql/database/Database.java۞347۩if(dirs != null)
smallsql/database/Database.java۞348۩if(tablePattern == null) tablePattern = "%";
smallsql/database/Database.java۞349۩tablePattern += Utils.TABLE_VIEW_EXTENTION;
smallsql/database/Database.java۞350۩for(int i=0; i<dirs.length; i++){
smallsql/database/Database.java۞351۩String name = dirs[i].getName();
smallsql/database/Database.java۞352۩if(Utils.like(name, tablePattern)){
smallsql/database/Database.java۞353۩list.add(name.substring( 0, name.length()-Utils.TABLE_VIEW_EXTENTION.length() ));
smallsql/database/Database.java۞354۩}
smallsql/database/Database.java۞355۩}
smallsql/database/Database.java۞356۩return list;
smallsql/database/Database.java۞357۩}
smallsql/database/Database.java۞360۩Object[][] getColumns( SSConnection con, String tablePattern, String colPattern) throws Exception{
smallsql/database/Database.java۞361۩List rows = new ArrayList();
smallsql/database/Database.java۞362۩Strings tables = getTables(tablePattern);
smallsql/database/Database.java۞363۩for(int i=0; i<tables.size(); i++){
smallsql/database/Database.java۞364۩String tableName = tables.get(i);
smallsql/database/Database.java۞365۩try{
smallsql/database/Database.java۞366۩TableView tab = getTableView( con, tableName);
smallsql/database/Database.java۞367۩Columns cols = tab.columns;
smallsql/database/Database.java۞368۩for(int c=0; c<cols.size(); c++){
smallsql/database/Database.java۞369۩Column col = cols.get(c);
smallsql/database/Database.java۞370۩Object[] row = new Object[18];
smallsql/database/Database.java۞371۩row[0] = getName();
smallsql/database/Database.java۞373۩row[2] = tableName;
smallsql/database/Database.java۞374۩row[3] = col.getName();
smallsql/database/Database.java۞375۩row[4] = Utils.getShort( SQLTokenizer.getSQLDataType( col.getDataType() ));
smallsql/database/Database.java۞376۩row[5] = SQLTokenizer.getKeyWord( col.getDataType() );
smallsql/database/Database.java۞377۩row[6] = Utils.getInteger(col.getColumnSize());
smallsql/database/Database.java۞379۩row[8] = Utils.getInteger(col.getScale());
smallsql/database/Database.java۞380۩row[9] = Utils.getInteger(10);
smallsql/database/Database.java۞381۩row[10]= Utils.getInteger(col.isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls);
smallsql/database/Database.java۞383۩row[12]= col.getDefaultDefinition();
smallsql/database/Database.java۞386۩row[15]= row[6];
smallsql/database/Database.java۞387۩row[16]= Utils.getInteger(i);
smallsql/database/Database.java۞388۩row[17]= col.isNullable() ? "YES" : "NO";
smallsql/database/Database.java۞389۩rows.add(row);
smallsql/database/Database.java۞390۩}
smallsql/database/Database.java۞391۩}catch(Exception e){
smallsql/database/Database.java۞393۩}
smallsql/database/Database.java۞394۩}
smallsql/database/Database.java۞395۩Object[][] result = new Object[rows.size()][];
smallsql/database/Database.java۞396۩rows.toArray(result);
smallsql/database/Database.java۞397۩return result;
smallsql/database/Database.java۞398۩}
smallsql/database/Database.java۞401۩Object[][] getReferenceKeys(SSConnection con, String pkTable, String fkTable) throws SQLException{
smallsql/database/Database.java۞402۩List rows = new ArrayList();
smallsql/database/Database.java۞403۩Strings tables = (pkTable != null) ? getTables(pkTable) : getTables(fkTable);
smallsql/database/Database.java۞404۩for(int t=0; t<tables.size(); t++){
smallsql/database/Database.java۞405۩String tableName = tables.get(t);
smallsql/database/Database.java۞406۩TableView tab = getTableView( con, tableName);
smallsql/database/Database.java۞407۩if(!(tab instanceof Table)) continue;
smallsql/database/Database.java۞408۩ForeignKeys references = ((Table)tab).references;
smallsql/database/Database.java۞409۩for(int i=0; i<references.size(); i++){
smallsql/database/Database.java۞410۩ForeignKey foreignKey = references.get(i);
smallsql/database/Database.java۞411۩IndexDescription pk = foreignKey.pk;
smallsql/database/Database.java۞412۩IndexDescription fk = foreignKey.fk;
smallsql/database/Database.java۞413۩if((pkTable == null || pkTable.equals(foreignKey.pkTable)) &&
smallsql/database/Database.java۞414۩(fkTable == null || fkTable.equals(foreignKey.fkTable))){
smallsql/database/Database.java۞415۩Strings columnsPk = pk.getColumns();
smallsql/database/Database.java۞416۩Strings columnsFk = fk.getColumns();
smallsql/database/Database.java۞417۩for(int c=0; c<columnsPk.size(); c++){
smallsql/database/Database.java۞418۩Object[] row = new Object[14];
smallsql/database/Database.java۞419۩row[0] = getName();
smallsql/database/Database.java۞421۩row[2] = foreignKey.pkTable;
smallsql/database/Database.java۞422۩row[3] = columnsPk.get(c);
smallsql/database/Database.java۞423۩row[4] = getName();
smallsql/database/Database.java۞425۩row[6] = foreignKey.fkTable;
smallsql/database/Database.java۞426۩row[7] = columnsFk.get(c);
smallsql/database/Database.java۞427۩row[8] = Utils.getShort(c+1);
smallsql/database/Database.java۞428۩row[9] = Utils.getShort(foreignKey.updateRule);
smallsql/database/Database.java۞429۩row[10]= Utils.getShort(foreignKey.deleteRule);
smallsql/database/Database.java۞430۩row[11]= fk.getName();
smallsql/database/Database.java۞431۩row[12]= pk.getName();
smallsql/database/Database.java۞432۩row[13]= Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable);
smallsql/database/Database.java۞433۩rows.add(row);
smallsql/database/Database.java۞434۩}
smallsql/database/Database.java۞435۩}
smallsql/database/Database.java۞436۩}
smallsql/database/Database.java۞437۩}
smallsql/database/Database.java۞438۩Object[][] result = new Object[rows.size()][];
smallsql/database/Database.java۞439۩rows.toArray(result);
smallsql/database/Database.java۞440۩return result;
smallsql/database/Database.java۞441۩}
smallsql/database/Database.java۞444۩Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{
smallsql/database/Database.java۞445۩List rows = new ArrayList();
smallsql/database/Database.java۞446۩Strings tables = getTables(table);
smallsql/database/Database.java۞447۩for(int t=0; t<tables.size(); t++){
smallsql/database/Database.java۞448۩String tableName = tables.get(t);
smallsql/database/Database.java۞449۩TableView tab = getTableView( con, tableName);
smallsql/database/Database.java۞450۩if(!(tab instanceof Table)) continue;
smallsql/database/Database.java۞451۩IndexDescriptions indexes = ((Table)tab).indexes;
smallsql/database/Database.java۞452۩for(int i=0; i<indexes.size(); i++){
smallsql/database/Database.java۞453۩IndexDescription index = indexes.get(i);
smallsql/database/Database.java۞454۩if(index.isUnique()){
smallsql/database/Database.java۞455۩Strings columns = index.getColumns();
smallsql/database/Database.java۞456۩for(int c=0; c<columns.size(); c++){
smallsql/database/Database.java۞457۩String columnName = columns.get(c);
smallsql/database/Database.java۞458۩Column column = tab.findColumn(columnName);
smallsql/database/Database.java۞459۩Object[] row = new Object[8];
smallsql/database/Database.java۞460۩row[0] = Utils.getShort(DatabaseMetaData.bestRowSession);
smallsql/database/Database.java۞461۩row[1] = columnName;
smallsql/database/Database.java۞462۩final int dataType = column.getDataType();
smallsql/database/Database.java۞463۩row[2] = Utils.getInteger(dataType);
smallsql/database/Database.java۞464۩row[3] = SQLTokenizer.getKeyWord(dataType);
smallsql/database/Database.java۞465۩row[4] = Utils.getInteger(column.getPrecision());
smallsql/database/Database.java۞467۩row[6] = Utils.getShort(column.getScale());
smallsql/database/Database.java۞468۩row[7] = Utils.getShort(DatabaseMetaData.bestRowNotPseudo);
smallsql/database/Database.java۞469۩rows.add(row);
smallsql/database/Database.java۞470۩}
smallsql/database/Database.java۞471۩}
smallsql/database/Database.java۞472۩}
smallsql/database/Database.java۞473۩}
smallsql/database/Database.java۞474۩Object[][] result = new Object[rows.size()][];
smallsql/database/Database.java۞475۩rows.toArray(result);
smallsql/database/Database.java۞476۩return result;
smallsql/database/Database.java۞477۩}
smallsql/database/Database.java۞480۩Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{
smallsql/database/Database.java۞481۩List rows = new ArrayList();
smallsql/database/Database.java۞482۩Strings tables = getTables(table);
smallsql/database/Database.java۞483۩for(int t=0; t<tables.size(); t++){
smallsql/database/Database.java۞484۩String tableName = tables.get(t);
smallsql/database/Database.java۞485۩TableView tab = getTableView( con, tableName);
smallsql/database/Database.java۞486۩if(!(tab instanceof Table)) continue;
smallsql/database/Database.java۞487۩IndexDescriptions indexes = ((Table)tab).indexes;
smallsql/database/Database.java۞488۩for(int i=0; i<indexes.size(); i++){
smallsql/database/Database.java۞489۩IndexDescription index = indexes.get(i);
smallsql/database/Database.java۞490۩if(index.isPrimary()){
smallsql/database/Database.java۞491۩Strings columns = index.getColumns();
smallsql/database/Database.java۞492۩for(int c=0; c<columns.size(); c++){
smallsql/database/Database.java۞493۩Object[] row = new Object[6];
smallsql/database/Database.java۞494۩row[0] = getName();
smallsql/database/Database.java۞496۩row[2] = tableName;
smallsql/database/Database.java۞497۩row[3] = columns.get(c);
smallsql/database/Database.java۞498۩row[4] = Utils.getShort(c+1);
smallsql/database/Database.java۞499۩row[5] = index.getName();
smallsql/database/Database.java۞500۩rows.add(row);
smallsql/database/Database.java۞501۩}
smallsql/database/Database.java۞502۩}
smallsql/database/Database.java۞503۩}
smallsql/database/Database.java۞504۩}
smallsql/database/Database.java۞505۩Object[][] result = new Object[rows.size()][];
smallsql/database/Database.java۞506۩rows.toArray(result);
smallsql/database/Database.java۞507۩return result;
smallsql/database/Database.java۞508۩}
smallsql/database/Database.java۞511۩Object[][] getIndexInfo( SSConnection con, String table, boolean unique) throws SQLException {
smallsql/database/Database.java۞512۩List rows = new ArrayList();
smallsql/database/Database.java۞513۩Strings tables = getTables(table);
smallsql/database/Database.java۞514۩Short type = Utils.getShort( DatabaseMetaData.tableIndexOther );
smallsql/database/Database.java۞515۩for(int t=0; t<tables.size(); t++){
smallsql/database/Database.java۞516۩String tableName = tables.get(t);
smallsql/database/Database.java۞517۩TableView tab = getTableView( con, tableName);
smallsql/database/Database.java۞518۩if(!(tab instanceof Table)) continue;
smallsql/database/Database.java۞519۩IndexDescriptions indexes = ((Table)tab).indexes;
smallsql/database/Database.java۞520۩for(int i=0; i<indexes.size(); i++){
smallsql/database/Database.java۞521۩IndexDescription index = indexes.get(i);
smallsql/database/Database.java۞522۩Strings columns = index.getColumns();
smallsql/database/Database.java۞523۩for(int c=0; c<columns.size(); c++){
smallsql/database/Database.java۞524۩Object[] row = new Object[13];
smallsql/database/Database.java۞525۩row[0] = getName();
smallsql/database/Database.java۞527۩row[2] = tableName;
smallsql/database/Database.java۞528۩row[3] = Boolean.valueOf(!index.isUnique());
smallsql/database/Database.java۞530۩row[5] = index.getName();
smallsql/database/Database.java۞531۩row[6] = type;
smallsql/database/Database.java۞532۩row[7] = Utils.getShort(c+1);
smallsql/database/Database.java۞533۩row[8] = columns.get(c);
smallsql/database/Database.java۞538۩rows.add(row);
smallsql/database/Database.java۞539۩}
smallsql/database/Database.java۞540۩}
smallsql/database/Database.java۞541۩}
smallsql/database/Database.java۞542۩Object[][] result = new Object[rows.size()][];
smallsql/database/Database.java۞543۩rows.toArray(result);
smallsql/database/Database.java۞544۩return result;
smallsql/database/Database.java۞545۩}
smallsql/database/Database.java۞546۩}
smallsql/database/DateTime.java۞34۩package smallsql.database;
smallsql/database/DateTime.java۞36۩import java.sql.*;
smallsql/database/DateTime.java۞37۩import java.text.DateFormatSymbols;
smallsql/database/DateTime.java۞38۩import java.util.Calendar;
smallsql/database/DateTime.java۞39۩import java.util.TimeZone;
smallsql/database/DateTime.java۞40۩import smallsql.database.language.Language;
smallsql/database/DateTime.java۞42۩public final class DateTime implements Mutable{
smallsql/database/DateTime.java۞44۩long time;
smallsql/database/DateTime.java۞45۩private int dataType = SQLTokenizer.TIMESTAMP;
smallsql/database/DateTime.java۞47۩static final int[] MONTH_DAYS = {0,31,59,90,120,151,181,212,243,273,304,334};
smallsql/database/DateTime.java۞49۩private static final String[] SHORT_MONTHS = new DateFormatSymbols().getShortMonths();
smallsql/database/DateTime.java۞57۩DateTime(long time, int dataType){
smallsql/database/DateTime.java۞58۩switch(dataType){
smallsql/database/DateTime.java۞59۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/DateTime.java۞60۩int seconds = (int)(time % 60000);
smallsql/database/DateTime.java۞61۩if(seconds < 0){
smallsql/database/DateTime.java۞62۩seconds += 60000;
smallsql/database/DateTime.java۞63۩}
smallsql/database/DateTime.java۞64۩time -= seconds;
smallsql/database/DateTime.java۞65۩break;
smallsql/database/DateTime.java۞66۩case SQLTokenizer.TIME:
smallsql/database/DateTime.java۞67۩time %= 86400000;
smallsql/database/DateTime.java۞68۩break;
smallsql/database/DateTime.java۞69۩case SQLTokenizer.DATE:
smallsql/database/DateTime.java۞70۩int millis = (int)(time % 86400000);
smallsql/database/DateTime.java۞71۩if(millis < 0)
smallsql/database/DateTime.java۞72۩millis += 86400000;
smallsql/database/DateTime.java۞73۩time -= millis;
smallsql/database/DateTime.java۞74۩break;
smallsql/database/DateTime.java۞75۩}
smallsql/database/DateTime.java۞76۩this.time = time;
smallsql/database/DateTime.java۞77۩this.dataType = dataType;
smallsql/database/DateTime.java۞78۩}
smallsql/database/DateTime.java۞81۩static long calcMillis(Details details){
smallsql/database/DateTime.java۞82۩return calcMillis(details.year, details.month, details.day, details.hour, details.minute, details.second, details.millis);
smallsql/database/DateTime.java۞83۩}
smallsql/database/DateTime.java۞85۩static long calcMillis(int year, int month, final int day, final int hour, final int minute, final int second, final int millis){
smallsql/database/DateTime.java۞86۩long result = millis;
smallsql/database/DateTime.java۞87۩result += second * 1000;
smallsql/database/DateTime.java۞88۩result += minute * 60000;
smallsql/database/DateTime.java۞89۩result += hour * 3600000;
smallsql/database/DateTime.java۞90۩result += (day-1) * 86400000L;
smallsql/database/DateTime.java۞91۩if(month > 11){
smallsql/database/DateTime.java۞92۩year += month / 12;
smallsql/database/DateTime.java۞93۩month %= 12;
smallsql/database/DateTime.java۞94۩}
smallsql/database/DateTime.java۞95۩result += MONTH_DAYS[month] * 86400000L;
smallsql/database/DateTime.java۞96۩result += (year - 1970) * 31536000000L;
smallsql/database/DateTime.java۞97۩result += ((year/4) - (year/100) + (year/400) - 477) * 86400000L;
smallsql/database/DateTime.java۞98۩if(month<2 && year % 4 == 0 && (year%100 != 0 || year%400 == 0))
smallsql/database/DateTime.java۞99۩result -= 86400000L;
smallsql/database/DateTime.java۞100۩return result;
smallsql/database/DateTime.java۞101۩}
smallsql/database/DateTime.java۞104۩static long now(){
smallsql/database/DateTime.java۞105۩return removeDateTimeOffset( System.currentTimeMillis() );
smallsql/database/DateTime.java۞106۩}
smallsql/database/DateTime.java۞119۩static int dayOfWeek(long time){
smallsql/database/DateTime.java۞121۩return (int)((time / 86400000 + 3) % 7);
smallsql/database/DateTime.java۞122۩}
smallsql/database/DateTime.java۞124۩static long parse(java.util.Date date){
smallsql/database/DateTime.java۞125۩long t = date.getTime();
smallsql/database/DateTime.java۞126۩return removeDateTimeOffset(t);
smallsql/database/DateTime.java۞127۩}
smallsql/database/DateTime.java۞129۩static DateTime valueOf(java.util.Date date){
smallsql/database/DateTime.java۞130۩if(date == null) return null;
smallsql/database/DateTime.java۞131۩int type;
smallsql/database/DateTime.java۞132۩if(date instanceof java.sql.Date)
smallsql/database/DateTime.java۞133۩type = SQLTokenizer.DATE;
smallsql/database/DateTime.java۞134۩else
smallsql/database/DateTime.java۞135۩if(date instanceof java.sql.Time)
smallsql/database/DateTime.java۞136۩type = SQLTokenizer.TIME;
smallsql/database/DateTime.java۞137۩else
smallsql/database/DateTime.java۞138۩type = SQLTokenizer.TIMESTAMP;
smallsql/database/DateTime.java۞139۩return new DateTime( parse(date), type);
smallsql/database/DateTime.java۞140۩}
smallsql/database/DateTime.java۞143۩static DateTime valueOf(java.sql.Date date){
smallsql/database/DateTime.java۞144۩if(date == null) return null;
smallsql/database/DateTime.java۞145۩return new DateTime( parse(date), SQLTokenizer.DATE);
smallsql/database/DateTime.java۞146۩}
smallsql/database/DateTime.java۞149۩static DateTime valueOf(java.sql.Time date){
smallsql/database/DateTime.java۞150۩if(date == null) return null;
smallsql/database/DateTime.java۞151۩return new DateTime( parse(date), SQLTokenizer.TIME);
smallsql/database/DateTime.java۞152۩}
smallsql/database/DateTime.java۞155۩static DateTime valueOf(java.sql.Timestamp date){
smallsql/database/DateTime.java۞156۩if(date == null) return null;
smallsql/database/DateTime.java۞157۩return new DateTime( parse(date), SQLTokenizer.TIMESTAMP);
smallsql/database/DateTime.java۞158۩}
smallsql/database/DateTime.java۞164۩static DateTime valueOf(String date, int dataType) throws SQLException{
smallsql/database/DateTime.java۞165۩if(date == null) return null;
smallsql/database/DateTime.java۞166۩return new DateTime( parse(date), dataType);
smallsql/database/DateTime.java۞167۩}
smallsql/database/DateTime.java۞170۩static long parse(final String datetime) throws SQLException{
smallsql/database/DateTime.java۞171۩try{
smallsql/database/DateTime.java۞172۩final int length = datetime.length();
smallsql/database/DateTime.java۞174۩final int year;
smallsql/database/DateTime.java۞175۩final int month;
smallsql/database/DateTime.java۞176۩final int day;
smallsql/database/DateTime.java۞177۩final int hour;
smallsql/database/DateTime.java۞178۩final int minute;
smallsql/database/DateTime.java۞179۩final int second;
smallsql/database/DateTime.java۞180۩final int millis;
smallsql/database/DateTime.java۞183۩int idx1 = 0;
smallsql/database/DateTime.java۞184۩int idx2 = datetime.indexOf('-');
smallsql/database/DateTime.java۞185۩if(idx2 > 0){
smallsql/database/DateTime.java۞186۩year = Integer.parseInt(datetime.substring(idx1, idx2).trim());
smallsql/database/DateTime.java۞188۩idx1 = idx2+1;
smallsql/database/DateTime.java۞189۩idx2 = datetime.indexOf('-', idx1);
smallsql/database/DateTime.java۞190۩month = Integer.parseInt(datetime.substring(idx1, idx2).trim())-1;
smallsql/database/DateTime.java۞192۩idx1 = idx2+1;
smallsql/database/DateTime.java۞193۩idx2 = datetime.indexOf(' ', idx1);
smallsql/database/DateTime.java۞194۩if(idx2 < 0) idx2 = datetime.length();
smallsql/database/DateTime.java۞195۩day = Integer.parseInt(datetime.substring(idx1, idx2).trim());
smallsql/database/DateTime.java۞196۩}else{
smallsql/database/DateTime.java۞197۩year  = 1970;
smallsql/database/DateTime.java۞198۩month = 0;
smallsql/database/DateTime.java۞199۩day   = 1;
smallsql/database/DateTime.java۞200۩}
smallsql/database/DateTime.java۞202۩idx1 = idx2+1;
smallsql/database/DateTime.java۞203۩idx2 = datetime.indexOf(':', idx1);
smallsql/database/DateTime.java۞204۩if(idx2>0){
smallsql/database/DateTime.java۞205۩hour = Integer.parseInt(datetime.substring(idx1, idx2).trim());
smallsql/database/DateTime.java۞207۩idx1 = idx2+1;
smallsql/database/DateTime.java۞208۩idx2 = datetime.indexOf(':', idx1);
smallsql/database/DateTime.java۞209۩minute = Integer.parseInt(datetime.substring(idx1, idx2).trim());
smallsql/database/DateTime.java۞211۩idx1 = idx2+1;
smallsql/database/DateTime.java۞212۩idx2 = datetime.indexOf('.', idx1);
smallsql/database/DateTime.java۞213۩if(idx2 < 0) idx2 = datetime.length();
smallsql/database/DateTime.java۞214۩second = Integer.parseInt(datetime.substring(idx1, idx2).trim());
smallsql/database/DateTime.java۞216۩idx1 = idx2+1;
smallsql/database/DateTime.java۞217۩if(idx1 < length){
smallsql/database/DateTime.java۞218۩String strMillis = datetime.substring(idx1).trim();
smallsql/database/DateTime.java۞219۩switch(strMillis.length()){
smallsql/database/DateTime.java۞220۩case 1:
smallsql/database/DateTime.java۞221۩millis = Integer.parseInt(strMillis) * 100;
smallsql/database/DateTime.java۞222۩break;
smallsql/database/DateTime.java۞223۩case 2:
smallsql/database/DateTime.java۞224۩millis = Integer.parseInt(strMillis) * 10;
smallsql/database/DateTime.java۞225۩break;
smallsql/database/DateTime.java۞226۩case 3:
smallsql/database/DateTime.java۞227۩millis = Integer.parseInt(strMillis);
smallsql/database/DateTime.java۞228۩break;
smallsql/database/DateTime.java۞229۩default:
smallsql/database/DateTime.java۞230۩millis = Integer.parseInt(strMillis.substring(0,3));
smallsql/database/DateTime.java۞231۩}
smallsql/database/DateTime.java۞232۩}else
smallsql/database/DateTime.java۞233۩millis = 0;
smallsql/database/DateTime.java۞234۩}else{
smallsql/database/DateTime.java۞235۩hour   = 0;
smallsql/database/DateTime.java۞236۩minute = 0;
smallsql/database/DateTime.java۞237۩second = 0;
smallsql/database/DateTime.java۞238۩millis = 0;
smallsql/database/DateTime.java۞239۩}
smallsql/database/DateTime.java۞240۩if(idx1 == 0 && length > 0){
smallsql/database/DateTime.java۞241۩throw SmallSQLException.create(Language.DATETIME_INVALID);
smallsql/database/DateTime.java۞242۩}
smallsql/database/DateTime.java۞244۩if(month >= 12){
smallsql/database/DateTime.java۞245۩throw SmallSQLException.create(Language.MONTH_TOOLARGE, datetime );
smallsql/database/DateTime.java۞246۩}
smallsql/database/DateTime.java۞247۩if(day >= 32){
smallsql/database/DateTime.java۞248۩throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );
smallsql/database/DateTime.java۞249۩}
smallsql/database/DateTime.java۞250۩if(day == 31){
smallsql/database/DateTime.java۞251۩switch(month){
smallsql/database/DateTime.java۞252۩case 1:
smallsql/database/DateTime.java۞253۩case 3:
smallsql/database/DateTime.java۞254۩case 5:
smallsql/database/DateTime.java۞255۩case 8:
smallsql/database/DateTime.java۞256۩case 10:
smallsql/database/DateTime.java۞257۩throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );
smallsql/database/DateTime.java۞258۩}
smallsql/database/DateTime.java۞259۩}
smallsql/database/DateTime.java۞260۩if(month == 1){
smallsql/database/DateTime.java۞261۩if(day == 30){
smallsql/database/DateTime.java۞262۩throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );
smallsql/database/DateTime.java۞263۩}
smallsql/database/DateTime.java۞264۩if(day == 29){
smallsql/database/DateTime.java۞265۩if(!isLeapYear(year)){
smallsql/database/DateTime.java۞266۩throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );
smallsql/database/DateTime.java۞267۩}
smallsql/database/DateTime.java۞268۩}
smallsql/database/DateTime.java۞269۩}
smallsql/database/DateTime.java۞270۩if(hour >= 24){
smallsql/database/DateTime.java۞271۩throw SmallSQLException.create(Language.HOURS_TOOLARGE, datetime );
smallsql/database/DateTime.java۞272۩}
smallsql/database/DateTime.java۞273۩if(minute >= 60){
smallsql/database/DateTime.java۞274۩throw SmallSQLException.create(Language.MINUTES_TOOLARGE, datetime );
smallsql/database/DateTime.java۞275۩}
smallsql/database/DateTime.java۞276۩if(second >= 60){
smallsql/database/DateTime.java۞277۩throw SmallSQLException.create(Language.SECS_TOOLARGE, datetime );
smallsql/database/DateTime.java۞278۩}
smallsql/database/DateTime.java۞279۩if(millis >= 1000){
smallsql/database/DateTime.java۞280۩throw SmallSQLException.create(Language.MILLIS_TOOLARGE, datetime );
smallsql/database/DateTime.java۞281۩}
smallsql/database/DateTime.java۞282۩return calcMillis(year, month, day, hour, minute, second, millis);
smallsql/database/DateTime.java۞283۩}catch(SQLException ex){
smallsql/database/DateTime.java۞284۩throw ex;
smallsql/database/DateTime.java۞285۩}catch(Throwable ex){
smallsql/database/DateTime.java۞286۩throw SmallSQLException.createFromException(Language.DATETIME_INVALID, datetime, ex );
smallsql/database/DateTime.java۞287۩}
smallsql/database/DateTime.java۞288۩}
smallsql/database/DateTime.java۞291۩long getTimeMillis(){
smallsql/database/DateTime.java۞292۩return time;
smallsql/database/DateTime.java۞293۩}
smallsql/database/DateTime.java۞296۩int getDataType(){
smallsql/database/DateTime.java۞297۩return dataType;
smallsql/database/DateTime.java۞298۩}
smallsql/database/DateTime.java۞305۩public String toString(){
smallsql/database/DateTime.java۞306۩Details details = new Details(time);
smallsql/database/DateTime.java۞307۩StringBuffer buf = new StringBuffer();
smallsql/database/DateTime.java۞308۩if(dataType != SQLTokenizer.TIME){
smallsql/database/DateTime.java۞309۩formatNumber( details.year,  4, buf );
smallsql/database/DateTime.java۞310۩buf.append('-');
smallsql/database/DateTime.java۞311۩formatNumber( details.month + 1, 2, buf );
smallsql/database/DateTime.java۞312۩buf.append('-');
smallsql/database/DateTime.java۞313۩formatNumber( details.day,   2, buf );
smallsql/database/DateTime.java۞314۩}
smallsql/database/DateTime.java۞315۩if(dataType != SQLTokenizer.DATE){
smallsql/database/DateTime.java۞316۩if(buf.length() > 0) buf.append(' ');
smallsql/database/DateTime.java۞317۩formatNumber( details.hour,  2, buf );
smallsql/database/DateTime.java۞318۩buf.append(':');
smallsql/database/DateTime.java۞319۩formatNumber( details.minute, 2, buf );
smallsql/database/DateTime.java۞320۩buf.append(':');
smallsql/database/DateTime.java۞321۩formatNumber( details.second, 2, buf );
smallsql/database/DateTime.java۞322۩}
smallsql/database/DateTime.java۞323۩switch(dataType){
smallsql/database/DateTime.java۞324۩case SQLTokenizer.TIMESTAMP:
smallsql/database/DateTime.java۞325۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/DateTime.java۞326۩buf.append('.');
smallsql/database/DateTime.java۞327۩formatMillis( details.millis, buf );
smallsql/database/DateTime.java۞328۩}
smallsql/database/DateTime.java۞329۩return buf.toString();
smallsql/database/DateTime.java۞330۩}
smallsql/database/DateTime.java۞333۩public boolean equals(Object obj){
smallsql/database/DateTime.java۞334۩if(!(obj instanceof DateTime)) return false;
smallsql/database/DateTime.java۞335۩DateTime value = (DateTime)obj;
smallsql/database/DateTime.java۞336۩return value.time == time && value.dataType == dataType;
smallsql/database/DateTime.java۞337۩}
smallsql/database/DateTime.java۞343۩String toString(int style){
smallsql/database/DateTime.java۞344۩if(style < 0)
smallsql/database/DateTime.java۞345۩return toString();
smallsql/database/DateTime.java۞346۩Details details = new Details(time);
smallsql/database/DateTime.java۞347۩StringBuffer buf = new StringBuffer();
smallsql/database/DateTime.java۞348۩switch(style){
smallsql/database/DateTime.java۞349۩case 0:
smallsql/database/DateTime.java۞350۩case 100:
smallsql/database/DateTime.java۞351۩buf.append( SHORT_MONTHS[ details.month ]);
smallsql/database/DateTime.java۞352۩buf.append(' ');
smallsql/database/DateTime.java۞353۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞354۩buf.append(' ');
smallsql/database/DateTime.java۞355۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞356۩buf.append(' ');
smallsql/database/DateTime.java۞357۩formatHour12( details.hour, buf );
smallsql/database/DateTime.java۞358۩buf.append(':');
smallsql/database/DateTime.java۞359۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞360۩buf.append( details.hour < 12 ? "AM" : "PM" );
smallsql/database/DateTime.java۞361۩return buf.toString();
smallsql/database/DateTime.java۞362۩case 1:
smallsql/database/DateTime.java۞363۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞364۩buf.append('/');
smallsql/database/DateTime.java۞365۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞366۩buf.append('/');
smallsql/database/DateTime.java۞367۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞368۩return buf.toString();
smallsql/database/DateTime.java۞369۩case 101:
smallsql/database/DateTime.java۞370۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞371۩buf.append('/');
smallsql/database/DateTime.java۞372۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞373۩buf.append('/');
smallsql/database/DateTime.java۞374۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞375۩return buf.toString();
smallsql/database/DateTime.java۞376۩case 2:
smallsql/database/DateTime.java۞377۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞378۩buf.append('.');
smallsql/database/DateTime.java۞379۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞380۩buf.append('.');
smallsql/database/DateTime.java۞381۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞382۩return buf.toString();
smallsql/database/DateTime.java۞383۩case 102:
smallsql/database/DateTime.java۞384۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞385۩buf.append('.');
smallsql/database/DateTime.java۞386۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞387۩buf.append('.');
smallsql/database/DateTime.java۞388۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞389۩return buf.toString();
smallsql/database/DateTime.java۞390۩case 3:
smallsql/database/DateTime.java۞391۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞392۩buf.append('/');
smallsql/database/DateTime.java۞393۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞394۩buf.append('/');
smallsql/database/DateTime.java۞395۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞396۩return buf.toString();
smallsql/database/DateTime.java۞397۩case 103:
smallsql/database/DateTime.java۞398۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞399۩buf.append('/');
smallsql/database/DateTime.java۞400۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞401۩buf.append('/');
smallsql/database/DateTime.java۞402۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞403۩return buf.toString();
smallsql/database/DateTime.java۞404۩case 4:
smallsql/database/DateTime.java۞405۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞406۩buf.append('.');
smallsql/database/DateTime.java۞407۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞408۩buf.append('.');
smallsql/database/DateTime.java۞409۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞410۩return buf.toString();
smallsql/database/DateTime.java۞411۩case 104:
smallsql/database/DateTime.java۞412۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞413۩buf.append('.');
smallsql/database/DateTime.java۞414۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞415۩buf.append('.');
smallsql/database/DateTime.java۞416۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞417۩return buf.toString();
smallsql/database/DateTime.java۞418۩case 5:
smallsql/database/DateTime.java۞419۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞420۩buf.append('-');
smallsql/database/DateTime.java۞421۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞422۩buf.append('-');
smallsql/database/DateTime.java۞423۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞424۩return buf.toString();
smallsql/database/DateTime.java۞425۩case 105:
smallsql/database/DateTime.java۞426۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞427۩buf.append('-');
smallsql/database/DateTime.java۞428۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞429۩buf.append('-');
smallsql/database/DateTime.java۞430۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞431۩return buf.toString();
smallsql/database/DateTime.java۞432۩case 6:
smallsql/database/DateTime.java۞433۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞434۩buf.append(' ');
smallsql/database/DateTime.java۞435۩buf.append( SHORT_MONTHS[ details.month ]);
smallsql/database/DateTime.java۞436۩buf.append(' ');
smallsql/database/DateTime.java۞437۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞438۩return buf.toString();
smallsql/database/DateTime.java۞439۩case 106:
smallsql/database/DateTime.java۞440۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞441۩buf.append(' ');
smallsql/database/DateTime.java۞442۩buf.append( SHORT_MONTHS[ details.month ]);
smallsql/database/DateTime.java۞443۩buf.append(' ');
smallsql/database/DateTime.java۞444۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞445۩return buf.toString();
smallsql/database/DateTime.java۞446۩case 7:
smallsql/database/DateTime.java۞447۩buf.append( SHORT_MONTHS[ details.month ]);
smallsql/database/DateTime.java۞448۩buf.append(' ');
smallsql/database/DateTime.java۞449۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞450۩buf.append(',');
smallsql/database/DateTime.java۞451۩buf.append(' ');
smallsql/database/DateTime.java۞452۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞453۩return buf.toString();
smallsql/database/DateTime.java۞454۩case 107:
smallsql/database/DateTime.java۞455۩buf.append( SHORT_MONTHS[ details.month ]);
smallsql/database/DateTime.java۞456۩buf.append(' ');
smallsql/database/DateTime.java۞457۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞458۩buf.append(',');
smallsql/database/DateTime.java۞459۩buf.append(' ');
smallsql/database/DateTime.java۞460۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞461۩return buf.toString();
smallsql/database/DateTime.java۞462۩case 8:
smallsql/database/DateTime.java۞463۩case 108:
smallsql/database/DateTime.java۞464۩formatNumber( details.hour, 2, buf);
smallsql/database/DateTime.java۞465۩buf.append(':');
smallsql/database/DateTime.java۞466۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞467۩buf.append(':');
smallsql/database/DateTime.java۞468۩formatNumber( details.second, 2, buf);
smallsql/database/DateTime.java۞469۩return buf.toString();
smallsql/database/DateTime.java۞470۩case 9:
smallsql/database/DateTime.java۞471۩case 109:
smallsql/database/DateTime.java۞472۩buf.append( SHORT_MONTHS[ details.month ]);
smallsql/database/DateTime.java۞473۩buf.append(' ');
smallsql/database/DateTime.java۞474۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞475۩buf.append(' ');
smallsql/database/DateTime.java۞476۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞477۩buf.append(' ');
smallsql/database/DateTime.java۞478۩formatHour12( details.hour, buf );
smallsql/database/DateTime.java۞479۩buf.append(':');
smallsql/database/DateTime.java۞480۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞481۩buf.append(':');
smallsql/database/DateTime.java۞482۩formatNumber( details.second, 2, buf);
smallsql/database/DateTime.java۞483۩buf.append(':');
smallsql/database/DateTime.java۞484۩formatMillis( details.millis, buf);
smallsql/database/DateTime.java۞485۩buf.append( details.hour < 12 ? "AM" : "PM" );
smallsql/database/DateTime.java۞486۩return buf.toString();
smallsql/database/DateTime.java۞487۩case 10:
smallsql/database/DateTime.java۞488۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞489۩buf.append('-');
smallsql/database/DateTime.java۞490۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞491۩buf.append('-');
smallsql/database/DateTime.java۞492۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞493۩return buf.toString();
smallsql/database/DateTime.java۞494۩case 110:
smallsql/database/DateTime.java۞495۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞496۩buf.append('-');
smallsql/database/DateTime.java۞497۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞498۩buf.append('-');
smallsql/database/DateTime.java۞499۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞500۩return buf.toString();
smallsql/database/DateTime.java۞501۩case 11:
smallsql/database/DateTime.java۞502۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞503۩buf.append('/');
smallsql/database/DateTime.java۞504۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞505۩buf.append('/');
smallsql/database/DateTime.java۞506۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞507۩return buf.toString();
smallsql/database/DateTime.java۞508۩case 111:
smallsql/database/DateTime.java۞509۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞510۩buf.append('/');
smallsql/database/DateTime.java۞511۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞512۩buf.append('/');
smallsql/database/DateTime.java۞513۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞514۩return buf.toString();
smallsql/database/DateTime.java۞515۩case 12:
smallsql/database/DateTime.java۞516۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞517۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞518۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞519۩return buf.toString();
smallsql/database/DateTime.java۞520۩case 112:
smallsql/database/DateTime.java۞521۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞522۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞523۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞524۩return buf.toString();
smallsql/database/DateTime.java۞525۩case 13:
smallsql/database/DateTime.java۞526۩case 113:
smallsql/database/DateTime.java۞527۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞528۩buf.append(' ');
smallsql/database/DateTime.java۞529۩buf.append( SHORT_MONTHS[ details.month ]);
smallsql/database/DateTime.java۞530۩buf.append(' ');
smallsql/database/DateTime.java۞531۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞532۩buf.append(' ');
smallsql/database/DateTime.java۞533۩formatNumber( details.hour, 2, buf );
smallsql/database/DateTime.java۞534۩buf.append(':');
smallsql/database/DateTime.java۞535۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞536۩buf.append(':');
smallsql/database/DateTime.java۞537۩formatNumber( details.second, 2, buf);
smallsql/database/DateTime.java۞538۩buf.append(':');
smallsql/database/DateTime.java۞539۩formatMillis( details.millis, buf);
smallsql/database/DateTime.java۞540۩return buf.toString();
smallsql/database/DateTime.java۞541۩case 14:
smallsql/database/DateTime.java۞542۩case 114:
smallsql/database/DateTime.java۞543۩formatNumber( details.hour, 2, buf);
smallsql/database/DateTime.java۞544۩buf.append(':');
smallsql/database/DateTime.java۞545۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞546۩buf.append(':');
smallsql/database/DateTime.java۞547۩formatNumber( details.second, 2, buf);
smallsql/database/DateTime.java۞548۩buf.append(':');
smallsql/database/DateTime.java۞549۩formatMillis( details.millis, buf );
smallsql/database/DateTime.java۞550۩return buf.toString();
smallsql/database/DateTime.java۞551۩case 20:
smallsql/database/DateTime.java۞552۩case 120:
smallsql/database/DateTime.java۞553۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞554۩buf.append('-');
smallsql/database/DateTime.java۞555۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞556۩buf.append('-');
smallsql/database/DateTime.java۞557۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞558۩buf.append(' ');
smallsql/database/DateTime.java۞559۩formatNumber( details.hour, 2, buf);
smallsql/database/DateTime.java۞560۩buf.append(':');
smallsql/database/DateTime.java۞561۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞562۩buf.append(':');
smallsql/database/DateTime.java۞563۩formatNumber( details.second, 2, buf);
smallsql/database/DateTime.java۞564۩return buf.toString();
smallsql/database/DateTime.java۞565۩case 21:
smallsql/database/DateTime.java۞566۩case 121:
smallsql/database/DateTime.java۞567۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞568۩buf.append('-');
smallsql/database/DateTime.java۞569۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞570۩buf.append('-');
smallsql/database/DateTime.java۞571۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞572۩buf.append(' ');
smallsql/database/DateTime.java۞573۩formatNumber( details.hour, 2, buf);
smallsql/database/DateTime.java۞574۩buf.append(':');
smallsql/database/DateTime.java۞575۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞576۩buf.append(':');
smallsql/database/DateTime.java۞577۩formatNumber( details.second, 2, buf);
smallsql/database/DateTime.java۞578۩buf.append('.');
smallsql/database/DateTime.java۞579۩formatMillis( details.millis, buf );
smallsql/database/DateTime.java۞580۩return buf.toString();
smallsql/database/DateTime.java۞581۩case 26:
smallsql/database/DateTime.java۞582۩case 126:
smallsql/database/DateTime.java۞583۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞584۩buf.append('-');
smallsql/database/DateTime.java۞585۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞586۩buf.append('-');
smallsql/database/DateTime.java۞587۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞588۩buf.append('T');
smallsql/database/DateTime.java۞589۩formatNumber( details.hour, 2, buf);
smallsql/database/DateTime.java۞590۩buf.append(':');
smallsql/database/DateTime.java۞591۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞592۩buf.append(':');
smallsql/database/DateTime.java۞593۩formatNumber( details.second, 2, buf);
smallsql/database/DateTime.java۞594۩buf.append('.');
smallsql/database/DateTime.java۞595۩formatMillis( details.millis, buf );
smallsql/database/DateTime.java۞596۩return buf.toString();
smallsql/database/DateTime.java۞597۩case 130:
smallsql/database/DateTime.java۞598۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞599۩buf.append(' ');
smallsql/database/DateTime.java۞600۩buf.append( SHORT_MONTHS[ details.month ]);
smallsql/database/DateTime.java۞601۩buf.append(' ');
smallsql/database/DateTime.java۞602۩formatNumber( details.year, 4, buf);
smallsql/database/DateTime.java۞603۩buf.append(' ');
smallsql/database/DateTime.java۞604۩formatHour12( details.hour, buf );
smallsql/database/DateTime.java۞605۩buf.append(':');
smallsql/database/DateTime.java۞606۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞607۩buf.append(':');
smallsql/database/DateTime.java۞608۩formatNumber( details.second, 2, buf);
smallsql/database/DateTime.java۞609۩buf.append(':');
smallsql/database/DateTime.java۞610۩formatMillis( details.millis, buf);
smallsql/database/DateTime.java۞611۩buf.append( details.hour < 12 ? "AM" : "PM" );
smallsql/database/DateTime.java۞612۩return buf.toString();
smallsql/database/DateTime.java۞613۩case 131:
smallsql/database/DateTime.java۞614۩formatNumber( details.day, 2, buf);
smallsql/database/DateTime.java۞615۩buf.append('/');
smallsql/database/DateTime.java۞616۩formatNumber( details.month+1, 2, buf);
smallsql/database/DateTime.java۞617۩buf.append('/');
smallsql/database/DateTime.java۞618۩formatNumber( details.year % 100, 2, buf);
smallsql/database/DateTime.java۞619۩buf.append(' ');
smallsql/database/DateTime.java۞620۩formatNumber( details.hour, 2, buf);
smallsql/database/DateTime.java۞621۩buf.append(':');
smallsql/database/DateTime.java۞622۩formatNumber( details.minute, 2, buf);
smallsql/database/DateTime.java۞623۩buf.append(':');
smallsql/database/DateTime.java۞624۩formatNumber( details.second, 2, buf);
smallsql/database/DateTime.java۞625۩buf.append(':');
smallsql/database/DateTime.java۞626۩formatMillis( details.millis, buf );
smallsql/database/DateTime.java۞627۩return buf.toString();
smallsql/database/DateTime.java۞628۩default:
smallsql/database/DateTime.java۞629۩return toString();
smallsql/database/DateTime.java۞630۩}
smallsql/database/DateTime.java۞632۩}
smallsql/database/DateTime.java۞635۩private final static void formatNumber(int value, int digitCount, StringBuffer buf){
smallsql/database/DateTime.java۞636۩buf.setLength(buf.length() + digitCount);
smallsql/database/DateTime.java۞637۩if(value < 0) value = - value;
smallsql/database/DateTime.java۞638۩for(int i=1; i<=digitCount; i++){
smallsql/database/DateTime.java۞639۩buf.setCharAt( buf.length()-i, Utils.digits[ value % 10 ] );
smallsql/database/DateTime.java۞640۩value /= 10;
smallsql/database/DateTime.java۞641۩}
smallsql/database/DateTime.java۞642۩}
smallsql/database/DateTime.java۞645۩private final static void formatMillis(int millis,  StringBuffer buf){
smallsql/database/DateTime.java۞646۩buf.append(Utils.digits[ (millis / 100) % 10 ]);
smallsql/database/DateTime.java۞647۩int value = millis % 100;
smallsql/database/DateTime.java۞648۩if(value != 0){
smallsql/database/DateTime.java۞649۩buf.append(Utils.digits[ value / 10 ]);
smallsql/database/DateTime.java۞650۩value %= 10;
smallsql/database/DateTime.java۞651۩if(value != 0)
smallsql/database/DateTime.java۞652۩buf.append(Utils.digits[ value ]);
smallsql/database/DateTime.java۞653۩}
smallsql/database/DateTime.java۞654۩}
smallsql/database/DateTime.java۞660۩private final static void formatHour12(int hour,  StringBuffer buf){
smallsql/database/DateTime.java۞661۩hour %= 12;
smallsql/database/DateTime.java۞662۩if(hour == 0) hour = 12;
smallsql/database/DateTime.java۞663۩formatNumber( hour, 2, buf );
smallsql/database/DateTime.java۞664۩}
smallsql/database/DateTime.java۞667۩private final static long addDateTimeOffset(long datetime){
smallsql/database/DateTime.java۞668۩return addDateTimeOffset( datetime, TimeZone.getDefault());
smallsql/database/DateTime.java۞669۩}
smallsql/database/DateTime.java۞672۩final static long addDateTimeOffset(long datetime, TimeZone timezone){
smallsql/database/DateTime.java۞673۩int t = (int)(datetime % 86400000);
smallsql/database/DateTime.java۞674۩int d = (int)(datetime / 86400000);
smallsql/database/DateTime.java۞675۩if(t<0){
smallsql/database/DateTime.java۞677۩t += 86400000;
smallsql/database/DateTime.java۞678۩d--;
smallsql/database/DateTime.java۞679۩}
smallsql/database/DateTime.java۞680۩int millis = t % 1000;
smallsql/database/DateTime.java۞681۩t /= 1000;
smallsql/database/DateTime.java۞682۩synchronized(cal){
smallsql/database/DateTime.java۞683۩cal.setTimeZone( timezone );
smallsql/database/DateTime.java۞684۩cal.set( 1970, 0, d+1, 0, 0, t );
smallsql/database/DateTime.java۞685۩cal.set( Calendar.MILLISECOND, millis );
smallsql/database/DateTime.java۞686۩return cal.getTimeInMillis();
smallsql/database/DateTime.java۞687۩}
smallsql/database/DateTime.java۞688۩}
smallsql/database/DateTime.java۞691۩private static long removeDateTimeOffset(long datetime){
smallsql/database/DateTime.java۞692۩synchronized(cal){
smallsql/database/DateTime.java۞693۩cal.setTimeZone( TimeZone.getDefault() );
smallsql/database/DateTime.java۞694۩cal.setTimeInMillis( datetime );
smallsql/database/DateTime.java۞695۩return datetime + cal.get( Calendar.ZONE_OFFSET) + cal.get( Calendar.DST_OFFSET);
smallsql/database/DateTime.java۞696۩}
smallsql/database/DateTime.java۞697۩}
smallsql/database/DateTime.java۞700۩static Timestamp getTimestamp(long time){
smallsql/database/DateTime.java۞701۩return new Timestamp( DateTime.addDateTimeOffset(time) );
smallsql/database/DateTime.java۞702۩}
smallsql/database/DateTime.java۞705۩static Time getTime(long time){
smallsql/database/DateTime.java۞706۩return new Time( DateTime.addDateTimeOffset(time) );
smallsql/database/DateTime.java۞707۩}
smallsql/database/DateTime.java۞710۩static Date getDate(long time){
smallsql/database/DateTime.java۞711۩return new Date( DateTime.addDateTimeOffset(time) );
smallsql/database/DateTime.java۞712۩}
smallsql/database/DateTime.java۞715۩public Object getImmutableObject(){
smallsql/database/DateTime.java۞716۩switch(dataType){
smallsql/database/DateTime.java۞717۩case SQLTokenizer.DATE:
smallsql/database/DateTime.java۞718۩return getDate( time );
smallsql/database/DateTime.java۞719۩case SQLTokenizer.TIME:
smallsql/database/DateTime.java۞720۩return getTime( time );
smallsql/database/DateTime.java۞721۩default:
smallsql/database/DateTime.java۞722۩return getTimestamp( time );
smallsql/database/DateTime.java۞723۩}
smallsql/database/DateTime.java۞724۩}
smallsql/database/DateTime.java۞727۩static class Details{
smallsql/database/DateTime.java۞728۩int year;
smallsql/database/DateTime.java۞729۩int month;
smallsql/database/DateTime.java۞730۩int dayofyear;
smallsql/database/DateTime.java۞731۩int day;
smallsql/database/DateTime.java۞732۩int hour;
smallsql/database/DateTime.java۞733۩int minute;
smallsql/database/DateTime.java۞734۩int second;
smallsql/database/DateTime.java۞735۩int millis;
smallsql/database/DateTime.java۞737۩Details(long time){
smallsql/database/DateTime.java۞738۩int t = (int)(time % 86400000);
smallsql/database/DateTime.java۞739۩int d = (int)(time / 86400000);
smallsql/database/DateTime.java۞740۩if(t<0){
smallsql/database/DateTime.java۞742۩t += 86400000;
smallsql/database/DateTime.java۞743۩d--;
smallsql/database/DateTime.java۞744۩}
smallsql/database/DateTime.java۞745۩millis = t % 1000;
smallsql/database/DateTime.java۞746۩t /= 1000;
smallsql/database/DateTime.java۞747۩second = t % 60;
smallsql/database/DateTime.java۞748۩t /= 60;
smallsql/database/DateTime.java۞749۩minute = t % 60;
smallsql/database/DateTime.java۞750۩t /= 60;
smallsql/database/DateTime.java۞751۩hour = t % 24;
smallsql/database/DateTime.java۞753۩year = 1970 - (int)(t / 365.2425);
smallsql/database/DateTime.java۞754۩boolean isLeap;
smallsql/database/DateTime.java۞755۩do{
smallsql/database/DateTime.java۞756۩isLeap = false;
smallsql/database/DateTime.java۞757۩dayofyear = day = d - ((year - 1970)*365 + (year/4) - (year/100) + (year/400) - 477);
smallsql/database/DateTime.java۞758۩if(isLeapYear(year)){
smallsql/database/DateTime.java۞760۩if(day < 59){
smallsql/database/DateTime.java۞761۩day++;
smallsql/database/DateTime.java۞762۩isLeap = true;
smallsql/database/DateTime.java۞763۩}
smallsql/database/DateTime.java۞764۩dayofyear++;
smallsql/database/DateTime.java۞765۩}
smallsql/database/DateTime.java۞766۩if(day < 0){
smallsql/database/DateTime.java۞767۩year--;
smallsql/database/DateTime.java۞768۩continue;
smallsql/database/DateTime.java۞769۩}else
smallsql/database/DateTime.java۞770۩if(day >= 365){
smallsql/database/DateTime.java۞771۩year++;
smallsql/database/DateTime.java۞772۩continue;
smallsql/database/DateTime.java۞773۩}
smallsql/database/DateTime.java۞774۩break;
smallsql/database/DateTime.java۞775۩}while(true);
smallsql/database/DateTime.java۞777۩if(isLeap && day == 59){
smallsql/database/DateTime.java۞779۩month = 1;
smallsql/database/DateTime.java۞780۩day   = 29;
smallsql/database/DateTime.java۞781۩}else{
smallsql/database/DateTime.java۞782۩for(int m=11; m>=0; m--){
smallsql/database/DateTime.java۞783۩if(MONTH_DAYS[m] <= day){
smallsql/database/DateTime.java۞784۩month = m;
smallsql/database/DateTime.java۞785۩day   = day - MONTH_DAYS[m] + 1;
smallsql/database/DateTime.java۞786۩break;
smallsql/database/DateTime.java۞787۩}
smallsql/database/DateTime.java۞788۩}
smallsql/database/DateTime.java۞789۩}
smallsql/database/DateTime.java۞790۩}
smallsql/database/DateTime.java۞791۩}
smallsql/database/DateTime.java۞796۩static boolean isLeapYear(int year){
smallsql/database/DateTime.java۞797۩return year % 4 == 0 && (year%100 != 0 || year%400 == 0);
smallsql/database/DateTime.java۞798۩}
smallsql/database/DateTime.java۞800۩private static final Calendar cal = Calendar.getInstance();
smallsql/database/DateTime.java۞802۩}
smallsql/database/Distinct.java۞34۩package smallsql.database;
smallsql/database/Distinct.java۞40۩final class Distinct extends RowSource {
smallsql/database/Distinct.java۞42۩final private Expressions distinctColumns;
smallsql/database/Distinct.java۞43۩final private RowSource rowSource;
smallsql/database/Distinct.java۞44۩private Index index;
smallsql/database/Distinct.java۞45۩private int row;
smallsql/database/Distinct.java۞47۩Distinct(RowSource rowSource, Expressions columns){
smallsql/database/Distinct.java۞48۩this.rowSource = rowSource;
smallsql/database/Distinct.java۞49۩this.distinctColumns = columns;
smallsql/database/Distinct.java۞50۩}
smallsql/database/Distinct.java۞53۩final void execute() throws Exception{
smallsql/database/Distinct.java۞54۩rowSource.execute();
smallsql/database/Distinct.java۞55۩index = new Index(true);
smallsql/database/Distinct.java۞56۩}
smallsql/database/Distinct.java۞59۩final boolean isScrollable() {
smallsql/database/Distinct.java۞60۩return false;
smallsql/database/Distinct.java۞61۩}
smallsql/database/Distinct.java۞64۩final void beforeFirst() throws Exception {
smallsql/database/Distinct.java۞65۩rowSource.beforeFirst();
smallsql/database/Distinct.java۞66۩row = 0;
smallsql/database/Distinct.java۞67۩}
smallsql/database/Distinct.java۞70۩final boolean first() throws Exception {
smallsql/database/Distinct.java۞71۩beforeFirst();
smallsql/database/Distinct.java۞72۩return next();
smallsql/database/Distinct.java۞73۩}
smallsql/database/Distinct.java۞76۩final boolean next() throws Exception {
smallsql/database/Distinct.java۞77۩while(true){
smallsql/database/Distinct.java۞78۩boolean isNext = rowSource.next();
smallsql/database/Distinct.java۞79۩if(!isNext) return false;
smallsql/database/Distinct.java۞81۩Long oldRowOffset = (Long)index.findRows(distinctColumns, true, null);
smallsql/database/Distinct.java۞82۩long newRowOffset = rowSource.getRowPosition();
smallsql/database/Distinct.java۞83۩if(oldRowOffset == null){
smallsql/database/Distinct.java۞84۩index.addValues( newRowOffset, distinctColumns);
smallsql/database/Distinct.java۞85۩row++;
smallsql/database/Distinct.java۞86۩return true;
smallsql/database/Distinct.java۞87۩}else
smallsql/database/Distinct.java۞88۩if(oldRowOffset.longValue() == newRowOffset){
smallsql/database/Distinct.java۞89۩row++;
smallsql/database/Distinct.java۞90۩return true;
smallsql/database/Distinct.java۞91۩}
smallsql/database/Distinct.java۞92۩}
smallsql/database/Distinct.java۞93۩}
smallsql/database/Distinct.java۞96۩final void afterLast() throws Exception {
smallsql/database/Distinct.java۞97۩rowSource.afterLast();
smallsql/database/Distinct.java۞98۩row = 0;
smallsql/database/Distinct.java۞99۩}
smallsql/database/Distinct.java۞102۩final int getRow() throws Exception {
smallsql/database/Distinct.java۞103۩return row;
smallsql/database/Distinct.java۞104۩}
smallsql/database/Distinct.java۞107۩final long getRowPosition() {
smallsql/database/Distinct.java۞108۩return rowSource.getRowPosition();
smallsql/database/Distinct.java۞109۩}
smallsql/database/Distinct.java۞112۩final void setRowPosition(long rowPosition) throws Exception {
smallsql/database/Distinct.java۞113۩rowSource.setRowPosition(rowPosition);
smallsql/database/Distinct.java۞114۩}
smallsql/database/Distinct.java۞117۩final void nullRow() {
smallsql/database/Distinct.java۞118۩rowSource.nullRow();
smallsql/database/Distinct.java۞119۩row = 0;
smallsql/database/Distinct.java۞120۩}
smallsql/database/Distinct.java۞123۩final void noRow() {
smallsql/database/Distinct.java۞124۩rowSource.noRow();
smallsql/database/Distinct.java۞125۩row = 0;
smallsql/database/Distinct.java۞126۩}
smallsql/database/Distinct.java۞129۩final boolean rowInserted(){
smallsql/database/Distinct.java۞130۩return rowSource.rowInserted();
smallsql/database/Distinct.java۞131۩}
smallsql/database/Distinct.java۞134۩final boolean rowDeleted() {
smallsql/database/Distinct.java۞135۩return rowSource.rowDeleted();
smallsql/database/Distinct.java۞136۩}
smallsql/database/Distinct.java۞142۩boolean isExpressionsFromThisRowSource(Expressions columns){
smallsql/database/Distinct.java۞143۩return rowSource.isExpressionsFromThisRowSource(columns);
smallsql/database/Distinct.java۞144۩}
smallsql/database/Distinct.java۞145۩}
smallsql/database/Expression.java۞33۩package smallsql.database;
smallsql/database/Expression.java۞35۩import java.sql.SQLException;
smallsql/database/Expression.java۞38۩abstract class Expression implements Cloneable{
smallsql/database/Expression.java۞40۩static final Expression NULL = new ExpressionValue( null, SQLTokenizer.NULL );
smallsql/database/Expression.java۞42۩final private int type;
smallsql/database/Expression.java۞43۩private String name;
smallsql/database/Expression.java۞44۩private String alias;
smallsql/database/Expression.java۞53۩private Expression[] params;
smallsql/database/Expression.java۞55۩Expression(int type){
smallsql/database/Expression.java۞56۩this.type = type;
smallsql/database/Expression.java۞57۩}
smallsql/database/Expression.java۞59۩protected Object clone() throws CloneNotSupportedException{
smallsql/database/Expression.java۞60۩return super.clone();
smallsql/database/Expression.java۞61۩}
smallsql/database/Expression.java۞63۩final String getName(){
smallsql/database/Expression.java۞64۩return name;
smallsql/database/Expression.java۞65۩}
smallsql/database/Expression.java۞67۩final void setName(String name){
smallsql/database/Expression.java۞68۩this.alias = this.name = name;
smallsql/database/Expression.java۞69۩}
smallsql/database/Expression.java۞71۩final String getAlias(){
smallsql/database/Expression.java۞72۩return alias;
smallsql/database/Expression.java۞73۩}
smallsql/database/Expression.java۞75۩final void setAlias(String alias){
smallsql/database/Expression.java۞76۩this.alias = alias;
smallsql/database/Expression.java۞77۩}
smallsql/database/Expression.java۞79۩void setParams( Expression[] params ){
smallsql/database/Expression.java۞80۩this.params = params;
smallsql/database/Expression.java۞81۩}
smallsql/database/Expression.java۞87۩void setParamAt( Expression param, int idx){
smallsql/database/Expression.java۞88۩params[idx] = param;
smallsql/database/Expression.java۞89۩}
smallsql/database/Expression.java۞91۩final Expression[] getParams(){ return params; }
smallsql/database/Expression.java۞98۩void optimize() throws SQLException{
smallsql/database/Expression.java۞99۩if(params != null){
smallsql/database/Expression.java۞100۩for(int p=0; p<params.length; p++){
smallsql/database/Expression.java۞101۩params[p].optimize();
smallsql/database/Expression.java۞102۩}
smallsql/database/Expression.java۞103۩}
smallsql/database/Expression.java۞104۩}
smallsql/database/Expression.java۞109۩public boolean equals(Object expr){
smallsql/database/Expression.java۞110۩if(!(expr instanceof Expression)) return false;
smallsql/database/Expression.java۞111۩if( ((Expression)expr).type == type){
smallsql/database/Expression.java۞113۩Expression[] p1 = ((Expression)expr).params;
smallsql/database/Expression.java۞114۩Expression[] p2 = params;
smallsql/database/Expression.java۞115۩if(p1 != null && p2 != null){
smallsql/database/Expression.java۞116۩if(p1 == null) return false;
smallsql/database/Expression.java۞117۩for(int i=0; i<p1.length; i++){
smallsql/database/Expression.java۞118۩if(!p2[i].equals(p1[i])) return false;
smallsql/database/Expression.java۞119۩}
smallsql/database/Expression.java۞120۩}
smallsql/database/Expression.java۞121۩String name1 = ((Expression)expr).name;
smallsql/database/Expression.java۞122۩String name2 = name;
smallsql/database/Expression.java۞123۩if(name1 == name2) return true;
smallsql/database/Expression.java۞124۩if(name1 == null) return false;
smallsql/database/Expression.java۞125۩if(name1.equalsIgnoreCase(name2)) return true;
smallsql/database/Expression.java۞126۩}
smallsql/database/Expression.java۞127۩return false;
smallsql/database/Expression.java۞128۩}
smallsql/database/Expression.java۞131۩abstract boolean isNull() throws Exception;
smallsql/database/Expression.java۞133۩abstract boolean getBoolean() throws Exception;
smallsql/database/Expression.java۞135۩abstract int getInt() throws Exception;
smallsql/database/Expression.java۞137۩abstract long getLong() throws Exception;
smallsql/database/Expression.java۞139۩abstract float getFloat() throws Exception;
smallsql/database/Expression.java۞141۩abstract double getDouble() throws Exception;
smallsql/database/Expression.java۞143۩abstract long getMoney() throws Exception;
smallsql/database/Expression.java۞145۩abstract MutableNumeric getNumeric() throws Exception;
smallsql/database/Expression.java۞147۩abstract Object getObject() throws Exception;
smallsql/database/Expression.java۞149۩final Object getApiObject() throws Exception{
smallsql/database/Expression.java۞150۩Object obj = getObject();
smallsql/database/Expression.java۞151۩if(obj instanceof Mutable){
smallsql/database/Expression.java۞152۩return ((Mutable)obj).getImmutableObject();
smallsql/database/Expression.java۞153۩}
smallsql/database/Expression.java۞154۩return obj;
smallsql/database/Expression.java۞155۩}
smallsql/database/Expression.java۞157۩abstract String getString() throws Exception;
smallsql/database/Expression.java۞159۩abstract byte[] getBytes() throws Exception;
smallsql/database/Expression.java۞161۩abstract int getDataType();
smallsql/database/Expression.java۞163۩final int getType(){return type;}
smallsql/database/Expression.java۞171۩String getTableName(){
smallsql/database/Expression.java۞172۩return null;
smallsql/database/Expression.java۞173۩}
smallsql/database/Expression.java۞176۩int getPrecision(){
smallsql/database/Expression.java۞177۩return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );
smallsql/database/Expression.java۞178۩}
smallsql/database/Expression.java۞182۩int getScale(){
smallsql/database/Expression.java۞183۩return getScale(getDataType());
smallsql/database/Expression.java۞184۩}
smallsql/database/Expression.java۞187۩final static int getScale(int dataType){
smallsql/database/Expression.java۞188۩switch(dataType){
smallsql/database/Expression.java۞189۩case SQLTokenizer.MONEY:
smallsql/database/Expression.java۞190۩case SQLTokenizer.SMALLMONEY:
smallsql/database/Expression.java۞191۩return 4;
smallsql/database/Expression.java۞192۩case SQLTokenizer.TIMESTAMP:
smallsql/database/Expression.java۞193۩return 9;
smallsql/database/Expression.java۞194۩case SQLTokenizer.NUMERIC:
smallsql/database/Expression.java۞195۩case SQLTokenizer.DECIMAL:
smallsql/database/Expression.java۞196۩return 38;
smallsql/database/Expression.java۞197۩default: return 0;
smallsql/database/Expression.java۞198۩}
smallsql/database/Expression.java۞199۩}
smallsql/database/Expression.java۞202۩int getDisplaySize(){
smallsql/database/Expression.java۞203۩return SSResultSetMetaData.getDisplaySize(getDataType(), getPrecision(), getScale());
smallsql/database/Expression.java۞204۩}
smallsql/database/Expression.java۞206۩boolean isDefinitelyWritable(){
smallsql/database/Expression.java۞207۩return false;
smallsql/database/Expression.java۞208۩}
smallsql/database/Expression.java۞210۩boolean isAutoIncrement(){
smallsql/database/Expression.java۞211۩return false;
smallsql/database/Expression.java۞212۩}
smallsql/database/Expression.java۞214۩boolean isCaseSensitive(){
smallsql/database/Expression.java۞215۩return false;
smallsql/database/Expression.java۞216۩}
smallsql/database/Expression.java۞218۩boolean isNullable(){
smallsql/database/Expression.java۞219۩return true;
smallsql/database/Expression.java۞220۩}
smallsql/database/Expression.java۞223۩static final int VALUE      = 1;
smallsql/database/Expression.java۞224۩static final int NAME       = 2;
smallsql/database/Expression.java۞225۩static final int FUNCTION   = 3;
smallsql/database/Expression.java۞226۩static final int GROUP_BY   = 11;
smallsql/database/Expression.java۞227۩static final int COUNT	    = 12;
smallsql/database/Expression.java۞228۩static final int SUM	    = 13;
smallsql/database/Expression.java۞229۩static final int FIRST		= 14;
smallsql/database/Expression.java۞230۩static final int LAST		= 15;
smallsql/database/Expression.java۞231۩static final int MIN		= 16;
smallsql/database/Expression.java۞232۩static final int MAX		= 17;
smallsql/database/Expression.java۞233۩static final int GROUP_BEGIN= GROUP_BY;
smallsql/database/Expression.java۞235۩}
smallsql/database/ExpressionArithmetic.java۞33۩package smallsql.database;
smallsql/database/ExpressionArithmetic.java۞35۩import java.sql.*;
smallsql/database/ExpressionArithmetic.java۞36۩import smallsql.database.language.Language;
smallsql/database/ExpressionArithmetic.java۞39۩public class ExpressionArithmetic extends Expression {
smallsql/database/ExpressionArithmetic.java۞41۩private Expression left;
smallsql/database/ExpressionArithmetic.java۞42۩private Expression right;
smallsql/database/ExpressionArithmetic.java۞43۩private Expression right2;
smallsql/database/ExpressionArithmetic.java۞44۩private Expression[] inList;
smallsql/database/ExpressionArithmetic.java۞45۩final private int operation;
smallsql/database/ExpressionArithmetic.java۞50۩ExpressionArithmetic( Expression left, int operation){
smallsql/database/ExpressionArithmetic.java۞51۩super(FUNCTION);
smallsql/database/ExpressionArithmetic.java۞52۩this.left  = left;
smallsql/database/ExpressionArithmetic.java۞53۩this.operation = operation;
smallsql/database/ExpressionArithmetic.java۞54۩super.setParams( new Expression[]{ left });
smallsql/database/ExpressionArithmetic.java۞55۩}
smallsql/database/ExpressionArithmetic.java۞57۩ExpressionArithmetic( Expression left, Expression right, int operation){
smallsql/database/ExpressionArithmetic.java۞58۩super(FUNCTION);
smallsql/database/ExpressionArithmetic.java۞59۩this.left   = left;
smallsql/database/ExpressionArithmetic.java۞60۩this.right  = right;
smallsql/database/ExpressionArithmetic.java۞61۩this.operation = operation;
smallsql/database/ExpressionArithmetic.java۞62۩super.setParams( new Expression[]{ left, right });
smallsql/database/ExpressionArithmetic.java۞63۩}
smallsql/database/ExpressionArithmetic.java۞68۩ExpressionArithmetic( Expression left, Expression right, Expression right2, int operation){
smallsql/database/ExpressionArithmetic.java۞69۩super(FUNCTION);
smallsql/database/ExpressionArithmetic.java۞70۩this.left   = left;
smallsql/database/ExpressionArithmetic.java۞71۩this.right  = right;
smallsql/database/ExpressionArithmetic.java۞72۩this.right2 = right2;
smallsql/database/ExpressionArithmetic.java۞73۩this.operation = operation;
smallsql/database/ExpressionArithmetic.java۞74۩super.setParams( new Expression[]{ left, right, right2 });
smallsql/database/ExpressionArithmetic.java۞75۩}
smallsql/database/ExpressionArithmetic.java۞80۩ExpressionArithmetic( Expression left, Expressions inList, int operation){
smallsql/database/ExpressionArithmetic.java۞81۩super(FUNCTION);
smallsql/database/ExpressionArithmetic.java۞82۩this.left   = left;
smallsql/database/ExpressionArithmetic.java۞83۩this.operation = operation;
smallsql/database/ExpressionArithmetic.java۞84۩Expression[] params;
smallsql/database/ExpressionArithmetic.java۞85۩if(inList != null){
smallsql/database/ExpressionArithmetic.java۞86۩this.inList = inList.toArray();
smallsql/database/ExpressionArithmetic.java۞87۩params = new Expression[this.inList.length+1];
smallsql/database/ExpressionArithmetic.java۞88۩params[0] = left;
smallsql/database/ExpressionArithmetic.java۞89۩System.arraycopy(this.inList, 0, params, 1, this.inList.length);
smallsql/database/ExpressionArithmetic.java۞90۩}else{
smallsql/database/ExpressionArithmetic.java۞92۩params = new Expression[]{ left };
smallsql/database/ExpressionArithmetic.java۞93۩}
smallsql/database/ExpressionArithmetic.java۞94۩super.setParams( params );
smallsql/database/ExpressionArithmetic.java۞95۩}
smallsql/database/ExpressionArithmetic.java۞102۩int getOperation(){
smallsql/database/ExpressionArithmetic.java۞103۩return operation;
smallsql/database/ExpressionArithmetic.java۞104۩}
smallsql/database/ExpressionArithmetic.java۞107۩private Expression convertExpressionIfNeeded( Expression expr, Expression other ){
smallsql/database/ExpressionArithmetic.java۞108۩if(expr == null || other == null){
smallsql/database/ExpressionArithmetic.java۞109۩return expr;
smallsql/database/ExpressionArithmetic.java۞110۩}
smallsql/database/ExpressionArithmetic.java۞111۩switch(expr.getDataType()){
smallsql/database/ExpressionArithmetic.java۞112۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionArithmetic.java۞113۩case SQLTokenizer.NCHAR:
smallsql/database/ExpressionArithmetic.java۞114۩case SQLTokenizer.BINARY:
smallsql/database/ExpressionArithmetic.java۞115۩switch(other.getDataType()){
smallsql/database/ExpressionArithmetic.java۞116۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionArithmetic.java۞117۩case SQLTokenizer.NVARCHAR:
smallsql/database/ExpressionArithmetic.java۞118۩case SQLTokenizer.CLOB:
smallsql/database/ExpressionArithmetic.java۞119۩case SQLTokenizer.NCLOB:
smallsql/database/ExpressionArithmetic.java۞120۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/ExpressionArithmetic.java۞121۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/ExpressionArithmetic.java۞122۩case SQLTokenizer.VARBINARY:
smallsql/database/ExpressionArithmetic.java۞123۩ExpressionFunctionRTrim trim = new ExpressionFunctionRTrim();
smallsql/database/ExpressionArithmetic.java۞124۩trim.setParams(new Expression[]{expr});
smallsql/database/ExpressionArithmetic.java۞125۩return trim;
smallsql/database/ExpressionArithmetic.java۞126۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionArithmetic.java۞127۩case SQLTokenizer.NCHAR:
smallsql/database/ExpressionArithmetic.java۞128۩case SQLTokenizer.BINARY:
smallsql/database/ExpressionArithmetic.java۞129۩if(other.getPrecision() > expr.getPrecision()){
smallsql/database/ExpressionArithmetic.java۞130۩return new ExpressionFunctionConvert(new ColumnExpression(other), expr, null );
smallsql/database/ExpressionArithmetic.java۞131۩}
smallsql/database/ExpressionArithmetic.java۞132۩break;
smallsql/database/ExpressionArithmetic.java۞133۩}
smallsql/database/ExpressionArithmetic.java۞134۩break;
smallsql/database/ExpressionArithmetic.java۞135۩}
smallsql/database/ExpressionArithmetic.java۞136۩return expr;
smallsql/database/ExpressionArithmetic.java۞137۩}
smallsql/database/ExpressionArithmetic.java۞140۩final void setParamAt( Expression param, int idx){
smallsql/database/ExpressionArithmetic.java۞141۩switch(idx){
smallsql/database/ExpressionArithmetic.java۞142۩case 0:
smallsql/database/ExpressionArithmetic.java۞143۩left = param;
smallsql/database/ExpressionArithmetic.java۞144۩break;
smallsql/database/ExpressionArithmetic.java۞145۩case 1:
smallsql/database/ExpressionArithmetic.java۞146۩if(right != null){
smallsql/database/ExpressionArithmetic.java۞147۩right = param;
smallsql/database/ExpressionArithmetic.java۞148۩}
smallsql/database/ExpressionArithmetic.java۞149۩break;
smallsql/database/ExpressionArithmetic.java۞150۩case 2:
smallsql/database/ExpressionArithmetic.java۞151۩if(right != null){
smallsql/database/ExpressionArithmetic.java۞152۩right2 = param;
smallsql/database/ExpressionArithmetic.java۞153۩}
smallsql/database/ExpressionArithmetic.java۞154۩break;
smallsql/database/ExpressionArithmetic.java۞155۩}
smallsql/database/ExpressionArithmetic.java۞156۩if(inList != null && idx>0 && idx<=inList.length){
smallsql/database/ExpressionArithmetic.java۞157۩inList[idx-1] = param;
smallsql/database/ExpressionArithmetic.java۞158۩}
smallsql/database/ExpressionArithmetic.java۞159۩super.setParamAt( param, idx );
smallsql/database/ExpressionArithmetic.java۞160۩}
smallsql/database/ExpressionArithmetic.java۞166۩public boolean equals(Object expr){
smallsql/database/ExpressionArithmetic.java۞167۩if(!super.equals(expr)) return false;
smallsql/database/ExpressionArithmetic.java۞168۩if(!(expr instanceof ExpressionArithmetic)) return false;
smallsql/database/ExpressionArithmetic.java۞169۩if( ((ExpressionArithmetic)expr).operation != operation) return false;
smallsql/database/ExpressionArithmetic.java۞170۩return true;
smallsql/database/ExpressionArithmetic.java۞171۩}
smallsql/database/ExpressionArithmetic.java۞175۩int getInt() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞176۩if(isNull()) return 0;
smallsql/database/ExpressionArithmetic.java۞177۩int dataType = getDataType();
smallsql/database/ExpressionArithmetic.java۞178۩switch(dataType){
smallsql/database/ExpressionArithmetic.java۞179۩case SQLTokenizer.BIT:
smallsql/database/ExpressionArithmetic.java۞180۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionArithmetic.java۞181۩return getBoolean() ? 1 : 0;
smallsql/database/ExpressionArithmetic.java۞182۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionArithmetic.java۞183۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionArithmetic.java۞184۩case SQLTokenizer.INT:
smallsql/database/ExpressionArithmetic.java۞185۩return getIntImpl();
smallsql/database/ExpressionArithmetic.java۞186۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionArithmetic.java۞187۩return (int)getLongImpl();
smallsql/database/ExpressionArithmetic.java۞188۩case SQLTokenizer.REAL:
smallsql/database/ExpressionArithmetic.java۞189۩return (int)getFloatImpl();
smallsql/database/ExpressionArithmetic.java۞190۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionArithmetic.java۞191۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionArithmetic.java۞192۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionArithmetic.java۞193۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionArithmetic.java۞194۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionArithmetic.java۞195۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionArithmetic.java۞199۩return (int)getDoubleImpl();
smallsql/database/ExpressionArithmetic.java۞200۩}
smallsql/database/ExpressionArithmetic.java۞201۩throw createUnspportedConversion( SQLTokenizer.INT);
smallsql/database/ExpressionArithmetic.java۞202۩}
smallsql/database/ExpressionArithmetic.java۞205۩private int getIntImpl() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞206۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞207۩case ADD:       return left.getInt() + right.getInt();
smallsql/database/ExpressionArithmetic.java۞208۩case SUB:       return left.getInt() - right.getInt();
smallsql/database/ExpressionArithmetic.java۞209۩case MUL:       return left.getInt() * right.getInt();
smallsql/database/ExpressionArithmetic.java۞210۩case DIV:       return left.getInt() / right.getInt();
smallsql/database/ExpressionArithmetic.java۞211۩case NEGATIVE:  return               - left.getInt();
smallsql/database/ExpressionArithmetic.java۞212۩case MOD:		return left.getInt() % right.getInt();
smallsql/database/ExpressionArithmetic.java۞213۩case BIT_NOT:   return               ~ left.getInt();
smallsql/database/ExpressionArithmetic.java۞214۩}
smallsql/database/ExpressionArithmetic.java۞215۩throw createUnspportedConversion( SQLTokenizer.INT);
smallsql/database/ExpressionArithmetic.java۞216۩}
smallsql/database/ExpressionArithmetic.java۞219۩long getLong() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞220۩if(isNull()) return 0;
smallsql/database/ExpressionArithmetic.java۞221۩int dataType = getDataType();
smallsql/database/ExpressionArithmetic.java۞222۩switch(dataType){
smallsql/database/ExpressionArithmetic.java۞223۩case SQLTokenizer.BIT:
smallsql/database/ExpressionArithmetic.java۞224۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionArithmetic.java۞225۩return getBoolean() ? 1 : 0;
smallsql/database/ExpressionArithmetic.java۞226۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionArithmetic.java۞227۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionArithmetic.java۞228۩case SQLTokenizer.INT:
smallsql/database/ExpressionArithmetic.java۞229۩return getIntImpl();
smallsql/database/ExpressionArithmetic.java۞230۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionArithmetic.java۞231۩return getLongImpl();
smallsql/database/ExpressionArithmetic.java۞232۩case SQLTokenizer.REAL:
smallsql/database/ExpressionArithmetic.java۞233۩return (long)getFloatImpl();
smallsql/database/ExpressionArithmetic.java۞234۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionArithmetic.java۞235۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionArithmetic.java۞236۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionArithmetic.java۞237۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionArithmetic.java۞238۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionArithmetic.java۞239۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionArithmetic.java۞240۩return (long)getDoubleImpl();
smallsql/database/ExpressionArithmetic.java۞241۩}
smallsql/database/ExpressionArithmetic.java۞242۩throw createUnspportedConversion( SQLTokenizer.LONG);
smallsql/database/ExpressionArithmetic.java۞243۩}
smallsql/database/ExpressionArithmetic.java۞246۩private long getLongImpl() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞247۩if(isNull()) return 0;
smallsql/database/ExpressionArithmetic.java۞248۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞249۩case ADD: return left.getLong() + right.getLong();
smallsql/database/ExpressionArithmetic.java۞250۩case SUB: return left.getLong() - right.getLong();
smallsql/database/ExpressionArithmetic.java۞251۩case MUL: return left.getLong() * right.getLong();
smallsql/database/ExpressionArithmetic.java۞252۩case DIV: return left.getLong() / right.getLong();
smallsql/database/ExpressionArithmetic.java۞253۩case NEGATIVE:  return          - left.getLong();
smallsql/database/ExpressionArithmetic.java۞254۩case MOD:		return left.getLong() % right.getLong();
smallsql/database/ExpressionArithmetic.java۞255۩case BIT_NOT:   return          ~ right.getInt();
smallsql/database/ExpressionArithmetic.java۞256۩}
smallsql/database/ExpressionArithmetic.java۞257۩throw createUnspportedConversion( SQLTokenizer.LONG);
smallsql/database/ExpressionArithmetic.java۞258۩}
smallsql/database/ExpressionArithmetic.java۞261۩double getDouble() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞262۩if(isNull()) return 0;
smallsql/database/ExpressionArithmetic.java۞263۩int dataType = getDataType();
smallsql/database/ExpressionArithmetic.java۞264۩switch(dataType){
smallsql/database/ExpressionArithmetic.java۞265۩case SQLTokenizer.BIT:
smallsql/database/ExpressionArithmetic.java۞266۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionArithmetic.java۞267۩return getBoolean() ? 1 : 0;
smallsql/database/ExpressionArithmetic.java۞268۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionArithmetic.java۞269۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionArithmetic.java۞270۩case SQLTokenizer.INT:
smallsql/database/ExpressionArithmetic.java۞271۩return getIntImpl();
smallsql/database/ExpressionArithmetic.java۞272۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionArithmetic.java۞273۩return getLongImpl();
smallsql/database/ExpressionArithmetic.java۞274۩case SQLTokenizer.REAL:
smallsql/database/ExpressionArithmetic.java۞275۩return getFloatImpl();
smallsql/database/ExpressionArithmetic.java۞276۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionArithmetic.java۞277۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionArithmetic.java۞278۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionArithmetic.java۞279۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionArithmetic.java۞280۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionArithmetic.java۞281۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionArithmetic.java۞282۩return getDoubleImpl();
smallsql/database/ExpressionArithmetic.java۞283۩}
smallsql/database/ExpressionArithmetic.java۞284۩throw createUnspportedConversion( SQLTokenizer.DOUBLE);
smallsql/database/ExpressionArithmetic.java۞285۩}
smallsql/database/ExpressionArithmetic.java۞288۩private double getDoubleImpl() throws java.lang.Exception{
smallsql/database/ExpressionArithmetic.java۞289۩if(operation == NEGATIVE)
smallsql/database/ExpressionArithmetic.java۞290۩return getDoubleImpl(0, left.getDouble());
smallsql/database/ExpressionArithmetic.java۞291۩return getDoubleImpl(left.getDouble(), right.getDouble());
smallsql/database/ExpressionArithmetic.java۞292۩}
smallsql/database/ExpressionArithmetic.java۞295۩private double getDoubleImpl( double lVal, double rVal) throws java.lang.Exception{
smallsql/database/ExpressionArithmetic.java۞296۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞297۩case ADD: return lVal + rVal;
smallsql/database/ExpressionArithmetic.java۞298۩case SUB: return lVal - rVal;
smallsql/database/ExpressionArithmetic.java۞299۩case MUL: return lVal * rVal;
smallsql/database/ExpressionArithmetic.java۞300۩case DIV: return lVal / rVal;
smallsql/database/ExpressionArithmetic.java۞301۩case NEGATIVE: return - rVal;
smallsql/database/ExpressionArithmetic.java۞302۩case MOD:		return lVal % rVal;
smallsql/database/ExpressionArithmetic.java۞303۩}
smallsql/database/ExpressionArithmetic.java۞304۩throw createUnspportedConversion( SQLTokenizer.DOUBLE);
smallsql/database/ExpressionArithmetic.java۞305۩}
smallsql/database/ExpressionArithmetic.java۞308۩float getFloat() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞309۩if(isNull()) return 0;
smallsql/database/ExpressionArithmetic.java۞310۩int dataType = getDataType();
smallsql/database/ExpressionArithmetic.java۞311۩switch(dataType){
smallsql/database/ExpressionArithmetic.java۞312۩case SQLTokenizer.BIT:
smallsql/database/ExpressionArithmetic.java۞313۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionArithmetic.java۞314۩return getBoolean() ? 1 : 0;
smallsql/database/ExpressionArithmetic.java۞315۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionArithmetic.java۞316۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionArithmetic.java۞317۩case SQLTokenizer.INT:
smallsql/database/ExpressionArithmetic.java۞318۩return getIntImpl();
smallsql/database/ExpressionArithmetic.java۞319۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionArithmetic.java۞320۩return getLongImpl();
smallsql/database/ExpressionArithmetic.java۞321۩case SQLTokenizer.REAL:
smallsql/database/ExpressionArithmetic.java۞322۩return getFloatImpl();
smallsql/database/ExpressionArithmetic.java۞323۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionArithmetic.java۞324۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionArithmetic.java۞325۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionArithmetic.java۞326۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionArithmetic.java۞327۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionArithmetic.java۞328۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionArithmetic.java۞329۩return (float)getDoubleImpl();
smallsql/database/ExpressionArithmetic.java۞330۩}
smallsql/database/ExpressionArithmetic.java۞331۩throw createUnspportedConversion( SQLTokenizer.DOUBLE);
smallsql/database/ExpressionArithmetic.java۞332۩}
smallsql/database/ExpressionArithmetic.java۞335۩private float getFloatImpl() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞336۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞337۩case ADD: return left.getFloat() + right.getFloat();
smallsql/database/ExpressionArithmetic.java۞338۩case SUB: return left.getFloat() - right.getFloat();
smallsql/database/ExpressionArithmetic.java۞339۩case MUL: return left.getFloat() * right.getFloat();
smallsql/database/ExpressionArithmetic.java۞340۩case DIV: return left.getFloat() / right.getFloat();
smallsql/database/ExpressionArithmetic.java۞341۩case NEGATIVE:  return           - left.getFloat();
smallsql/database/ExpressionArithmetic.java۞342۩case MOD:		return left.getFloat() % right.getFloat();
smallsql/database/ExpressionArithmetic.java۞343۩}
smallsql/database/ExpressionArithmetic.java۞344۩throw createUnspportedConversion( SQLTokenizer.REAL );
smallsql/database/ExpressionArithmetic.java۞345۩}
smallsql/database/ExpressionArithmetic.java۞348۩long getMoney() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞349۩if(isNull()) return 0;
smallsql/database/ExpressionArithmetic.java۞350۩int dataType = getDataType();
smallsql/database/ExpressionArithmetic.java۞351۩switch(dataType){
smallsql/database/ExpressionArithmetic.java۞352۩case SQLTokenizer.BIT:
smallsql/database/ExpressionArithmetic.java۞353۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionArithmetic.java۞354۩return getBoolean() ? 10000 : 0;
smallsql/database/ExpressionArithmetic.java۞355۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionArithmetic.java۞356۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionArithmetic.java۞357۩case SQLTokenizer.INT:
smallsql/database/ExpressionArithmetic.java۞358۩return getIntImpl() * 10000;
smallsql/database/ExpressionArithmetic.java۞359۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionArithmetic.java۞360۩return getLongImpl() * 10000;
smallsql/database/ExpressionArithmetic.java۞361۩case SQLTokenizer.REAL:
smallsql/database/ExpressionArithmetic.java۞362۩return Utils.doubleToMoney( getFloatImpl() );
smallsql/database/ExpressionArithmetic.java۞363۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionArithmetic.java۞364۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionArithmetic.java۞365۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionArithmetic.java۞366۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionArithmetic.java۞367۩return Utils.doubleToMoney( getDoubleImpl() );
smallsql/database/ExpressionArithmetic.java۞368۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionArithmetic.java۞369۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionArithmetic.java۞370۩return getMoneyImpl();
smallsql/database/ExpressionArithmetic.java۞371۩}
smallsql/database/ExpressionArithmetic.java۞372۩throw createUnspportedConversion( SQLTokenizer.DOUBLE);
smallsql/database/ExpressionArithmetic.java۞373۩}
smallsql/database/ExpressionArithmetic.java۞376۩private long getMoneyImpl() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞377۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞378۩case ADD: return left.getMoney() + right.getMoney();
smallsql/database/ExpressionArithmetic.java۞379۩case SUB: return left.getMoney() - right.getMoney();
smallsql/database/ExpressionArithmetic.java۞380۩case MUL: return left.getMoney() * right.getMoney() / 10000;
smallsql/database/ExpressionArithmetic.java۞381۩case DIV: return left.getMoney() * 10000 / right.getMoney();
smallsql/database/ExpressionArithmetic.java۞382۩case NEGATIVE: return 			 - left.getMoney();
smallsql/database/ExpressionArithmetic.java۞383۩}
smallsql/database/ExpressionArithmetic.java۞384۩throw createUnspportedConversion( SQLTokenizer.MONEY );
smallsql/database/ExpressionArithmetic.java۞385۩}
smallsql/database/ExpressionArithmetic.java۞388۩MutableNumeric getNumeric() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞389۩if(isNull()) return null;
smallsql/database/ExpressionArithmetic.java۞390۩int dataType = getDataType();
smallsql/database/ExpressionArithmetic.java۞391۩switch(dataType){
smallsql/database/ExpressionArithmetic.java۞392۩case SQLTokenizer.BIT:
smallsql/database/ExpressionArithmetic.java۞393۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionArithmetic.java۞394۩return new MutableNumeric(getBoolean() ? 1 : 0);
smallsql/database/ExpressionArithmetic.java۞395۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionArithmetic.java۞396۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionArithmetic.java۞397۩case SQLTokenizer.INT:
smallsql/database/ExpressionArithmetic.java۞398۩return new MutableNumeric(getIntImpl());
smallsql/database/ExpressionArithmetic.java۞399۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionArithmetic.java۞400۩return new MutableNumeric(getLongImpl());
smallsql/database/ExpressionArithmetic.java۞401۩case SQLTokenizer.REAL:
smallsql/database/ExpressionArithmetic.java۞402۩return new MutableNumeric(getFloatImpl());
smallsql/database/ExpressionArithmetic.java۞403۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionArithmetic.java۞404۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionArithmetic.java۞405۩return new MutableNumeric( getDoubleImpl() );
smallsql/database/ExpressionArithmetic.java۞406۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionArithmetic.java۞407۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionArithmetic.java۞408۩return getNumericImpl();
smallsql/database/ExpressionArithmetic.java۞409۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionArithmetic.java۞410۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionArithmetic.java۞411۩return new MutableNumeric(getMoneyImpl(),4);
smallsql/database/ExpressionArithmetic.java۞412۩}
smallsql/database/ExpressionArithmetic.java۞413۩throw createUnspportedConversion( SQLTokenizer.DOUBLE);
smallsql/database/ExpressionArithmetic.java۞414۩}
smallsql/database/ExpressionArithmetic.java۞417۩private MutableNumeric getNumericImpl() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞418۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞419۩case ADD:
smallsql/database/ExpressionArithmetic.java۞420۩{
smallsql/database/ExpressionArithmetic.java۞421۩MutableNumeric num = left.getNumeric();
smallsql/database/ExpressionArithmetic.java۞422۩num.add( right.getNumeric() );
smallsql/database/ExpressionArithmetic.java۞423۩return num;
smallsql/database/ExpressionArithmetic.java۞424۩}
smallsql/database/ExpressionArithmetic.java۞425۩case SUB:
smallsql/database/ExpressionArithmetic.java۞426۩{
smallsql/database/ExpressionArithmetic.java۞427۩MutableNumeric num = left.getNumeric();
smallsql/database/ExpressionArithmetic.java۞428۩num.sub( right.getNumeric() );
smallsql/database/ExpressionArithmetic.java۞429۩return num;
smallsql/database/ExpressionArithmetic.java۞430۩}
smallsql/database/ExpressionArithmetic.java۞431۩case MUL:
smallsql/database/ExpressionArithmetic.java۞432۩if(getDataType(right.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT){
smallsql/database/ExpressionArithmetic.java۞433۩MutableNumeric num = left.getNumeric();
smallsql/database/ExpressionArithmetic.java۞434۩num.mul(right.getInt());
smallsql/database/ExpressionArithmetic.java۞435۩return num;
smallsql/database/ExpressionArithmetic.java۞436۩}else
smallsql/database/ExpressionArithmetic.java۞437۩if(getDataType(left.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT){
smallsql/database/ExpressionArithmetic.java۞438۩MutableNumeric num = right.getNumeric();
smallsql/database/ExpressionArithmetic.java۞439۩num.mul(left.getInt());
smallsql/database/ExpressionArithmetic.java۞440۩return num;
smallsql/database/ExpressionArithmetic.java۞441۩}else{
smallsql/database/ExpressionArithmetic.java۞442۩MutableNumeric num = left.getNumeric();
smallsql/database/ExpressionArithmetic.java۞443۩num.mul( right.getNumeric() );
smallsql/database/ExpressionArithmetic.java۞444۩return num;
smallsql/database/ExpressionArithmetic.java۞445۩}
smallsql/database/ExpressionArithmetic.java۞446۩case DIV:
smallsql/database/ExpressionArithmetic.java۞447۩{
smallsql/database/ExpressionArithmetic.java۞448۩MutableNumeric num = left.getNumeric();
smallsql/database/ExpressionArithmetic.java۞449۩if(getDataType(right.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT)
smallsql/database/ExpressionArithmetic.java۞450۩num.div( right.getInt() );
smallsql/database/ExpressionArithmetic.java۞451۩else
smallsql/database/ExpressionArithmetic.java۞452۩num.div( right.getNumeric() );
smallsql/database/ExpressionArithmetic.java۞453۩return num;
smallsql/database/ExpressionArithmetic.java۞454۩}
smallsql/database/ExpressionArithmetic.java۞455۩case NEGATIVE:
smallsql/database/ExpressionArithmetic.java۞456۩{
smallsql/database/ExpressionArithmetic.java۞457۩MutableNumeric num = left.getNumeric();
smallsql/database/ExpressionArithmetic.java۞458۩num.setSignum(-num.getSignum());
smallsql/database/ExpressionArithmetic.java۞459۩return num;
smallsql/database/ExpressionArithmetic.java۞460۩}
smallsql/database/ExpressionArithmetic.java۞461۩case MOD:
smallsql/database/ExpressionArithmetic.java۞462۩{
smallsql/database/ExpressionArithmetic.java۞463۩if(getDataType(getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT)
smallsql/database/ExpressionArithmetic.java۞464۩return new MutableNumeric(getInt());
smallsql/database/ExpressionArithmetic.java۞465۩MutableNumeric num = left.getNumeric();
smallsql/database/ExpressionArithmetic.java۞466۩num.mod( right.getNumeric() );
smallsql/database/ExpressionArithmetic.java۞467۩return num;
smallsql/database/ExpressionArithmetic.java۞468۩}
smallsql/database/ExpressionArithmetic.java۞469۩default:    throw createUnspportedConversion( SQLTokenizer.NUMERIC );
smallsql/database/ExpressionArithmetic.java۞470۩}
smallsql/database/ExpressionArithmetic.java۞471۩}
smallsql/database/ExpressionArithmetic.java۞474۩Object getObject() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞475۩if(isNull()) return null;
smallsql/database/ExpressionArithmetic.java۞476۩int dataType = getDataType();
smallsql/database/ExpressionArithmetic.java۞477۩switch(dataType){
smallsql/database/ExpressionArithmetic.java۞478۩case SQLTokenizer.BIT:
smallsql/database/ExpressionArithmetic.java۞479۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionArithmetic.java۞480۩return getBoolean() ? Boolean.TRUE : Boolean.FALSE;
smallsql/database/ExpressionArithmetic.java۞481۩case SQLTokenizer.BINARY:
smallsql/database/ExpressionArithmetic.java۞482۩case SQLTokenizer.VARBINARY:
smallsql/database/ExpressionArithmetic.java۞483۩return getBytes();
smallsql/database/ExpressionArithmetic.java۞484۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionArithmetic.java۞485۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionArithmetic.java۞486۩case SQLTokenizer.INT:
smallsql/database/ExpressionArithmetic.java۞487۩return new Integer( getInt() );
smallsql/database/ExpressionArithmetic.java۞488۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionArithmetic.java۞489۩return new Long( getLong() );
smallsql/database/ExpressionArithmetic.java۞490۩case SQLTokenizer.REAL:
smallsql/database/ExpressionArithmetic.java۞491۩return new Float( getFloat() );
smallsql/database/ExpressionArithmetic.java۞492۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionArithmetic.java۞493۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionArithmetic.java۞494۩return new Double( getDouble() );
smallsql/database/ExpressionArithmetic.java۞495۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionArithmetic.java۞496۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionArithmetic.java۞497۩return Money.createFromUnscaledValue( getMoney() );
smallsql/database/ExpressionArithmetic.java۞498۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionArithmetic.java۞499۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionArithmetic.java۞500۩return getNumeric();
smallsql/database/ExpressionArithmetic.java۞501۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionArithmetic.java۞502۩case SQLTokenizer.NCHAR:
smallsql/database/ExpressionArithmetic.java۞503۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionArithmetic.java۞504۩case SQLTokenizer.NVARCHAR:
smallsql/database/ExpressionArithmetic.java۞505۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/ExpressionArithmetic.java۞506۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/ExpressionArithmetic.java۞507۩return getString( left.getString(), right.getString() );
smallsql/database/ExpressionArithmetic.java۞508۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/ExpressionArithmetic.java۞509۩Object lObj = left.getObject();
smallsql/database/ExpressionArithmetic.java۞511۩Object rObj = right.getObject();
smallsql/database/ExpressionArithmetic.java۞512۩if(lObj instanceof Number && rObj instanceof Number)
smallsql/database/ExpressionArithmetic.java۞513۩return new Double( getDoubleImpl( ((Number)lObj).doubleValue(), ((Number)rObj).doubleValue() ) );
smallsql/database/ExpressionArithmetic.java۞514۩else
smallsql/database/ExpressionArithmetic.java۞515۩return getString( lObj.toString(), rObj.toString() );
smallsql/database/ExpressionArithmetic.java۞516۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/ExpressionArithmetic.java۞517۩return getBytes();
smallsql/database/ExpressionArithmetic.java۞518۩case SQLTokenizer.DATE:
smallsql/database/ExpressionArithmetic.java۞519۩case SQLTokenizer.TIME:
smallsql/database/ExpressionArithmetic.java۞520۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionArithmetic.java۞521۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionArithmetic.java۞522۩return new DateTime( getLong(), dataType );
smallsql/database/ExpressionArithmetic.java۞523۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/ExpressionArithmetic.java۞524۩return getBytes();
smallsql/database/ExpressionArithmetic.java۞525۩default: throw createUnspportedDataType();
smallsql/database/ExpressionArithmetic.java۞526۩}
smallsql/database/ExpressionArithmetic.java۞527۩}
smallsql/database/ExpressionArithmetic.java۞530۩boolean getBoolean() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞531۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞532۩case OR:    return left.getBoolean() || right.getBoolean();
smallsql/database/ExpressionArithmetic.java۞533۩case AND:   return left.getBoolean() && right.getBoolean();
smallsql/database/ExpressionArithmetic.java۞534۩case NOT:   return                      !left.getBoolean();
smallsql/database/ExpressionArithmetic.java۞535۩case LIKE:  return Utils.like( left.getString(), right.getString());
smallsql/database/ExpressionArithmetic.java۞536۩case ISNULL:return 						left.isNull();
smallsql/database/ExpressionArithmetic.java۞537۩case ISNOTNULL:	return 					!left.isNull();
smallsql/database/ExpressionArithmetic.java۞538۩case IN:	if(right == null)
smallsql/database/ExpressionArithmetic.java۞539۩return isInList();
smallsql/database/ExpressionArithmetic.java۞540۩break;
smallsql/database/ExpressionArithmetic.java۞541۩}
smallsql/database/ExpressionArithmetic.java۞542۩final boolean leftIsNull = left.isNull();
smallsql/database/ExpressionArithmetic.java۞543۩int dataType;
smallsql/database/ExpressionArithmetic.java۞544۩if(operation == NEGATIVE || operation == BIT_NOT){
smallsql/database/ExpressionArithmetic.java۞545۩if(leftIsNull) return false;
smallsql/database/ExpressionArithmetic.java۞546۩dataType = left.getDataType();
smallsql/database/ExpressionArithmetic.java۞547۩}else{
smallsql/database/ExpressionArithmetic.java۞548۩final boolean rightIsNull = right.isNull();
smallsql/database/ExpressionArithmetic.java۞549۩if(operation == EQUALS_NULL && leftIsNull && rightIsNull) return true;
smallsql/database/ExpressionArithmetic.java۞550۩if(leftIsNull || rightIsNull) return false;
smallsql/database/ExpressionArithmetic.java۞551۩dataType = getDataType(left, right);
smallsql/database/ExpressionArithmetic.java۞552۩}
smallsql/database/ExpressionArithmetic.java۞553۩switch(dataType){
smallsql/database/ExpressionArithmetic.java۞554۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionArithmetic.java۞555۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞556۩case IN:
smallsql/database/ExpressionArithmetic.java۞557۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞558۩case EQUALS:    return left.getBoolean() == right.getBoolean();
smallsql/database/ExpressionArithmetic.java۞559۩case UNEQUALS:  return left.getBoolean() != right.getBoolean();
smallsql/database/ExpressionArithmetic.java۞560۩}
smallsql/database/ExpressionArithmetic.java۞562۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionArithmetic.java۞563۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionArithmetic.java۞564۩case SQLTokenizer.INT:
smallsql/database/ExpressionArithmetic.java۞565۩case SQLTokenizer.BIT:
smallsql/database/ExpressionArithmetic.java۞566۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞567۩case IN:
smallsql/database/ExpressionArithmetic.java۞568۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞569۩case EQUALS:    return left.getInt() == right.getInt();
smallsql/database/ExpressionArithmetic.java۞570۩case GREATER:   return left.getInt() >  right.getInt();
smallsql/database/ExpressionArithmetic.java۞571۩case GRE_EQU:   return left.getInt() >= right.getInt();
smallsql/database/ExpressionArithmetic.java۞572۩case LESSER:    return left.getInt() <  right.getInt();
smallsql/database/ExpressionArithmetic.java۞573۩case LES_EQU:   return left.getInt() <= right.getInt();
smallsql/database/ExpressionArithmetic.java۞574۩case UNEQUALS:  return left.getInt() != right.getInt();
smallsql/database/ExpressionArithmetic.java۞575۩case BETWEEN:
smallsql/database/ExpressionArithmetic.java۞576۩int _left = left.getInt();
smallsql/database/ExpressionArithmetic.java۞577۩return _left >= right.getInt() && right2.getInt() >= _left;
smallsql/database/ExpressionArithmetic.java۞578۩default:
smallsql/database/ExpressionArithmetic.java۞579۩return getInt() != 0;
smallsql/database/ExpressionArithmetic.java۞580۩}
smallsql/database/ExpressionArithmetic.java۞581۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionArithmetic.java۞582۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionArithmetic.java۞583۩case SQLTokenizer.TIME:
smallsql/database/ExpressionArithmetic.java۞584۩case SQLTokenizer.DATE:
smallsql/database/ExpressionArithmetic.java۞585۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionArithmetic.java۞586۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞587۩case IN:
smallsql/database/ExpressionArithmetic.java۞588۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞589۩case EQUALS:    return left.getLong() == right.getLong();
smallsql/database/ExpressionArithmetic.java۞590۩case GREATER:   return left.getLong() >  right.getLong();
smallsql/database/ExpressionArithmetic.java۞591۩case GRE_EQU:   return left.getLong() >= right.getLong();
smallsql/database/ExpressionArithmetic.java۞592۩case LESSER:    return left.getLong() <  right.getLong();
smallsql/database/ExpressionArithmetic.java۞593۩case LES_EQU:   return left.getLong() <= right.getLong();
smallsql/database/ExpressionArithmetic.java۞594۩case UNEQUALS:  return left.getLong() != right.getLong();
smallsql/database/ExpressionArithmetic.java۞595۩case BETWEEN:
smallsql/database/ExpressionArithmetic.java۞596۩long _left = left.getLong();
smallsql/database/ExpressionArithmetic.java۞597۩return _left >= right.getLong() && right2.getLong() >= _left;
smallsql/database/ExpressionArithmetic.java۞598۩default:
smallsql/database/ExpressionArithmetic.java۞599۩return getLong() != 0;
smallsql/database/ExpressionArithmetic.java۞600۩}
smallsql/database/ExpressionArithmetic.java۞601۩case SQLTokenizer.REAL:
smallsql/database/ExpressionArithmetic.java۞602۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞603۩case IN:
smallsql/database/ExpressionArithmetic.java۞604۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞605۩case EQUALS:    return left.getFloat() == right.getFloat();
smallsql/database/ExpressionArithmetic.java۞606۩case GREATER:   return left.getFloat() >  right.getFloat();
smallsql/database/ExpressionArithmetic.java۞607۩case GRE_EQU:   return left.getFloat() >= right.getFloat();
smallsql/database/ExpressionArithmetic.java۞608۩case LESSER:    return left.getFloat() <  right.getFloat();
smallsql/database/ExpressionArithmetic.java۞609۩case LES_EQU:   return left.getFloat() <= right.getFloat();
smallsql/database/ExpressionArithmetic.java۞610۩case UNEQUALS:  return left.getFloat() != right.getFloat();
smallsql/database/ExpressionArithmetic.java۞611۩case BETWEEN:
smallsql/database/ExpressionArithmetic.java۞612۩float _left = left.getFloat();
smallsql/database/ExpressionArithmetic.java۞613۩return _left >= right.getFloat() && right2.getFloat() >= _left;
smallsql/database/ExpressionArithmetic.java۞614۩default:
smallsql/database/ExpressionArithmetic.java۞615۩return getFloat() != 0;
smallsql/database/ExpressionArithmetic.java۞616۩}
smallsql/database/ExpressionArithmetic.java۞617۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionArithmetic.java۞618۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionArithmetic.java۞619۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞620۩case IN:
smallsql/database/ExpressionArithmetic.java۞621۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞622۩case EQUALS:    return left.getDouble() == right.getDouble();
smallsql/database/ExpressionArithmetic.java۞623۩case GREATER:   return left.getDouble() >  right.getDouble();
smallsql/database/ExpressionArithmetic.java۞624۩case GRE_EQU:   return left.getDouble() >= right.getDouble();
smallsql/database/ExpressionArithmetic.java۞625۩case LESSER:    return left.getDouble() <  right.getDouble();
smallsql/database/ExpressionArithmetic.java۞626۩case LES_EQU:   return left.getDouble() <= right.getDouble();
smallsql/database/ExpressionArithmetic.java۞627۩case UNEQUALS:  return left.getDouble() != right.getDouble();
smallsql/database/ExpressionArithmetic.java۞628۩case BETWEEN:
smallsql/database/ExpressionArithmetic.java۞629۩double _left = left.getDouble();
smallsql/database/ExpressionArithmetic.java۞630۩return _left >= right.getDouble() && right2.getDouble() >= _left;
smallsql/database/ExpressionArithmetic.java۞631۩default:
smallsql/database/ExpressionArithmetic.java۞632۩return getDouble() != 0;
smallsql/database/ExpressionArithmetic.java۞633۩}
smallsql/database/ExpressionArithmetic.java۞634۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionArithmetic.java۞635۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionArithmetic.java۞636۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞637۩case IN:
smallsql/database/ExpressionArithmetic.java۞638۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞639۩case EQUALS:    return left.getMoney() == right.getMoney();
smallsql/database/ExpressionArithmetic.java۞640۩case GREATER:   return left.getMoney() >  right.getMoney();
smallsql/database/ExpressionArithmetic.java۞641۩case GRE_EQU:   return left.getMoney() >= right.getMoney();
smallsql/database/ExpressionArithmetic.java۞642۩case LESSER:    return left.getMoney() <  right.getMoney();
smallsql/database/ExpressionArithmetic.java۞643۩case LES_EQU:   return left.getMoney() <= right.getMoney();
smallsql/database/ExpressionArithmetic.java۞644۩case UNEQUALS:  return left.getMoney() != right.getMoney();
smallsql/database/ExpressionArithmetic.java۞645۩case BETWEEN:
smallsql/database/ExpressionArithmetic.java۞646۩long _left = left.getMoney();
smallsql/database/ExpressionArithmetic.java۞647۩return _left >= right.getMoney() && right2.getMoney() >= _left;
smallsql/database/ExpressionArithmetic.java۞648۩default:
smallsql/database/ExpressionArithmetic.java۞649۩return getMoney() != 0;
smallsql/database/ExpressionArithmetic.java۞650۩}
smallsql/database/ExpressionArithmetic.java۞651۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionArithmetic.java۞652۩case SQLTokenizer.NUMERIC:{
smallsql/database/ExpressionArithmetic.java۞653۩if(operation == NEGATIVE)
smallsql/database/ExpressionArithmetic.java۞654۩return left.getNumeric().getSignum() != 0;
smallsql/database/ExpressionArithmetic.java۞655۩int comp = left.getNumeric().compareTo( right.getNumeric() );
smallsql/database/ExpressionArithmetic.java۞656۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞657۩case IN:
smallsql/database/ExpressionArithmetic.java۞658۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞659۩case EQUALS:    return comp == 0;
smallsql/database/ExpressionArithmetic.java۞660۩case GREATER:   return comp >  0;
smallsql/database/ExpressionArithmetic.java۞661۩case GRE_EQU:   return comp >= 0;
smallsql/database/ExpressionArithmetic.java۞662۩case LESSER:    return comp <  0;
smallsql/database/ExpressionArithmetic.java۞663۩case LES_EQU:   return comp <= 0;
smallsql/database/ExpressionArithmetic.java۞664۩case UNEQUALS:  return comp != 0;
smallsql/database/ExpressionArithmetic.java۞665۩case BETWEEN:
smallsql/database/ExpressionArithmetic.java۞666۩return comp >= 0 && 0 >= left.getNumeric().compareTo( right2.getNumeric() );
smallsql/database/ExpressionArithmetic.java۞667۩default:
smallsql/database/ExpressionArithmetic.java۞668۩return getNumeric().getSignum() != 0;
smallsql/database/ExpressionArithmetic.java۞669۩}
smallsql/database/ExpressionArithmetic.java۞670۩}
smallsql/database/ExpressionArithmetic.java۞671۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionArithmetic.java۞672۩case SQLTokenizer.NVARCHAR:
smallsql/database/ExpressionArithmetic.java۞673۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionArithmetic.java۞674۩case SQLTokenizer.NCHAR:
smallsql/database/ExpressionArithmetic.java۞675۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/ExpressionArithmetic.java۞676۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/ExpressionArithmetic.java۞677۩case SQLTokenizer.CLOB:{
smallsql/database/ExpressionArithmetic.java۞678۩final String leftStr = left.getString();
smallsql/database/ExpressionArithmetic.java۞679۩final String rightStr = right.getString();
smallsql/database/ExpressionArithmetic.java۞680۩int comp = String.CASE_INSENSITIVE_ORDER.compare( leftStr, rightStr );
smallsql/database/ExpressionArithmetic.java۞681۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞682۩case IN:
smallsql/database/ExpressionArithmetic.java۞683۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞684۩case EQUALS:    return comp == 0;
smallsql/database/ExpressionArithmetic.java۞685۩case GREATER:   return comp >  0;
smallsql/database/ExpressionArithmetic.java۞686۩case GRE_EQU:   return comp >= 0;
smallsql/database/ExpressionArithmetic.java۞687۩case LESSER:    return comp <  0;
smallsql/database/ExpressionArithmetic.java۞688۩case LES_EQU:   return comp <= 0;
smallsql/database/ExpressionArithmetic.java۞689۩case UNEQUALS:  return comp != 0;
smallsql/database/ExpressionArithmetic.java۞690۩case BETWEEN:
smallsql/database/ExpressionArithmetic.java۞691۩return comp >= 0 && 0 >= String.CASE_INSENSITIVE_ORDER.compare( leftStr, right2.getString() );
smallsql/database/ExpressionArithmetic.java۞692۩case ADD:       return Utils.string2boolean(leftStr + rightStr);
smallsql/database/ExpressionArithmetic.java۞693۩}
smallsql/database/ExpressionArithmetic.java۞694۩break;}
smallsql/database/ExpressionArithmetic.java۞695۩case SQLTokenizer.BINARY:
smallsql/database/ExpressionArithmetic.java۞696۩case SQLTokenizer.VARBINARY:
smallsql/database/ExpressionArithmetic.java۞697۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/ExpressionArithmetic.java۞698۩case SQLTokenizer.BLOB:
smallsql/database/ExpressionArithmetic.java۞699۩case SQLTokenizer.UNIQUEIDENTIFIER:{
smallsql/database/ExpressionArithmetic.java۞700۩byte[] leftBytes = left.getBytes();
smallsql/database/ExpressionArithmetic.java۞701۩byte[] rightBytes= right.getBytes();
smallsql/database/ExpressionArithmetic.java۞702۩int comp = Utils.compareBytes( leftBytes, rightBytes);
smallsql/database/ExpressionArithmetic.java۞703۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞704۩case IN:
smallsql/database/ExpressionArithmetic.java۞705۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞706۩case EQUALS:    return comp == 0;
smallsql/database/ExpressionArithmetic.java۞707۩case GREATER:   return comp >  0;
smallsql/database/ExpressionArithmetic.java۞708۩case GRE_EQU:   return comp >= 0;
smallsql/database/ExpressionArithmetic.java۞709۩case LESSER:    return comp <  0;
smallsql/database/ExpressionArithmetic.java۞710۩case LES_EQU:   return comp <= 0;
smallsql/database/ExpressionArithmetic.java۞711۩case UNEQUALS:  return comp != 0;
smallsql/database/ExpressionArithmetic.java۞712۩case BETWEEN:
smallsql/database/ExpressionArithmetic.java۞713۩return comp >= 0 && 0 >= Utils.compareBytes( leftBytes, right2.getBytes() );
smallsql/database/ExpressionArithmetic.java۞714۩}
smallsql/database/ExpressionArithmetic.java۞715۩break;}
smallsql/database/ExpressionArithmetic.java۞716۩}
smallsql/database/ExpressionArithmetic.java۞717۩throw createUnspportedDataType();
smallsql/database/ExpressionArithmetic.java۞718۩}
smallsql/database/ExpressionArithmetic.java۞721۩String getString() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞722۩if(isNull()) return null;
smallsql/database/ExpressionArithmetic.java۞723۩return getObject().toString();
smallsql/database/ExpressionArithmetic.java۞724۩}
smallsql/database/ExpressionArithmetic.java۞727۩final private String getString( String lVal, String rVal ) throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞728۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞729۩case ADD: return lVal + rVal;
smallsql/database/ExpressionArithmetic.java۞730۩}
smallsql/database/ExpressionArithmetic.java۞731۩throw createUnspportedConversion( SQLTokenizer.VARCHAR );
smallsql/database/ExpressionArithmetic.java۞732۩}
smallsql/database/ExpressionArithmetic.java۞735۩int getDataType() {
smallsql/database/ExpressionArithmetic.java۞736۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞737۩case NEGATIVE:
smallsql/database/ExpressionArithmetic.java۞738۩case BIT_NOT:
smallsql/database/ExpressionArithmetic.java۞739۩return left.getDataType();
smallsql/database/ExpressionArithmetic.java۞740۩case EQUALS:
smallsql/database/ExpressionArithmetic.java۞741۩case EQUALS_NULL:
smallsql/database/ExpressionArithmetic.java۞742۩case GREATER:
smallsql/database/ExpressionArithmetic.java۞743۩case GRE_EQU:
smallsql/database/ExpressionArithmetic.java۞744۩case LESSER:
smallsql/database/ExpressionArithmetic.java۞745۩case LES_EQU:
smallsql/database/ExpressionArithmetic.java۞746۩case UNEQUALS:
smallsql/database/ExpressionArithmetic.java۞747۩case BETWEEN:
smallsql/database/ExpressionArithmetic.java۞748۩case OR:
smallsql/database/ExpressionArithmetic.java۞749۩case AND:
smallsql/database/ExpressionArithmetic.java۞750۩case NOT:
smallsql/database/ExpressionArithmetic.java۞751۩case LIKE:
smallsql/database/ExpressionArithmetic.java۞752۩case ISNULL:
smallsql/database/ExpressionArithmetic.java۞753۩case ISNOTNULL:
smallsql/database/ExpressionArithmetic.java۞754۩return SQLTokenizer.BOOLEAN;
smallsql/database/ExpressionArithmetic.java۞755۩default:
smallsql/database/ExpressionArithmetic.java۞756۩return getDataType(left, right);
smallsql/database/ExpressionArithmetic.java۞757۩}
smallsql/database/ExpressionArithmetic.java۞758۩}
smallsql/database/ExpressionArithmetic.java۞761۩int getScale(){
smallsql/database/ExpressionArithmetic.java۞762۩int dataType = getDataType();
smallsql/database/ExpressionArithmetic.java۞763۩switch(dataType){
smallsql/database/ExpressionArithmetic.java۞764۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionArithmetic.java۞765۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionArithmetic.java۞766۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞767۩case ADD:
smallsql/database/ExpressionArithmetic.java۞768۩case SUB:
smallsql/database/ExpressionArithmetic.java۞769۩return Math.max(left.getScale(), right.getScale());
smallsql/database/ExpressionArithmetic.java۞770۩case MUL:
smallsql/database/ExpressionArithmetic.java۞771۩return left.getScale() + right.getScale();
smallsql/database/ExpressionArithmetic.java۞772۩case DIV:
smallsql/database/ExpressionArithmetic.java۞773۩return Math.max(left.getScale()+5, right.getScale()+4);
smallsql/database/ExpressionArithmetic.java۞774۩case NEGATIVE:
smallsql/database/ExpressionArithmetic.java۞775۩return left.getScale();
smallsql/database/ExpressionArithmetic.java۞776۩case MOD:
smallsql/database/ExpressionArithmetic.java۞777۩return 0;
smallsql/database/ExpressionArithmetic.java۞778۩}
smallsql/database/ExpressionArithmetic.java۞779۩}
smallsql/database/ExpressionArithmetic.java۞780۩return getScale(dataType);
smallsql/database/ExpressionArithmetic.java۞781۩}
smallsql/database/ExpressionArithmetic.java۞784۩boolean isNull() throws Exception{
smallsql/database/ExpressionArithmetic.java۞785۩switch(operation){
smallsql/database/ExpressionArithmetic.java۞786۩case OR:
smallsql/database/ExpressionArithmetic.java۞787۩case AND:
smallsql/database/ExpressionArithmetic.java۞788۩case NOT:
smallsql/database/ExpressionArithmetic.java۞789۩case LIKE:
smallsql/database/ExpressionArithmetic.java۞790۩case ISNULL:
smallsql/database/ExpressionArithmetic.java۞791۩case ISNOTNULL:
smallsql/database/ExpressionArithmetic.java۞792۩case IN:
smallsql/database/ExpressionArithmetic.java۞793۩return false;
smallsql/database/ExpressionArithmetic.java۞794۩case NEGATIVE:
smallsql/database/ExpressionArithmetic.java۞795۩case BIT_NOT:
smallsql/database/ExpressionArithmetic.java۞796۩return                  left.isNull();
smallsql/database/ExpressionArithmetic.java۞797۩default:       return left.isNull() || right.isNull();
smallsql/database/ExpressionArithmetic.java۞798۩}
smallsql/database/ExpressionArithmetic.java۞799۩}
smallsql/database/ExpressionArithmetic.java۞802۩byte[] getBytes() throws java.lang.Exception {
smallsql/database/ExpressionArithmetic.java۞803۩throw createUnspportedConversion( SQLTokenizer.BINARY );
smallsql/database/ExpressionArithmetic.java۞804۩}
smallsql/database/ExpressionArithmetic.java۞807۩boolean isInList() throws Exception{
smallsql/database/ExpressionArithmetic.java۞808۩if(left.isNull()) return false;
smallsql/database/ExpressionArithmetic.java۞809۩try{
smallsql/database/ExpressionArithmetic.java۞810۩for(int i=0; i<inList.length; i++){
smallsql/database/ExpressionArithmetic.java۞811۩right = inList[i];
smallsql/database/ExpressionArithmetic.java۞812۩if(getBoolean()) return true;
smallsql/database/ExpressionArithmetic.java۞813۩}
smallsql/database/ExpressionArithmetic.java۞814۩}finally{
smallsql/database/ExpressionArithmetic.java۞815۩right = null;
smallsql/database/ExpressionArithmetic.java۞816۩}
smallsql/database/ExpressionArithmetic.java۞817۩return false;
smallsql/database/ExpressionArithmetic.java۞818۩}
smallsql/database/ExpressionArithmetic.java۞821۩SQLException createUnspportedDataType(){
smallsql/database/ExpressionArithmetic.java۞822۩Object[] params = {
smallsql/database/ExpressionArithmetic.java۞823۩SQLTokenizer.getKeyWord(getDataType(left, right)),
smallsql/database/ExpressionArithmetic.java۞824۩getKeywordFromOperation(operation)
smallsql/database/ExpressionArithmetic.java۞825۩};
smallsql/database/ExpressionArithmetic.java۞826۩return SmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER, params);
smallsql/database/ExpressionArithmetic.java۞827۩}
smallsql/database/ExpressionArithmetic.java۞830۩SQLException createUnspportedConversion( int dataType ){
smallsql/database/ExpressionArithmetic.java۞831۩int type = left == null ? right.getDataType() : getDataType(left, right);
smallsql/database/ExpressionArithmetic.java۞832۩Object[] params = new Object[] {
smallsql/database/ExpressionArithmetic.java۞833۩SQLTokenizer.getKeyWord(dataType),
smallsql/database/ExpressionArithmetic.java۞834۩SQLTokenizer.getKeyWord(type),
smallsql/database/ExpressionArithmetic.java۞835۩getKeywordFromOperation(operation)
smallsql/database/ExpressionArithmetic.java۞836۩};
smallsql/database/ExpressionArithmetic.java۞837۩return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER, params);
smallsql/database/ExpressionArithmetic.java۞838۩}
smallsql/database/ExpressionArithmetic.java۞841۩void optimize() throws SQLException{
smallsql/database/ExpressionArithmetic.java۞842۩super.optimize();
smallsql/database/ExpressionArithmetic.java۞843۩Expression[] params = getParams();
smallsql/database/ExpressionArithmetic.java۞844۩if(params.length == 1){
smallsql/database/ExpressionArithmetic.java۞845۩return;
smallsql/database/ExpressionArithmetic.java۞846۩}
smallsql/database/ExpressionArithmetic.java۞847۩setParamAt( convertExpressionIfNeeded( params[0], params[1] ), 0 );
smallsql/database/ExpressionArithmetic.java۞849۩for(int p=1; p<params.length; p++){
smallsql/database/ExpressionArithmetic.java۞850۩setParamAt( convertExpressionIfNeeded( params[p], left ), p );
smallsql/database/ExpressionArithmetic.java۞851۩}
smallsql/database/ExpressionArithmetic.java۞852۩}
smallsql/database/ExpressionArithmetic.java۞859۩private static String getKeywordFromOperation(int operation){
smallsql/database/ExpressionArithmetic.java۞860۩int token = 0;
smallsql/database/ExpressionArithmetic.java۞861۩for(int i=1; i<1000; i++){
smallsql/database/ExpressionArithmetic.java۞862۩if(getOperationFromToken(i) == operation){
smallsql/database/ExpressionArithmetic.java۞863۩token = i;
smallsql/database/ExpressionArithmetic.java۞864۩break;
smallsql/database/ExpressionArithmetic.java۞865۩}
smallsql/database/ExpressionArithmetic.java۞866۩}
smallsql/database/ExpressionArithmetic.java۞867۩if(operation == NEGATIVE)  token = SQLTokenizer.MINUS;
smallsql/database/ExpressionArithmetic.java۞868۩if(operation == ISNOTNULL) token =  SQLTokenizer.IS;
smallsql/database/ExpressionArithmetic.java۞869۩String keyword = SQLTokenizer.getKeyWord(token);
smallsql/database/ExpressionArithmetic.java۞870۩if(keyword == null) keyword = "" + (char)token;
smallsql/database/ExpressionArithmetic.java۞871۩return keyword;
smallsql/database/ExpressionArithmetic.java۞872۩}
smallsql/database/ExpressionArithmetic.java۞875۩static int getOperationFromToken( int value ){
smallsql/database/ExpressionArithmetic.java۞876۩switch(value){
smallsql/database/ExpressionArithmetic.java۞877۩case SQLTokenizer.PLUS:         return ADD;
smallsql/database/ExpressionArithmetic.java۞878۩case SQLTokenizer.MINUS:        return SUB;
smallsql/database/ExpressionArithmetic.java۞879۩case SQLTokenizer.ASTERISK:     return MUL;
smallsql/database/ExpressionArithmetic.java۞880۩case SQLTokenizer.SLACH:        return DIV;
smallsql/database/ExpressionArithmetic.java۞881۩case SQLTokenizer.PERCENT:      return MOD;
smallsql/database/ExpressionArithmetic.java۞882۩case SQLTokenizer.EQUALS:       return EQUALS;
smallsql/database/ExpressionArithmetic.java۞883۩case SQLTokenizer.GREATER:      return GREATER;
smallsql/database/ExpressionArithmetic.java۞884۩case SQLTokenizer.GREATER_EQU:  return GRE_EQU;
smallsql/database/ExpressionArithmetic.java۞885۩case SQLTokenizer.LESSER:       return LESSER;
smallsql/database/ExpressionArithmetic.java۞886۩case SQLTokenizer.LESSER_EQU:   return LES_EQU;
smallsql/database/ExpressionArithmetic.java۞887۩case SQLTokenizer.UNEQUALS:     return UNEQUALS;
smallsql/database/ExpressionArithmetic.java۞888۩case SQLTokenizer.BETWEEN:      return BETWEEN;
smallsql/database/ExpressionArithmetic.java۞889۩case SQLTokenizer.LIKE:         return LIKE;
smallsql/database/ExpressionArithmetic.java۞890۩case SQLTokenizer.IN:           return IN;
smallsql/database/ExpressionArithmetic.java۞891۩case SQLTokenizer.IS:           return ISNULL;
smallsql/database/ExpressionArithmetic.java۞892۩case SQLTokenizer.OR:           return OR;
smallsql/database/ExpressionArithmetic.java۞893۩case SQLTokenizer.AND:          return AND;
smallsql/database/ExpressionArithmetic.java۞894۩case SQLTokenizer.NOT:          return NOT;
smallsql/database/ExpressionArithmetic.java۞895۩case SQLTokenizer.BIT_OR:       return BIT_OR;
smallsql/database/ExpressionArithmetic.java۞896۩case SQLTokenizer.BIT_AND:      return BIT_AND;
smallsql/database/ExpressionArithmetic.java۞897۩case SQLTokenizer.BIT_XOR:      return BIT_XOR;
smallsql/database/ExpressionArithmetic.java۞898۩case SQLTokenizer.TILDE:        return BIT_NOT;
smallsql/database/ExpressionArithmetic.java۞899۩default:                        return 0;
smallsql/database/ExpressionArithmetic.java۞900۩}
smallsql/database/ExpressionArithmetic.java۞901۩}
smallsql/database/ExpressionArithmetic.java۞907۩static int getDataType(Expression left, Expression right){
smallsql/database/ExpressionArithmetic.java۞908۩int typeLeft  = left.getDataType();
smallsql/database/ExpressionArithmetic.java۞909۩int typeRight = right.getDataType();
smallsql/database/ExpressionArithmetic.java۞910۩return getDataType( typeLeft, typeRight);
smallsql/database/ExpressionArithmetic.java۞911۩}
smallsql/database/ExpressionArithmetic.java۞923۩static int getBestNumberDataType(int paramDataType){
smallsql/database/ExpressionArithmetic.java۞924۩int dataTypeIdx = Utils.indexOf( paramDataType, DatatypeRange);
smallsql/database/ExpressionArithmetic.java۞925۩if(dataTypeIdx >= NVARCHAR_IDX)
smallsql/database/ExpressionArithmetic.java۞926۩return SQLTokenizer.DOUBLE;
smallsql/database/ExpressionArithmetic.java۞927۩if(dataTypeIdx >= INT_IDX)
smallsql/database/ExpressionArithmetic.java۞928۩return SQLTokenizer.INT;
smallsql/database/ExpressionArithmetic.java۞929۩if(dataTypeIdx >= BIGINT_IDX)
smallsql/database/ExpressionArithmetic.java۞930۩return SQLTokenizer.BIGINT;
smallsql/database/ExpressionArithmetic.java۞931۩if(dataTypeIdx >= MONEY_IDX)
smallsql/database/ExpressionArithmetic.java۞932۩return SQLTokenizer.MONEY;
smallsql/database/ExpressionArithmetic.java۞933۩if(dataTypeIdx >= DECIMAL_IDX)
smallsql/database/ExpressionArithmetic.java۞934۩return SQLTokenizer.DECIMAL;
smallsql/database/ExpressionArithmetic.java۞935۩return SQLTokenizer.DOUBLE;
smallsql/database/ExpressionArithmetic.java۞936۩}
smallsql/database/ExpressionArithmetic.java۞941۩static int getDataType(int typeLeft, int typeRight){
smallsql/database/ExpressionArithmetic.java۞942۩if(typeLeft == typeRight) return typeLeft;
smallsql/database/ExpressionArithmetic.java۞944۩int dataTypeIdx = Math.min( Utils.indexOf( typeLeft, DatatypeRange), Utils.indexOf( typeRight, DatatypeRange) );
smallsql/database/ExpressionArithmetic.java۞945۩if(dataTypeIdx < 0) throw new Error("getDataType(): "+typeLeft+", "+typeRight);
smallsql/database/ExpressionArithmetic.java۞946۩return DatatypeRange[ dataTypeIdx ];
smallsql/database/ExpressionArithmetic.java۞947۩}
smallsql/database/ExpressionArithmetic.java۞951۩static final int OR         = 11;
smallsql/database/ExpressionArithmetic.java۞952۩static final int AND        = 21;
smallsql/database/ExpressionArithmetic.java۞953۩static final int NOT        = 31;
smallsql/database/ExpressionArithmetic.java۞954۩static final int BIT_OR     = 41;
smallsql/database/ExpressionArithmetic.java۞955۩static final int BIT_AND    = 42;
smallsql/database/ExpressionArithmetic.java۞956۩static final int BIT_XOR    = 43;
smallsql/database/ExpressionArithmetic.java۞957۩static final int EQUALS     = 51;
smallsql/database/ExpressionArithmetic.java۞958۩static final int EQUALS_NULL= 52;
smallsql/database/ExpressionArithmetic.java۞959۩static final int GREATER    = 53;
smallsql/database/ExpressionArithmetic.java۞960۩static final int GRE_EQU    = 54;
smallsql/database/ExpressionArithmetic.java۞961۩static final int LESSER     = 55;
smallsql/database/ExpressionArithmetic.java۞962۩static final int LES_EQU    = 56;
smallsql/database/ExpressionArithmetic.java۞963۩static final int UNEQUALS   = 57;
smallsql/database/ExpressionArithmetic.java۞964۩static final int IN         = 61;
smallsql/database/ExpressionArithmetic.java۞965۩static final int BETWEEN    = 62;
smallsql/database/ExpressionArithmetic.java۞966۩static final int LIKE       = 63;
smallsql/database/ExpressionArithmetic.java۞967۩static final int ISNULL     = 64;
smallsql/database/ExpressionArithmetic.java۞968۩static final int ISNOTNULL  = ISNULL+1;
smallsql/database/ExpressionArithmetic.java۞969۩static final int ADD        = 71;
smallsql/database/ExpressionArithmetic.java۞970۩static final int SUB        = 72;
smallsql/database/ExpressionArithmetic.java۞971۩static final int MUL        = 81;
smallsql/database/ExpressionArithmetic.java۞972۩static final int DIV        = 82;
smallsql/database/ExpressionArithmetic.java۞973۩static final int MOD        = 83;
smallsql/database/ExpressionArithmetic.java۞974۩static final int BIT_NOT    = 91;
smallsql/database/ExpressionArithmetic.java۞975۩static final int NEGATIVE   =101;
smallsql/database/ExpressionArithmetic.java۞977۩private static final int[] DatatypeRange = {
smallsql/database/ExpressionArithmetic.java۞978۩SQLTokenizer.TIMESTAMP,
smallsql/database/ExpressionArithmetic.java۞979۩SQLTokenizer.SMALLDATETIME,
smallsql/database/ExpressionArithmetic.java۞980۩SQLTokenizer.DATE,
smallsql/database/ExpressionArithmetic.java۞981۩SQLTokenizer.TIME,
smallsql/database/ExpressionArithmetic.java۞982۩SQLTokenizer.DOUBLE,
smallsql/database/ExpressionArithmetic.java۞983۩SQLTokenizer.FLOAT,
smallsql/database/ExpressionArithmetic.java۞984۩SQLTokenizer.REAL,
smallsql/database/ExpressionArithmetic.java۞985۩SQLTokenizer.DECIMAL,
smallsql/database/ExpressionArithmetic.java۞986۩SQLTokenizer.NUMERIC,
smallsql/database/ExpressionArithmetic.java۞987۩SQLTokenizer.MONEY,
smallsql/database/ExpressionArithmetic.java۞988۩SQLTokenizer.SMALLMONEY,
smallsql/database/ExpressionArithmetic.java۞989۩SQLTokenizer.BIGINT,
smallsql/database/ExpressionArithmetic.java۞990۩SQLTokenizer.INT,
smallsql/database/ExpressionArithmetic.java۞991۩SQLTokenizer.SMALLINT,
smallsql/database/ExpressionArithmetic.java۞992۩SQLTokenizer.TINYINT,
smallsql/database/ExpressionArithmetic.java۞993۩SQLTokenizer.BIT,
smallsql/database/ExpressionArithmetic.java۞994۩SQLTokenizer.BOOLEAN,
smallsql/database/ExpressionArithmetic.java۞995۩SQLTokenizer.LONGNVARCHAR,
smallsql/database/ExpressionArithmetic.java۞996۩SQLTokenizer.UNIQUEIDENTIFIER,
smallsql/database/ExpressionArithmetic.java۞997۩SQLTokenizer.NVARCHAR,
smallsql/database/ExpressionArithmetic.java۞998۩SQLTokenizer.NCHAR,
smallsql/database/ExpressionArithmetic.java۞999۩SQLTokenizer.VARCHAR,
smallsql/database/ExpressionArithmetic.java۞1000۩SQLTokenizer.CHAR,
smallsql/database/ExpressionArithmetic.java۞1001۩SQLTokenizer.LONGVARCHAR,
smallsql/database/ExpressionArithmetic.java۞1002۩SQLTokenizer.CLOB,
smallsql/database/ExpressionArithmetic.java۞1003۩SQLTokenizer.VARBINARY,
smallsql/database/ExpressionArithmetic.java۞1004۩SQLTokenizer.BINARY,
smallsql/database/ExpressionArithmetic.java۞1005۩SQLTokenizer.LONGVARBINARY,
smallsql/database/ExpressionArithmetic.java۞1006۩SQLTokenizer.BLOB,
smallsql/database/ExpressionArithmetic.java۞1007۩SQLTokenizer.NULL};
smallsql/database/ExpressionArithmetic.java۞1010۩private static int NVARCHAR_IDX = Utils.indexOf( SQLTokenizer.NVARCHAR, DatatypeRange);
smallsql/database/ExpressionArithmetic.java۞1011۩private static int INT_IDX = Utils.indexOf( SQLTokenizer.INT, DatatypeRange);
smallsql/database/ExpressionArithmetic.java۞1012۩private static int BIGINT_IDX = Utils.indexOf( SQLTokenizer.BIGINT, DatatypeRange);
smallsql/database/ExpressionArithmetic.java۞1013۩private static int MONEY_IDX = Utils.indexOf( SQLTokenizer.MONEY, DatatypeRange);
smallsql/database/ExpressionArithmetic.java۞1014۩private static int DECIMAL_IDX = Utils.indexOf( SQLTokenizer.DECIMAL, DatatypeRange);
smallsql/database/ExpressionArithmetic.java۞1015۩}
smallsql/database/ExpressionFunction.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunction.java۞35۩import java.sql.*;
smallsql/database/ExpressionFunction.java۞36۩import smallsql.database.language.Language;
smallsql/database/ExpressionFunction.java۞46۩abstract class ExpressionFunction extends Expression {
smallsql/database/ExpressionFunction.java۞48۩Expression param1;
smallsql/database/ExpressionFunction.java۞49۩Expression param2;
smallsql/database/ExpressionFunction.java۞50۩Expression param3;
smallsql/database/ExpressionFunction.java۞51۩Expression param4;
smallsql/database/ExpressionFunction.java۞53۩ExpressionFunction(){
smallsql/database/ExpressionFunction.java۞54۩super(FUNCTION);
smallsql/database/ExpressionFunction.java۞55۩}
smallsql/database/ExpressionFunction.java۞58۩abstract int getFunction();
smallsql/database/ExpressionFunction.java۞60۩byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunction.java۞61۩return ExpressionValue.getBytes(getObject(), getDataType());
smallsql/database/ExpressionFunction.java۞62۩}
smallsql/database/ExpressionFunction.java۞64۩void setParams( Expression[] params ){
smallsql/database/ExpressionFunction.java۞65۩super.setParams( params );
smallsql/database/ExpressionFunction.java۞66۩if(params.length >0) param1 = params[0] ;
smallsql/database/ExpressionFunction.java۞67۩if(params.length >1) param2 = params[1] ;
smallsql/database/ExpressionFunction.java۞68۩if(params.length >2) param3 = params[2] ;
smallsql/database/ExpressionFunction.java۞69۩if(params.length >3) param4 = params[3] ;
smallsql/database/ExpressionFunction.java۞70۩}
smallsql/database/ExpressionFunction.java۞72۩final void setParamAt( Expression param, int idx){
smallsql/database/ExpressionFunction.java۞73۩switch(idx){
smallsql/database/ExpressionFunction.java۞74۩case 0:
smallsql/database/ExpressionFunction.java۞75۩param1 = param;
smallsql/database/ExpressionFunction.java۞76۩break;
smallsql/database/ExpressionFunction.java۞77۩case 1:
smallsql/database/ExpressionFunction.java۞78۩param2 = param;
smallsql/database/ExpressionFunction.java۞79۩break;
smallsql/database/ExpressionFunction.java۞80۩case 2:
smallsql/database/ExpressionFunction.java۞81۩param3 = param;
smallsql/database/ExpressionFunction.java۞82۩break;
smallsql/database/ExpressionFunction.java۞83۩case 3:
smallsql/database/ExpressionFunction.java۞84۩param4 = param;
smallsql/database/ExpressionFunction.java۞85۩break;
smallsql/database/ExpressionFunction.java۞86۩}
smallsql/database/ExpressionFunction.java۞87۩super.setParamAt( param, idx );
smallsql/database/ExpressionFunction.java۞88۩}
smallsql/database/ExpressionFunction.java۞94۩public boolean equals(Object expr){
smallsql/database/ExpressionFunction.java۞95۩if(!super.equals(expr)) return false;
smallsql/database/ExpressionFunction.java۞96۩if(!(expr instanceof ExpressionFunction)) return false;
smallsql/database/ExpressionFunction.java۞97۩return ((ExpressionFunction)expr).getFunction() == getFunction();
smallsql/database/ExpressionFunction.java۞98۩}
smallsql/database/ExpressionFunction.java۞105۩SQLException createUnspportedDataType( int dataType ){
smallsql/database/ExpressionFunction.java۞106۩Object[] params = {
smallsql/database/ExpressionFunction.java۞107۩SQLTokenizer.getKeyWord(dataType),
smallsql/database/ExpressionFunction.java۞108۩SQLTokenizer.getKeyWord(getFunction())
smallsql/database/ExpressionFunction.java۞109۩};
smallsql/database/ExpressionFunction.java۞110۩return SmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC, params);
smallsql/database/ExpressionFunction.java۞111۩}
smallsql/database/ExpressionFunction.java۞117۩SQLException createUnspportedConversion( int dataType ){
smallsql/database/ExpressionFunction.java۞118۩Object[] params = {
smallsql/database/ExpressionFunction.java۞119۩SQLTokenizer.getKeyWord(dataType),
smallsql/database/ExpressionFunction.java۞120۩SQLTokenizer.getKeyWord(getFunction())
smallsql/database/ExpressionFunction.java۞121۩};
smallsql/database/ExpressionFunction.java۞122۩return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION_FUNC, params);
smallsql/database/ExpressionFunction.java۞123۩}
smallsql/database/ExpressionFunction.java۞124۩}
smallsql/database/ExpressionFunctionACos.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionACos.java۞36۩final class ExpressionFunctionACos extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionACos.java۞38۩final int getFunction(){ return SQLTokenizer.ACOS; }
smallsql/database/ExpressionFunctionACos.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionACos.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionACos.java۞42۩return Math.acos( param1.getDouble() );
smallsql/database/ExpressionFunctionACos.java۞43۩}
smallsql/database/ExpressionFunctionACos.java۞44۩}
smallsql/database/ExpressionFunctionASin.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionASin.java۞36۩final class ExpressionFunctionASin extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionASin.java۞38۩final int getFunction(){ return SQLTokenizer.ASIN; }
smallsql/database/ExpressionFunctionASin.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionASin.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionASin.java۞42۩return Math.asin( param1.getDouble() );
smallsql/database/ExpressionFunctionASin.java۞43۩}
smallsql/database/ExpressionFunctionASin.java۞44۩}
smallsql/database/ExpressionFunctionATan.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionATan.java۞36۩final class ExpressionFunctionATan extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionATan.java۞38۩final int getFunction(){ return SQLTokenizer.ATAN; }
smallsql/database/ExpressionFunctionATan.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionATan.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionATan.java۞42۩return Math.atan( param1.getDouble() );
smallsql/database/ExpressionFunctionATan.java۞43۩}
smallsql/database/ExpressionFunctionATan.java۞44۩}
smallsql/database/ExpressionFunctionATan2.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionATan2.java۞36۩final class ExpressionFunctionATan2 extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionATan2.java۞38۩final int getFunction(){ return SQLTokenizer.ATAN2; }
smallsql/database/ExpressionFunctionATan2.java۞40۩boolean isNull() throws Exception{
smallsql/database/ExpressionFunctionATan2.java۞41۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionATan2.java۞42۩}
smallsql/database/ExpressionFunctionATan2.java۞44۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionATan2.java۞45۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionATan2.java۞46۩return Math.atan2( param1.getDouble(), param2.getDouble() );
smallsql/database/ExpressionFunctionATan2.java۞47۩}
smallsql/database/ExpressionFunctionATan2.java۞48۩}
smallsql/database/ExpressionFunctionAbs.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionAbs.java۞36۩class ExpressionFunctionAbs extends ExpressionFunctionReturnP1 {
smallsql/database/ExpressionFunctionAbs.java۞38۩int getFunction(){ return SQLTokenizer.ABS; }
smallsql/database/ExpressionFunctionAbs.java۞41۩boolean getBoolean() throws Exception{
smallsql/database/ExpressionFunctionAbs.java۞42۩return getDouble() != 0;
smallsql/database/ExpressionFunctionAbs.java۞43۩}
smallsql/database/ExpressionFunctionAbs.java۞45۩int getInt() throws Exception{
smallsql/database/ExpressionFunctionAbs.java۞46۩return Math.abs( param1.getInt() );
smallsql/database/ExpressionFunctionAbs.java۞47۩}
smallsql/database/ExpressionFunctionAbs.java۞49۩long getLong() throws Exception{
smallsql/database/ExpressionFunctionAbs.java۞50۩return Math.abs( param1.getLong() );
smallsql/database/ExpressionFunctionAbs.java۞51۩}
smallsql/database/ExpressionFunctionAbs.java۞53۩float getFloat() throws Exception{
smallsql/database/ExpressionFunctionAbs.java۞54۩return Math.abs( param1.getFloat() );
smallsql/database/ExpressionFunctionAbs.java۞55۩}
smallsql/database/ExpressionFunctionAbs.java۞57۩double getDouble() throws Exception{
smallsql/database/ExpressionFunctionAbs.java۞58۩return Math.abs( param1.getDouble() );
smallsql/database/ExpressionFunctionAbs.java۞59۩}
smallsql/database/ExpressionFunctionAbs.java۞61۩long getMoney() throws Exception{
smallsql/database/ExpressionFunctionAbs.java۞62۩return Math.abs( param1.getMoney() );
smallsql/database/ExpressionFunctionAbs.java۞63۩}
smallsql/database/ExpressionFunctionAbs.java۞65۩MutableNumeric getNumeric() throws Exception{
smallsql/database/ExpressionFunctionAbs.java۞66۩if(param1.isNull()) return null;
smallsql/database/ExpressionFunctionAbs.java۞67۩MutableNumeric num = param1.getNumeric();
smallsql/database/ExpressionFunctionAbs.java۞68۩if(num.getSignum() < 0) num.setSignum(1);
smallsql/database/ExpressionFunctionAbs.java۞69۩return num;
smallsql/database/ExpressionFunctionAbs.java۞70۩}
smallsql/database/ExpressionFunctionAbs.java۞72۩Object getObject() throws Exception{
smallsql/database/ExpressionFunctionAbs.java۞73۩if(param1.isNull()) return null;
smallsql/database/ExpressionFunctionAbs.java۞74۩Object para1 = param1.getObject();
smallsql/database/ExpressionFunctionAbs.java۞75۩switch(param1.getDataType()){
smallsql/database/ExpressionFunctionAbs.java۞76۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionFunctionAbs.java۞77۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionFunctionAbs.java۞78۩double dValue = ((Double)para1).doubleValue();
smallsql/database/ExpressionFunctionAbs.java۞79۩return (dValue<0) ? new Double(-dValue) : para1;
smallsql/database/ExpressionFunctionAbs.java۞80۩case SQLTokenizer.REAL:
smallsql/database/ExpressionFunctionAbs.java۞81۩double fValue = ((Float)para1).floatValue();
smallsql/database/ExpressionFunctionAbs.java۞82۩return (fValue<0) ? new Float(-fValue) : para1;
smallsql/database/ExpressionFunctionAbs.java۞83۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionFunctionAbs.java۞84۩long lValue = ((Number)para1).longValue();
smallsql/database/ExpressionFunctionAbs.java۞85۩return (lValue<0) ? new Long(-lValue) : para1;
smallsql/database/ExpressionFunctionAbs.java۞86۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionFunctionAbs.java۞87۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionFunctionAbs.java۞88۩case SQLTokenizer.INT:
smallsql/database/ExpressionFunctionAbs.java۞89۩int iValue = ((Number)para1).intValue();
smallsql/database/ExpressionFunctionAbs.java۞90۩return (iValue<0) ? new Integer(-iValue) : para1;
smallsql/database/ExpressionFunctionAbs.java۞91۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionFunctionAbs.java۞92۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionFunctionAbs.java۞93۩MutableNumeric nValue = (MutableNumeric)para1;
smallsql/database/ExpressionFunctionAbs.java۞94۩if(nValue.getSignum() <0) nValue.setSignum(1);
smallsql/database/ExpressionFunctionAbs.java۞95۩return nValue;
smallsql/database/ExpressionFunctionAbs.java۞96۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionFunctionAbs.java۞97۩Money mValue = (Money)para1;
smallsql/database/ExpressionFunctionAbs.java۞98۩if(mValue.value <0) mValue.value = -mValue.value;
smallsql/database/ExpressionFunctionAbs.java۞99۩return mValue;
smallsql/database/ExpressionFunctionAbs.java۞100۩default: throw createUnspportedDataType(param1.getDataType());
smallsql/database/ExpressionFunctionAbs.java۞101۩}
smallsql/database/ExpressionFunctionAbs.java۞102۩}
smallsql/database/ExpressionFunctionAbs.java۞104۩String getString() throws Exception{
smallsql/database/ExpressionFunctionAbs.java۞105۩Object obj = getObject();
smallsql/database/ExpressionFunctionAbs.java۞106۩if(obj == null) return null;
smallsql/database/ExpressionFunctionAbs.java۞107۩return obj.toString();
smallsql/database/ExpressionFunctionAbs.java۞108۩}
smallsql/database/ExpressionFunctionAbs.java۞111۩}
smallsql/database/ExpressionFunctionAscii.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionAscii.java۞40۩final class ExpressionFunctionAscii extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionAscii.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionAscii.java۞44۩return SQLTokenizer.ASCII;
smallsql/database/ExpressionFunctionAscii.java۞45۩}
smallsql/database/ExpressionFunctionAscii.java۞48۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionAscii.java۞49۩return param1.isNull() || param1.getString().length() == 0;
smallsql/database/ExpressionFunctionAscii.java۞50۩}
smallsql/database/ExpressionFunctionAscii.java۞53۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionAscii.java۞54۩String str = param1.getString();
smallsql/database/ExpressionFunctionAscii.java۞55۩if(str == null || str.length() == 0) return 0;
smallsql/database/ExpressionFunctionAscii.java۞56۩return str.charAt(0);
smallsql/database/ExpressionFunctionAscii.java۞57۩}
smallsql/database/ExpressionFunctionAscii.java۞60۩final Object getObject() throws Exception {
smallsql/database/ExpressionFunctionAscii.java۞61۩String str = param1.getString();
smallsql/database/ExpressionFunctionAscii.java۞62۩if(str == null || str.length() == 0) return null;
smallsql/database/ExpressionFunctionAscii.java۞63۩return Utils.getInteger(str.charAt(0));
smallsql/database/ExpressionFunctionAscii.java۞64۩}
smallsql/database/ExpressionFunctionAscii.java۞65۩}
smallsql/database/ExpressionFunctionBitLen.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionBitLen.java۞44۩final class ExpressionFunctionBitLen extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionBitLen.java۞45۩private static final int BYTES_PER_CHAR = 2;
smallsql/database/ExpressionFunctionBitLen.java۞47۩final int getFunction() {
smallsql/database/ExpressionFunctionBitLen.java۞48۩return SQLTokenizer.BITLEN;
smallsql/database/ExpressionFunctionBitLen.java۞49۩}
smallsql/database/ExpressionFunctionBitLen.java۞52۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionBitLen.java۞53۩return param1.isNull();
smallsql/database/ExpressionFunctionBitLen.java۞54۩}
smallsql/database/ExpressionFunctionBitLen.java۞57۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionBitLen.java۞58۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionBitLen.java۞60۩String str = param1.getString();
smallsql/database/ExpressionFunctionBitLen.java۞62۩return str.length() * BYTES_PER_CHAR * 8;
smallsql/database/ExpressionFunctionBitLen.java۞63۩}
smallsql/database/ExpressionFunctionBitLen.java۞64۩}
smallsql/database/ExpressionFunctionCase.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionCase.java۞40۩final class ExpressionFunctionCase extends Expression {
smallsql/database/ExpressionFunctionCase.java۞45۩ExpressionFunctionCase() {
smallsql/database/ExpressionFunctionCase.java۞46۩super(FUNCTION);
smallsql/database/ExpressionFunctionCase.java۞47۩}
smallsql/database/ExpressionFunctionCase.java۞50۩private final Expressions cases   = new Expressions();
smallsql/database/ExpressionFunctionCase.java۞51۩private final Expressions results = new Expressions();
smallsql/database/ExpressionFunctionCase.java۞52۩private Expression elseResult = Expression.NULL;
smallsql/database/ExpressionFunctionCase.java۞53۩private int dataType = -1;
smallsql/database/ExpressionFunctionCase.java۞56۩final void addCase(Expression condition, Expression result){
smallsql/database/ExpressionFunctionCase.java۞57۩cases.add(condition);
smallsql/database/ExpressionFunctionCase.java۞58۩results.add(result);
smallsql/database/ExpressionFunctionCase.java۞59۩}
smallsql/database/ExpressionFunctionCase.java۞62۩final void setElseResult(Expression expr){
smallsql/database/ExpressionFunctionCase.java۞63۩elseResult = expr;
smallsql/database/ExpressionFunctionCase.java۞64۩}
smallsql/database/ExpressionFunctionCase.java۞70۩final void setEnd(){
smallsql/database/ExpressionFunctionCase.java۞71۩Expression[] params = new Expression[cases.size()*2 + (elseResult!=null ? 1 : 0)];
smallsql/database/ExpressionFunctionCase.java۞72۩int i=0;
smallsql/database/ExpressionFunctionCase.java۞73۩for(int p=0; p<cases.size(); p++){
smallsql/database/ExpressionFunctionCase.java۞74۩params[i++] = cases  .get( p );
smallsql/database/ExpressionFunctionCase.java۞75۩params[i++] = results.get( p );
smallsql/database/ExpressionFunctionCase.java۞76۩}
smallsql/database/ExpressionFunctionCase.java۞77۩if(i<params.length)
smallsql/database/ExpressionFunctionCase.java۞78۩params[i] = elseResult;
smallsql/database/ExpressionFunctionCase.java۞79۩super.setParams(params);
smallsql/database/ExpressionFunctionCase.java۞80۩}
smallsql/database/ExpressionFunctionCase.java۞82۩final void setParams( Expression[] params ){
smallsql/database/ExpressionFunctionCase.java۞83۩super.setParams(params);
smallsql/database/ExpressionFunctionCase.java۞84۩int i = 0;
smallsql/database/ExpressionFunctionCase.java۞85۩for(int p=0; p<cases.size(); p++){
smallsql/database/ExpressionFunctionCase.java۞86۩cases  .set( p, params[i++]);
smallsql/database/ExpressionFunctionCase.java۞87۩results.set( p, params[i++]);
smallsql/database/ExpressionFunctionCase.java۞88۩}
smallsql/database/ExpressionFunctionCase.java۞89۩if(i<params.length)
smallsql/database/ExpressionFunctionCase.java۞90۩elseResult = params[i];
smallsql/database/ExpressionFunctionCase.java۞91۩}
smallsql/database/ExpressionFunctionCase.java۞94۩void setParamAt( Expression param, int idx){
smallsql/database/ExpressionFunctionCase.java۞95۩super.setParamAt( param, idx );
smallsql/database/ExpressionFunctionCase.java۞96۩int p = idx / 2;
smallsql/database/ExpressionFunctionCase.java۞97۩if(p>=cases.size()){
smallsql/database/ExpressionFunctionCase.java۞98۩elseResult = param;
smallsql/database/ExpressionFunctionCase.java۞99۩return;
smallsql/database/ExpressionFunctionCase.java۞100۩}
smallsql/database/ExpressionFunctionCase.java۞101۩if(idx % 2 > 0){
smallsql/database/ExpressionFunctionCase.java۞102۩results.set( p, param );
smallsql/database/ExpressionFunctionCase.java۞103۩}else{
smallsql/database/ExpressionFunctionCase.java۞104۩cases.set( p, param );
smallsql/database/ExpressionFunctionCase.java۞105۩}
smallsql/database/ExpressionFunctionCase.java۞106۩}
smallsql/database/ExpressionFunctionCase.java۞114۩final int getFunction() {
smallsql/database/ExpressionFunctionCase.java۞115۩return SQLTokenizer.CASE;
smallsql/database/ExpressionFunctionCase.java۞116۩}
smallsql/database/ExpressionFunctionCase.java۞119۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞120۩return getResult().isNull();
smallsql/database/ExpressionFunctionCase.java۞121۩}
smallsql/database/ExpressionFunctionCase.java۞124۩final boolean getBoolean() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞125۩return getResult().getBoolean();
smallsql/database/ExpressionFunctionCase.java۞126۩}
smallsql/database/ExpressionFunctionCase.java۞129۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞130۩return getResult().getInt();
smallsql/database/ExpressionFunctionCase.java۞131۩}
smallsql/database/ExpressionFunctionCase.java۞134۩final long getLong() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞135۩return getResult().getLong();
smallsql/database/ExpressionFunctionCase.java۞136۩}
smallsql/database/ExpressionFunctionCase.java۞139۩final float getFloat() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞140۩return getResult().getFloat();
smallsql/database/ExpressionFunctionCase.java۞141۩}
smallsql/database/ExpressionFunctionCase.java۞144۩final double getDouble() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞145۩return getResult().getDouble();
smallsql/database/ExpressionFunctionCase.java۞146۩}
smallsql/database/ExpressionFunctionCase.java۞149۩final long getMoney() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞150۩return getResult().getMoney();
smallsql/database/ExpressionFunctionCase.java۞151۩}
smallsql/database/ExpressionFunctionCase.java۞154۩final MutableNumeric getNumeric() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞155۩return getResult().getNumeric();
smallsql/database/ExpressionFunctionCase.java۞156۩}
smallsql/database/ExpressionFunctionCase.java۞159۩final Object getObject() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞160۩return getResult().getObject();
smallsql/database/ExpressionFunctionCase.java۞161۩}
smallsql/database/ExpressionFunctionCase.java۞164۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionCase.java۞165۩return getResult().getString();
smallsql/database/ExpressionFunctionCase.java۞166۩}
smallsql/database/ExpressionFunctionCase.java۞169۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionCase.java۞170۩return getResult().getBytes();
smallsql/database/ExpressionFunctionCase.java۞171۩}
smallsql/database/ExpressionFunctionCase.java۞174۩final int getDataType() {
smallsql/database/ExpressionFunctionCase.java۞175۩if(dataType < 0){
smallsql/database/ExpressionFunctionCase.java۞176۩dataType = elseResult.getDataType();
smallsql/database/ExpressionFunctionCase.java۞177۩for(int i=0; i<results.size(); i++){
smallsql/database/ExpressionFunctionCase.java۞178۩dataType = ExpressionArithmetic.getDataType(dataType, results.get(i).getDataType());
smallsql/database/ExpressionFunctionCase.java۞179۩}
smallsql/database/ExpressionFunctionCase.java۞180۩}
smallsql/database/ExpressionFunctionCase.java۞181۩return dataType;
smallsql/database/ExpressionFunctionCase.java۞182۩}
smallsql/database/ExpressionFunctionCase.java۞185۩final int getPrecision(){
smallsql/database/ExpressionFunctionCase.java۞186۩int precision = 0;
smallsql/database/ExpressionFunctionCase.java۞187۩for(int i=results.size()-1; i>=0; i--){
smallsql/database/ExpressionFunctionCase.java۞188۩precision = Math.max(precision, results.get(i).getPrecision());
smallsql/database/ExpressionFunctionCase.java۞189۩}
smallsql/database/ExpressionFunctionCase.java۞190۩return precision;
smallsql/database/ExpressionFunctionCase.java۞191۩}
smallsql/database/ExpressionFunctionCase.java۞194۩final int getScale(){
smallsql/database/ExpressionFunctionCase.java۞195۩int precision = 0;
smallsql/database/ExpressionFunctionCase.java۞196۩for(int i=results.size()-1; i>=0; i--){
smallsql/database/ExpressionFunctionCase.java۞197۩precision = Math.max(precision, results.get(i).getScale());
smallsql/database/ExpressionFunctionCase.java۞198۩}
smallsql/database/ExpressionFunctionCase.java۞199۩return precision;
smallsql/database/ExpressionFunctionCase.java۞200۩}
smallsql/database/ExpressionFunctionCase.java۞208۩final private Expression getResult() throws Exception{
smallsql/database/ExpressionFunctionCase.java۞209۩for(int i=0; i<cases.size(); i++){
smallsql/database/ExpressionFunctionCase.java۞210۩if(cases.get(i).getBoolean()) return results.get(i);
smallsql/database/ExpressionFunctionCase.java۞211۩}
smallsql/database/ExpressionFunctionCase.java۞212۩return elseResult;
smallsql/database/ExpressionFunctionCase.java۞213۩}
smallsql/database/ExpressionFunctionCase.java۞215۩}
smallsql/database/ExpressionFunctionCeiling.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionCeiling.java۞36۩final class ExpressionFunctionCeiling extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionCeiling.java۞38۩final int getFunction(){ return SQLTokenizer.CEILING; }
smallsql/database/ExpressionFunctionCeiling.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionCeiling.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionCeiling.java۞42۩return Math.ceil( param1.getDouble() );
smallsql/database/ExpressionFunctionCeiling.java۞43۩}
smallsql/database/ExpressionFunctionCeiling.java۞44۩}
smallsql/database/ExpressionFunctionChar.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionChar.java۞40۩public class ExpressionFunctionChar extends ExpressionFunctionReturnString {
smallsql/database/ExpressionFunctionChar.java۞42۩final int getFunction() {
smallsql/database/ExpressionFunctionChar.java۞43۩return SQLTokenizer.CHAR;
smallsql/database/ExpressionFunctionChar.java۞44۩}
smallsql/database/ExpressionFunctionChar.java۞47۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionChar.java۞48۩if(isNull()) return null;
smallsql/database/ExpressionFunctionChar.java۞49۩char chr = (char)param1.getInt();
smallsql/database/ExpressionFunctionChar.java۞50۩return String.valueOf(chr);
smallsql/database/ExpressionFunctionChar.java۞51۩}
smallsql/database/ExpressionFunctionChar.java۞54۩final int getDataType() {
smallsql/database/ExpressionFunctionChar.java۞55۩return SQLTokenizer.CHAR;
smallsql/database/ExpressionFunctionChar.java۞56۩}
smallsql/database/ExpressionFunctionChar.java۞59۩final int getPrecision(){
smallsql/database/ExpressionFunctionChar.java۞60۩return 1;
smallsql/database/ExpressionFunctionChar.java۞61۩}
smallsql/database/ExpressionFunctionChar.java۞62۩}
smallsql/database/ExpressionFunctionCharLen.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionCharLen.java۞42۩final class ExpressionFunctionCharLen extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionCharLen.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionCharLen.java۞44۩return SQLTokenizer.CHARLEN;
smallsql/database/ExpressionFunctionCharLen.java۞45۩}
smallsql/database/ExpressionFunctionCharLen.java۞48۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionCharLen.java۞49۩return param1.isNull();
smallsql/database/ExpressionFunctionCharLen.java۞50۩}
smallsql/database/ExpressionFunctionCharLen.java۞53۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionCharLen.java۞54۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionCharLen.java۞56۩String str = param1.getString();
smallsql/database/ExpressionFunctionCharLen.java۞58۩return str.length();
smallsql/database/ExpressionFunctionCharLen.java۞59۩}
smallsql/database/ExpressionFunctionCharLen.java۞60۩}
smallsql/database/ExpressionFunctionConvert.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionConvert.java۞36۩import java.util.Arrays;
smallsql/database/ExpressionFunctionConvert.java۞37۩import smallsql.database.language.Language;
smallsql/database/ExpressionFunctionConvert.java۞42۩public class ExpressionFunctionConvert extends ExpressionFunction {
smallsql/database/ExpressionFunctionConvert.java۞44۩final private Column datatype;
smallsql/database/ExpressionFunctionConvert.java۞46۩public ExpressionFunctionConvert(Column datatype, Expression value, Expression style) {
smallsql/database/ExpressionFunctionConvert.java۞47۩super();
smallsql/database/ExpressionFunctionConvert.java۞48۩this.datatype = datatype;
smallsql/database/ExpressionFunctionConvert.java۞49۩Expression[] params = (style == null) ? new Expression[]{value} : new Expression[]{value, style};
smallsql/database/ExpressionFunctionConvert.java۞50۩setParams( params );
smallsql/database/ExpressionFunctionConvert.java۞51۩}
smallsql/database/ExpressionFunctionConvert.java۞54۩int getFunction() {
smallsql/database/ExpressionFunctionConvert.java۞55۩return SQLTokenizer.CONVERT;
smallsql/database/ExpressionFunctionConvert.java۞56۩}
smallsql/database/ExpressionFunctionConvert.java۞59۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞60۩return param1.isNull();
smallsql/database/ExpressionFunctionConvert.java۞61۩}
smallsql/database/ExpressionFunctionConvert.java۞64۩boolean getBoolean() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞65۩return ExpressionValue.getBoolean( getObject(), getDataType() );
smallsql/database/ExpressionFunctionConvert.java۞66۩}
smallsql/database/ExpressionFunctionConvert.java۞69۩int getInt() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞70۩return ExpressionValue.getInt( getObject(), getDataType() );
smallsql/database/ExpressionFunctionConvert.java۞71۩}
smallsql/database/ExpressionFunctionConvert.java۞74۩long getLong() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞75۩return ExpressionValue.getLong( getObject(), getDataType() );
smallsql/database/ExpressionFunctionConvert.java۞76۩}
smallsql/database/ExpressionFunctionConvert.java۞79۩float getFloat() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞80۩return ExpressionValue.getFloat( getObject(), getDataType() );
smallsql/database/ExpressionFunctionConvert.java۞81۩}
smallsql/database/ExpressionFunctionConvert.java۞84۩double getDouble() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞85۩return ExpressionValue.getDouble( getObject(), getDataType() );
smallsql/database/ExpressionFunctionConvert.java۞86۩}
smallsql/database/ExpressionFunctionConvert.java۞89۩long getMoney() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞90۩return ExpressionValue.getMoney(getObject(), getDataType());
smallsql/database/ExpressionFunctionConvert.java۞91۩}
smallsql/database/ExpressionFunctionConvert.java۞94۩MutableNumeric getNumeric() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞95۩return ExpressionValue.getNumeric(getObject(), getDataType());
smallsql/database/ExpressionFunctionConvert.java۞96۩}
smallsql/database/ExpressionFunctionConvert.java۞99۩String getString() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞100۩Object obj = getObject();
smallsql/database/ExpressionFunctionConvert.java۞101۩if(obj == null) return null;
smallsql/database/ExpressionFunctionConvert.java۞102۩switch(datatype.getDataType()){
smallsql/database/ExpressionFunctionConvert.java۞103۩case SQLTokenizer.BIT:
smallsql/database/ExpressionFunctionConvert.java۞104۩return ((Boolean)obj).booleanValue() ? "1" : "0";
smallsql/database/ExpressionFunctionConvert.java۞105۩case SQLTokenizer.BINARY:
smallsql/database/ExpressionFunctionConvert.java۞106۩case SQLTokenizer.VARBINARY:
smallsql/database/ExpressionFunctionConvert.java۞107۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/ExpressionFunctionConvert.java۞108۩return new String( (byte[])obj );
smallsql/database/ExpressionFunctionConvert.java۞109۩}
smallsql/database/ExpressionFunctionConvert.java۞110۩return obj.toString();
smallsql/database/ExpressionFunctionConvert.java۞111۩}
smallsql/database/ExpressionFunctionConvert.java۞114۩Object getObject() throws Exception {
smallsql/database/ExpressionFunctionConvert.java۞115۩if(param1.isNull()) return null;
smallsql/database/ExpressionFunctionConvert.java۞116۩final int dataType = getDataType();
smallsql/database/ExpressionFunctionConvert.java۞117۩switch(dataType){
smallsql/database/ExpressionFunctionConvert.java۞118۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/ExpressionFunctionConvert.java۞119۩return convertToString();
smallsql/database/ExpressionFunctionConvert.java۞120۩case SQLTokenizer.VARCHAR:{
smallsql/database/ExpressionFunctionConvert.java۞121۩String str = convertToString();
smallsql/database/ExpressionFunctionConvert.java۞122۩int length = datatype.getDisplaySize();
smallsql/database/ExpressionFunctionConvert.java۞123۩if(length > str.length())
smallsql/database/ExpressionFunctionConvert.java۞124۩return str;
smallsql/database/ExpressionFunctionConvert.java۞125۩return str.substring(0,length);
smallsql/database/ExpressionFunctionConvert.java۞126۩}
smallsql/database/ExpressionFunctionConvert.java۞127۩case SQLTokenizer.CHAR:{
smallsql/database/ExpressionFunctionConvert.java۞128۩String str = convertToString();
smallsql/database/ExpressionFunctionConvert.java۞129۩int length = datatype.getDisplaySize();
smallsql/database/ExpressionFunctionConvert.java۞130۩if(length > str.length()){
smallsql/database/ExpressionFunctionConvert.java۞131۩char[] buffer = new char[length-str.length()];
smallsql/database/ExpressionFunctionConvert.java۞132۩Arrays.fill(buffer, ' ');
smallsql/database/ExpressionFunctionConvert.java۞133۩return str + new String(buffer);
smallsql/database/ExpressionFunctionConvert.java۞134۩}
smallsql/database/ExpressionFunctionConvert.java۞135۩return str.substring(0,length);
smallsql/database/ExpressionFunctionConvert.java۞136۩}
smallsql/database/ExpressionFunctionConvert.java۞137۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/ExpressionFunctionConvert.java۞138۩return param1.getBytes();
smallsql/database/ExpressionFunctionConvert.java۞139۩case SQLTokenizer.VARBINARY:{
smallsql/database/ExpressionFunctionConvert.java۞140۩byte[] bytes = param1.getBytes();
smallsql/database/ExpressionFunctionConvert.java۞141۩int length = datatype.getPrecision();
smallsql/database/ExpressionFunctionConvert.java۞142۩if(length < bytes.length){
smallsql/database/ExpressionFunctionConvert.java۞143۩byte[] buffer = new byte[length];
smallsql/database/ExpressionFunctionConvert.java۞144۩System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );
smallsql/database/ExpressionFunctionConvert.java۞145۩return buffer;
smallsql/database/ExpressionFunctionConvert.java۞146۩}
smallsql/database/ExpressionFunctionConvert.java۞147۩return bytes;
smallsql/database/ExpressionFunctionConvert.java۞149۩}
smallsql/database/ExpressionFunctionConvert.java۞150۩case SQLTokenizer.BINARY:{
smallsql/database/ExpressionFunctionConvert.java۞151۩byte[] bytes = param1.getBytes();
smallsql/database/ExpressionFunctionConvert.java۞152۩int length = datatype.getPrecision();
smallsql/database/ExpressionFunctionConvert.java۞153۩if(length != bytes.length){
smallsql/database/ExpressionFunctionConvert.java۞154۩byte[] buffer = new byte[length];
smallsql/database/ExpressionFunctionConvert.java۞155۩System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );
smallsql/database/ExpressionFunctionConvert.java۞156۩return buffer;
smallsql/database/ExpressionFunctionConvert.java۞157۩}
smallsql/database/ExpressionFunctionConvert.java۞158۩return bytes;
smallsql/database/ExpressionFunctionConvert.java۞160۩}
smallsql/database/ExpressionFunctionConvert.java۞161۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionFunctionConvert.java۞162۩case SQLTokenizer.BIT:
smallsql/database/ExpressionFunctionConvert.java۞163۩return param1.getBoolean() ? Boolean.TRUE : Boolean.FALSE;
smallsql/database/ExpressionFunctionConvert.java۞164۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionFunctionConvert.java۞165۩return Utils.getInteger(param1.getInt() & 0xFF);
smallsql/database/ExpressionFunctionConvert.java۞166۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionFunctionConvert.java۞167۩return Utils.getInteger((short)param1.getInt());
smallsql/database/ExpressionFunctionConvert.java۞168۩case SQLTokenizer.INT:
smallsql/database/ExpressionFunctionConvert.java۞169۩return Utils.getInteger(param1.getInt());
smallsql/database/ExpressionFunctionConvert.java۞170۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionFunctionConvert.java۞171۩return new Long(param1.getLong());
smallsql/database/ExpressionFunctionConvert.java۞172۩case SQLTokenizer.REAL:
smallsql/database/ExpressionFunctionConvert.java۞173۩return new Float(param1.getFloat());
smallsql/database/ExpressionFunctionConvert.java۞174۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionFunctionConvert.java۞175۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionFunctionConvert.java۞176۩return new Double(param1.getDouble());
smallsql/database/ExpressionFunctionConvert.java۞177۩case SQLTokenizer.DATE:
smallsql/database/ExpressionFunctionConvert.java۞178۩case SQLTokenizer.TIME:
smallsql/database/ExpressionFunctionConvert.java۞179۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionFunctionConvert.java۞180۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionFunctionConvert.java۞181۩return new DateTime( getDateTimeLong(), dataType );
smallsql/database/ExpressionFunctionConvert.java۞182۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionFunctionConvert.java۞183۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionFunctionConvert.java۞184۩MutableNumeric num = param1.getNumeric();
smallsql/database/ExpressionFunctionConvert.java۞185۩if(num != null && (dataType == SQLTokenizer.NUMERIC || dataType == SQLTokenizer.DECIMAL))
smallsql/database/ExpressionFunctionConvert.java۞186۩num.setScale(getScale());
smallsql/database/ExpressionFunctionConvert.java۞187۩return num;
smallsql/database/ExpressionFunctionConvert.java۞188۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionFunctionConvert.java۞189۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionFunctionConvert.java۞190۩return Money.createFromUnscaledValue(param1.getMoney());
smallsql/database/ExpressionFunctionConvert.java۞191۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/ExpressionFunctionConvert.java۞192۩switch(param1.getDataType()){
smallsql/database/ExpressionFunctionConvert.java۞193۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionFunctionConvert.java۞194۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionFunctionConvert.java۞195۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/ExpressionFunctionConvert.java۞196۩case SQLTokenizer.CLOB:
smallsql/database/ExpressionFunctionConvert.java۞197۩return Utils.bytes2unique( Utils.unique2bytes(param1.getString()), 0);
smallsql/database/ExpressionFunctionConvert.java۞198۩}
smallsql/database/ExpressionFunctionConvert.java۞199۩return Utils.bytes2unique(param1.getBytes(), 0);
smallsql/database/ExpressionFunctionConvert.java۞200۩}
smallsql/database/ExpressionFunctionConvert.java۞201۩Object[] param = { SQLTokenizer.getKeyWord(dataType) };
smallsql/database/ExpressionFunctionConvert.java۞202۩throw SmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV, param);
smallsql/database/ExpressionFunctionConvert.java۞203۩}
smallsql/database/ExpressionFunctionConvert.java۞206۩final private String convertToString() throws Exception{
smallsql/database/ExpressionFunctionConvert.java۞207۩if(param2 != null){
smallsql/database/ExpressionFunctionConvert.java۞208۩int type = param1.getDataType();
smallsql/database/ExpressionFunctionConvert.java۞209۩switch(type){
smallsql/database/ExpressionFunctionConvert.java۞210۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionFunctionConvert.java۞211۩type = SQLTokenizer.TIMESTAMP;
smallsql/database/ExpressionFunctionConvert.java۞212۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionFunctionConvert.java۞213۩case SQLTokenizer.DATE:
smallsql/database/ExpressionFunctionConvert.java۞214۩case SQLTokenizer.TIME:
smallsql/database/ExpressionFunctionConvert.java۞215۩return new DateTime( param1.getLong(), type ).toString(param2.getInt());
smallsql/database/ExpressionFunctionConvert.java۞216۩default:
smallsql/database/ExpressionFunctionConvert.java۞217۩return param1.getString();
smallsql/database/ExpressionFunctionConvert.java۞218۩}
smallsql/database/ExpressionFunctionConvert.java۞220۩}else
smallsql/database/ExpressionFunctionConvert.java۞221۩return param1.getString();
smallsql/database/ExpressionFunctionConvert.java۞222۩}
smallsql/database/ExpressionFunctionConvert.java۞225۩final private long getDateTimeLong() throws Exception{
smallsql/database/ExpressionFunctionConvert.java۞227۩switch(param1.getDataType()){
smallsql/database/ExpressionFunctionConvert.java۞228۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/ExpressionFunctionConvert.java۞229۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionFunctionConvert.java۞230۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionFunctionConvert.java۞231۩return DateTime.parse( param1.getString() );
smallsql/database/ExpressionFunctionConvert.java۞232۩}
smallsql/database/ExpressionFunctionConvert.java۞234۩return param1.getLong();
smallsql/database/ExpressionFunctionConvert.java۞235۩}
smallsql/database/ExpressionFunctionConvert.java۞238۩final int getDataType() {
smallsql/database/ExpressionFunctionConvert.java۞239۩return datatype.getDataType();
smallsql/database/ExpressionFunctionConvert.java۞240۩}
smallsql/database/ExpressionFunctionConvert.java۞243۩final int getPrecision(){
smallsql/database/ExpressionFunctionConvert.java۞244۩final int dataType = getDataType();
smallsql/database/ExpressionFunctionConvert.java۞245۩switch(dataType){
smallsql/database/ExpressionFunctionConvert.java۞246۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionFunctionConvert.java۞247۩case SQLTokenizer.VARBINARY:
smallsql/database/ExpressionFunctionConvert.java۞248۩case SQLTokenizer.BINARY:
smallsql/database/ExpressionFunctionConvert.java۞249۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionFunctionConvert.java۞250۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionFunctionConvert.java۞251۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionFunctionConvert.java۞252۩return datatype.getPrecision();
smallsql/database/ExpressionFunctionConvert.java۞253۩default:
smallsql/database/ExpressionFunctionConvert.java۞254۩return super.getPrecision();
smallsql/database/ExpressionFunctionConvert.java۞255۩}
smallsql/database/ExpressionFunctionConvert.java۞256۩}
smallsql/database/ExpressionFunctionConvert.java۞259۩final int getScale() {
smallsql/database/ExpressionFunctionConvert.java۞260۩return datatype.getScale();
smallsql/database/ExpressionFunctionConvert.java۞261۩}
smallsql/database/ExpressionFunctionConvert.java۞264۩}
smallsql/database/ExpressionFunctionCos.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionCos.java۞36۩final class ExpressionFunctionCos extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionCos.java۞38۩final int getFunction(){ return SQLTokenizer.COS; }
smallsql/database/ExpressionFunctionCos.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionCos.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionCos.java۞42۩return Math.cos( param1.getDouble() );
smallsql/database/ExpressionFunctionCos.java۞43۩}
smallsql/database/ExpressionFunctionCos.java۞44۩}
smallsql/database/ExpressionFunctionCot.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionCot.java۞36۩final class ExpressionFunctionCot extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionCot.java۞38۩final int getFunction(){ return SQLTokenizer.COT; }
smallsql/database/ExpressionFunctionCot.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionCot.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionCot.java۞42۩return 1/Math.tan( param1.getDouble() );
smallsql/database/ExpressionFunctionCot.java۞43۩}
smallsql/database/ExpressionFunctionCot.java۞44۩}
smallsql/database/ExpressionFunctionDayOfMonth.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionDayOfMonth.java۞40۩final class ExpressionFunctionDayOfMonth extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionDayOfMonth.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionDayOfMonth.java۞44۩return SQLTokenizer.DAYOFMONTH;
smallsql/database/ExpressionFunctionDayOfMonth.java۞45۩}
smallsql/database/ExpressionFunctionDayOfMonth.java۞48۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionDayOfMonth.java۞49۩if(param1.isNull()) return 0;
smallsql/database/ExpressionFunctionDayOfMonth.java۞50۩DateTime.Details details = new DateTime.Details(param1.getLong());
smallsql/database/ExpressionFunctionDayOfMonth.java۞51۩return details.day;
smallsql/database/ExpressionFunctionDayOfMonth.java۞52۩}
smallsql/database/ExpressionFunctionDayOfMonth.java۞54۩}
smallsql/database/ExpressionFunctionDayOfWeek.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionDayOfWeek.java۞40۩final class ExpressionFunctionDayOfWeek extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionDayOfWeek.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionDayOfWeek.java۞44۩return SQLTokenizer.DAYOFWEEK;
smallsql/database/ExpressionFunctionDayOfWeek.java۞45۩}
smallsql/database/ExpressionFunctionDayOfWeek.java۞48۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionDayOfWeek.java۞49۩if(param1.isNull()) return 0;
smallsql/database/ExpressionFunctionDayOfWeek.java۞50۩return DateTime.dayOfWeek(param1.getLong())+1;
smallsql/database/ExpressionFunctionDayOfWeek.java۞51۩}
smallsql/database/ExpressionFunctionDayOfWeek.java۞53۩}
smallsql/database/ExpressionFunctionDayOfYear.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionDayOfYear.java۞40۩final class ExpressionFunctionDayOfYear extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionDayOfYear.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionDayOfYear.java۞44۩return SQLTokenizer.DAYOFYEAR;
smallsql/database/ExpressionFunctionDayOfYear.java۞45۩}
smallsql/database/ExpressionFunctionDayOfYear.java۞48۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionDayOfYear.java۞49۩if(param1.isNull()) return 0;
smallsql/database/ExpressionFunctionDayOfYear.java۞50۩DateTime.Details details = new DateTime.Details(param1.getLong());
smallsql/database/ExpressionFunctionDayOfYear.java۞51۩return details.dayofyear+1;
smallsql/database/ExpressionFunctionDayOfYear.java۞52۩}
smallsql/database/ExpressionFunctionDayOfYear.java۞54۩}
smallsql/database/ExpressionFunctionDegrees.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionDegrees.java۞36۩final class ExpressionFunctionDegrees extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionDegrees.java۞38۩final int getFunction(){ return SQLTokenizer.DEGREES; }
smallsql/database/ExpressionFunctionDegrees.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionDegrees.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionDegrees.java۞42۩return Math.toDegrees( param1.getDouble() );
smallsql/database/ExpressionFunctionDegrees.java۞43۩}
smallsql/database/ExpressionFunctionDegrees.java۞44۩}
smallsql/database/ExpressionFunctionDifference.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionDifference.java۞40۩final class ExpressionFunctionDifference extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionDifference.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionDifference.java۞44۩return SQLTokenizer.DIFFERENCE;
smallsql/database/ExpressionFunctionDifference.java۞45۩}
smallsql/database/ExpressionFunctionDifference.java۞48۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionDifference.java۞49۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionDifference.java۞50۩}
smallsql/database/ExpressionFunctionDifference.java۞53۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionDifference.java۞54۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionDifference.java۞55۩String str1 = ExpressionFunctionSoundex.getString(param1.getString());
smallsql/database/ExpressionFunctionDifference.java۞56۩String str2 = ExpressionFunctionSoundex.getString(param2.getString());
smallsql/database/ExpressionFunctionDifference.java۞57۩int diff = 0;
smallsql/database/ExpressionFunctionDifference.java۞58۩for(int i=0; i<4; i++){
smallsql/database/ExpressionFunctionDifference.java۞59۩if(str1.charAt(i) == str2.charAt(i)){
smallsql/database/ExpressionFunctionDifference.java۞60۩diff++;
smallsql/database/ExpressionFunctionDifference.java۞61۩}
smallsql/database/ExpressionFunctionDifference.java۞62۩}
smallsql/database/ExpressionFunctionDifference.java۞63۩return diff;
smallsql/database/ExpressionFunctionDifference.java۞64۩}
smallsql/database/ExpressionFunctionDifference.java۞65۩}
smallsql/database/ExpressionFunctionExp.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionExp.java۞36۩final class ExpressionFunctionExp extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionExp.java۞38۩final int getFunction(){ return SQLTokenizer.EXP; }
smallsql/database/ExpressionFunctionExp.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionExp.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionExp.java۞42۩return Math.exp( param1.getDouble() );
smallsql/database/ExpressionFunctionExp.java۞43۩}
smallsql/database/ExpressionFunctionExp.java۞44۩}
smallsql/database/ExpressionFunctionFloor.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionFloor.java۞36۩class ExpressionFunctionFloor extends ExpressionFunctionReturnP1Number {
smallsql/database/ExpressionFunctionFloor.java۞38۩int getFunction(){ return SQLTokenizer.FLOOR; }
smallsql/database/ExpressionFunctionFloor.java۞41۩double getDouble() throws Exception{
smallsql/database/ExpressionFunctionFloor.java۞42۩return Math.floor( param1.getDouble() );
smallsql/database/ExpressionFunctionFloor.java۞43۩}
smallsql/database/ExpressionFunctionFloor.java۞46۩String getString() throws Exception{
smallsql/database/ExpressionFunctionFloor.java۞47۩Object obj = getObject();
smallsql/database/ExpressionFunctionFloor.java۞48۩if(obj == null) return null;
smallsql/database/ExpressionFunctionFloor.java۞49۩return obj.toString();
smallsql/database/ExpressionFunctionFloor.java۞50۩}
smallsql/database/ExpressionFunctionFloor.java۞53۩}
smallsql/database/ExpressionFunctionHour.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionHour.java۞40۩final class ExpressionFunctionHour extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionHour.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionHour.java۞44۩return SQLTokenizer.HOUR;
smallsql/database/ExpressionFunctionHour.java۞45۩}
smallsql/database/ExpressionFunctionHour.java۞48۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionHour.java۞49۩if(param1.isNull()) return 0;
smallsql/database/ExpressionFunctionHour.java۞50۩DateTime.Details details = new DateTime.Details(param1.getLong());
smallsql/database/ExpressionFunctionHour.java۞51۩return details.hour;
smallsql/database/ExpressionFunctionHour.java۞52۩}
smallsql/database/ExpressionFunctionHour.java۞54۩}
smallsql/database/ExpressionFunctionIIF.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionIIF.java۞40۩final class ExpressionFunctionIIF extends ExpressionFunction {
smallsql/database/ExpressionFunctionIIF.java۞43۩int getFunction() {
smallsql/database/ExpressionFunctionIIF.java۞44۩return SQLTokenizer.IIF;
smallsql/database/ExpressionFunctionIIF.java۞45۩}
smallsql/database/ExpressionFunctionIIF.java۞48۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞49۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞50۩return param2.isNull();
smallsql/database/ExpressionFunctionIIF.java۞51۩return param3.isNull();
smallsql/database/ExpressionFunctionIIF.java۞52۩}
smallsql/database/ExpressionFunctionIIF.java۞55۩boolean getBoolean() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞56۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞57۩return param2.getBoolean();
smallsql/database/ExpressionFunctionIIF.java۞58۩return param3.getBoolean();
smallsql/database/ExpressionFunctionIIF.java۞59۩}
smallsql/database/ExpressionFunctionIIF.java۞62۩int getInt() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞63۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞64۩return param2.getInt();
smallsql/database/ExpressionFunctionIIF.java۞65۩return param3.getInt();
smallsql/database/ExpressionFunctionIIF.java۞66۩}
smallsql/database/ExpressionFunctionIIF.java۞69۩long getLong() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞70۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞71۩return param2.getLong();
smallsql/database/ExpressionFunctionIIF.java۞72۩return param3.getLong();
smallsql/database/ExpressionFunctionIIF.java۞73۩}
smallsql/database/ExpressionFunctionIIF.java۞76۩float getFloat() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞77۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞78۩return param2.getFloat();
smallsql/database/ExpressionFunctionIIF.java۞79۩return param3.getFloat();
smallsql/database/ExpressionFunctionIIF.java۞80۩}
smallsql/database/ExpressionFunctionIIF.java۞83۩double getDouble() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞84۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞85۩return param2.getDouble();
smallsql/database/ExpressionFunctionIIF.java۞86۩return param3.getDouble();
smallsql/database/ExpressionFunctionIIF.java۞87۩}
smallsql/database/ExpressionFunctionIIF.java۞90۩long getMoney() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞91۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞92۩return param2.getMoney();
smallsql/database/ExpressionFunctionIIF.java۞93۩return param3.getMoney();
smallsql/database/ExpressionFunctionIIF.java۞94۩}
smallsql/database/ExpressionFunctionIIF.java۞97۩MutableNumeric getNumeric() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞98۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞99۩return param2.getNumeric();
smallsql/database/ExpressionFunctionIIF.java۞100۩return param3.getNumeric();
smallsql/database/ExpressionFunctionIIF.java۞101۩}
smallsql/database/ExpressionFunctionIIF.java۞104۩Object getObject() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞105۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞106۩return param2.getObject();
smallsql/database/ExpressionFunctionIIF.java۞107۩return param3.getObject();
smallsql/database/ExpressionFunctionIIF.java۞108۩}
smallsql/database/ExpressionFunctionIIF.java۞111۩String getString() throws Exception {
smallsql/database/ExpressionFunctionIIF.java۞112۩if(param1.getBoolean())
smallsql/database/ExpressionFunctionIIF.java۞113۩return param2.getString();
smallsql/database/ExpressionFunctionIIF.java۞114۩return param3.getString();
smallsql/database/ExpressionFunctionIIF.java۞115۩}
smallsql/database/ExpressionFunctionIIF.java۞118۩final int getDataType() {
smallsql/database/ExpressionFunctionIIF.java۞119۩return ExpressionArithmetic.getDataType(param2, param3);
smallsql/database/ExpressionFunctionIIF.java۞120۩}
smallsql/database/ExpressionFunctionIIF.java۞123۩final int getPrecision(){
smallsql/database/ExpressionFunctionIIF.java۞124۩return Math.max( param2.getPrecision(), param3.getPrecision() );
smallsql/database/ExpressionFunctionIIF.java۞125۩}
smallsql/database/ExpressionFunctionIIF.java۞128۩final int getScale(){
smallsql/database/ExpressionFunctionIIF.java۞129۩return Math.max( param2.getScale(), param3.getScale() );
smallsql/database/ExpressionFunctionIIF.java۞130۩}
smallsql/database/ExpressionFunctionIIF.java۞132۩}
smallsql/database/ExpressionFunctionInsert.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionInsert.java۞36۩import java.io.ByteArrayOutputStream;
smallsql/database/ExpressionFunctionInsert.java۞37۩import smallsql.database.language.Language;
smallsql/database/ExpressionFunctionInsert.java۞42۩public class ExpressionFunctionInsert extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionInsert.java۞44۩final int getFunction() {
smallsql/database/ExpressionFunctionInsert.java۞45۩return SQLTokenizer.INSERT;
smallsql/database/ExpressionFunctionInsert.java۞46۩}
smallsql/database/ExpressionFunctionInsert.java۞49۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionInsert.java۞50۩return param1.isNull() || param2.isNull() || param3.isNull() || param4.isNull();
smallsql/database/ExpressionFunctionInsert.java۞51۩}
smallsql/database/ExpressionFunctionInsert.java۞54۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionInsert.java۞55۩if(isNull()) return null;
smallsql/database/ExpressionFunctionInsert.java۞56۩byte[] bytes = param1.getBytes();
smallsql/database/ExpressionFunctionInsert.java۞57۩int start  = Math.min(Math.max( 0, param2.getInt() - 1), bytes.length );
smallsql/database/ExpressionFunctionInsert.java۞58۩int length = Math.min(param3.getInt(), bytes.length );
smallsql/database/ExpressionFunctionInsert.java۞59۩ByteArrayOutputStream buffer = new ByteArrayOutputStream();
smallsql/database/ExpressionFunctionInsert.java۞60۩buffer.write(bytes,0,start);
smallsql/database/ExpressionFunctionInsert.java۞61۩buffer.write(param4.getBytes());
smallsql/database/ExpressionFunctionInsert.java۞62۩if(length < 0)
smallsql/database/ExpressionFunctionInsert.java۞63۩throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));
smallsql/database/ExpressionFunctionInsert.java۞64۩buffer.write(bytes, start+length, bytes.length-start-length);
smallsql/database/ExpressionFunctionInsert.java۞65۩return buffer.toByteArray();
smallsql/database/ExpressionFunctionInsert.java۞66۩}
smallsql/database/ExpressionFunctionInsert.java۞69۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionInsert.java۞70۩if(isNull()) return null;
smallsql/database/ExpressionFunctionInsert.java۞71۩String str = param1.getString();
smallsql/database/ExpressionFunctionInsert.java۞72۩int start  = Math.min(Math.max( 0, param2.getInt() - 1), str.length() );
smallsql/database/ExpressionFunctionInsert.java۞73۩int length = Math.min(param3.getInt(), str.length() );
smallsql/database/ExpressionFunctionInsert.java۞74۩StringBuffer buffer = new StringBuffer();
smallsql/database/ExpressionFunctionInsert.java۞75۩buffer.append(str.substring(0,start));
smallsql/database/ExpressionFunctionInsert.java۞76۩buffer.append(param4.getString());
smallsql/database/ExpressionFunctionInsert.java۞77۩if(length < 0)
smallsql/database/ExpressionFunctionInsert.java۞78۩throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));
smallsql/database/ExpressionFunctionInsert.java۞79۩buffer.append(str.substring(start+length));
smallsql/database/ExpressionFunctionInsert.java۞80۩return buffer.toString();
smallsql/database/ExpressionFunctionInsert.java۞81۩}
smallsql/database/ExpressionFunctionInsert.java۞84۩int getPrecision() {
smallsql/database/ExpressionFunctionInsert.java۞85۩return param1.getPrecision()+param2.getPrecision();
smallsql/database/ExpressionFunctionInsert.java۞86۩}
smallsql/database/ExpressionFunctionInsert.java۞90۩}
smallsql/database/ExpressionFunctionLCase.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionLCase.java۞40۩public class ExpressionFunctionLCase extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionLCase.java۞42۩final int getFunction() {
smallsql/database/ExpressionFunctionLCase.java۞43۩return SQLTokenizer.LCASE;
smallsql/database/ExpressionFunctionLCase.java۞44۩}
smallsql/database/ExpressionFunctionLCase.java۞47۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionLCase.java۞48۩return param1.isNull();
smallsql/database/ExpressionFunctionLCase.java۞49۩}
smallsql/database/ExpressionFunctionLCase.java۞52۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionLCase.java۞53۩if(isNull()) return null;
smallsql/database/ExpressionFunctionLCase.java۞54۩return getString().getBytes();
smallsql/database/ExpressionFunctionLCase.java۞55۩}
smallsql/database/ExpressionFunctionLCase.java۞58۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionLCase.java۞59۩if(isNull()) return null;
smallsql/database/ExpressionFunctionLCase.java۞60۩return param1.getString().toLowerCase();
smallsql/database/ExpressionFunctionLCase.java۞61۩}
smallsql/database/ExpressionFunctionLCase.java۞62۩}
smallsql/database/ExpressionFunctionLTrim.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionLTrim.java۞40۩public class ExpressionFunctionLTrim extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionLTrim.java۞42۩final int getFunction() {
smallsql/database/ExpressionFunctionLTrim.java۞43۩return SQLTokenizer.LTRIM;
smallsql/database/ExpressionFunctionLTrim.java۞44۩}
smallsql/database/ExpressionFunctionLTrim.java۞47۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionLTrim.java۞48۩return param1.isNull();
smallsql/database/ExpressionFunctionLTrim.java۞49۩}
smallsql/database/ExpressionFunctionLTrim.java۞52۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionLTrim.java۞53۩if(isNull()) return null;
smallsql/database/ExpressionFunctionLTrim.java۞54۩byte[] bytes = param1.getBytes();
smallsql/database/ExpressionFunctionLTrim.java۞55۩int start = 0;
smallsql/database/ExpressionFunctionLTrim.java۞56۩int length = bytes.length;
smallsql/database/ExpressionFunctionLTrim.java۞57۩while(start<length && bytes[start]==0){
smallsql/database/ExpressionFunctionLTrim.java۞58۩start++;
smallsql/database/ExpressionFunctionLTrim.java۞59۩}
smallsql/database/ExpressionFunctionLTrim.java۞60۩length -= start;
smallsql/database/ExpressionFunctionLTrim.java۞61۩byte[] b = new byte[length];
smallsql/database/ExpressionFunctionLTrim.java۞62۩System.arraycopy(bytes, start, b, 0, length);
smallsql/database/ExpressionFunctionLTrim.java۞63۩return b;
smallsql/database/ExpressionFunctionLTrim.java۞64۩}
smallsql/database/ExpressionFunctionLTrim.java۞67۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionLTrim.java۞68۩if(isNull()) return null;
smallsql/database/ExpressionFunctionLTrim.java۞69۩String str = param1.getString();
smallsql/database/ExpressionFunctionLTrim.java۞70۩int start = 0;
smallsql/database/ExpressionFunctionLTrim.java۞71۩while(start<str.length() && str.charAt(start)==' '){
smallsql/database/ExpressionFunctionLTrim.java۞72۩start++;
smallsql/database/ExpressionFunctionLTrim.java۞73۩}
smallsql/database/ExpressionFunctionLTrim.java۞74۩return str.substring(start);
smallsql/database/ExpressionFunctionLTrim.java۞75۩}
smallsql/database/ExpressionFunctionLTrim.java۞78۩}
smallsql/database/ExpressionFunctionLeft.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionLeft.java۞40۩public class ExpressionFunctionLeft extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionLeft.java۞42۩final int getFunction() {
smallsql/database/ExpressionFunctionLeft.java۞43۩return SQLTokenizer.LEFT;
smallsql/database/ExpressionFunctionLeft.java۞44۩}
smallsql/database/ExpressionFunctionLeft.java۞47۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionLeft.java۞48۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionLeft.java۞49۩}
smallsql/database/ExpressionFunctionLeft.java۞52۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionLeft.java۞53۩if(isNull()) return null;
smallsql/database/ExpressionFunctionLeft.java۞54۩byte[] bytes = param1.getBytes();
smallsql/database/ExpressionFunctionLeft.java۞55۩int length = param2.getInt();
smallsql/database/ExpressionFunctionLeft.java۞56۩if(bytes.length <= length) return bytes;
smallsql/database/ExpressionFunctionLeft.java۞58۩byte[] b = new byte[length];
smallsql/database/ExpressionFunctionLeft.java۞59۩System.arraycopy(bytes, 0, b, 0, length);
smallsql/database/ExpressionFunctionLeft.java۞60۩return b;
smallsql/database/ExpressionFunctionLeft.java۞61۩}
smallsql/database/ExpressionFunctionLeft.java۞64۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionLeft.java۞65۩if(isNull()) return null;
smallsql/database/ExpressionFunctionLeft.java۞66۩String str = param1.getString();
smallsql/database/ExpressionFunctionLeft.java۞67۩int length = param2.getInt();
smallsql/database/ExpressionFunctionLeft.java۞68۩length = Math.min( length, str.length() );
smallsql/database/ExpressionFunctionLeft.java۞69۩return str.substring(0,length);
smallsql/database/ExpressionFunctionLeft.java۞70۩}
smallsql/database/ExpressionFunctionLeft.java۞73۩}
smallsql/database/ExpressionFunctionLength.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionLength.java۞40۩final class ExpressionFunctionLength extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionLength.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionLength.java۞44۩return SQLTokenizer.LENGTH;
smallsql/database/ExpressionFunctionLength.java۞45۩}
smallsql/database/ExpressionFunctionLength.java۞48۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionLength.java۞49۩String str = param1.getString();
smallsql/database/ExpressionFunctionLength.java۞50۩if(str == null) return 0;
smallsql/database/ExpressionFunctionLength.java۞51۩int length = str.length();
smallsql/database/ExpressionFunctionLength.java۞52۩while(length>=0 && str.charAt(length-1) == ' ') length--;
smallsql/database/ExpressionFunctionLength.java۞53۩return length;
smallsql/database/ExpressionFunctionLength.java۞54۩}
smallsql/database/ExpressionFunctionLength.java۞55۩}
smallsql/database/ExpressionFunctionLocate.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionLocate.java۞40۩public class ExpressionFunctionLocate extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionLocate.java۞43۩int getFunction() {
smallsql/database/ExpressionFunctionLocate.java۞44۩return SQLTokenizer.LOCATE;
smallsql/database/ExpressionFunctionLocate.java۞45۩}
smallsql/database/ExpressionFunctionLocate.java۞48۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionLocate.java۞49۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionLocate.java۞50۩}
smallsql/database/ExpressionFunctionLocate.java۞53۩int getInt() throws Exception {
smallsql/database/ExpressionFunctionLocate.java۞54۩String suchstr = param1.getString();
smallsql/database/ExpressionFunctionLocate.java۞55۩String value   = param2.getString();
smallsql/database/ExpressionFunctionLocate.java۞56۩if(suchstr == null || value == null || suchstr.length() == 0 || value.length() == 0) return 0;
smallsql/database/ExpressionFunctionLocate.java۞57۩int start = 0;
smallsql/database/ExpressionFunctionLocate.java۞58۩if(param3 != null){
smallsql/database/ExpressionFunctionLocate.java۞59۩start = param3.getInt()-1;
smallsql/database/ExpressionFunctionLocate.java۞60۩}
smallsql/database/ExpressionFunctionLocate.java۞63۩return value.toUpperCase().indexOf( suchstr.toUpperCase(), start ) +1;
smallsql/database/ExpressionFunctionLocate.java۞64۩}
smallsql/database/ExpressionFunctionLocate.java۞65۩}
smallsql/database/ExpressionFunctionLog.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionLog.java۞36۩final class ExpressionFunctionLog extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionLog.java۞38۩final int getFunction(){ return SQLTokenizer.LOG; }
smallsql/database/ExpressionFunctionLog.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionLog.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionLog.java۞42۩return Math.log( param1.getDouble() );
smallsql/database/ExpressionFunctionLog.java۞43۩}
smallsql/database/ExpressionFunctionLog.java۞44۩}
smallsql/database/ExpressionFunctionLog10.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionLog10.java۞36۩final class ExpressionFunctionLog10 extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionLog10.java۞38۩final int getFunction(){ return SQLTokenizer.LOG10; }
smallsql/database/ExpressionFunctionLog10.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionLog10.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionLog10.java۞42۩return Math.log( param1.getDouble() ) / divisor;
smallsql/database/ExpressionFunctionLog10.java۞43۩}
smallsql/database/ExpressionFunctionLog10.java۞45۩private static final double divisor = Math.log(10);
smallsql/database/ExpressionFunctionLog10.java۞46۩}
smallsql/database/ExpressionFunctionMinute.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionMinute.java۞40۩final class ExpressionFunctionMinute extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionMinute.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionMinute.java۞44۩return SQLTokenizer.MINUTE;
smallsql/database/ExpressionFunctionMinute.java۞45۩}
smallsql/database/ExpressionFunctionMinute.java۞48۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionMinute.java۞49۩if(param1.isNull()) return 0;
smallsql/database/ExpressionFunctionMinute.java۞50۩DateTime.Details details = new DateTime.Details(param1.getLong());
smallsql/database/ExpressionFunctionMinute.java۞51۩return details.minute;
smallsql/database/ExpressionFunctionMinute.java۞52۩}
smallsql/database/ExpressionFunctionMinute.java۞54۩}
smallsql/database/ExpressionFunctionMod.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionMod.java۞36۩final class ExpressionFunctionMod extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionMod.java۞38۩final int getFunction(){ return SQLTokenizer.MOD; }
smallsql/database/ExpressionFunctionMod.java۞41۩boolean isNull() throws Exception{
smallsql/database/ExpressionFunctionMod.java۞42۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionMod.java۞43۩}
smallsql/database/ExpressionFunctionMod.java۞46۩final int getInt() throws Exception{
smallsql/database/ExpressionFunctionMod.java۞47۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionMod.java۞48۩return param1.getInt() % param2.getInt();
smallsql/database/ExpressionFunctionMod.java۞49۩}
smallsql/database/ExpressionFunctionMod.java۞50۩}
smallsql/database/ExpressionFunctionMonth.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionMonth.java۞40۩final class ExpressionFunctionMonth extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionMonth.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionMonth.java۞44۩return SQLTokenizer.MONTH;
smallsql/database/ExpressionFunctionMonth.java۞45۩}
smallsql/database/ExpressionFunctionMonth.java۞48۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionMonth.java۞49۩if(param1.isNull()) return 0;
smallsql/database/ExpressionFunctionMonth.java۞50۩DateTime.Details details = new DateTime.Details(param1.getLong());
smallsql/database/ExpressionFunctionMonth.java۞51۩return details.month+1;
smallsql/database/ExpressionFunctionMonth.java۞52۩}
smallsql/database/ExpressionFunctionMonth.java۞54۩}
smallsql/database/ExpressionFunctionOctetLen.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionOctetLen.java۞44۩final class ExpressionFunctionOctetLen extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionOctetLen.java۞45۩private static final int BYTES_PER_CHAR = 2;
smallsql/database/ExpressionFunctionOctetLen.java۞47۩final int getFunction() {
smallsql/database/ExpressionFunctionOctetLen.java۞48۩return SQLTokenizer.OCTETLEN;
smallsql/database/ExpressionFunctionOctetLen.java۞49۩}
smallsql/database/ExpressionFunctionOctetLen.java۞52۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionOctetLen.java۞53۩return param1.isNull();
smallsql/database/ExpressionFunctionOctetLen.java۞54۩}
smallsql/database/ExpressionFunctionOctetLen.java۞57۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionOctetLen.java۞58۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionOctetLen.java۞60۩String str = param1.getString();
smallsql/database/ExpressionFunctionOctetLen.java۞62۩return str.length() * BYTES_PER_CHAR;
smallsql/database/ExpressionFunctionOctetLen.java۞63۩}
smallsql/database/ExpressionFunctionOctetLen.java۞64۩}
smallsql/database/ExpressionFunctionPI.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionPI.java۞36۩final class ExpressionFunctionPI extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionPI.java۞38۩final int getFunction(){ return SQLTokenizer.PI; }
smallsql/database/ExpressionFunctionPI.java۞40۩boolean isNull() throws Exception{
smallsql/database/ExpressionFunctionPI.java۞41۩return false;
smallsql/database/ExpressionFunctionPI.java۞42۩}
smallsql/database/ExpressionFunctionPI.java۞44۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionPI.java۞45۩return Math.PI;
smallsql/database/ExpressionFunctionPI.java۞46۩}
smallsql/database/ExpressionFunctionPI.java۞47۩}
smallsql/database/ExpressionFunctionPower.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionPower.java۞36۩final class ExpressionFunctionPower extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionPower.java۞38۩final int getFunction(){ return SQLTokenizer.POWER; }
smallsql/database/ExpressionFunctionPower.java۞40۩boolean isNull() throws Exception{
smallsql/database/ExpressionFunctionPower.java۞41۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionPower.java۞42۩}
smallsql/database/ExpressionFunctionPower.java۞44۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionPower.java۞45۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionPower.java۞46۩return Math.pow( param1.getDouble(), param2.getDouble() );
smallsql/database/ExpressionFunctionPower.java۞47۩}
smallsql/database/ExpressionFunctionPower.java۞48۩}
smallsql/database/ExpressionFunctionRTrim.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionRTrim.java۞40۩public class ExpressionFunctionRTrim extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionRTrim.java۞42۩final int getFunction() {
smallsql/database/ExpressionFunctionRTrim.java۞43۩return SQLTokenizer.RTRIM;
smallsql/database/ExpressionFunctionRTrim.java۞44۩}
smallsql/database/ExpressionFunctionRTrim.java۞47۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionRTrim.java۞48۩return param1.isNull();
smallsql/database/ExpressionFunctionRTrim.java۞49۩}
smallsql/database/ExpressionFunctionRTrim.java۞52۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionRTrim.java۞53۩if(isNull()) return null;
smallsql/database/ExpressionFunctionRTrim.java۞54۩byte[] bytes = param1.getBytes();
smallsql/database/ExpressionFunctionRTrim.java۞55۩int length = bytes.length;
smallsql/database/ExpressionFunctionRTrim.java۞56۩while(length>0 && bytes[length-1]==0){
smallsql/database/ExpressionFunctionRTrim.java۞57۩length--;
smallsql/database/ExpressionFunctionRTrim.java۞58۩}
smallsql/database/ExpressionFunctionRTrim.java۞59۩byte[] b = new byte[length];
smallsql/database/ExpressionFunctionRTrim.java۞60۩System.arraycopy(bytes, 0, b, 0, length);
smallsql/database/ExpressionFunctionRTrim.java۞61۩return b;
smallsql/database/ExpressionFunctionRTrim.java۞62۩}
smallsql/database/ExpressionFunctionRTrim.java۞65۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionRTrim.java۞66۩if(isNull()) return null;
smallsql/database/ExpressionFunctionRTrim.java۞67۩String str = param1.getString();
smallsql/database/ExpressionFunctionRTrim.java۞68۩int length = str.length();
smallsql/database/ExpressionFunctionRTrim.java۞69۩while(length>0 && str.charAt(length-1)==' '){
smallsql/database/ExpressionFunctionRTrim.java۞70۩length--;
smallsql/database/ExpressionFunctionRTrim.java۞71۩}
smallsql/database/ExpressionFunctionRTrim.java۞72۩return str.substring(0,length);
smallsql/database/ExpressionFunctionRTrim.java۞73۩}
smallsql/database/ExpressionFunctionRTrim.java۞76۩}
smallsql/database/ExpressionFunctionRadians.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionRadians.java۞36۩final class ExpressionFunctionRadians extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionRadians.java۞38۩final int getFunction(){ return SQLTokenizer.RADIANS; }
smallsql/database/ExpressionFunctionRadians.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionRadians.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionRadians.java۞42۩return Math.toRadians( param1.getDouble() );
smallsql/database/ExpressionFunctionRadians.java۞43۩}
smallsql/database/ExpressionFunctionRadians.java۞44۩}
smallsql/database/ExpressionFunctionRand.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionRand.java۞35۩import java.util.Random;
smallsql/database/ExpressionFunctionRand.java۞38۩final class ExpressionFunctionRand extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionRand.java۞40۩final static private Random random = new Random();
smallsql/database/ExpressionFunctionRand.java۞43۩final int getFunction(){ return SQLTokenizer.RAND; }
smallsql/database/ExpressionFunctionRand.java۞46۩boolean isNull() throws Exception{
smallsql/database/ExpressionFunctionRand.java۞47۩return getParams().length == 1 && param1.isNull();
smallsql/database/ExpressionFunctionRand.java۞48۩}
smallsql/database/ExpressionFunctionRand.java۞51۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionRand.java۞52۩if(getParams().length == 0)
smallsql/database/ExpressionFunctionRand.java۞53۩return random.nextDouble();
smallsql/database/ExpressionFunctionRand.java۞54۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionRand.java۞55۩return new Random(param1.getLong()).nextDouble();
smallsql/database/ExpressionFunctionRand.java۞56۩}
smallsql/database/ExpressionFunctionRand.java۞57۩}
smallsql/database/ExpressionFunctionRepeat.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionRepeat.java۞36۩import java.io.ByteArrayOutputStream;
smallsql/database/ExpressionFunctionRepeat.java۞42۩public class ExpressionFunctionRepeat extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionRepeat.java۞44۩final int getFunction() {
smallsql/database/ExpressionFunctionRepeat.java۞45۩return SQLTokenizer.REPEAT;
smallsql/database/ExpressionFunctionRepeat.java۞46۩}
smallsql/database/ExpressionFunctionRepeat.java۞49۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionRepeat.java۞50۩if(isNull()) return null;
smallsql/database/ExpressionFunctionRepeat.java۞51۩byte[] bytes = param1.getBytes();
smallsql/database/ExpressionFunctionRepeat.java۞52۩int count  = param2.getInt();
smallsql/database/ExpressionFunctionRepeat.java۞53۩ByteArrayOutputStream buffer = new ByteArrayOutputStream();
smallsql/database/ExpressionFunctionRepeat.java۞54۩for(int i=0; i<count; i++){
smallsql/database/ExpressionFunctionRepeat.java۞55۩buffer.write(bytes);
smallsql/database/ExpressionFunctionRepeat.java۞56۩}
smallsql/database/ExpressionFunctionRepeat.java۞57۩return buffer.toByteArray();
smallsql/database/ExpressionFunctionRepeat.java۞58۩}
smallsql/database/ExpressionFunctionRepeat.java۞61۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionRepeat.java۞62۩if(isNull()) return null;
smallsql/database/ExpressionFunctionRepeat.java۞63۩String str = param1.getString();
smallsql/database/ExpressionFunctionRepeat.java۞64۩int count  = param2.getInt();
smallsql/database/ExpressionFunctionRepeat.java۞65۩StringBuffer buffer = new StringBuffer();
smallsql/database/ExpressionFunctionRepeat.java۞66۩for(int i=0; i<count; i++){
smallsql/database/ExpressionFunctionRepeat.java۞67۩buffer.append(str);
smallsql/database/ExpressionFunctionRepeat.java۞68۩}
smallsql/database/ExpressionFunctionRepeat.java۞69۩return buffer.toString();
smallsql/database/ExpressionFunctionRepeat.java۞70۩}
smallsql/database/ExpressionFunctionRepeat.java۞73۩int getPrecision() {
smallsql/database/ExpressionFunctionRepeat.java۞74۩return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );
smallsql/database/ExpressionFunctionRepeat.java۞75۩}
smallsql/database/ExpressionFunctionRepeat.java۞79۩}
smallsql/database/ExpressionFunctionReplace.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionReplace.java۞36۩import java.io.ByteArrayOutputStream;
smallsql/database/ExpressionFunctionReplace.java۞42۩public class ExpressionFunctionReplace extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionReplace.java۞44۩final int getFunction() {
smallsql/database/ExpressionFunctionReplace.java۞45۩return SQLTokenizer.REPLACE;
smallsql/database/ExpressionFunctionReplace.java۞46۩}
smallsql/database/ExpressionFunctionReplace.java۞49۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionReplace.java۞50۩return param1.isNull() || param2.isNull() || param3.isNull();
smallsql/database/ExpressionFunctionReplace.java۞51۩}
smallsql/database/ExpressionFunctionReplace.java۞54۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionReplace.java۞55۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReplace.java۞56۩byte[] str1 = param1.getBytes();
smallsql/database/ExpressionFunctionReplace.java۞57۩byte[] str2  = param2.getBytes();
smallsql/database/ExpressionFunctionReplace.java۞58۩int length = str2.length;
smallsql/database/ExpressionFunctionReplace.java۞59۩if(length == 0){
smallsql/database/ExpressionFunctionReplace.java۞60۩return str1;
smallsql/database/ExpressionFunctionReplace.java۞61۩}
smallsql/database/ExpressionFunctionReplace.java۞62۩byte[] str3  = param3.getBytes();
smallsql/database/ExpressionFunctionReplace.java۞63۩ByteArrayOutputStream buffer = new ByteArrayOutputStream();
smallsql/database/ExpressionFunctionReplace.java۞64۩int idx1 = 0;
smallsql/database/ExpressionFunctionReplace.java۞65۩int idx2 = Utils.indexOf(str2,str1,idx1);
smallsql/database/ExpressionFunctionReplace.java۞66۩while(idx2 > 0){
smallsql/database/ExpressionFunctionReplace.java۞67۩buffer.write(str1,idx1,idx2-idx1);
smallsql/database/ExpressionFunctionReplace.java۞68۩buffer.write(str3);
smallsql/database/ExpressionFunctionReplace.java۞69۩idx1 = idx2 + length;
smallsql/database/ExpressionFunctionReplace.java۞70۩idx2 = Utils.indexOf(str2,str1,idx1);
smallsql/database/ExpressionFunctionReplace.java۞71۩}
smallsql/database/ExpressionFunctionReplace.java۞72۩if(idx1 > 0){
smallsql/database/ExpressionFunctionReplace.java۞73۩buffer.write(str1,idx1,str1.length-idx1);
smallsql/database/ExpressionFunctionReplace.java۞74۩return buffer.toByteArray();
smallsql/database/ExpressionFunctionReplace.java۞75۩}
smallsql/database/ExpressionFunctionReplace.java۞76۩return str1;
smallsql/database/ExpressionFunctionReplace.java۞77۩}
smallsql/database/ExpressionFunctionReplace.java۞80۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionReplace.java۞81۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReplace.java۞82۩String str1 = param1.getString();
smallsql/database/ExpressionFunctionReplace.java۞83۩String str2  = param2.getString();
smallsql/database/ExpressionFunctionReplace.java۞84۩int length = str2.length();
smallsql/database/ExpressionFunctionReplace.java۞85۩if(length == 0){
smallsql/database/ExpressionFunctionReplace.java۞86۩return str1;
smallsql/database/ExpressionFunctionReplace.java۞87۩}
smallsql/database/ExpressionFunctionReplace.java۞88۩String str3  = param3.getString();
smallsql/database/ExpressionFunctionReplace.java۞89۩StringBuffer buffer = new StringBuffer();
smallsql/database/ExpressionFunctionReplace.java۞90۩int idx1 = 0;
smallsql/database/ExpressionFunctionReplace.java۞91۩int idx2 = str1.indexOf(str2,idx1);
smallsql/database/ExpressionFunctionReplace.java۞92۩while(idx2 >= 0){
smallsql/database/ExpressionFunctionReplace.java۞93۩buffer.append(str1.substring(idx1,idx2));
smallsql/database/ExpressionFunctionReplace.java۞94۩buffer.append(str3);
smallsql/database/ExpressionFunctionReplace.java۞95۩idx1 = idx2 + length;
smallsql/database/ExpressionFunctionReplace.java۞96۩idx2 = str1.indexOf(str2,idx1);
smallsql/database/ExpressionFunctionReplace.java۞97۩}
smallsql/database/ExpressionFunctionReplace.java۞98۩if(idx1 > 0){
smallsql/database/ExpressionFunctionReplace.java۞99۩buffer.append(str1.substring(idx1));
smallsql/database/ExpressionFunctionReplace.java۞100۩return buffer.toString();
smallsql/database/ExpressionFunctionReplace.java۞101۩}
smallsql/database/ExpressionFunctionReplace.java۞102۩return str1;
smallsql/database/ExpressionFunctionReplace.java۞103۩}
smallsql/database/ExpressionFunctionReplace.java۞106۩int getPrecision() {
smallsql/database/ExpressionFunctionReplace.java۞107۩return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );
smallsql/database/ExpressionFunctionReplace.java۞108۩}
smallsql/database/ExpressionFunctionReplace.java۞110۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionReturnFloat.java۞36۩abstract class ExpressionFunctionReturnFloat extends ExpressionFunction {
smallsql/database/ExpressionFunctionReturnFloat.java۞38۩boolean isNull() throws Exception{
smallsql/database/ExpressionFunctionReturnFloat.java۞39۩return param1.isNull();
smallsql/database/ExpressionFunctionReturnFloat.java۞40۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞42۩final boolean getBoolean() throws Exception{
smallsql/database/ExpressionFunctionReturnFloat.java۞43۩return getDouble() != 0;
smallsql/database/ExpressionFunctionReturnFloat.java۞44۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞46۩final int getInt() throws Exception{
smallsql/database/ExpressionFunctionReturnFloat.java۞47۩return (int)getDouble();
smallsql/database/ExpressionFunctionReturnFloat.java۞48۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞50۩final long getLong() throws Exception{
smallsql/database/ExpressionFunctionReturnFloat.java۞51۩return (long)getDouble();
smallsql/database/ExpressionFunctionReturnFloat.java۞52۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞54۩final float getFloat() throws Exception{
smallsql/database/ExpressionFunctionReturnFloat.java۞55۩return (float)getDouble();
smallsql/database/ExpressionFunctionReturnFloat.java۞56۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞59۩long getMoney() throws Exception{
smallsql/database/ExpressionFunctionReturnFloat.java۞60۩return Utils.doubleToMoney(getDouble());
smallsql/database/ExpressionFunctionReturnFloat.java۞61۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞63۩final MutableNumeric getNumeric() throws Exception{
smallsql/database/ExpressionFunctionReturnFloat.java۞64۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReturnFloat.java۞65۩double value = getDouble();
smallsql/database/ExpressionFunctionReturnFloat.java۞66۩if(Double.isInfinite(value) || Double.isNaN(value))
smallsql/database/ExpressionFunctionReturnFloat.java۞67۩return null;
smallsql/database/ExpressionFunctionReturnFloat.java۞68۩return new MutableNumeric(value);
smallsql/database/ExpressionFunctionReturnFloat.java۞69۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞71۩final Object getObject() throws Exception{
smallsql/database/ExpressionFunctionReturnFloat.java۞72۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReturnFloat.java۞73۩return new Double(getDouble());
smallsql/database/ExpressionFunctionReturnFloat.java۞74۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞76۩final String getString() throws Exception{
smallsql/database/ExpressionFunctionReturnFloat.java۞77۩Object obj = getObject();
smallsql/database/ExpressionFunctionReturnFloat.java۞78۩if(obj == null) return null;
smallsql/database/ExpressionFunctionReturnFloat.java۞79۩return obj.toString();
smallsql/database/ExpressionFunctionReturnFloat.java۞80۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞82۩final int getDataType() {
smallsql/database/ExpressionFunctionReturnFloat.java۞83۩return SQLTokenizer.FLOAT;
smallsql/database/ExpressionFunctionReturnFloat.java۞84۩}
smallsql/database/ExpressionFunctionReturnFloat.java۞87۩}
smallsql/database/ExpressionFunctionReturnInt.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionReturnInt.java۞41۩abstract class ExpressionFunctionReturnInt extends ExpressionFunction {
smallsql/database/ExpressionFunctionReturnInt.java۞45۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionReturnInt.java۞46۩return param1.isNull();
smallsql/database/ExpressionFunctionReturnInt.java۞47۩}
smallsql/database/ExpressionFunctionReturnInt.java۞50۩final boolean getBoolean() throws Exception {
smallsql/database/ExpressionFunctionReturnInt.java۞51۩return getInt() != 0;
smallsql/database/ExpressionFunctionReturnInt.java۞52۩}
smallsql/database/ExpressionFunctionReturnInt.java۞55۩final long getLong() throws Exception {
smallsql/database/ExpressionFunctionReturnInt.java۞56۩return getInt();
smallsql/database/ExpressionFunctionReturnInt.java۞57۩}
smallsql/database/ExpressionFunctionReturnInt.java۞60۩final float getFloat() throws Exception {
smallsql/database/ExpressionFunctionReturnInt.java۞61۩return getInt();
smallsql/database/ExpressionFunctionReturnInt.java۞62۩}
smallsql/database/ExpressionFunctionReturnInt.java۞65۩final double getDouble() throws Exception {
smallsql/database/ExpressionFunctionReturnInt.java۞66۩return getInt();
smallsql/database/ExpressionFunctionReturnInt.java۞67۩}
smallsql/database/ExpressionFunctionReturnInt.java۞70۩final long getMoney() throws Exception {
smallsql/database/ExpressionFunctionReturnInt.java۞71۩return getInt() * 10000;
smallsql/database/ExpressionFunctionReturnInt.java۞72۩}
smallsql/database/ExpressionFunctionReturnInt.java۞75۩final MutableNumeric getNumeric() throws Exception {
smallsql/database/ExpressionFunctionReturnInt.java۞76۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReturnInt.java۞77۩return new MutableNumeric(getInt());
smallsql/database/ExpressionFunctionReturnInt.java۞78۩}
smallsql/database/ExpressionFunctionReturnInt.java۞81۩Object getObject() throws Exception {
smallsql/database/ExpressionFunctionReturnInt.java۞82۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReturnInt.java۞83۩return Utils.getInteger(getInt());
smallsql/database/ExpressionFunctionReturnInt.java۞84۩}
smallsql/database/ExpressionFunctionReturnInt.java۞87۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionReturnInt.java۞88۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReturnInt.java۞89۩return String.valueOf(getInt());
smallsql/database/ExpressionFunctionReturnInt.java۞90۩}
smallsql/database/ExpressionFunctionReturnInt.java۞93۩final int getDataType() {
smallsql/database/ExpressionFunctionReturnInt.java۞94۩return SQLTokenizer.INT;
smallsql/database/ExpressionFunctionReturnInt.java۞95۩}
smallsql/database/ExpressionFunctionReturnInt.java۞97۩}
smallsql/database/ExpressionFunctionReturnP1.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionReturnP1.java۞40۩abstract class ExpressionFunctionReturnP1 extends ExpressionFunction {
smallsql/database/ExpressionFunctionReturnP1.java۞43۩boolean isNull() throws Exception{
smallsql/database/ExpressionFunctionReturnP1.java۞44۩return param1.isNull();
smallsql/database/ExpressionFunctionReturnP1.java۞45۩}
smallsql/database/ExpressionFunctionReturnP1.java۞48۩Object getObject() throws Exception{
smallsql/database/ExpressionFunctionReturnP1.java۞49۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReturnP1.java۞50۩int dataType = getDataType();
smallsql/database/ExpressionFunctionReturnP1.java۞51۩switch(dataType){
smallsql/database/ExpressionFunctionReturnP1.java۞52۩case SQLTokenizer.BIT:
smallsql/database/ExpressionFunctionReturnP1.java۞53۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionFunctionReturnP1.java۞54۩return getBoolean() ? Boolean.TRUE : Boolean.FALSE;
smallsql/database/ExpressionFunctionReturnP1.java۞55۩case SQLTokenizer.BINARY:
smallsql/database/ExpressionFunctionReturnP1.java۞56۩case SQLTokenizer.VARBINARY:
smallsql/database/ExpressionFunctionReturnP1.java۞57۩return getBytes();
smallsql/database/ExpressionFunctionReturnP1.java۞58۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionFunctionReturnP1.java۞59۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionFunctionReturnP1.java۞60۩case SQLTokenizer.INT:
smallsql/database/ExpressionFunctionReturnP1.java۞61۩return new Integer( getInt() );
smallsql/database/ExpressionFunctionReturnP1.java۞62۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionFunctionReturnP1.java۞63۩return new Long( getLong() );
smallsql/database/ExpressionFunctionReturnP1.java۞64۩case SQLTokenizer.REAL:
smallsql/database/ExpressionFunctionReturnP1.java۞65۩return new Float( getFloat() );
smallsql/database/ExpressionFunctionReturnP1.java۞66۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionFunctionReturnP1.java۞67۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionFunctionReturnP1.java۞68۩return new Double( getDouble() );
smallsql/database/ExpressionFunctionReturnP1.java۞69۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionFunctionReturnP1.java۞70۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionFunctionReturnP1.java۞71۩return Money.createFromUnscaledValue( getMoney() );
smallsql/database/ExpressionFunctionReturnP1.java۞72۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionFunctionReturnP1.java۞73۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionFunctionReturnP1.java۞74۩return getNumeric();
smallsql/database/ExpressionFunctionReturnP1.java۞75۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionFunctionReturnP1.java۞76۩case SQLTokenizer.NCHAR:
smallsql/database/ExpressionFunctionReturnP1.java۞77۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionFunctionReturnP1.java۞78۩case SQLTokenizer.NVARCHAR:
smallsql/database/ExpressionFunctionReturnP1.java۞79۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/ExpressionFunctionReturnP1.java۞80۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/ExpressionFunctionReturnP1.java۞81۩return getString();
smallsql/database/ExpressionFunctionReturnP1.java۞82۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/ExpressionFunctionReturnP1.java۞83۩return getBytes();
smallsql/database/ExpressionFunctionReturnP1.java۞84۩case SQLTokenizer.DATE:
smallsql/database/ExpressionFunctionReturnP1.java۞85۩case SQLTokenizer.TIME:
smallsql/database/ExpressionFunctionReturnP1.java۞86۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionFunctionReturnP1.java۞87۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionFunctionReturnP1.java۞88۩return new DateTime( getLong(), dataType );
smallsql/database/ExpressionFunctionReturnP1.java۞89۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/ExpressionFunctionReturnP1.java۞90۩return getBytes();
smallsql/database/ExpressionFunctionReturnP1.java۞91۩default: throw createUnspportedDataType(param1.getDataType());
smallsql/database/ExpressionFunctionReturnP1.java۞92۩}
smallsql/database/ExpressionFunctionReturnP1.java۞93۩}
smallsql/database/ExpressionFunctionReturnP1.java۞96۩int getDataType() {
smallsql/database/ExpressionFunctionReturnP1.java۞97۩return param1.getDataType();
smallsql/database/ExpressionFunctionReturnP1.java۞98۩}
smallsql/database/ExpressionFunctionReturnP1.java۞101۩int getPrecision() {
smallsql/database/ExpressionFunctionReturnP1.java۞102۩return param1.getPrecision();
smallsql/database/ExpressionFunctionReturnP1.java۞103۩}
smallsql/database/ExpressionFunctionReturnP1.java۞106۩final int getScale(){
smallsql/database/ExpressionFunctionReturnP1.java۞107۩return param1.getScale();
smallsql/database/ExpressionFunctionReturnP1.java۞108۩}
smallsql/database/ExpressionFunctionReturnP1.java۞109۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionReturnP1Number.java۞36۩abstract class ExpressionFunctionReturnP1Number extends ExpressionFunctionReturnP1 {
smallsql/database/ExpressionFunctionReturnP1Number.java۞39۩final boolean getBoolean() throws Exception{
smallsql/database/ExpressionFunctionReturnP1Number.java۞40۩return getDouble() != 0;
smallsql/database/ExpressionFunctionReturnP1Number.java۞41۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞44۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionReturnP1Number.java۞45۩return Utils.long2int(getLong());
smallsql/database/ExpressionFunctionReturnP1Number.java۞46۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞49۩final long getLong() throws Exception{
smallsql/database/ExpressionFunctionReturnP1Number.java۞50۩return Utils.double2long(getDouble());
smallsql/database/ExpressionFunctionReturnP1Number.java۞51۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞54۩final float getFloat() throws Exception {
smallsql/database/ExpressionFunctionReturnP1Number.java۞55۩return (float)getDouble();
smallsql/database/ExpressionFunctionReturnP1Number.java۞56۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞59۩MutableNumeric getNumeric() throws Exception{
smallsql/database/ExpressionFunctionReturnP1Number.java۞60۩if(param1.isNull()) return null;
smallsql/database/ExpressionFunctionReturnP1Number.java۞61۩switch(getDataType()){
smallsql/database/ExpressionFunctionReturnP1Number.java۞62۩case SQLTokenizer.INT:
smallsql/database/ExpressionFunctionReturnP1Number.java۞63۩return new MutableNumeric(getInt());
smallsql/database/ExpressionFunctionReturnP1Number.java۞64۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionFunctionReturnP1Number.java۞65۩return new MutableNumeric(getLong());
smallsql/database/ExpressionFunctionReturnP1Number.java۞66۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionFunctionReturnP1Number.java۞67۩return new MutableNumeric(getMoney(), 4);
smallsql/database/ExpressionFunctionReturnP1Number.java۞68۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionFunctionReturnP1Number.java۞69۩MutableNumeric num = param1.getNumeric();
smallsql/database/ExpressionFunctionReturnP1Number.java۞70۩num.floor();
smallsql/database/ExpressionFunctionReturnP1Number.java۞71۩return num;
smallsql/database/ExpressionFunctionReturnP1Number.java۞72۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionFunctionReturnP1Number.java۞73۩return new MutableNumeric(getDouble());
smallsql/database/ExpressionFunctionReturnP1Number.java۞74۩default:
smallsql/database/ExpressionFunctionReturnP1Number.java۞75۩throw new Error();
smallsql/database/ExpressionFunctionReturnP1Number.java۞76۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞77۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞80۩long getMoney() throws Exception{
smallsql/database/ExpressionFunctionReturnP1Number.java۞81۩return Utils.doubleToMoney(getDouble());
smallsql/database/ExpressionFunctionReturnP1Number.java۞82۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞85۩String getString() throws Exception {
smallsql/database/ExpressionFunctionReturnP1Number.java۞86۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReturnP1Number.java۞87۩return getObject().toString();
smallsql/database/ExpressionFunctionReturnP1Number.java۞88۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞91۩final int getDataType() {
smallsql/database/ExpressionFunctionReturnP1Number.java۞92۩return ExpressionArithmetic.getBestNumberDataType(param1.getDataType());
smallsql/database/ExpressionFunctionReturnP1Number.java۞93۩}
smallsql/database/ExpressionFunctionReturnP1Number.java۞98۩}
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞41۩abstract class ExpressionFunctionReturnP1StringAndBinary extends ExpressionFunctionReturnP1 {
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞44۩final boolean getBoolean() throws Exception {
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞45۩if(isNull()) return false;
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞46۩return Utils.string2boolean(getString().trim());
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞47۩}
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞50۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞51۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞52۩return Integer.parseInt(getString().trim());
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞53۩}
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞56۩final long getLong() throws Exception {
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞57۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞58۩return Long.parseLong(getString().trim());
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞59۩}
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞62۩final float getFloat() throws Exception {
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞63۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞64۩return Float.parseFloat(getString().trim());
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞65۩}
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞68۩final double getDouble() throws Exception {
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞69۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞70۩return Double.parseDouble(getString().trim());
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞71۩}
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞74۩final long getMoney() throws Exception {
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞75۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞76۩return Money.parseMoney(getString().trim());
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞77۩}
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞80۩final MutableNumeric getNumeric() throws Exception {
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞81۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞82۩return new MutableNumeric(getString().trim());
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞83۩}
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞86۩final Object getObject() throws Exception {
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞87۩if(SSResultSetMetaData.isBinaryDataType(param1.getDataType()))
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞88۩return getBytes();
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞89۩return getString();
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞90۩}
smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java۞91۩}
smallsql/database/ExpressionFunctionReturnString.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionReturnString.java۞40۩abstract class ExpressionFunctionReturnString extends ExpressionFunction {
smallsql/database/ExpressionFunctionReturnString.java۞43۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionReturnString.java۞44۩return param1.isNull();
smallsql/database/ExpressionFunctionReturnString.java۞45۩}
smallsql/database/ExpressionFunctionReturnString.java۞48۩final boolean getBoolean() throws Exception {
smallsql/database/ExpressionFunctionReturnString.java۞49۩if(isNull()) return false;
smallsql/database/ExpressionFunctionReturnString.java۞50۩return Utils.string2boolean(getString().trim());
smallsql/database/ExpressionFunctionReturnString.java۞51۩}
smallsql/database/ExpressionFunctionReturnString.java۞54۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionReturnString.java۞55۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnString.java۞56۩return Integer.parseInt(getString().trim());
smallsql/database/ExpressionFunctionReturnString.java۞57۩}
smallsql/database/ExpressionFunctionReturnString.java۞60۩final long getLong() throws Exception {
smallsql/database/ExpressionFunctionReturnString.java۞61۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnString.java۞62۩return Long.parseLong(getString().trim());
smallsql/database/ExpressionFunctionReturnString.java۞63۩}
smallsql/database/ExpressionFunctionReturnString.java۞66۩final float getFloat() throws Exception {
smallsql/database/ExpressionFunctionReturnString.java۞67۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnString.java۞68۩return Float.parseFloat(getString().trim());
smallsql/database/ExpressionFunctionReturnString.java۞69۩}
smallsql/database/ExpressionFunctionReturnString.java۞72۩final double getDouble() throws Exception {
smallsql/database/ExpressionFunctionReturnString.java۞73۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnString.java۞74۩return Double.parseDouble(getString().trim());
smallsql/database/ExpressionFunctionReturnString.java۞75۩}
smallsql/database/ExpressionFunctionReturnString.java۞78۩final long getMoney() throws Exception {
smallsql/database/ExpressionFunctionReturnString.java۞79۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionReturnString.java۞80۩return Money.parseMoney(getString().trim());
smallsql/database/ExpressionFunctionReturnString.java۞81۩}
smallsql/database/ExpressionFunctionReturnString.java۞84۩final MutableNumeric getNumeric() throws Exception {
smallsql/database/ExpressionFunctionReturnString.java۞85۩if(isNull()) return null;
smallsql/database/ExpressionFunctionReturnString.java۞86۩return new MutableNumeric(getString().trim());
smallsql/database/ExpressionFunctionReturnString.java۞87۩}
smallsql/database/ExpressionFunctionReturnString.java۞90۩final Object getObject() throws Exception {
smallsql/database/ExpressionFunctionReturnString.java۞91۩return getString();
smallsql/database/ExpressionFunctionReturnString.java۞92۩}
smallsql/database/ExpressionFunctionReturnString.java۞93۩}
smallsql/database/ExpressionFunctionRight.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionRight.java۞40۩public class ExpressionFunctionRight extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionRight.java۞42۩final int getFunction() {
smallsql/database/ExpressionFunctionRight.java۞43۩return SQLTokenizer.RIGHT;
smallsql/database/ExpressionFunctionRight.java۞44۩}
smallsql/database/ExpressionFunctionRight.java۞47۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionRight.java۞48۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionRight.java۞49۩}
smallsql/database/ExpressionFunctionRight.java۞52۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionRight.java۞53۩if(isNull()) return null;
smallsql/database/ExpressionFunctionRight.java۞54۩byte[] bytes = param1.getBytes();
smallsql/database/ExpressionFunctionRight.java۞55۩int length = param2.getInt();
smallsql/database/ExpressionFunctionRight.java۞56۩if(bytes.length <= length) return bytes;
smallsql/database/ExpressionFunctionRight.java۞58۩byte[] b = new byte[length];
smallsql/database/ExpressionFunctionRight.java۞59۩System.arraycopy(bytes, bytes.length -length, b, 0, length);
smallsql/database/ExpressionFunctionRight.java۞60۩return b;
smallsql/database/ExpressionFunctionRight.java۞61۩}
smallsql/database/ExpressionFunctionRight.java۞64۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionRight.java۞65۩if(isNull()) return null;
smallsql/database/ExpressionFunctionRight.java۞66۩String str = param1.getString();
smallsql/database/ExpressionFunctionRight.java۞67۩int length  = param2.getInt();
smallsql/database/ExpressionFunctionRight.java۞68۩int start = str.length() - Math.min( length, str.length() );
smallsql/database/ExpressionFunctionRight.java۞69۩return str.substring(start);
smallsql/database/ExpressionFunctionRight.java۞70۩}
smallsql/database/ExpressionFunctionRight.java۞73۩}
smallsql/database/ExpressionFunctionRound.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionRound.java۞36۩final class ExpressionFunctionRound extends ExpressionFunctionReturnP1Number {
smallsql/database/ExpressionFunctionRound.java۞38۩final int getFunction(){ return SQLTokenizer.ROUND; }
smallsql/database/ExpressionFunctionRound.java۞40۩boolean isNull() throws Exception{
smallsql/database/ExpressionFunctionRound.java۞41۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionRound.java۞42۩}
smallsql/database/ExpressionFunctionRound.java۞45۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionRound.java۞46۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionRound.java۞47۩final int places = param2.getInt();
smallsql/database/ExpressionFunctionRound.java۞48۩double value = param1.getDouble();
smallsql/database/ExpressionFunctionRound.java۞49۩long factor = 1;
smallsql/database/ExpressionFunctionRound.java۞50۩if(places > 0){
smallsql/database/ExpressionFunctionRound.java۞51۩for(int i=0; i<places; i++){
smallsql/database/ExpressionFunctionRound.java۞52۩factor *= 10;
smallsql/database/ExpressionFunctionRound.java۞53۩}
smallsql/database/ExpressionFunctionRound.java۞54۩value *= factor;
smallsql/database/ExpressionFunctionRound.java۞55۩}else{
smallsql/database/ExpressionFunctionRound.java۞56۩for(int i=0; i>places; i--){
smallsql/database/ExpressionFunctionRound.java۞57۩factor *= 10;
smallsql/database/ExpressionFunctionRound.java۞58۩}
smallsql/database/ExpressionFunctionRound.java۞59۩value /= factor;
smallsql/database/ExpressionFunctionRound.java۞60۩}
smallsql/database/ExpressionFunctionRound.java۞61۩value = Math.rint( value );
smallsql/database/ExpressionFunctionRound.java۞62۩if(places > 0){
smallsql/database/ExpressionFunctionRound.java۞63۩value /= factor;
smallsql/database/ExpressionFunctionRound.java۞64۩}else{
smallsql/database/ExpressionFunctionRound.java۞65۩value *= factor;
smallsql/database/ExpressionFunctionRound.java۞66۩}
smallsql/database/ExpressionFunctionRound.java۞67۩return value;
smallsql/database/ExpressionFunctionRound.java۞68۩}
smallsql/database/ExpressionFunctionRound.java۞71۩}
smallsql/database/ExpressionFunctionSign.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionSign.java۞40۩final class ExpressionFunctionSign extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionSign.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionSign.java۞44۩return SQLTokenizer.SIGN;
smallsql/database/ExpressionFunctionSign.java۞45۩}
smallsql/database/ExpressionFunctionSign.java۞48۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionSign.java۞49۩if(param1.isNull()) return 0;
smallsql/database/ExpressionFunctionSign.java۞50۩switch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){
smallsql/database/ExpressionFunctionSign.java۞51۩case SQLTokenizer.INT:
smallsql/database/ExpressionFunctionSign.java۞52۩int intValue = param1.getInt();
smallsql/database/ExpressionFunctionSign.java۞53۩if(intValue < 0)
smallsql/database/ExpressionFunctionSign.java۞54۩return -1;
smallsql/database/ExpressionFunctionSign.java۞55۩if(intValue > 0)
smallsql/database/ExpressionFunctionSign.java۞56۩return 1;
smallsql/database/ExpressionFunctionSign.java۞57۩return 0;
smallsql/database/ExpressionFunctionSign.java۞58۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionFunctionSign.java۞59۩long longValue = param1.getLong();
smallsql/database/ExpressionFunctionSign.java۞60۩if(longValue < 0)
smallsql/database/ExpressionFunctionSign.java۞61۩return -1;
smallsql/database/ExpressionFunctionSign.java۞62۩if(longValue > 0)
smallsql/database/ExpressionFunctionSign.java۞63۩return 1;
smallsql/database/ExpressionFunctionSign.java۞64۩return 0;
smallsql/database/ExpressionFunctionSign.java۞65۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionFunctionSign.java۞66۩longValue = param1.getMoney();
smallsql/database/ExpressionFunctionSign.java۞67۩if(longValue < 0)
smallsql/database/ExpressionFunctionSign.java۞68۩return -1;
smallsql/database/ExpressionFunctionSign.java۞69۩if(longValue > 0)
smallsql/database/ExpressionFunctionSign.java۞70۩return 1;
smallsql/database/ExpressionFunctionSign.java۞71۩return 0;
smallsql/database/ExpressionFunctionSign.java۞72۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionFunctionSign.java۞73۩return param1.getNumeric().getSignum();
smallsql/database/ExpressionFunctionSign.java۞74۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionFunctionSign.java۞75۩double doubleValue = param1.getDouble();
smallsql/database/ExpressionFunctionSign.java۞76۩if(doubleValue < 0)
smallsql/database/ExpressionFunctionSign.java۞77۩return -1;
smallsql/database/ExpressionFunctionSign.java۞78۩if(doubleValue > 0)
smallsql/database/ExpressionFunctionSign.java۞79۩return 1;
smallsql/database/ExpressionFunctionSign.java۞80۩return 0;
smallsql/database/ExpressionFunctionSign.java۞81۩default:
smallsql/database/ExpressionFunctionSign.java۞82۩throw new Error();
smallsql/database/ExpressionFunctionSign.java۞83۩}
smallsql/database/ExpressionFunctionSign.java۞84۩}
smallsql/database/ExpressionFunctionSign.java۞85۩}
smallsql/database/ExpressionFunctionSin.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionSin.java۞36۩final class ExpressionFunctionSin extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionSin.java۞38۩final int getFunction(){ return SQLTokenizer.SIN; }
smallsql/database/ExpressionFunctionSin.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionSin.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionSin.java۞42۩return Math.sin( param1.getDouble() );
smallsql/database/ExpressionFunctionSin.java۞43۩}
smallsql/database/ExpressionFunctionSin.java۞44۩}
smallsql/database/ExpressionFunctionSoundex.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionSoundex.java۞40۩public class ExpressionFunctionSoundex extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionSoundex.java۞42۩final int getFunction() {
smallsql/database/ExpressionFunctionSoundex.java۞43۩return SQLTokenizer.SOUNDEX;
smallsql/database/ExpressionFunctionSoundex.java۞44۩}
smallsql/database/ExpressionFunctionSoundex.java۞47۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionSoundex.java۞48۩return param1.isNull();
smallsql/database/ExpressionFunctionSoundex.java۞49۩}
smallsql/database/ExpressionFunctionSoundex.java۞52۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionSoundex.java۞53۩throw createUnspportedConversion(SQLTokenizer.BINARY);
smallsql/database/ExpressionFunctionSoundex.java۞54۩}
smallsql/database/ExpressionFunctionSoundex.java۞57۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionSoundex.java۞58۩if(isNull()) return null;
smallsql/database/ExpressionFunctionSoundex.java۞59۩String input = param1.getString();
smallsql/database/ExpressionFunctionSoundex.java۞60۩return getString(input);
smallsql/database/ExpressionFunctionSoundex.java۞61۩}
smallsql/database/ExpressionFunctionSoundex.java۞64۩static String getString(String input){
smallsql/database/ExpressionFunctionSoundex.java۞65۩char[] output = new char[4];
smallsql/database/ExpressionFunctionSoundex.java۞66۩int idx = 0;
smallsql/database/ExpressionFunctionSoundex.java۞67۩input = input.toUpperCase();
smallsql/database/ExpressionFunctionSoundex.java۞68۩if(input.length()>0){
smallsql/database/ExpressionFunctionSoundex.java۞69۩output[idx++] = input.charAt(0);
smallsql/database/ExpressionFunctionSoundex.java۞70۩}
smallsql/database/ExpressionFunctionSoundex.java۞71۩char last = '0';
smallsql/database/ExpressionFunctionSoundex.java۞72۩for(int i=1; idx<4 && i<input.length(); i++){
smallsql/database/ExpressionFunctionSoundex.java۞73۩char c = input.charAt(i);
smallsql/database/ExpressionFunctionSoundex.java۞74۩switch(c){
smallsql/database/ExpressionFunctionSoundex.java۞75۩case 'B':
smallsql/database/ExpressionFunctionSoundex.java۞76۩case 'F':
smallsql/database/ExpressionFunctionSoundex.java۞77۩case 'P':
smallsql/database/ExpressionFunctionSoundex.java۞78۩case 'V':
smallsql/database/ExpressionFunctionSoundex.java۞79۩c = '1';
smallsql/database/ExpressionFunctionSoundex.java۞80۩break;
smallsql/database/ExpressionFunctionSoundex.java۞81۩case 'C':
smallsql/database/ExpressionFunctionSoundex.java۞82۩case 'G':
smallsql/database/ExpressionFunctionSoundex.java۞83۩case 'J':
smallsql/database/ExpressionFunctionSoundex.java۞84۩case 'K':
smallsql/database/ExpressionFunctionSoundex.java۞85۩case 'Q':
smallsql/database/ExpressionFunctionSoundex.java۞86۩case 'S':
smallsql/database/ExpressionFunctionSoundex.java۞87۩case 'X':
smallsql/database/ExpressionFunctionSoundex.java۞88۩case 'Z':
smallsql/database/ExpressionFunctionSoundex.java۞89۩c = '2';
smallsql/database/ExpressionFunctionSoundex.java۞90۩break;
smallsql/database/ExpressionFunctionSoundex.java۞91۩case 'D':
smallsql/database/ExpressionFunctionSoundex.java۞92۩case 'T':
smallsql/database/ExpressionFunctionSoundex.java۞93۩c = '3';
smallsql/database/ExpressionFunctionSoundex.java۞94۩break;
smallsql/database/ExpressionFunctionSoundex.java۞95۩case 'L':
smallsql/database/ExpressionFunctionSoundex.java۞96۩c = '4';
smallsql/database/ExpressionFunctionSoundex.java۞97۩break;
smallsql/database/ExpressionFunctionSoundex.java۞98۩case 'M':
smallsql/database/ExpressionFunctionSoundex.java۞99۩case 'N':
smallsql/database/ExpressionFunctionSoundex.java۞100۩c = '5';
smallsql/database/ExpressionFunctionSoundex.java۞101۩break;
smallsql/database/ExpressionFunctionSoundex.java۞102۩case 'R':
smallsql/database/ExpressionFunctionSoundex.java۞103۩c = '6';
smallsql/database/ExpressionFunctionSoundex.java۞104۩break;
smallsql/database/ExpressionFunctionSoundex.java۞105۩default:
smallsql/database/ExpressionFunctionSoundex.java۞106۩c = '0';
smallsql/database/ExpressionFunctionSoundex.java۞107۩break;
smallsql/database/ExpressionFunctionSoundex.java۞108۩}
smallsql/database/ExpressionFunctionSoundex.java۞109۩if(c > '0' && last != c){
smallsql/database/ExpressionFunctionSoundex.java۞110۩output[idx++] = c;
smallsql/database/ExpressionFunctionSoundex.java۞111۩}
smallsql/database/ExpressionFunctionSoundex.java۞112۩last = c;
smallsql/database/ExpressionFunctionSoundex.java۞113۩}
smallsql/database/ExpressionFunctionSoundex.java۞114۩for(; idx<4;){
smallsql/database/ExpressionFunctionSoundex.java۞115۩output[idx++] = '0';
smallsql/database/ExpressionFunctionSoundex.java۞117۩}
smallsql/database/ExpressionFunctionSoundex.java۞118۩return new String(output);
smallsql/database/ExpressionFunctionSoundex.java۞119۩}
smallsql/database/ExpressionFunctionSoundex.java۞122۩int getPrecision(){
smallsql/database/ExpressionFunctionSoundex.java۞123۩return 4;
smallsql/database/ExpressionFunctionSoundex.java۞124۩}
smallsql/database/ExpressionFunctionSoundex.java۞125۩}
smallsql/database/ExpressionFunctionSpace.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionSpace.java۞40۩public class ExpressionFunctionSpace extends ExpressionFunctionReturnString {
smallsql/database/ExpressionFunctionSpace.java۞42۩final int getFunction() {
smallsql/database/ExpressionFunctionSpace.java۞43۩return SQLTokenizer.SPACE;
smallsql/database/ExpressionFunctionSpace.java۞44۩}
smallsql/database/ExpressionFunctionSpace.java۞47۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionSpace.java۞48۩return param1.isNull() || param1.getInt()<0;
smallsql/database/ExpressionFunctionSpace.java۞49۩}
smallsql/database/ExpressionFunctionSpace.java۞52۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionSpace.java۞53۩if(isNull()) return null;
smallsql/database/ExpressionFunctionSpace.java۞54۩int size = param1.getInt();
smallsql/database/ExpressionFunctionSpace.java۞55۩if(size < 0){
smallsql/database/ExpressionFunctionSpace.java۞56۩return null;
smallsql/database/ExpressionFunctionSpace.java۞57۩}
smallsql/database/ExpressionFunctionSpace.java۞58۩char[] buffer = new char[size];
smallsql/database/ExpressionFunctionSpace.java۞59۩for(int i=0; i<size; i++){
smallsql/database/ExpressionFunctionSpace.java۞60۩buffer[i] = ' ';
smallsql/database/ExpressionFunctionSpace.java۞61۩}
smallsql/database/ExpressionFunctionSpace.java۞62۩return new String(buffer);
smallsql/database/ExpressionFunctionSpace.java۞63۩}
smallsql/database/ExpressionFunctionSpace.java۞66۩final int getDataType() {
smallsql/database/ExpressionFunctionSpace.java۞67۩return SQLTokenizer.VARCHAR;
smallsql/database/ExpressionFunctionSpace.java۞68۩}
smallsql/database/ExpressionFunctionSpace.java۞69۩}
smallsql/database/ExpressionFunctionSqrt.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionSqrt.java۞36۩final class ExpressionFunctionSqrt extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionSqrt.java۞38۩final int getFunction(){ return SQLTokenizer.SQRT; }
smallsql/database/ExpressionFunctionSqrt.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionSqrt.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionSqrt.java۞42۩return Math.sqrt( param1.getDouble() );
smallsql/database/ExpressionFunctionSqrt.java۞43۩}
smallsql/database/ExpressionFunctionSqrt.java۞44۩}
smallsql/database/ExpressionFunctionSubstring.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionSubstring.java۞36۩import smallsql.database.language.Language;
smallsql/database/ExpressionFunctionSubstring.java۞41۩final class ExpressionFunctionSubstring extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionSubstring.java۞44۩final int getFunction() {
smallsql/database/ExpressionFunctionSubstring.java۞45۩return SQLTokenizer.SUBSTRING;
smallsql/database/ExpressionFunctionSubstring.java۞46۩}
smallsql/database/ExpressionFunctionSubstring.java۞49۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionSubstring.java۞50۩return param1.isNull() || param2.isNull() || param3.isNull();
smallsql/database/ExpressionFunctionSubstring.java۞51۩}
smallsql/database/ExpressionFunctionSubstring.java۞54۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionSubstring.java۞55۩if(isNull()) return null;
smallsql/database/ExpressionFunctionSubstring.java۞56۩byte[] bytes = param1.getBytes();
smallsql/database/ExpressionFunctionSubstring.java۞57۩int byteLen = bytes.length;
smallsql/database/ExpressionFunctionSubstring.java۞58۩int start  = Math.min( Math.max( 0, param2.getInt() - 1), byteLen);
smallsql/database/ExpressionFunctionSubstring.java۞59۩int length = param3.getInt();
smallsql/database/ExpressionFunctionSubstring.java۞60۩if(length < 0)
smallsql/database/ExpressionFunctionSubstring.java۞61۩throw SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));
smallsql/database/ExpressionFunctionSubstring.java۞62۩if(start == 0 && byteLen == length) return bytes;
smallsql/database/ExpressionFunctionSubstring.java۞63۩if(byteLen > length + start){
smallsql/database/ExpressionFunctionSubstring.java۞64۩byte[] b = new byte[length];
smallsql/database/ExpressionFunctionSubstring.java۞65۩System.arraycopy(bytes, start, b, 0, length);
smallsql/database/ExpressionFunctionSubstring.java۞66۩return b;
smallsql/database/ExpressionFunctionSubstring.java۞67۩}else{
smallsql/database/ExpressionFunctionSubstring.java۞68۩byte[] b = new byte[byteLen - start];
smallsql/database/ExpressionFunctionSubstring.java۞69۩System.arraycopy(bytes, start, b, 0, b.length);
smallsql/database/ExpressionFunctionSubstring.java۞70۩return b;
smallsql/database/ExpressionFunctionSubstring.java۞71۩}
smallsql/database/ExpressionFunctionSubstring.java۞72۩}
smallsql/database/ExpressionFunctionSubstring.java۞75۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionSubstring.java۞76۩if(isNull()) return null;
smallsql/database/ExpressionFunctionSubstring.java۞77۩String str = param1.getString();
smallsql/database/ExpressionFunctionSubstring.java۞78۩int strLen = str.length();
smallsql/database/ExpressionFunctionSubstring.java۞79۩int start  = Math.min( Math.max( 0, param2.getInt() - 1), strLen);
smallsql/database/ExpressionFunctionSubstring.java۞80۩int length = param3.getInt();
smallsql/database/ExpressionFunctionSubstring.java۞81۩if(length < 0)
smallsql/database/ExpressionFunctionSubstring.java۞82۩throw SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));
smallsql/database/ExpressionFunctionSubstring.java۞83۩length = Math.min( length, strLen-start );
smallsql/database/ExpressionFunctionSubstring.java۞84۩return str.substring(start, start+length);
smallsql/database/ExpressionFunctionSubstring.java۞85۩}
smallsql/database/ExpressionFunctionSubstring.java۞88۩}
smallsql/database/ExpressionFunctionTan.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionTan.java۞36۩final class ExpressionFunctionTan extends ExpressionFunctionReturnFloat {
smallsql/database/ExpressionFunctionTan.java۞38۩final int getFunction(){ return SQLTokenizer.TAN; }
smallsql/database/ExpressionFunctionTan.java۞40۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionTan.java۞41۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionTan.java۞42۩return Math.tan( param1.getDouble() );
smallsql/database/ExpressionFunctionTan.java۞43۩}
smallsql/database/ExpressionFunctionTan.java۞44۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionTimestampAdd.java۞40۩public class ExpressionFunctionTimestampAdd extends ExpressionFunction {
smallsql/database/ExpressionFunctionTimestampAdd.java۞42۩final private int interval;
smallsql/database/ExpressionFunctionTimestampAdd.java۞45۩ExpressionFunctionTimestampAdd(int intervalType, Expression p1, Expression p2){
smallsql/database/ExpressionFunctionTimestampAdd.java۞46۩interval = ExpressionFunctionTimestampDiff.mapIntervalType( intervalType );
smallsql/database/ExpressionFunctionTimestampAdd.java۞47۩setParams( new Expression[]{p1,p2});
smallsql/database/ExpressionFunctionTimestampAdd.java۞48۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞51۩int getFunction() {
smallsql/database/ExpressionFunctionTimestampAdd.java۞52۩return SQLTokenizer.TIMESTAMPADD;
smallsql/database/ExpressionFunctionTimestampAdd.java۞53۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞56۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞57۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionTimestampAdd.java۞58۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞61۩boolean getBoolean() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞62۩return getLong() != 0;
smallsql/database/ExpressionFunctionTimestampAdd.java۞63۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞66۩int getInt() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞67۩return (int)getLong();
smallsql/database/ExpressionFunctionTimestampAdd.java۞68۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞71۩long getLong() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞72۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionTimestampAdd.java۞73۩switch(interval){
smallsql/database/ExpressionFunctionTimestampAdd.java۞74۩case SQLTokenizer.SQL_TSI_FRAC_SECOND:
smallsql/database/ExpressionFunctionTimestampAdd.java۞75۩return param2.getLong() + param1.getLong();
smallsql/database/ExpressionFunctionTimestampAdd.java۞76۩case SQLTokenizer.SQL_TSI_SECOND:
smallsql/database/ExpressionFunctionTimestampAdd.java۞77۩return param2.getLong() + param1.getLong() * 1000;
smallsql/database/ExpressionFunctionTimestampAdd.java۞78۩case SQLTokenizer.SQL_TSI_MINUTE:
smallsql/database/ExpressionFunctionTimestampAdd.java۞79۩return param2.getLong() + param1.getLong() * 60000;
smallsql/database/ExpressionFunctionTimestampAdd.java۞80۩case SQLTokenizer.SQL_TSI_HOUR:
smallsql/database/ExpressionFunctionTimestampAdd.java۞81۩return param2.getLong() + param1.getLong() * 3600000;
smallsql/database/ExpressionFunctionTimestampAdd.java۞82۩case SQLTokenizer.SQL_TSI_DAY:
smallsql/database/ExpressionFunctionTimestampAdd.java۞83۩return param2.getLong() + param1.getLong() * 86400000;
smallsql/database/ExpressionFunctionTimestampAdd.java۞84۩case SQLTokenizer.SQL_TSI_WEEK:{
smallsql/database/ExpressionFunctionTimestampAdd.java۞85۩return param2.getLong() + param1.getLong() * 604800000;
smallsql/database/ExpressionFunctionTimestampAdd.java۞86۩}case SQLTokenizer.SQL_TSI_MONTH:{
smallsql/database/ExpressionFunctionTimestampAdd.java۞87۩DateTime.Details details2 = new DateTime.Details(param2.getLong());
smallsql/database/ExpressionFunctionTimestampAdd.java۞88۩details2.month += param1.getLong();
smallsql/database/ExpressionFunctionTimestampAdd.java۞89۩return DateTime.calcMillis(details2);
smallsql/database/ExpressionFunctionTimestampAdd.java۞90۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞91۩case SQLTokenizer.SQL_TSI_QUARTER:{
smallsql/database/ExpressionFunctionTimestampAdd.java۞92۩DateTime.Details details2 = new DateTime.Details(param2.getLong());
smallsql/database/ExpressionFunctionTimestampAdd.java۞93۩details2.month += param1.getLong() * 3;
smallsql/database/ExpressionFunctionTimestampAdd.java۞94۩return DateTime.calcMillis(details2);
smallsql/database/ExpressionFunctionTimestampAdd.java۞95۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞96۩case SQLTokenizer.SQL_TSI_YEAR:{
smallsql/database/ExpressionFunctionTimestampAdd.java۞97۩DateTime.Details details2 = new DateTime.Details(param2.getLong());
smallsql/database/ExpressionFunctionTimestampAdd.java۞98۩details2.year += param1.getLong();
smallsql/database/ExpressionFunctionTimestampAdd.java۞99۩return DateTime.calcMillis(details2);
smallsql/database/ExpressionFunctionTimestampAdd.java۞100۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞101۩default: throw new Error();
smallsql/database/ExpressionFunctionTimestampAdd.java۞102۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞104۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞107۩float getFloat() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞108۩return getLong();
smallsql/database/ExpressionFunctionTimestampAdd.java۞109۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞112۩double getDouble() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞113۩return getLong();
smallsql/database/ExpressionFunctionTimestampAdd.java۞114۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞117۩long getMoney() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞118۩return getLong() * 10000;
smallsql/database/ExpressionFunctionTimestampAdd.java۞119۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞122۩MutableNumeric getNumeric() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞123۩if(isNull()) return null;
smallsql/database/ExpressionFunctionTimestampAdd.java۞124۩return new MutableNumeric(getLong());
smallsql/database/ExpressionFunctionTimestampAdd.java۞125۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞128۩Object getObject() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞129۩if(isNull()) return null;
smallsql/database/ExpressionFunctionTimestampAdd.java۞130۩return new DateTime( getLong(), SQLTokenizer.TIMESTAMP );
smallsql/database/ExpressionFunctionTimestampAdd.java۞131۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞134۩String getString() throws Exception {
smallsql/database/ExpressionFunctionTimestampAdd.java۞135۩if(isNull()) return null;
smallsql/database/ExpressionFunctionTimestampAdd.java۞136۩return new DateTime( getLong(), SQLTokenizer.TIMESTAMP ).toString();
smallsql/database/ExpressionFunctionTimestampAdd.java۞137۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞140۩int getDataType() {
smallsql/database/ExpressionFunctionTimestampAdd.java۞141۩return SQLTokenizer.TIMESTAMP;
smallsql/database/ExpressionFunctionTimestampAdd.java۞142۩}
smallsql/database/ExpressionFunctionTimestampAdd.java۞144۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionTimestampDiff.java۞40۩public class ExpressionFunctionTimestampDiff extends ExpressionFunction {
smallsql/database/ExpressionFunctionTimestampDiff.java۞42۩final private int interval;
smallsql/database/ExpressionFunctionTimestampDiff.java۞44۩static final int mapIntervalType(int intervalType){
smallsql/database/ExpressionFunctionTimestampDiff.java۞45۩switch(intervalType){
smallsql/database/ExpressionFunctionTimestampDiff.java۞46۩case SQLTokenizer.MILLISECOND:
smallsql/database/ExpressionFunctionTimestampDiff.java۞47۩return SQLTokenizer.SQL_TSI_FRAC_SECOND;
smallsql/database/ExpressionFunctionTimestampDiff.java۞48۩case SQLTokenizer.SECOND:
smallsql/database/ExpressionFunctionTimestampDiff.java۞49۩return SQLTokenizer.SQL_TSI_SECOND;
smallsql/database/ExpressionFunctionTimestampDiff.java۞50۩case SQLTokenizer.MINUTE:
smallsql/database/ExpressionFunctionTimestampDiff.java۞51۩return SQLTokenizer.SQL_TSI_MINUTE;
smallsql/database/ExpressionFunctionTimestampDiff.java۞52۩case SQLTokenizer.HOUR:
smallsql/database/ExpressionFunctionTimestampDiff.java۞53۩return SQLTokenizer.SQL_TSI_HOUR;
smallsql/database/ExpressionFunctionTimestampDiff.java۞54۩case SQLTokenizer.D:
smallsql/database/ExpressionFunctionTimestampDiff.java۞55۩case SQLTokenizer.DAY:
smallsql/database/ExpressionFunctionTimestampDiff.java۞56۩return SQLTokenizer.SQL_TSI_DAY;
smallsql/database/ExpressionFunctionTimestampDiff.java۞57۩case SQLTokenizer.WEEK:
smallsql/database/ExpressionFunctionTimestampDiff.java۞58۩return SQLTokenizer.SQL_TSI_WEEK;
smallsql/database/ExpressionFunctionTimestampDiff.java۞59۩case SQLTokenizer.MONTH:
smallsql/database/ExpressionFunctionTimestampDiff.java۞60۩return SQLTokenizer.SQL_TSI_MONTH;
smallsql/database/ExpressionFunctionTimestampDiff.java۞61۩case SQLTokenizer.QUARTER:
smallsql/database/ExpressionFunctionTimestampDiff.java۞62۩return SQLTokenizer.SQL_TSI_QUARTER;
smallsql/database/ExpressionFunctionTimestampDiff.java۞63۩case SQLTokenizer.YEAR:
smallsql/database/ExpressionFunctionTimestampDiff.java۞64۩return SQLTokenizer.SQL_TSI_YEAR;
smallsql/database/ExpressionFunctionTimestampDiff.java۞65۩default:
smallsql/database/ExpressionFunctionTimestampDiff.java۞66۩return intervalType;
smallsql/database/ExpressionFunctionTimestampDiff.java۞67۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞68۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞70۩ExpressionFunctionTimestampDiff(int intervalType, Expression p1, Expression p2){
smallsql/database/ExpressionFunctionTimestampDiff.java۞71۩interval = mapIntervalType( intervalType );
smallsql/database/ExpressionFunctionTimestampDiff.java۞72۩setParams( new Expression[]{p1,p2});
smallsql/database/ExpressionFunctionTimestampDiff.java۞73۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞75۩int getFunction() {
smallsql/database/ExpressionFunctionTimestampDiff.java۞76۩return SQLTokenizer.TIMESTAMPDIFF;
smallsql/database/ExpressionFunctionTimestampDiff.java۞77۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞80۩boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞81۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionTimestampDiff.java۞82۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞85۩boolean getBoolean() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞86۩return getInt() != 0;
smallsql/database/ExpressionFunctionTimestampDiff.java۞87۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞90۩int getInt() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞91۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionTimestampDiff.java۞92۩switch(interval){
smallsql/database/ExpressionFunctionTimestampDiff.java۞93۩case SQLTokenizer.SQL_TSI_FRAC_SECOND:
smallsql/database/ExpressionFunctionTimestampDiff.java۞94۩return (int)(param2.getLong() - param1.getLong());
smallsql/database/ExpressionFunctionTimestampDiff.java۞95۩case SQLTokenizer.SQL_TSI_SECOND:
smallsql/database/ExpressionFunctionTimestampDiff.java۞96۩return (int)(param2.getLong() /1000 - param1.getLong() /1000);
smallsql/database/ExpressionFunctionTimestampDiff.java۞97۩case SQLTokenizer.SQL_TSI_MINUTE:
smallsql/database/ExpressionFunctionTimestampDiff.java۞98۩return (int)(param2.getLong() /60000 - param1.getLong() /60000);
smallsql/database/ExpressionFunctionTimestampDiff.java۞99۩case SQLTokenizer.SQL_TSI_HOUR:
smallsql/database/ExpressionFunctionTimestampDiff.java۞100۩return (int)(param2.getLong() /3600000 - param1.getLong() /3600000);
smallsql/database/ExpressionFunctionTimestampDiff.java۞101۩case SQLTokenizer.SQL_TSI_DAY:
smallsql/database/ExpressionFunctionTimestampDiff.java۞102۩return (int)(param2.getLong() /86400000 - param1.getLong() /86400000);
smallsql/database/ExpressionFunctionTimestampDiff.java۞103۩case SQLTokenizer.SQL_TSI_WEEK:{
smallsql/database/ExpressionFunctionTimestampDiff.java۞104۩long day2 = param2.getLong() /86400000;
smallsql/database/ExpressionFunctionTimestampDiff.java۞105۩long day1 = param1.getLong() /86400000;
smallsql/database/ExpressionFunctionTimestampDiff.java۞107۩return (int)((day2 + 3) / 7 - (day1 + 3) / 7);
smallsql/database/ExpressionFunctionTimestampDiff.java۞108۩}case SQLTokenizer.SQL_TSI_MONTH:{
smallsql/database/ExpressionFunctionTimestampDiff.java۞109۩DateTime.Details details2 = new DateTime.Details(param2.getLong());
smallsql/database/ExpressionFunctionTimestampDiff.java۞110۩DateTime.Details details1 = new DateTime.Details(param1.getLong());
smallsql/database/ExpressionFunctionTimestampDiff.java۞111۩return (details2.year * 12 + details2.month) - (details1.year * 12 + details1.month);
smallsql/database/ExpressionFunctionTimestampDiff.java۞112۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞113۩case SQLTokenizer.SQL_TSI_QUARTER:{
smallsql/database/ExpressionFunctionTimestampDiff.java۞114۩DateTime.Details details2 = new DateTime.Details(param2.getLong());
smallsql/database/ExpressionFunctionTimestampDiff.java۞115۩DateTime.Details details1 = new DateTime.Details(param1.getLong());
smallsql/database/ExpressionFunctionTimestampDiff.java۞116۩return (details2.year * 4 + details2.month / 3) - (details1.year * 4 + details1.month / 3);
smallsql/database/ExpressionFunctionTimestampDiff.java۞117۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞118۩case SQLTokenizer.SQL_TSI_YEAR:{
smallsql/database/ExpressionFunctionTimestampDiff.java۞119۩DateTime.Details details2 = new DateTime.Details(param2.getLong());
smallsql/database/ExpressionFunctionTimestampDiff.java۞120۩DateTime.Details details1 = new DateTime.Details(param1.getLong());
smallsql/database/ExpressionFunctionTimestampDiff.java۞121۩return details2.year - details1.year;
smallsql/database/ExpressionFunctionTimestampDiff.java۞122۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞123۩default: throw new Error();
smallsql/database/ExpressionFunctionTimestampDiff.java۞124۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞125۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞128۩long getLong() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞129۩return getInt();
smallsql/database/ExpressionFunctionTimestampDiff.java۞130۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞133۩float getFloat() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞134۩return getInt();
smallsql/database/ExpressionFunctionTimestampDiff.java۞135۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞138۩double getDouble() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞139۩return getInt();
smallsql/database/ExpressionFunctionTimestampDiff.java۞140۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞143۩long getMoney() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞144۩return getInt() * 10000L;
smallsql/database/ExpressionFunctionTimestampDiff.java۞145۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞148۩MutableNumeric getNumeric() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞149۩if(isNull()) return null;
smallsql/database/ExpressionFunctionTimestampDiff.java۞150۩return new MutableNumeric(getInt());
smallsql/database/ExpressionFunctionTimestampDiff.java۞151۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞154۩Object getObject() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞155۩if(isNull()) return null;
smallsql/database/ExpressionFunctionTimestampDiff.java۞156۩return Utils.getInteger(getInt());
smallsql/database/ExpressionFunctionTimestampDiff.java۞157۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞160۩String getString() throws Exception {
smallsql/database/ExpressionFunctionTimestampDiff.java۞161۩if(isNull()) return null;
smallsql/database/ExpressionFunctionTimestampDiff.java۞162۩return String.valueOf(getInt());
smallsql/database/ExpressionFunctionTimestampDiff.java۞163۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞166۩int getDataType() {
smallsql/database/ExpressionFunctionTimestampDiff.java۞167۩return SQLTokenizer.INT;
smallsql/database/ExpressionFunctionTimestampDiff.java۞168۩}
smallsql/database/ExpressionFunctionTimestampDiff.java۞170۩}
smallsql/database/ExpressionFunctionTruncate.java۞33۩package smallsql.database;
smallsql/database/ExpressionFunctionTruncate.java۞36۩final class ExpressionFunctionTruncate extends ExpressionFunctionReturnP1Number {
smallsql/database/ExpressionFunctionTruncate.java۞38۩final int getFunction(){ return SQLTokenizer.TRUNCATE; }
smallsql/database/ExpressionFunctionTruncate.java۞40۩boolean isNull() throws Exception{
smallsql/database/ExpressionFunctionTruncate.java۞41۩return param1.isNull() || param2.isNull();
smallsql/database/ExpressionFunctionTruncate.java۞42۩}
smallsql/database/ExpressionFunctionTruncate.java۞45۩final double getDouble() throws Exception{
smallsql/database/ExpressionFunctionTruncate.java۞46۩if(isNull()) return 0;
smallsql/database/ExpressionFunctionTruncate.java۞47۩final int places = param2.getInt();
smallsql/database/ExpressionFunctionTruncate.java۞48۩double value = param1.getDouble();
smallsql/database/ExpressionFunctionTruncate.java۞49۩long factor = 1;
smallsql/database/ExpressionFunctionTruncate.java۞50۩if(places > 0){
smallsql/database/ExpressionFunctionTruncate.java۞51۩for(int i=0; i<places; i++){
smallsql/database/ExpressionFunctionTruncate.java۞52۩factor *= 10;
smallsql/database/ExpressionFunctionTruncate.java۞53۩}
smallsql/database/ExpressionFunctionTruncate.java۞54۩value *= factor;
smallsql/database/ExpressionFunctionTruncate.java۞55۩}else{
smallsql/database/ExpressionFunctionTruncate.java۞56۩for(int i=0; i>places; i--){
smallsql/database/ExpressionFunctionTruncate.java۞57۩factor *= 10;
smallsql/database/ExpressionFunctionTruncate.java۞58۩}
smallsql/database/ExpressionFunctionTruncate.java۞59۩value /= factor;
smallsql/database/ExpressionFunctionTruncate.java۞60۩}
smallsql/database/ExpressionFunctionTruncate.java۞61۩value -= value % 1;
smallsql/database/ExpressionFunctionTruncate.java۞62۩if(places > 0){
smallsql/database/ExpressionFunctionTruncate.java۞63۩value /= factor;
smallsql/database/ExpressionFunctionTruncate.java۞64۩}else{
smallsql/database/ExpressionFunctionTruncate.java۞65۩value *= factor;
smallsql/database/ExpressionFunctionTruncate.java۞66۩}
smallsql/database/ExpressionFunctionTruncate.java۞67۩return value;
smallsql/database/ExpressionFunctionTruncate.java۞68۩}
smallsql/database/ExpressionFunctionTruncate.java۞71۩}
smallsql/database/ExpressionFunctionUCase.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionUCase.java۞40۩public class ExpressionFunctionUCase extends ExpressionFunctionReturnP1StringAndBinary {
smallsql/database/ExpressionFunctionUCase.java۞42۩final int getFunction() {
smallsql/database/ExpressionFunctionUCase.java۞43۩return SQLTokenizer.UCASE;
smallsql/database/ExpressionFunctionUCase.java۞44۩}
smallsql/database/ExpressionFunctionUCase.java۞47۩final boolean isNull() throws Exception {
smallsql/database/ExpressionFunctionUCase.java۞48۩return param1.isNull();
smallsql/database/ExpressionFunctionUCase.java۞49۩}
smallsql/database/ExpressionFunctionUCase.java۞52۩final byte[] getBytes() throws Exception{
smallsql/database/ExpressionFunctionUCase.java۞53۩if(isNull()) return null;
smallsql/database/ExpressionFunctionUCase.java۞54۩return getString().getBytes();
smallsql/database/ExpressionFunctionUCase.java۞55۩}
smallsql/database/ExpressionFunctionUCase.java۞58۩final String getString() throws Exception {
smallsql/database/ExpressionFunctionUCase.java۞59۩if(isNull()) return null;
smallsql/database/ExpressionFunctionUCase.java۞60۩return param1.getString().toUpperCase();
smallsql/database/ExpressionFunctionUCase.java۞61۩}
smallsql/database/ExpressionFunctionUCase.java۞62۩}
smallsql/database/ExpressionFunctionYear.java۞34۩package smallsql.database;
smallsql/database/ExpressionFunctionYear.java۞40۩final class ExpressionFunctionYear extends ExpressionFunctionReturnInt {
smallsql/database/ExpressionFunctionYear.java۞43۩final int getFunction() {
smallsql/database/ExpressionFunctionYear.java۞44۩return SQLTokenizer.YEAR;
smallsql/database/ExpressionFunctionYear.java۞45۩}
smallsql/database/ExpressionFunctionYear.java۞48۩final int getInt() throws Exception {
smallsql/database/ExpressionFunctionYear.java۞49۩if(param1.isNull()) return 0;
smallsql/database/ExpressionFunctionYear.java۞50۩DateTime.Details details = new DateTime.Details(param1.getLong());
smallsql/database/ExpressionFunctionYear.java۞51۩return details.year;
smallsql/database/ExpressionFunctionYear.java۞52۩}
smallsql/database/ExpressionFunctionYear.java۞54۩}
smallsql/database/ExpressionInSelect.java۞34۩package smallsql.database;
smallsql/database/ExpressionInSelect.java۞36۩import smallsql.database.language.Language;
smallsql/database/ExpressionInSelect.java۞41۩class ExpressionInSelect extends ExpressionArithmetic {
smallsql/database/ExpressionInSelect.java۞43۩final private CommandSelect cmdSel;
smallsql/database/ExpressionInSelect.java۞44۩final private Index index = new Index(true);
smallsql/database/ExpressionInSelect.java۞45۩final private SSConnection con;
smallsql/database/ExpressionInSelect.java۞48۩ExpressionInSelect(SSConnection con, Expression left, CommandSelect cmdSel, int operation) {
smallsql/database/ExpressionInSelect.java۞49۩super(left, (Expressions)null, operation);
smallsql/database/ExpressionInSelect.java۞50۩this.cmdSel = cmdSel;
smallsql/database/ExpressionInSelect.java۞51۩this.con = con;
smallsql/database/ExpressionInSelect.java۞52۩}
smallsql/database/ExpressionInSelect.java۞55۩private void loadInList() throws Exception{
smallsql/database/ExpressionInSelect.java۞56۩if(cmdSel.compile(con)){
smallsql/database/ExpressionInSelect.java۞57۩cmdSel.from.execute();
smallsql/database/ExpressionInSelect.java۞58۩if(cmdSel.columnExpressions.size() != 1)
smallsql/database/ExpressionInSelect.java۞59۩throw SmallSQLException.create(Language.SUBQUERY_COL_COUNT, new Integer(cmdSel.columnExpressions.size()));
smallsql/database/ExpressionInSelect.java۞60۩index.clear();
smallsql/database/ExpressionInSelect.java۞61۩while(cmdSel.next()){
smallsql/database/ExpressionInSelect.java۞62۩try{
smallsql/database/ExpressionInSelect.java۞63۩index.addValues(0, cmdSel.columnExpressions );
smallsql/database/ExpressionInSelect.java۞64۩}catch(Exception e){
smallsql/database/ExpressionInSelect.java۞66۩}
smallsql/database/ExpressionInSelect.java۞67۩}
smallsql/database/ExpressionInSelect.java۞68۩}
smallsql/database/ExpressionInSelect.java۞69۩}
smallsql/database/ExpressionInSelect.java۞71۩boolean isInList() throws Exception{
smallsql/database/ExpressionInSelect.java۞72۩loadInList();
smallsql/database/ExpressionInSelect.java۞73۩return index.findRows(getParams(), false, null) != null;
smallsql/database/ExpressionInSelect.java۞74۩}
smallsql/database/ExpressionInSelect.java۞75۩}
smallsql/database/ExpressionName.java۞33۩package smallsql.database;
smallsql/database/ExpressionName.java۞36۩public class ExpressionName extends Expression {
smallsql/database/ExpressionName.java۞38۩private String tableAlias;
smallsql/database/ExpressionName.java۞39۩private DataSource fromEntry;
smallsql/database/ExpressionName.java۞40۩private int colIdx;
smallsql/database/ExpressionName.java۞41۩private TableView table;
smallsql/database/ExpressionName.java۞42۩private Column column;
smallsql/database/ExpressionName.java۞45۩ExpressionName(String name){
smallsql/database/ExpressionName.java۞46۩super(NAME);
smallsql/database/ExpressionName.java۞47۩setName( name );
smallsql/database/ExpressionName.java۞48۩}
smallsql/database/ExpressionName.java۞54۩ExpressionName(int type){
smallsql/database/ExpressionName.java۞55۩super(type);
smallsql/database/ExpressionName.java۞57۩}
smallsql/database/ExpressionName.java۞59۩void setNameAfterTableAlias(String name){
smallsql/database/ExpressionName.java۞60۩tableAlias = getName();
smallsql/database/ExpressionName.java۞61۩setName( name );
smallsql/database/ExpressionName.java۞62۩}
smallsql/database/ExpressionName.java۞67۩public boolean equals(Object expr){
smallsql/database/ExpressionName.java۞68۩if(!super.equals(expr)) return false;
smallsql/database/ExpressionName.java۞69۩if(!(expr instanceof ExpressionName)) return false;
smallsql/database/ExpressionName.java۞70۩if( ((ExpressionName)expr).fromEntry != fromEntry) return false;
smallsql/database/ExpressionName.java۞71۩return true;
smallsql/database/ExpressionName.java۞72۩}
smallsql/database/ExpressionName.java۞74۩boolean isNull() throws Exception{
smallsql/database/ExpressionName.java۞75۩return fromEntry.isNull(colIdx);
smallsql/database/ExpressionName.java۞76۩}
smallsql/database/ExpressionName.java۞78۩boolean getBoolean() throws Exception{
smallsql/database/ExpressionName.java۞79۩return fromEntry.getBoolean(colIdx);
smallsql/database/ExpressionName.java۞80۩}
smallsql/database/ExpressionName.java۞82۩int getInt() throws Exception{
smallsql/database/ExpressionName.java۞83۩return fromEntry.getInt(colIdx);
smallsql/database/ExpressionName.java۞84۩}
smallsql/database/ExpressionName.java۞86۩long getLong() throws Exception{
smallsql/database/ExpressionName.java۞87۩return fromEntry.getLong(colIdx);
smallsql/database/ExpressionName.java۞88۩}
smallsql/database/ExpressionName.java۞90۩float getFloat() throws Exception{
smallsql/database/ExpressionName.java۞91۩return fromEntry.getFloat(colIdx);
smallsql/database/ExpressionName.java۞92۩}
smallsql/database/ExpressionName.java۞94۩double getDouble() throws Exception{
smallsql/database/ExpressionName.java۞95۩return fromEntry.getDouble(colIdx);
smallsql/database/ExpressionName.java۞96۩}
smallsql/database/ExpressionName.java۞98۩long getMoney() throws Exception{
smallsql/database/ExpressionName.java۞99۩return fromEntry.getMoney(colIdx);
smallsql/database/ExpressionName.java۞100۩}
smallsql/database/ExpressionName.java۞102۩MutableNumeric getNumeric() throws Exception{
smallsql/database/ExpressionName.java۞103۩return fromEntry.getNumeric(colIdx);
smallsql/database/ExpressionName.java۞104۩}
smallsql/database/ExpressionName.java۞106۩Object getObject() throws Exception{
smallsql/database/ExpressionName.java۞107۩return fromEntry.getObject(colIdx);
smallsql/database/ExpressionName.java۞108۩}
smallsql/database/ExpressionName.java۞110۩String getString() throws Exception{
smallsql/database/ExpressionName.java۞111۩return fromEntry.getString(colIdx);
smallsql/database/ExpressionName.java۞112۩}
smallsql/database/ExpressionName.java۞114۩byte[] getBytes() throws Exception{
smallsql/database/ExpressionName.java۞115۩return fromEntry.getBytes(colIdx);
smallsql/database/ExpressionName.java۞116۩}
smallsql/database/ExpressionName.java۞118۩int getDataType(){
smallsql/database/ExpressionName.java۞119۩switch(getType()){
smallsql/database/ExpressionName.java۞120۩case NAME:
smallsql/database/ExpressionName.java۞121۩case GROUP_BY:
smallsql/database/ExpressionName.java۞122۩return fromEntry.getDataType(colIdx);
smallsql/database/ExpressionName.java۞123۩case FIRST:
smallsql/database/ExpressionName.java۞124۩case LAST:
smallsql/database/ExpressionName.java۞125۩case MAX:
smallsql/database/ExpressionName.java۞126۩case MIN:
smallsql/database/ExpressionName.java۞127۩case SUM:
smallsql/database/ExpressionName.java۞128۩return getParams()[0].getDataType();
smallsql/database/ExpressionName.java۞129۩case COUNT:
smallsql/database/ExpressionName.java۞130۩return SQLTokenizer.INT;
smallsql/database/ExpressionName.java۞131۩default: throw new Error();
smallsql/database/ExpressionName.java۞132۩}
smallsql/database/ExpressionName.java۞133۩}
smallsql/database/ExpressionName.java۞139۩void setFrom( DataSource fromEntry, int colIdx, TableView table ){
smallsql/database/ExpressionName.java۞140۩this.fromEntry  = fromEntry;
smallsql/database/ExpressionName.java۞141۩this.colIdx     = colIdx;
smallsql/database/ExpressionName.java۞142۩this.table      = table;
smallsql/database/ExpressionName.java۞144۩this.column		= table.columns.get(colIdx);
smallsql/database/ExpressionName.java۞145۩}
smallsql/database/ExpressionName.java۞151۩void setFrom( DataSource fromEntry, int colIdx, Column column ){
smallsql/database/ExpressionName.java۞152۩this.fromEntry  = fromEntry;
smallsql/database/ExpressionName.java۞153۩this.colIdx     = colIdx;
smallsql/database/ExpressionName.java۞154۩this.column		= column;
smallsql/database/ExpressionName.java۞155۩}
smallsql/database/ExpressionName.java۞158۩DataSource getDataSource(){
smallsql/database/ExpressionName.java۞159۩return fromEntry;
smallsql/database/ExpressionName.java۞160۩}
smallsql/database/ExpressionName.java۞163۩String getTableAlias(){ return tableAlias; }
smallsql/database/ExpressionName.java۞169۩final TableView getTable(){
smallsql/database/ExpressionName.java۞170۩return table;
smallsql/database/ExpressionName.java۞171۩}
smallsql/database/ExpressionName.java۞177۩final int getColumnIndex(){
smallsql/database/ExpressionName.java۞178۩return colIdx;
smallsql/database/ExpressionName.java۞179۩}
smallsql/database/ExpressionName.java۞182۩final Column getColumn(){
smallsql/database/ExpressionName.java۞183۩return column;
smallsql/database/ExpressionName.java۞184۩}
smallsql/database/ExpressionName.java۞187۩final public String toString(){
smallsql/database/ExpressionName.java۞188۩if(tableAlias == null) return String.valueOf(getAlias());
smallsql/database/ExpressionName.java۞189۩return tableAlias + "." + getAlias();
smallsql/database/ExpressionName.java۞190۩}
smallsql/database/ExpressionName.java۞199۩String getTableName(){
smallsql/database/ExpressionName.java۞200۩if(table != null){
smallsql/database/ExpressionName.java۞201۩return table.getName();
smallsql/database/ExpressionName.java۞202۩}
smallsql/database/ExpressionName.java۞203۩return null;
smallsql/database/ExpressionName.java۞204۩}
smallsql/database/ExpressionName.java۞206۩int getPrecision(){
smallsql/database/ExpressionName.java۞207۩return column.getPrecision();
smallsql/database/ExpressionName.java۞208۩}
smallsql/database/ExpressionName.java۞210۩int getScale(){
smallsql/database/ExpressionName.java۞211۩return column.getScale();
smallsql/database/ExpressionName.java۞212۩}
smallsql/database/ExpressionName.java۞214۩int getDisplaySize(){
smallsql/database/ExpressionName.java۞215۩return column.getDisplaySize();
smallsql/database/ExpressionName.java۞216۩}
smallsql/database/ExpressionName.java۞218۩boolean isAutoIncrement(){
smallsql/database/ExpressionName.java۞219۩return column.isAutoIncrement();
smallsql/database/ExpressionName.java۞220۩}
smallsql/database/ExpressionName.java۞222۩boolean isCaseSensitive(){
smallsql/database/ExpressionName.java۞223۩return column.isCaseSensitive();
smallsql/database/ExpressionName.java۞224۩}
smallsql/database/ExpressionName.java۞226۩boolean isNullable(){
smallsql/database/ExpressionName.java۞227۩return column.isNullable();
smallsql/database/ExpressionName.java۞228۩}
smallsql/database/ExpressionName.java۞230۩boolean isDefinitelyWritable(){
smallsql/database/ExpressionName.java۞231۩return true;
smallsql/database/ExpressionName.java۞232۩}
smallsql/database/ExpressionName.java۞234۩}
smallsql/database/ExpressionValue.java۞33۩package smallsql.database;
smallsql/database/ExpressionValue.java۞35۩import java.math.BigDecimal;
smallsql/database/ExpressionValue.java۞36۩import java.sql.*;
smallsql/database/ExpressionValue.java۞37۩import smallsql.database.language.Language;
smallsql/database/ExpressionValue.java۞39۩public class ExpressionValue extends Expression {
smallsql/database/ExpressionValue.java۞41۩private Object value;
smallsql/database/ExpressionValue.java۞42۩private int dataType;
smallsql/database/ExpressionValue.java۞43۩private int length;
smallsql/database/ExpressionValue.java۞48۩ExpressionValue(){
smallsql/database/ExpressionValue.java۞49۩super(VALUE);
smallsql/database/ExpressionValue.java۞50۩clear();
smallsql/database/ExpressionValue.java۞51۩}
smallsql/database/ExpressionValue.java۞56۩ExpressionValue(int type){
smallsql/database/ExpressionValue.java۞57۩super(type);
smallsql/database/ExpressionValue.java۞58۩switch(type){
smallsql/database/ExpressionValue.java۞59۩case GROUP_BY:
smallsql/database/ExpressionValue.java۞60۩case SUM:
smallsql/database/ExpressionValue.java۞61۩case FIRST:
smallsql/database/ExpressionValue.java۞62۩case LAST:
smallsql/database/ExpressionValue.java۞63۩clear();
smallsql/database/ExpressionValue.java۞64۩break;
smallsql/database/ExpressionValue.java۞65۩case MIN:
smallsql/database/ExpressionValue.java۞66۩case MAX:
smallsql/database/ExpressionValue.java۞68۩break;
smallsql/database/ExpressionValue.java۞69۩case COUNT:
smallsql/database/ExpressionValue.java۞70۩value = new MutableInteger(0);
smallsql/database/ExpressionValue.java۞71۩dataType = SQLTokenizer.INT;
smallsql/database/ExpressionValue.java۞72۩break;
smallsql/database/ExpressionValue.java۞73۩default: throw new Error();
smallsql/database/ExpressionValue.java۞74۩}
smallsql/database/ExpressionValue.java۞75۩}
smallsql/database/ExpressionValue.java۞81۩ExpressionValue(Object value, int dataType ){
smallsql/database/ExpressionValue.java۞82۩super(VALUE);
smallsql/database/ExpressionValue.java۞83۩this.value      = value;
smallsql/database/ExpressionValue.java۞84۩this.dataType   = dataType;
smallsql/database/ExpressionValue.java۞85۩}
smallsql/database/ExpressionValue.java۞91۩public boolean equals(Object expr){
smallsql/database/ExpressionValue.java۞92۩if(!super.equals(expr)) return false;
smallsql/database/ExpressionValue.java۞93۩if(!(expr instanceof ExpressionValue)) return false;
smallsql/database/ExpressionValue.java۞94۩Object v = ((ExpressionValue)expr).value;
smallsql/database/ExpressionValue.java۞95۩if(v == value) return true;
smallsql/database/ExpressionValue.java۞96۩if(value == null) return false;
smallsql/database/ExpressionValue.java۞97۩return value.equals(v);
smallsql/database/ExpressionValue.java۞98۩}
smallsql/database/ExpressionValue.java۞107۩void accumulate(Expression expr) throws Exception{
smallsql/database/ExpressionValue.java۞108۩int type = getType();
smallsql/database/ExpressionValue.java۞109۩if(type != GROUP_BY) expr = expr.getParams()[0];
smallsql/database/ExpressionValue.java۞110۩switch(type){
smallsql/database/ExpressionValue.java۞111۩case GROUP_BY:
smallsql/database/ExpressionValue.java۞112۩case FIRST:
smallsql/database/ExpressionValue.java۞113۩if(isEmpty()) set( expr.getObject(), expr.getDataType() );
smallsql/database/ExpressionValue.java۞114۩break;
smallsql/database/ExpressionValue.java۞115۩case LAST:
smallsql/database/ExpressionValue.java۞116۩set( expr.getObject(), expr.getDataType() );
smallsql/database/ExpressionValue.java۞117۩break;
smallsql/database/ExpressionValue.java۞118۩case COUNT:
smallsql/database/ExpressionValue.java۞119۩if(!expr.isNull()) ((MutableInteger)value).value++;
smallsql/database/ExpressionValue.java۞120۩break;
smallsql/database/ExpressionValue.java۞121۩case SUM:
smallsql/database/ExpressionValue.java۞122۩if(isEmpty()){
smallsql/database/ExpressionValue.java۞123۩initValue( expr );
smallsql/database/ExpressionValue.java۞124۩}else
smallsql/database/ExpressionValue.java۞125۩switch(dataType){
smallsql/database/ExpressionValue.java۞126۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionValue.java۞127۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionValue.java۞128۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞129۩((MutableInteger)value).value += expr.getInt();
smallsql/database/ExpressionValue.java۞130۩break;
smallsql/database/ExpressionValue.java۞131۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞132۩((MutableLong)value).value += expr.getLong();
smallsql/database/ExpressionValue.java۞133۩break;
smallsql/database/ExpressionValue.java۞134۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞135۩((MutableFloat)value).value += expr.getFloat();
smallsql/database/ExpressionValue.java۞136۩break;
smallsql/database/ExpressionValue.java۞137۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionValue.java۞138۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞139۩((MutableDouble)value).value += expr.getDouble();
smallsql/database/ExpressionValue.java۞140۩break;
smallsql/database/ExpressionValue.java۞141۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionValue.java۞142۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionValue.java۞143۩MutableNumeric newValue = expr.getNumeric();
smallsql/database/ExpressionValue.java۞144۩if(newValue != null)
smallsql/database/ExpressionValue.java۞145۩((MutableNumeric)value).add( newValue );
smallsql/database/ExpressionValue.java۞146۩break;
smallsql/database/ExpressionValue.java۞147۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞148۩((Money)value).value += expr.getMoney();
smallsql/database/ExpressionValue.java۞149۩break;
smallsql/database/ExpressionValue.java۞150۩default: throw SmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM, SQLTokenizer.getKeyWord(dataType));
smallsql/database/ExpressionValue.java۞151۩}
smallsql/database/ExpressionValue.java۞152۩break;
smallsql/database/ExpressionValue.java۞153۩case MAX:
smallsql/database/ExpressionValue.java۞154۩if(value == null){
smallsql/database/ExpressionValue.java۞155۩if(expr.isNull())
smallsql/database/ExpressionValue.java۞156۩dataType = expr.getDataType();
smallsql/database/ExpressionValue.java۞157۩else
smallsql/database/ExpressionValue.java۞158۩initValue( expr );
smallsql/database/ExpressionValue.java۞159۩}else if(!expr.isNull()){
smallsql/database/ExpressionValue.java۞160۩switch(dataType){
smallsql/database/ExpressionValue.java۞161۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionValue.java۞162۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionValue.java۞163۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞164۩((MutableInteger)value).value = Math.max( ((MutableInteger)value).value, expr.getInt());
smallsql/database/ExpressionValue.java۞165۩break;
smallsql/database/ExpressionValue.java۞166۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞167۩((MutableLong)value).value = Math.max( ((MutableLong)value).value, expr.getLong());
smallsql/database/ExpressionValue.java۞168۩break;
smallsql/database/ExpressionValue.java۞169۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞170۩((MutableFloat)value).value = Math.max( ((MutableFloat)value).value, expr.getFloat());
smallsql/database/ExpressionValue.java۞171۩break;
smallsql/database/ExpressionValue.java۞172۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionValue.java۞173۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞174۩((MutableDouble)value).value = Math.max( ((MutableDouble)value).value, expr.getDouble());
smallsql/database/ExpressionValue.java۞175۩break;
smallsql/database/ExpressionValue.java۞176۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionValue.java۞177۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionValue.java۞178۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/ExpressionValue.java۞179۩String str = expr.getString();
smallsql/database/ExpressionValue.java۞180۩if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) < 0)
smallsql/database/ExpressionValue.java۞181۩value = str;
smallsql/database/ExpressionValue.java۞182۩break;
smallsql/database/ExpressionValue.java۞183۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionValue.java۞184۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionValue.java۞185۩MutableNumeric newValue = expr.getNumeric();
smallsql/database/ExpressionValue.java۞186۩if(((MutableNumeric)value).compareTo( newValue ) < 0)
smallsql/database/ExpressionValue.java۞187۩value = newValue;
smallsql/database/ExpressionValue.java۞188۩break;
smallsql/database/ExpressionValue.java۞189۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞190۩((Money)value).value = Math.max( ((Money)value).value, expr.getMoney());
smallsql/database/ExpressionValue.java۞191۩break;
smallsql/database/ExpressionValue.java۞192۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionValue.java۞193۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionValue.java۞194۩case SQLTokenizer.DATE:
smallsql/database/ExpressionValue.java۞195۩case SQLTokenizer.TIME:
smallsql/database/ExpressionValue.java۞196۩((DateTime)value).time = Math.max( ((DateTime)value).time, expr.getLong());
smallsql/database/ExpressionValue.java۞197۩break;
smallsql/database/ExpressionValue.java۞198۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/ExpressionValue.java۞201۩String uuidStr = expr.getString();
smallsql/database/ExpressionValue.java۞202۩if (uuidStr.compareTo( (String)value) > 0) value = uuidStr;
smallsql/database/ExpressionValue.java۞203۩break;
smallsql/database/ExpressionValue.java۞204۩default:
smallsql/database/ExpressionValue.java۞205۩String keyword = SQLTokenizer.getKeyWord(dataType);
smallsql/database/ExpressionValue.java۞206۩throw SmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX, keyword);
smallsql/database/ExpressionValue.java۞207۩}
smallsql/database/ExpressionValue.java۞208۩}
smallsql/database/ExpressionValue.java۞209۩break;
smallsql/database/ExpressionValue.java۞210۩case MIN:
smallsql/database/ExpressionValue.java۞211۩if(value == null){
smallsql/database/ExpressionValue.java۞212۩if(expr.isNull())
smallsql/database/ExpressionValue.java۞213۩dataType = expr.getDataType();
smallsql/database/ExpressionValue.java۞214۩else
smallsql/database/ExpressionValue.java۞215۩initValue( expr );
smallsql/database/ExpressionValue.java۞216۩}else if(!expr.isNull()){
smallsql/database/ExpressionValue.java۞217۩switch(dataType){
smallsql/database/ExpressionValue.java۞218۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionValue.java۞219۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionValue.java۞220۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞221۩((MutableInteger)value).value = Math.min( ((MutableInteger)value).value, expr.getInt());
smallsql/database/ExpressionValue.java۞222۩break;
smallsql/database/ExpressionValue.java۞223۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞224۩((MutableLong)value).value = Math.min( ((MutableLong)value).value, expr.getLong());
smallsql/database/ExpressionValue.java۞225۩break;
smallsql/database/ExpressionValue.java۞226۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞227۩((MutableFloat)value).value = Math.min( ((MutableFloat)value).value, expr.getFloat());
smallsql/database/ExpressionValue.java۞228۩break;
smallsql/database/ExpressionValue.java۞229۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionValue.java۞230۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞231۩((MutableDouble)value).value = Math.min( ((MutableDouble)value).value, expr.getDouble());
smallsql/database/ExpressionValue.java۞232۩break;
smallsql/database/ExpressionValue.java۞233۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionValue.java۞234۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionValue.java۞235۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/ExpressionValue.java۞236۩String str = expr.getString();
smallsql/database/ExpressionValue.java۞237۩if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) > 0)
smallsql/database/ExpressionValue.java۞238۩value = str;
smallsql/database/ExpressionValue.java۞239۩break;
smallsql/database/ExpressionValue.java۞240۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionValue.java۞241۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionValue.java۞242۩MutableNumeric newValue = expr.getNumeric();
smallsql/database/ExpressionValue.java۞243۩if(((MutableNumeric)value).compareTo( newValue ) > 0)
smallsql/database/ExpressionValue.java۞244۩value = newValue;
smallsql/database/ExpressionValue.java۞245۩break;
smallsql/database/ExpressionValue.java۞246۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞247۩((Money)value).value = Math.min( ((Money)value).value, expr.getMoney());
smallsql/database/ExpressionValue.java۞248۩break;
smallsql/database/ExpressionValue.java۞249۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionValue.java۞250۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionValue.java۞251۩case SQLTokenizer.DATE:
smallsql/database/ExpressionValue.java۞252۩case SQLTokenizer.TIME:
smallsql/database/ExpressionValue.java۞253۩((DateTime)value).time = Math.min( ((DateTime)value).time, expr.getLong());
smallsql/database/ExpressionValue.java۞254۩break;
smallsql/database/ExpressionValue.java۞255۩default: throw new Error(""+dataType);
smallsql/database/ExpressionValue.java۞256۩}
smallsql/database/ExpressionValue.java۞257۩}
smallsql/database/ExpressionValue.java۞258۩break;
smallsql/database/ExpressionValue.java۞259۩default: throw new Error();
smallsql/database/ExpressionValue.java۞260۩}
smallsql/database/ExpressionValue.java۞261۩}
smallsql/database/ExpressionValue.java۞269۩private void initValue(Expression expr) throws Exception{
smallsql/database/ExpressionValue.java۞270۩dataType = expr.getDataType();
smallsql/database/ExpressionValue.java۞271۩switch(dataType){
smallsql/database/ExpressionValue.java۞272۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionValue.java۞273۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionValue.java۞274۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞275۩value = new MutableInteger(expr.getInt());
smallsql/database/ExpressionValue.java۞276۩break;
smallsql/database/ExpressionValue.java۞277۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞278۩value = new MutableLong(expr.getLong());
smallsql/database/ExpressionValue.java۞279۩break;
smallsql/database/ExpressionValue.java۞280۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞281۩value = new MutableFloat(expr.getFloat());
smallsql/database/ExpressionValue.java۞282۩break;
smallsql/database/ExpressionValue.java۞283۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionValue.java۞284۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞285۩value = new MutableDouble(expr.getDouble());
smallsql/database/ExpressionValue.java۞286۩break;
smallsql/database/ExpressionValue.java۞287۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionValue.java۞288۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞289۩value = Money.createFromUnscaledValue(expr.getMoney());
smallsql/database/ExpressionValue.java۞290۩break;
smallsql/database/ExpressionValue.java۞291۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionValue.java۞292۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionValue.java۞293۩value = new MutableNumeric(expr.getNumeric());
smallsql/database/ExpressionValue.java۞294۩break;
smallsql/database/ExpressionValue.java۞295۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionValue.java۞296۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionValue.java۞297۩case SQLTokenizer.DATE:
smallsql/database/ExpressionValue.java۞298۩case SQLTokenizer.TIME:
smallsql/database/ExpressionValue.java۞299۩value = new DateTime(expr.getLong(), dataType);
smallsql/database/ExpressionValue.java۞300۩break;
smallsql/database/ExpressionValue.java۞301۩default:
smallsql/database/ExpressionValue.java۞303۩value = expr.getObject();
smallsql/database/ExpressionValue.java۞304۩}
smallsql/database/ExpressionValue.java۞305۩}
smallsql/database/ExpressionValue.java۞309۩private static final Object EMPTY = new Object();
smallsql/database/ExpressionValue.java۞310۩final boolean isEmpty(){
smallsql/database/ExpressionValue.java۞311۩return value == EMPTY;
smallsql/database/ExpressionValue.java۞312۩}
smallsql/database/ExpressionValue.java۞314۩final void clear(){
smallsql/database/ExpressionValue.java۞315۩value = EMPTY;
smallsql/database/ExpressionValue.java۞316۩}
smallsql/database/ExpressionValue.java۞319۩final void set( Object value, int _dataType, int length ) throws SQLException{
smallsql/database/ExpressionValue.java۞320۩set( value, _dataType );
smallsql/database/ExpressionValue.java۞321۩this.length = length;
smallsql/database/ExpressionValue.java۞322۩}
smallsql/database/ExpressionValue.java۞332۩final void set( Object newValue, int newDataType ) throws SQLException{
smallsql/database/ExpressionValue.java۞333۩this.value      = newValue;
smallsql/database/ExpressionValue.java۞334۩this.dataType   = newDataType;
smallsql/database/ExpressionValue.java۞335۩if(dataType < 0){
smallsql/database/ExpressionValue.java۞336۩if(newValue == null)
smallsql/database/ExpressionValue.java۞337۩this.dataType = SQLTokenizer.NULL;
smallsql/database/ExpressionValue.java۞338۩else
smallsql/database/ExpressionValue.java۞339۩if(newValue instanceof String)
smallsql/database/ExpressionValue.java۞340۩this.dataType = SQLTokenizer.VARCHAR;
smallsql/database/ExpressionValue.java۞341۩else
smallsql/database/ExpressionValue.java۞342۩if(newValue instanceof Byte)
smallsql/database/ExpressionValue.java۞343۩this.dataType = SQLTokenizer.TINYINT;
smallsql/database/ExpressionValue.java۞344۩else
smallsql/database/ExpressionValue.java۞345۩if(newValue instanceof Short)
smallsql/database/ExpressionValue.java۞346۩this.dataType = SQLTokenizer.SMALLINT;
smallsql/database/ExpressionValue.java۞347۩else
smallsql/database/ExpressionValue.java۞348۩if(newValue instanceof Integer)
smallsql/database/ExpressionValue.java۞349۩this.dataType = SQLTokenizer.INT;
smallsql/database/ExpressionValue.java۞350۩else
smallsql/database/ExpressionValue.java۞351۩if(newValue instanceof Long || newValue instanceof Identity)
smallsql/database/ExpressionValue.java۞352۩this.dataType = SQLTokenizer.BIGINT;
smallsql/database/ExpressionValue.java۞353۩else
smallsql/database/ExpressionValue.java۞354۩if(newValue instanceof Float)
smallsql/database/ExpressionValue.java۞355۩this.dataType = SQLTokenizer.REAL;
smallsql/database/ExpressionValue.java۞356۩else
smallsql/database/ExpressionValue.java۞357۩if(newValue instanceof Double)
smallsql/database/ExpressionValue.java۞358۩this.dataType = SQLTokenizer.DOUBLE;
smallsql/database/ExpressionValue.java۞359۩else
smallsql/database/ExpressionValue.java۞360۩if(newValue instanceof Number)
smallsql/database/ExpressionValue.java۞361۩this.dataType = SQLTokenizer.DECIMAL;
smallsql/database/ExpressionValue.java۞362۩else
smallsql/database/ExpressionValue.java۞363۩if(newValue instanceof java.util.Date){
smallsql/database/ExpressionValue.java۞364۩DateTime dateTime;
smallsql/database/ExpressionValue.java۞365۩this.value = dateTime = DateTime.valueOf((java.util.Date)newValue);
smallsql/database/ExpressionValue.java۞366۩this.dataType = dateTime.getDataType();
smallsql/database/ExpressionValue.java۞367۩}else
smallsql/database/ExpressionValue.java۞368۩if(newValue instanceof byte[])
smallsql/database/ExpressionValue.java۞369۩this.dataType = SQLTokenizer.VARBINARY;
smallsql/database/ExpressionValue.java۞370۩else
smallsql/database/ExpressionValue.java۞371۩if(newValue instanceof Boolean)
smallsql/database/ExpressionValue.java۞372۩this.dataType = SQLTokenizer.BOOLEAN;
smallsql/database/ExpressionValue.java۞373۩else
smallsql/database/ExpressionValue.java۞374۩if(newValue instanceof Money)
smallsql/database/ExpressionValue.java۞375۩this.dataType = SQLTokenizer.MONEY;
smallsql/database/ExpressionValue.java۞376۩else
smallsql/database/ExpressionValue.java۞377۩throw SmallSQLException.create(Language.PARAM_CLASS_UNKNOWN, newValue.getClass().getName());
smallsql/database/ExpressionValue.java۞378۩}
smallsql/database/ExpressionValue.java۞379۩}
smallsql/database/ExpressionValue.java۞382۩final void set(ExpressionValue val){
smallsql/database/ExpressionValue.java۞383۩this.value 		= val.value;
smallsql/database/ExpressionValue.java۞384۩this.dataType	= val.dataType;
smallsql/database/ExpressionValue.java۞385۩this.length		= val.length;
smallsql/database/ExpressionValue.java۞386۩}
smallsql/database/ExpressionValue.java۞392۩boolean isNull(){
smallsql/database/ExpressionValue.java۞393۩return getObject() == null;
smallsql/database/ExpressionValue.java۞394۩}
smallsql/database/ExpressionValue.java۞396۩boolean getBoolean() throws Exception{
smallsql/database/ExpressionValue.java۞397۩return getBoolean( getObject(), dataType );
smallsql/database/ExpressionValue.java۞398۩}
smallsql/database/ExpressionValue.java۞400۩static boolean getBoolean(Object obj, int dataType) throws Exception{
smallsql/database/ExpressionValue.java۞401۩if(obj == null) return false;
smallsql/database/ExpressionValue.java۞402۩switch(dataType){
smallsql/database/ExpressionValue.java۞403۩case SQLTokenizer.BIT:
smallsql/database/ExpressionValue.java۞404۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionValue.java۞405۩return (obj.equals(Boolean.TRUE));
smallsql/database/ExpressionValue.java۞406۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionValue.java۞407۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionValue.java۞408۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞409۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞410۩return ((Number)obj).intValue() != 0;
smallsql/database/ExpressionValue.java۞411۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞412۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞413۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞414۩return ((Number)obj).doubleValue() != 0;
smallsql/database/ExpressionValue.java۞415۩default: return Utils.string2boolean( obj.toString() );
smallsql/database/ExpressionValue.java۞416۩}
smallsql/database/ExpressionValue.java۞417۩}
smallsql/database/ExpressionValue.java۞419۩int getInt() throws Exception{
smallsql/database/ExpressionValue.java۞420۩return getInt( getObject(), dataType );
smallsql/database/ExpressionValue.java۞421۩}
smallsql/database/ExpressionValue.java۞423۩static int getInt(Object obj, int dataType) throws Exception{
smallsql/database/ExpressionValue.java۞424۩if(obj == null) return 0;
smallsql/database/ExpressionValue.java۞425۩switch(dataType){
smallsql/database/ExpressionValue.java۞426۩case SQLTokenizer.BIT:
smallsql/database/ExpressionValue.java۞427۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionValue.java۞428۩return (obj == Boolean.TRUE) ? 1 : 0;
smallsql/database/ExpressionValue.java۞429۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionValue.java۞430۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionValue.java۞431۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞432۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞433۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞434۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionValue.java۞435۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞436۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞437۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionValue.java۞438۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionValue.java۞439۩return ((Number)obj).intValue();
smallsql/database/ExpressionValue.java۞440۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionValue.java۞441۩case SQLTokenizer.TIME:
smallsql/database/ExpressionValue.java۞442۩case SQLTokenizer.DATE:
smallsql/database/ExpressionValue.java۞443۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionValue.java۞444۩return (int)((DateTime)obj).getTimeMillis();
smallsql/database/ExpressionValue.java۞445۩default:
smallsql/database/ExpressionValue.java۞446۩String str = obj.toString().trim();
smallsql/database/ExpressionValue.java۞447۩try{
smallsql/database/ExpressionValue.java۞448۩return Integer.parseInt( str );
smallsql/database/ExpressionValue.java۞449۩}catch(Throwable th){}
smallsql/database/ExpressionValue.java۞450۩return (int)Double.parseDouble( str );
smallsql/database/ExpressionValue.java۞451۩}
smallsql/database/ExpressionValue.java۞452۩}
smallsql/database/ExpressionValue.java۞454۩long getLong() throws Exception{
smallsql/database/ExpressionValue.java۞455۩return getLong( getObject(), dataType);
smallsql/database/ExpressionValue.java۞456۩}
smallsql/database/ExpressionValue.java۞458۩static long getLong(Object obj, int dataType) throws Exception{
smallsql/database/ExpressionValue.java۞459۩if(obj == null) return 0;
smallsql/database/ExpressionValue.java۞460۩switch(dataType){
smallsql/database/ExpressionValue.java۞461۩case SQLTokenizer.BIT:
smallsql/database/ExpressionValue.java۞462۩case SQLTokenizer.BOOLEAN:
smallsql/database/ExpressionValue.java۞463۩return (obj == Boolean.TRUE) ? 1 : 0;
smallsql/database/ExpressionValue.java۞464۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionValue.java۞465۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionValue.java۞466۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞467۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞468۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞469۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞470۩return ((Number)obj).longValue();
smallsql/database/ExpressionValue.java۞471۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionValue.java۞472۩case SQLTokenizer.TIME:
smallsql/database/ExpressionValue.java۞473۩case SQLTokenizer.DATE:
smallsql/database/ExpressionValue.java۞474۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionValue.java۞475۩return ((DateTime)obj).getTimeMillis();
smallsql/database/ExpressionValue.java۞476۩default:
smallsql/database/ExpressionValue.java۞477۩String str = obj.toString();
smallsql/database/ExpressionValue.java۞478۩if(str.indexOf('-') > 0 || str.indexOf(':') > 0)
smallsql/database/ExpressionValue.java۞479۩return DateTime.parse(str);
smallsql/database/ExpressionValue.java۞480۩try{
smallsql/database/ExpressionValue.java۞481۩return Long.parseLong( str );
smallsql/database/ExpressionValue.java۞482۩}catch(NumberFormatException e){
smallsql/database/ExpressionValue.java۞483۩return (long)Double.parseDouble( str );
smallsql/database/ExpressionValue.java۞484۩}
smallsql/database/ExpressionValue.java۞485۩}
smallsql/database/ExpressionValue.java۞486۩}
smallsql/database/ExpressionValue.java۞488۩float getFloat() throws Exception{
smallsql/database/ExpressionValue.java۞489۩return getFloat( getObject(), dataType);
smallsql/database/ExpressionValue.java۞490۩}
smallsql/database/ExpressionValue.java۞492۩static float getFloat(Object obj, int dataType) throws Exception{
smallsql/database/ExpressionValue.java۞493۩if(obj == null) return 0;
smallsql/database/ExpressionValue.java۞494۩switch(dataType){
smallsql/database/ExpressionValue.java۞495۩case SQLTokenizer.BIT:
smallsql/database/ExpressionValue.java۞496۩return (obj.equals(Boolean.TRUE)) ? 1 : 0;
smallsql/database/ExpressionValue.java۞497۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞498۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞499۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞500۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionValue.java۞501۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞502۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞503۩return ((Number)obj).floatValue();
smallsql/database/ExpressionValue.java۞504۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionValue.java۞505۩case SQLTokenizer.TIME:
smallsql/database/ExpressionValue.java۞506۩case SQLTokenizer.DATE:
smallsql/database/ExpressionValue.java۞507۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionValue.java۞508۩return ((DateTime)obj).getTimeMillis();
smallsql/database/ExpressionValue.java۞509۩default: return Float.parseFloat( obj.toString() );
smallsql/database/ExpressionValue.java۞510۩}
smallsql/database/ExpressionValue.java۞511۩}
smallsql/database/ExpressionValue.java۞513۩double getDouble() throws Exception{
smallsql/database/ExpressionValue.java۞514۩return getDouble( getObject(), dataType);
smallsql/database/ExpressionValue.java۞515۩}
smallsql/database/ExpressionValue.java۞517۩static double getDouble(Object obj, int dataType) throws Exception{
smallsql/database/ExpressionValue.java۞518۩if(obj == null) return 0;
smallsql/database/ExpressionValue.java۞519۩switch(dataType){
smallsql/database/ExpressionValue.java۞520۩case SQLTokenizer.BIT:
smallsql/database/ExpressionValue.java۞521۩return (obj.equals(Boolean.TRUE)) ? 1 : 0;
smallsql/database/ExpressionValue.java۞522۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞523۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞524۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞525۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞526۩return ((Number)obj).doubleValue();
smallsql/database/ExpressionValue.java۞527۩case SQLTokenizer.TIMESTAMP:
smallsql/database/ExpressionValue.java۞528۩case SQLTokenizer.TIME:
smallsql/database/ExpressionValue.java۞529۩case SQLTokenizer.DATE:
smallsql/database/ExpressionValue.java۞530۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/ExpressionValue.java۞531۩return ((DateTime)obj).getTimeMillis();
smallsql/database/ExpressionValue.java۞532۩default: return Double.parseDouble( obj.toString() );
smallsql/database/ExpressionValue.java۞533۩}
smallsql/database/ExpressionValue.java۞534۩}
smallsql/database/ExpressionValue.java۞537۩long getMoney() throws Exception{
smallsql/database/ExpressionValue.java۞538۩return getMoney( getObject(), dataType );
smallsql/database/ExpressionValue.java۞539۩}
smallsql/database/ExpressionValue.java۞542۩static long getMoney(Object obj, int dataType) throws Exception{
smallsql/database/ExpressionValue.java۞543۩if(obj == null) return 0;
smallsql/database/ExpressionValue.java۞544۩switch(dataType){
smallsql/database/ExpressionValue.java۞545۩case SQLTokenizer.BIT:
smallsql/database/ExpressionValue.java۞546۩return (obj == Boolean.TRUE) ? 10000 : 0;
smallsql/database/ExpressionValue.java۞547۩case SQLTokenizer.TINYINT:
smallsql/database/ExpressionValue.java۞548۩case SQLTokenizer.SMALLINT:
smallsql/database/ExpressionValue.java۞549۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞550۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞551۩return ((Number)obj).longValue() * 10000;
smallsql/database/ExpressionValue.java۞552۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞553۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionValue.java۞554۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞555۩return Utils.doubleToMoney(((Number)obj).doubleValue());
smallsql/database/ExpressionValue.java۞556۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞557۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionValue.java۞558۩return ((Money)obj).value;
smallsql/database/ExpressionValue.java۞559۩default: return Money.parseMoney( obj.toString() );
smallsql/database/ExpressionValue.java۞560۩}
smallsql/database/ExpressionValue.java۞561۩}
smallsql/database/ExpressionValue.java۞564۩MutableNumeric getNumeric(){
smallsql/database/ExpressionValue.java۞565۩return getNumeric( getObject(), dataType );
smallsql/database/ExpressionValue.java۞566۩}
smallsql/database/ExpressionValue.java۞569۩static MutableNumeric getNumeric(Object obj, int dataType){
smallsql/database/ExpressionValue.java۞570۩if(obj == null) return null;
smallsql/database/ExpressionValue.java۞571۩switch(dataType){
smallsql/database/ExpressionValue.java۞572۩case SQLTokenizer.BIT:
smallsql/database/ExpressionValue.java۞573۩return new MutableNumeric( (obj == Boolean.TRUE) ? 1 : 0);
smallsql/database/ExpressionValue.java۞574۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞575۩return new MutableNumeric( ((Number)obj).intValue() );
smallsql/database/ExpressionValue.java۞576۩case SQLTokenizer.BIGINT:
smallsql/database/ExpressionValue.java۞577۩return new MutableNumeric( ((Number)obj).longValue() );
smallsql/database/ExpressionValue.java۞578۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞579۩float fValue = ((Number)obj).floatValue();
smallsql/database/ExpressionValue.java۞580۩if(Float.isInfinite(fValue) || Float.isNaN(fValue))
smallsql/database/ExpressionValue.java۞581۩return null;
smallsql/database/ExpressionValue.java۞582۩return new MutableNumeric( fValue );
smallsql/database/ExpressionValue.java۞583۩case SQLTokenizer.FLOAT:
smallsql/database/ExpressionValue.java۞584۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞585۩double dValue = ((Number)obj).doubleValue();
smallsql/database/ExpressionValue.java۞586۩if(Double.isInfinite(dValue) || Double.isNaN(dValue))
smallsql/database/ExpressionValue.java۞587۩return null;
smallsql/database/ExpressionValue.java۞588۩return new MutableNumeric( dValue );
smallsql/database/ExpressionValue.java۞589۩case SQLTokenizer.MONEY:
smallsql/database/ExpressionValue.java۞590۩case SQLTokenizer.SMALLMONEY:
smallsql/database/ExpressionValue.java۞591۩return new MutableNumeric( ((Money)obj).value, 4 );
smallsql/database/ExpressionValue.java۞592۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionValue.java۞593۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionValue.java۞594۩if(obj instanceof MutableNumeric)
smallsql/database/ExpressionValue.java۞595۩return (MutableNumeric)obj;
smallsql/database/ExpressionValue.java۞596۩return new MutableNumeric( (BigDecimal)obj );
smallsql/database/ExpressionValue.java۞597۩default: return new MutableNumeric( obj.toString() );
smallsql/database/ExpressionValue.java۞598۩}
smallsql/database/ExpressionValue.java۞599۩}
smallsql/database/ExpressionValue.java۞602۩Object getObject(){
smallsql/database/ExpressionValue.java۞603۩if(isEmpty()){
smallsql/database/ExpressionValue.java۞604۩return null;
smallsql/database/ExpressionValue.java۞605۩}
smallsql/database/ExpressionValue.java۞606۩return value;
smallsql/database/ExpressionValue.java۞607۩}
smallsql/database/ExpressionValue.java۞609۩String getString(){
smallsql/database/ExpressionValue.java۞610۩Object obj = getObject();
smallsql/database/ExpressionValue.java۞611۩if(obj == null) return null;
smallsql/database/ExpressionValue.java۞612۩if(dataType == SQLTokenizer.BIT){
smallsql/database/ExpressionValue.java۞613۩return (obj == Boolean.TRUE) ? "1" : "0";
smallsql/database/ExpressionValue.java۞614۩}
smallsql/database/ExpressionValue.java۞615۩return obj.toString();
smallsql/database/ExpressionValue.java۞616۩}
smallsql/database/ExpressionValue.java۞618۩byte[] getBytes() throws Exception{
smallsql/database/ExpressionValue.java۞619۩return getBytes( getObject(), dataType);
smallsql/database/ExpressionValue.java۞620۩}
smallsql/database/ExpressionValue.java۞623۩static byte[] getBytes(Object obj, int dataType) throws Exception{
smallsql/database/ExpressionValue.java۞624۩if(obj == null) return null;
smallsql/database/ExpressionValue.java۞625۩switch(dataType){
smallsql/database/ExpressionValue.java۞626۩case SQLTokenizer.BINARY:
smallsql/database/ExpressionValue.java۞627۩case SQLTokenizer.VARBINARY:
smallsql/database/ExpressionValue.java۞628۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/ExpressionValue.java۞629۩return (byte[])obj;
smallsql/database/ExpressionValue.java۞630۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionValue.java۞631۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionValue.java۞632۩case SQLTokenizer.NVARCHAR:
smallsql/database/ExpressionValue.java۞633۩case SQLTokenizer.NCHAR:
smallsql/database/ExpressionValue.java۞634۩return ((String)obj).getBytes();
smallsql/database/ExpressionValue.java۞635۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/ExpressionValue.java۞636۩return Utils.unique2bytes((String)obj);
smallsql/database/ExpressionValue.java۞637۩case SQLTokenizer.INT:
smallsql/database/ExpressionValue.java۞638۩return Utils.int2bytes( ((Number)obj).intValue() );
smallsql/database/ExpressionValue.java۞639۩case SQLTokenizer.DOUBLE:
smallsql/database/ExpressionValue.java۞640۩return Utils.double2bytes( ((Number)obj).doubleValue() );
smallsql/database/ExpressionValue.java۞641۩case SQLTokenizer.REAL:
smallsql/database/ExpressionValue.java۞642۩return Utils.float2bytes( ((Number)obj).floatValue() );
smallsql/database/ExpressionValue.java۞643۩default: throw createUnsupportedConversion(dataType, obj, SQLTokenizer.VARBINARY);
smallsql/database/ExpressionValue.java۞644۩}
smallsql/database/ExpressionValue.java۞645۩}
smallsql/database/ExpressionValue.java۞649۩final int getDataType(){
smallsql/database/ExpressionValue.java۞650۩return dataType;
smallsql/database/ExpressionValue.java۞651۩}
smallsql/database/ExpressionValue.java۞659۩String getTableName(){
smallsql/database/ExpressionValue.java۞660۩return null;
smallsql/database/ExpressionValue.java۞661۩}
smallsql/database/ExpressionValue.java۞663۩final int getPrecision(){
smallsql/database/ExpressionValue.java۞664۩switch(dataType){
smallsql/database/ExpressionValue.java۞665۩case SQLTokenizer.VARCHAR:
smallsql/database/ExpressionValue.java۞666۩case SQLTokenizer.CHAR:
smallsql/database/ExpressionValue.java۞667۩return ((String)value).length();
smallsql/database/ExpressionValue.java۞668۩case SQLTokenizer.VARBINARY:
smallsql/database/ExpressionValue.java۞669۩case SQLTokenizer.BINARY:
smallsql/database/ExpressionValue.java۞670۩return ((byte[])value).length;
smallsql/database/ExpressionValue.java۞671۩default:
smallsql/database/ExpressionValue.java۞672۩return super.getPrecision();
smallsql/database/ExpressionValue.java۞673۩}
smallsql/database/ExpressionValue.java۞674۩}
smallsql/database/ExpressionValue.java۞677۩int getScale(){
smallsql/database/ExpressionValue.java۞678۩switch(dataType){
smallsql/database/ExpressionValue.java۞679۩case SQLTokenizer.DECIMAL:
smallsql/database/ExpressionValue.java۞680۩case SQLTokenizer.NUMERIC:
smallsql/database/ExpressionValue.java۞681۩MutableNumeric obj = getNumeric();
smallsql/database/ExpressionValue.java۞682۩return (obj == null) ? 0: obj.getScale();
smallsql/database/ExpressionValue.java۞683۩default:
smallsql/database/ExpressionValue.java۞684۩return getScale(dataType);
smallsql/database/ExpressionValue.java۞685۩}
smallsql/database/ExpressionValue.java۞686۩}
smallsql/database/ExpressionValue.java۞689۩static SQLException createUnsupportedConversion( int fromDataType, Object obj, int toDataType ){
smallsql/database/ExpressionValue.java۞690۩Object[] params = {
smallsql/database/ExpressionValue.java۞691۩SQLTokenizer.getKeyWord(fromDataType),
smallsql/database/ExpressionValue.java۞692۩obj,
smallsql/database/ExpressionValue.java۞693۩SQLTokenizer.getKeyWord(toDataType)
smallsql/database/ExpressionValue.java۞694۩};
smallsql/database/ExpressionValue.java۞696۩return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION, params);
smallsql/database/ExpressionValue.java۞697۩}
smallsql/database/ExpressionValue.java۞700۩}
smallsql/database/Expressions.java۞33۩package smallsql.database;
smallsql/database/Expressions.java۞39۩final class Expressions {
smallsql/database/Expressions.java۞40۩private int size;
smallsql/database/Expressions.java۞41۩private Expression[] data;
smallsql/database/Expressions.java۞43۩Expressions(){
smallsql/database/Expressions.java۞44۩data = new Expression[16];
smallsql/database/Expressions.java۞45۩}
smallsql/database/Expressions.java۞47۩Expressions(int initSize){
smallsql/database/Expressions.java۞48۩data = new Expression[initSize];
smallsql/database/Expressions.java۞49۩}
smallsql/database/Expressions.java۞52۩final int size(){
smallsql/database/Expressions.java۞53۩return size;
smallsql/database/Expressions.java۞54۩}
smallsql/database/Expressions.java۞57۩final void setSize(int newSize){
smallsql/database/Expressions.java۞58۩for(int i=newSize; i<size; i++) data[i] = null;
smallsql/database/Expressions.java۞59۩size = newSize;
smallsql/database/Expressions.java۞60۩if(size>data.length) resize(newSize);
smallsql/database/Expressions.java۞61۩}
smallsql/database/Expressions.java۞64۩final Expression get(int idx){
smallsql/database/Expressions.java۞65۩if (idx >= size)
smallsql/database/Expressions.java۞66۩throw new IndexOutOfBoundsException("Index: "+idx+", Size: "+size);
smallsql/database/Expressions.java۞67۩return data[idx];
smallsql/database/Expressions.java۞68۩}
smallsql/database/Expressions.java۞71۩final void add(Expression expr){
smallsql/database/Expressions.java۞72۩if(size >= data.length ){
smallsql/database/Expressions.java۞73۩resize(size << 1);
smallsql/database/Expressions.java۞74۩}
smallsql/database/Expressions.java۞75۩data[size++] = expr;
smallsql/database/Expressions.java۞76۩}
smallsql/database/Expressions.java۞78۩final void add(int idx, Expression expr){
smallsql/database/Expressions.java۞79۩if(size >= data.length ){
smallsql/database/Expressions.java۞80۩resize(size << 1);
smallsql/database/Expressions.java۞81۩}
smallsql/database/Expressions.java۞82۩System.arraycopy( data, idx, data, idx+1, (size++)-idx);
smallsql/database/Expressions.java۞83۩data[idx] = expr;
smallsql/database/Expressions.java۞84۩}
smallsql/database/Expressions.java۞86۩final void addAll(Expressions cols){
smallsql/database/Expressions.java۞87۩int count = cols.size();
smallsql/database/Expressions.java۞88۩if(size + count >= data.length ){
smallsql/database/Expressions.java۞89۩resize(size + count);
smallsql/database/Expressions.java۞90۩}
smallsql/database/Expressions.java۞91۩System.arraycopy( cols.data, 0, data, size, count);
smallsql/database/Expressions.java۞92۩size += count;
smallsql/database/Expressions.java۞93۩}
smallsql/database/Expressions.java۞95۩final void clear(){
smallsql/database/Expressions.java۞96۩size = 0;
smallsql/database/Expressions.java۞97۩}
smallsql/database/Expressions.java۞99۩final void remove(int idx){
smallsql/database/Expressions.java۞100۩System.arraycopy( data, idx+1, data, idx, (--size)-idx);
smallsql/database/Expressions.java۞101۩}
smallsql/database/Expressions.java۞103۩final void set(int idx, Expression expr){
smallsql/database/Expressions.java۞104۩data[idx] = expr;
smallsql/database/Expressions.java۞105۩}
smallsql/database/Expressions.java۞107۩final int indexOf(Expression expr) {
smallsql/database/Expressions.java۞108۩if (expr == null) {
smallsql/database/Expressions.java۞109۩for (int i = 0; i < size; i++)
smallsql/database/Expressions.java۞110۩if (data[i]==null)
smallsql/database/Expressions.java۞111۩return i;
smallsql/database/Expressions.java۞112۩} else {
smallsql/database/Expressions.java۞113۩for (int i = 0; i < size; i++)
smallsql/database/Expressions.java۞114۩if (expr.equals(data[i]))
smallsql/database/Expressions.java۞115۩return i;
smallsql/database/Expressions.java۞116۩}
smallsql/database/Expressions.java۞117۩return -1;
smallsql/database/Expressions.java۞118۩}
smallsql/database/Expressions.java۞120۩final void toArray(Expression[] array){
smallsql/database/Expressions.java۞121۩System.arraycopy( data, 0, array, 0, size);
smallsql/database/Expressions.java۞122۩}
smallsql/database/Expressions.java۞124۩final Expression[] toArray(){
smallsql/database/Expressions.java۞125۩Expression[] array = new Expression[size];
smallsql/database/Expressions.java۞126۩System.arraycopy( data, 0, array, 0, size);
smallsql/database/Expressions.java۞127۩return array;
smallsql/database/Expressions.java۞128۩}
smallsql/database/Expressions.java۞130۩private final void resize(int newSize){
smallsql/database/Expressions.java۞131۩Expression[] dataNew = new Expression[newSize];
smallsql/database/Expressions.java۞132۩System.arraycopy(data, 0, dataNew, 0, size);
smallsql/database/Expressions.java۞133۩data = dataNew;
smallsql/database/Expressions.java۞134۩}
smallsql/database/Expressions.java۞135۩}
smallsql/database/FileIndex.java۞34۩package smallsql.database;
smallsql/database/FileIndex.java۞36۩import java.io.*;
smallsql/database/FileIndex.java۞37۩import java.nio.ByteBuffer;
smallsql/database/FileIndex.java۞38۩import java.nio.channels.FileChannel;
smallsql/database/FileIndex.java۞44۩class FileIndex extends Index {
smallsql/database/FileIndex.java۞67۩static void print(Index index, Expressions expressions){
smallsql/database/FileIndex.java۞68۩IndexScrollStatus scroll = index.createScrollStatus(expressions);
smallsql/database/FileIndex.java۞69۩long l;
smallsql/database/FileIndex.java۞70۩while((l= scroll.getRowOffset(true)) >=0){
smallsql/database/FileIndex.java۞71۩System.out.println(l);
smallsql/database/FileIndex.java۞72۩}
smallsql/database/FileIndex.java۞73۩System.out.println("============================");
smallsql/database/FileIndex.java۞74۩}
smallsql/database/FileIndex.java۞77۩private final FileChannel raFile;
smallsql/database/FileIndex.java۞80۩FileIndex( boolean unique, FileChannel raFile ) {
smallsql/database/FileIndex.java۞81۩this(new FileIndexNode( unique, (char)-1, raFile), raFile);
smallsql/database/FileIndex.java۞82۩}
smallsql/database/FileIndex.java۞85۩FileIndex( FileIndexNode root, FileChannel raFile ) {
smallsql/database/FileIndex.java۞86۩super(root);
smallsql/database/FileIndex.java۞87۩this.raFile = raFile;
smallsql/database/FileIndex.java۞88۩}
smallsql/database/FileIndex.java۞91۩static FileIndex load( FileChannel raFile ) throws Exception{
smallsql/database/FileIndex.java۞92۩ByteBuffer buffer = ByteBuffer.allocate(1);
smallsql/database/FileIndex.java۞93۩raFile.read(buffer);
smallsql/database/FileIndex.java۞94۩buffer.position(0);
smallsql/database/FileIndex.java۞95۩boolean unique = buffer.get() != 0;
smallsql/database/FileIndex.java۞96۩FileIndexNode root = FileIndexNode.loadRootNode( unique, raFile, raFile.position() );
smallsql/database/FileIndex.java۞97۩return new FileIndex( root, raFile );
smallsql/database/FileIndex.java۞98۩}
smallsql/database/FileIndex.java۞101۩void save() throws Exception{
smallsql/database/FileIndex.java۞102۩ByteBuffer buffer = ByteBuffer.allocate(1);
smallsql/database/FileIndex.java۞103۩buffer.put(rootPage.getUnique() ? (byte)1 : (byte)0 );
smallsql/database/FileIndex.java۞104۩buffer.position(0);
smallsql/database/FileIndex.java۞105۩raFile.write( buffer );
smallsql/database/FileIndex.java۞106۩((FileIndexNode)rootPage).save();
smallsql/database/FileIndex.java۞107۩}
smallsql/database/FileIndex.java۞110۩void close() throws IOException{
smallsql/database/FileIndex.java۞111۩raFile.close();
smallsql/database/FileIndex.java۞112۩}
smallsql/database/FileIndex.java۞114۩}
smallsql/database/FileIndexNode.java۞33۩package smallsql.database;
smallsql/database/FileIndexNode.java۞35۩import java.io.*;
smallsql/database/FileIndexNode.java۞36۩import java.nio.channels.FileChannel;
smallsql/database/FileIndexNode.java۞37۩import java.sql.SQLException;
smallsql/database/FileIndexNode.java۞42۩public class FileIndexNode extends IndexNode {
smallsql/database/FileIndexNode.java۞44۩private final FileChannel file;
smallsql/database/FileIndexNode.java۞45۩private long fileOffset;
smallsql/database/FileIndexNode.java۞52۩FileIndexNode(boolean unique, char digit, FileChannel file){
smallsql/database/FileIndexNode.java۞53۩super(unique, digit);
smallsql/database/FileIndexNode.java۞54۩this.file = file;
smallsql/database/FileIndexNode.java۞55۩fileOffset = -1;
smallsql/database/FileIndexNode.java۞56۩}
smallsql/database/FileIndexNode.java۞59۩@Override
smallsql/database/FileIndexNode.java۞60۩protected IndexNode createIndexNode(boolean unique, char digit){
smallsql/database/FileIndexNode.java۞61۩return new FileIndexNode(unique, digit, file);
smallsql/database/FileIndexNode.java۞62۩}
smallsql/database/FileIndexNode.java۞65۩void save() throws SQLException{
smallsql/database/FileIndexNode.java۞66۩StorePage storePage = new StorePage( null, -1, file, fileOffset);
smallsql/database/FileIndexNode.java۞67۩StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);
smallsql/database/FileIndexNode.java۞68۩save(store);
smallsql/database/FileIndexNode.java۞69۩fileOffset = store.writeFinsh(null);
smallsql/database/FileIndexNode.java۞70۩}
smallsql/database/FileIndexNode.java۞72۩@Override
smallsql/database/FileIndexNode.java۞73۩void saveRef(StoreImpl output) throws SQLException{
smallsql/database/FileIndexNode.java۞74۩if(fileOffset < 0){
smallsql/database/FileIndexNode.java۞75۩save();
smallsql/database/FileIndexNode.java۞76۩}
smallsql/database/FileIndexNode.java۞77۩output.writeLong(fileOffset);
smallsql/database/FileIndexNode.java۞78۩}
smallsql/database/FileIndexNode.java۞80۩@Override
smallsql/database/FileIndexNode.java۞81۩IndexNode loadRef( long offset ) throws SQLException{
smallsql/database/FileIndexNode.java۞82۩StorePage storePage = new StorePage( null, -1, file, offset);
smallsql/database/FileIndexNode.java۞83۩StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);
smallsql/database/FileIndexNode.java۞84۩MemoryStream input = new MemoryStream();
smallsql/database/FileIndexNode.java۞85۩FileIndexNode node = new FileIndexNode( getUnique(), (char)input.readShort(), file );
smallsql/database/FileIndexNode.java۞86۩node.fileOffset = offset;
smallsql/database/FileIndexNode.java۞87۩node.load( store );
smallsql/database/FileIndexNode.java۞88۩return node;
smallsql/database/FileIndexNode.java۞89۩}
smallsql/database/FileIndexNode.java۞91۩static FileIndexNode loadRootNode(boolean unique, FileChannel file, long offset) throws Exception{
smallsql/database/FileIndexNode.java۞92۩StorePage storePage = new StorePage( null, -1, file, offset);
smallsql/database/FileIndexNode.java۞93۩StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);
smallsql/database/FileIndexNode.java۞94۩FileIndexNode node = new FileIndexNode( unique, (char)store.readShort(), file );
smallsql/database/FileIndexNode.java۞95۩node.fileOffset = offset;
smallsql/database/FileIndexNode.java۞96۩node.load( store );
smallsql/database/FileIndexNode.java۞97۩return node;
smallsql/database/FileIndexNode.java۞98۩}
smallsql/database/FileIndexNode.java۞99۩}
smallsql/database/ForeignKey.java۞34۩package smallsql.database;
smallsql/database/ForeignKey.java۞36۩import java.sql.*;
smallsql/database/ForeignKey.java۞38۩class ForeignKey {
smallsql/database/ForeignKey.java۞40۩final String pkTable;
smallsql/database/ForeignKey.java۞41۩final String fkTable;
smallsql/database/ForeignKey.java۞42۩final IndexDescription pk;
smallsql/database/ForeignKey.java۞43۩final IndexDescription fk;
smallsql/database/ForeignKey.java۞44۩final int updateRule = DatabaseMetaData.importedKeyNoAction;
smallsql/database/ForeignKey.java۞45۩final int deleteRule = DatabaseMetaData.importedKeyNoAction;
smallsql/database/ForeignKey.java۞48۩ForeignKey(String pkTable, IndexDescription pk, String fkTable, IndexDescription fk){
smallsql/database/ForeignKey.java۞49۩this.pkTable = pkTable;
smallsql/database/ForeignKey.java۞50۩this.fkTable = fkTable;
smallsql/database/ForeignKey.java۞51۩this.pk = pk;
smallsql/database/ForeignKey.java۞52۩this.fk = fk;
smallsql/database/ForeignKey.java۞53۩}
smallsql/database/ForeignKey.java۞54۩}
smallsql/database/ForeignKeys.java۞34۩package smallsql.database;
smallsql/database/ForeignKeys.java۞41۩class ForeignKeys {
smallsql/database/ForeignKeys.java۞42۩private int size;
smallsql/database/ForeignKeys.java۞43۩private ForeignKey[] data;
smallsql/database/ForeignKeys.java۞46۩ForeignKeys(){
smallsql/database/ForeignKeys.java۞47۩data = new ForeignKey[16];
smallsql/database/ForeignKeys.java۞48۩}
smallsql/database/ForeignKeys.java۞51۩final int size(){
smallsql/database/ForeignKeys.java۞52۩return size;
smallsql/database/ForeignKeys.java۞53۩}
smallsql/database/ForeignKeys.java۞56۩final ForeignKey get(int idx){
smallsql/database/ForeignKeys.java۞57۩if (idx >= size)
smallsql/database/ForeignKeys.java۞58۩throw new IndexOutOfBoundsException("Column index: "+idx+", Size: "+size);
smallsql/database/ForeignKeys.java۞59۩return data[idx];
smallsql/database/ForeignKeys.java۞60۩}
smallsql/database/ForeignKeys.java۞63۩final void add(ForeignKey foreignKey){
smallsql/database/ForeignKeys.java۞64۩if(size >= data.length ){
smallsql/database/ForeignKeys.java۞65۩resize(size << 1);
smallsql/database/ForeignKeys.java۞66۩}
smallsql/database/ForeignKeys.java۞67۩data[size++] = foreignKey;
smallsql/database/ForeignKeys.java۞68۩}
smallsql/database/ForeignKeys.java۞71۩private final void resize(int newSize){
smallsql/database/ForeignKeys.java۞72۩ForeignKey[] dataNew = new ForeignKey[newSize];
smallsql/database/ForeignKeys.java۞73۩System.arraycopy(data, 0, dataNew, 0, size);
smallsql/database/ForeignKeys.java۞74۩data = dataNew;
smallsql/database/ForeignKeys.java۞75۩}
smallsql/database/ForeignKeys.java۞76۩}
smallsql/database/GroupResult.java۞33۩package smallsql.database;
smallsql/database/GroupResult.java۞35۩import java.sql.*;
smallsql/database/GroupResult.java۞36۩import smallsql.database.language.Language;
smallsql/database/GroupResult.java۞42۩class GroupResult extends MemoryResult{
smallsql/database/GroupResult.java۞44۩private Expression currentGroup;
smallsql/database/GroupResult.java۞45۩private RowSource from;
smallsql/database/GroupResult.java۞46۩private Expressions groupBy;
smallsql/database/GroupResult.java۞47۩private Expressions expressions = new Expressions();
smallsql/database/GroupResult.java۞48۩private Expressions internalExpressions = new Expressions();
smallsql/database/GroupResult.java۞53۩GroupResult(CommandSelect cmd, RowSource from, Expressions groupBy, Expression having, Expressions orderBy) throws SQLException{
smallsql/database/GroupResult.java۞54۩this.from = from;
smallsql/database/GroupResult.java۞55۩this.groupBy = groupBy;
smallsql/database/GroupResult.java۞57۩if(groupBy != null){
smallsql/database/GroupResult.java۞58۩for(int i=0; i<groupBy.size(); i++){
smallsql/database/GroupResult.java۞59۩Expression left = groupBy.get(i);
smallsql/database/GroupResult.java۞60۩int idx = addInternalExpressionFromGroupBy( left );
smallsql/database/GroupResult.java۞61۩ExpressionName right = new ExpressionName(null);
smallsql/database/GroupResult.java۞62۩right.setFrom(this, idx, new ColumnExpression(left));
smallsql/database/GroupResult.java۞63۩Expression expr = new ExpressionArithmetic( left, right, ExpressionArithmetic.EQUALS_NULL);
smallsql/database/GroupResult.java۞64۩currentGroup = (currentGroup == null) ?
smallsql/database/GroupResult.java۞65۩expr :
smallsql/database/GroupResult.java۞66۩new ExpressionArithmetic( currentGroup, expr, ExpressionArithmetic.AND );
smallsql/database/GroupResult.java۞67۩}
smallsql/database/GroupResult.java۞68۩}
smallsql/database/GroupResult.java۞69۩expressions = internalExpressions;
smallsql/database/GroupResult.java۞70۩for(int c=0; c<expressions.size(); c++){
smallsql/database/GroupResult.java۞71۩addColumn(new ColumnExpression(expressions.get(c)));
smallsql/database/GroupResult.java۞72۩}
smallsql/database/GroupResult.java۞74۩patchExpressions( cmd.columnExpressions );
smallsql/database/GroupResult.java۞75۩if(having != null) having = patchExpression( having );
smallsql/database/GroupResult.java۞76۩patchExpressions( orderBy );
smallsql/database/GroupResult.java۞77۩}
smallsql/database/GroupResult.java۞85۩final private int addInternalExpressionFromGroupBy(Expression expr) throws SQLException{
smallsql/database/GroupResult.java۞86۩int type = expr.getType();
smallsql/database/GroupResult.java۞87۩if(type >= Expression.GROUP_BEGIN){
smallsql/database/GroupResult.java۞88۩throw SmallSQLException.create(Language.GROUP_AGGR_INVALID, expr);
smallsql/database/GroupResult.java۞89۩}else{
smallsql/database/GroupResult.java۞90۩int idx = internalExpressions.indexOf(expr);
smallsql/database/GroupResult.java۞91۩if(idx >= 0) return idx;
smallsql/database/GroupResult.java۞92۩internalExpressions.add(expr);
smallsql/database/GroupResult.java۞93۩return internalExpressions.size()-1;
smallsql/database/GroupResult.java۞94۩}
smallsql/database/GroupResult.java۞95۩}
smallsql/database/GroupResult.java۞104۩final private int addInternalExpressionFromSelect(Expression expr) throws SQLException{
smallsql/database/GroupResult.java۞105۩int type = expr.getType();
smallsql/database/GroupResult.java۞106۩if(type == Expression.NAME){
smallsql/database/GroupResult.java۞107۩int idx = internalExpressions.indexOf(expr);
smallsql/database/GroupResult.java۞108۩if(idx >= 0) return idx;
smallsql/database/GroupResult.java۞109۩throw SmallSQLException.create(Language.GROUP_AGGR_NOTPART, expr);
smallsql/database/GroupResult.java۞110۩}else
smallsql/database/GroupResult.java۞111۩if(type >= Expression.GROUP_BEGIN){
smallsql/database/GroupResult.java۞112۩int idx = internalExpressions.indexOf(expr);
smallsql/database/GroupResult.java۞113۩if(idx >= 0) return idx;
smallsql/database/GroupResult.java۞114۩internalExpressions.add(expr);
smallsql/database/GroupResult.java۞115۩return internalExpressions.size()-1;
smallsql/database/GroupResult.java۞116۩}else{
smallsql/database/GroupResult.java۞118۩int idx = internalExpressions.indexOf(expr);
smallsql/database/GroupResult.java۞119۩if(idx >= 0) return idx;
smallsql/database/GroupResult.java۞120۩Expression[] params = expr.getParams();
smallsql/database/GroupResult.java۞121۩if(params != null){
smallsql/database/GroupResult.java۞122۩for(int p=0; p<params.length; p++){
smallsql/database/GroupResult.java۞123۩addInternalExpressionFromSelect( params[p]);
smallsql/database/GroupResult.java۞124۩}
smallsql/database/GroupResult.java۞125۩}
smallsql/database/GroupResult.java۞126۩return -1;
smallsql/database/GroupResult.java۞127۩}
smallsql/database/GroupResult.java۞128۩}
smallsql/database/GroupResult.java۞135۩final private void patchExpressions(Expressions exprs) throws SQLException{
smallsql/database/GroupResult.java۞136۩if(exprs == null) return;
smallsql/database/GroupResult.java۞137۩for(int i=0; i<exprs.size(); i++){
smallsql/database/GroupResult.java۞138۩exprs.set(i, patchExpression(exprs.get(i)));
smallsql/database/GroupResult.java۞139۩}
smallsql/database/GroupResult.java۞140۩}
smallsql/database/GroupResult.java۞143۩final private void patchExpressions(Expression expression) throws SQLException{
smallsql/database/GroupResult.java۞144۩Expression[] params = expression.getParams();
smallsql/database/GroupResult.java۞145۩if(params == null) return;
smallsql/database/GroupResult.java۞146۩for(int i=0; i<params.length; i++){
smallsql/database/GroupResult.java۞147۩expression.setParamAt( patchExpression(params[i]), i);
smallsql/database/GroupResult.java۞148۩}
smallsql/database/GroupResult.java۞149۩}
smallsql/database/GroupResult.java۞158۩final private Expression patchExpression(Expression expr) throws SQLException{
smallsql/database/GroupResult.java۞160۩int idx = addInternalExpressionFromSelect( expr );
smallsql/database/GroupResult.java۞161۩if(idx>=0){
smallsql/database/GroupResult.java۞162۩Expression origExpression = expr;
smallsql/database/GroupResult.java۞163۩ExpressionName exprName;
smallsql/database/GroupResult.java۞164۩if(expr instanceof ExpressionName){
smallsql/database/GroupResult.java۞165۩exprName = (ExpressionName)expr;
smallsql/database/GroupResult.java۞166۩}else{
smallsql/database/GroupResult.java۞169۩expr = exprName = new ExpressionName(expr.getAlias());
smallsql/database/GroupResult.java۞170۩}
smallsql/database/GroupResult.java۞172۩Column column = exprName.getColumn();
smallsql/database/GroupResult.java۞173۩if(column == null){
smallsql/database/GroupResult.java۞174۩column = new Column();
smallsql/database/GroupResult.java۞175۩exprName.setFrom(this, idx, column);
smallsql/database/GroupResult.java۞176۩switch(exprName.getType()){
smallsql/database/GroupResult.java۞177۩case Expression.MAX:
smallsql/database/GroupResult.java۞178۩case Expression.MIN:
smallsql/database/GroupResult.java۞179۩case Expression.FIRST:
smallsql/database/GroupResult.java۞180۩case Expression.LAST:
smallsql/database/GroupResult.java۞181۩case Expression.SUM:
smallsql/database/GroupResult.java۞182۩Expression baseExpression = exprName.getParams()[0];
smallsql/database/GroupResult.java۞183۩column.setPrecision(baseExpression.getPrecision());
smallsql/database/GroupResult.java۞184۩column.setScale(baseExpression.getScale());
smallsql/database/GroupResult.java۞185۩break;
smallsql/database/GroupResult.java۞186۩default:
smallsql/database/GroupResult.java۞187۩column.setPrecision(origExpression.getPrecision());
smallsql/database/GroupResult.java۞188۩column.setScale(origExpression.getScale());
smallsql/database/GroupResult.java۞189۩}
smallsql/database/GroupResult.java۞190۩column.setDataType(exprName.getDataType());
smallsql/database/GroupResult.java۞191۩}else{
smallsql/database/GroupResult.java۞192۩exprName.setFrom(this, idx, column);
smallsql/database/GroupResult.java۞193۩}
smallsql/database/GroupResult.java۞194۩}else{
smallsql/database/GroupResult.java۞195۩patchExpressions(expr);
smallsql/database/GroupResult.java۞196۩}
smallsql/database/GroupResult.java۞197۩return expr;
smallsql/database/GroupResult.java۞198۩}
smallsql/database/GroupResult.java۞202۩final void execute() throws Exception{
smallsql/database/GroupResult.java۞203۩super.execute();
smallsql/database/GroupResult.java۞204۩from.execute();
smallsql/database/GroupResult.java۞205۩NextRow:
smallsql/database/GroupResult.java۞206۩while(from.next()){
smallsql/database/GroupResult.java۞207۩beforeFirst();
smallsql/database/GroupResult.java۞208۩while(next()){
smallsql/database/GroupResult.java۞209۩if(currentGroup == null || currentGroup.getBoolean()){
smallsql/database/GroupResult.java۞210۩accumulateRow();
smallsql/database/GroupResult.java۞211۩continue NextRow;
smallsql/database/GroupResult.java۞212۩}
smallsql/database/GroupResult.java۞213۩}
smallsql/database/GroupResult.java۞215۩addGroupRow();
smallsql/database/GroupResult.java۞216۩accumulateRow();
smallsql/database/GroupResult.java۞217۩}
smallsql/database/GroupResult.java۞219۩if(getRowCount() == 0 && groupBy == null){
smallsql/database/GroupResult.java۞222۩addGroupRow();
smallsql/database/GroupResult.java۞223۩}
smallsql/database/GroupResult.java۞225۩beforeFirst();
smallsql/database/GroupResult.java۞226۩}
smallsql/database/GroupResult.java۞235۩final private void addGroupRow(){
smallsql/database/GroupResult.java۞237۩ExpressionValue[] newRow = currentRow = new ExpressionValue[ expressions.size()];
smallsql/database/GroupResult.java۞238۩for(int i=0; i<newRow.length; i++){
smallsql/database/GroupResult.java۞239۩Expression expr = expressions.get(i);
smallsql/database/GroupResult.java۞240۩int type = expr.getType();
smallsql/database/GroupResult.java۞241۩if(type < Expression.GROUP_BEGIN) type = Expression.GROUP_BY;
smallsql/database/GroupResult.java۞242۩newRow[i] = new ExpressionValue( type );
smallsql/database/GroupResult.java۞243۩}
smallsql/database/GroupResult.java۞244۩addRow(newRow);
smallsql/database/GroupResult.java۞245۩}
smallsql/database/GroupResult.java۞248۩final private void accumulateRow() throws Exception{
smallsql/database/GroupResult.java۞249۩for(int i=0; i<currentRow.length; i++){
smallsql/database/GroupResult.java۞250۩Expression src = expressions.get(i);
smallsql/database/GroupResult.java۞251۩currentRow[i].accumulate(src);
smallsql/database/GroupResult.java۞252۩}
smallsql/database/GroupResult.java۞253۩}
smallsql/database/GroupResult.java۞254۩}
smallsql/database/Identity.java۞34۩package smallsql.database;
smallsql/database/Identity.java۞36۩import java.io.*;
smallsql/database/Identity.java۞37۩import java.nio.ByteBuffer;
smallsql/database/Identity.java۞38۩import java.nio.channels.FileChannel;
smallsql/database/Identity.java۞39۩import java.sql.SQLException;
smallsql/database/Identity.java۞45۩public class Identity extends Number implements Mutable{
smallsql/database/Identity.java۞47۩final private long filePos;
smallsql/database/Identity.java۞48۩final private FileChannel raFile;
smallsql/database/Identity.java۞49۩final private byte[] page = new byte[8];
smallsql/database/Identity.java۞50۩private long value;
smallsql/database/Identity.java۞52۩public Identity(FileChannel raFile, long filePos) throws IOException{
smallsql/database/Identity.java۞53۩ByteBuffer buffer = ByteBuffer.wrap(page);
smallsql/database/Identity.java۞54۩synchronized(raFile){
smallsql/database/Identity.java۞55۩raFile.position(filePos);
smallsql/database/Identity.java۞56۩raFile.read(buffer);
smallsql/database/Identity.java۞57۩}
smallsql/database/Identity.java۞58۩value = ((long)(page[ 0 ]) << 56) |
smallsql/database/Identity.java۞59۩((long)(page[ 1 ] & 0xFF) << 48) |
smallsql/database/Identity.java۞60۩((long)(page[ 2 ] & 0xFF) << 40) |
smallsql/database/Identity.java۞61۩((long)(page[ 3 ] & 0xFF) << 32) |
smallsql/database/Identity.java۞62۩((long)(page[ 4 ] & 0xFF) << 24) |
smallsql/database/Identity.java۞63۩((page[ 5 ] & 0xFF) << 16) |
smallsql/database/Identity.java۞64۩((page[ 6 ] & 0xFF) << 8) |
smallsql/database/Identity.java۞65۩((page[ 7 ] & 0xFF));
smallsql/database/Identity.java۞66۩this.raFile  = raFile;
smallsql/database/Identity.java۞67۩this.filePos = filePos;
smallsql/database/Identity.java۞68۩}
smallsql/database/Identity.java۞70۩private StorePage createStorePage(){
smallsql/database/Identity.java۞71۩page[ 0 ] = (byte)(value >> 56);
smallsql/database/Identity.java۞72۩page[ 1 ] = (byte)(value >> 48);
smallsql/database/Identity.java۞73۩page[ 2 ] = (byte)(value >> 40);
smallsql/database/Identity.java۞74۩page[ 3 ] = (byte)(value >> 32);
smallsql/database/Identity.java۞75۩page[ 4 ] = (byte)(value >> 24);
smallsql/database/Identity.java۞76۩page[ 5 ] = (byte)(value >> 16);
smallsql/database/Identity.java۞77۩page[ 6 ] = (byte)(value >> 8);
smallsql/database/Identity.java۞78۩page[ 7 ] = (byte)(value);
smallsql/database/Identity.java۞79۩return new StorePage( page, 8, raFile, filePos);
smallsql/database/Identity.java۞80۩}
smallsql/database/Identity.java۞82۩void createNextValue(SSConnection con) throws SQLException{
smallsql/database/Identity.java۞83۩value++;
smallsql/database/Identity.java۞84۩con.add( createStorePage() );
smallsql/database/Identity.java۞85۩}
smallsql/database/Identity.java۞88۩void setNextValue(Expression expr) throws Exception{
smallsql/database/Identity.java۞89۩long newValue = expr.getLong();
smallsql/database/Identity.java۞90۩if(newValue > value){
smallsql/database/Identity.java۞91۩value = newValue;
smallsql/database/Identity.java۞92۩createStorePage().commit();
smallsql/database/Identity.java۞93۩}
smallsql/database/Identity.java۞94۩}
smallsql/database/Identity.java۞96۩@Override
smallsql/database/Identity.java۞97۩public float floatValue() {
smallsql/database/Identity.java۞98۩return value;
smallsql/database/Identity.java۞99۩}
smallsql/database/Identity.java۞101۩@Override
smallsql/database/Identity.java۞102۩public double doubleValue() {
smallsql/database/Identity.java۞103۩return value;
smallsql/database/Identity.java۞104۩}
smallsql/database/Identity.java۞106۩@Override
smallsql/database/Identity.java۞107۩public int intValue() {
smallsql/database/Identity.java۞108۩return (int)value;
smallsql/database/Identity.java۞109۩}
smallsql/database/Identity.java۞111۩@Override
smallsql/database/Identity.java۞112۩public long longValue() {
smallsql/database/Identity.java۞113۩return value;
smallsql/database/Identity.java۞114۩}
smallsql/database/Identity.java۞116۩@Override
smallsql/database/Identity.java۞117۩public String toString(){
smallsql/database/Identity.java۞118۩return String.valueOf(value);
smallsql/database/Identity.java۞119۩}
smallsql/database/Identity.java۞121۩public Object getImmutableObject(){
smallsql/database/Identity.java۞122۩return new Long(value);
smallsql/database/Identity.java۞123۩}
smallsql/database/Identity.java۞124۩}
smallsql/database/Index.java۞33۩package smallsql.database;
smallsql/database/Index.java۞35۩import java.sql.SQLException;
smallsql/database/Index.java۞36۩import java.util.ArrayList;
smallsql/database/Index.java۞63۩class Index{
smallsql/database/Index.java۞65۩final IndexNode rootPage;
smallsql/database/Index.java۞71۩Index(boolean unique){
smallsql/database/Index.java۞72۩rootPage = new IndexNode(unique, (char)-1);
smallsql/database/Index.java۞73۩}
smallsql/database/Index.java۞76۩Index(IndexNode rootPage){
smallsql/database/Index.java۞77۩this.rootPage = rootPage;
smallsql/database/Index.java۞78۩}
smallsql/database/Index.java۞81۩IndexScrollStatus createScrollStatus(Expressions expressions){
smallsql/database/Index.java۞82۩return new IndexScrollStatus(rootPage, expressions);
smallsql/database/Index.java۞83۩}
smallsql/database/Index.java۞96۩final Object findRows(Expressions expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{
smallsql/database/Index.java۞97۩IndexNode page = rootPage;
smallsql/database/Index.java۞98۩int count = expressions.size();
smallsql/database/Index.java۞99۩for(int i = 0; i < count; i++){
smallsql/database/Index.java۞100۩page = findRows(page, expressions.get(i), searchNullValues, nodeList);
smallsql/database/Index.java۞101۩if(page == null)
smallsql/database/Index.java۞102۩return null;
smallsql/database/Index.java۞103۩if(i + 1 == count)
smallsql/database/Index.java۞104۩return page.getValue();
smallsql/database/Index.java۞105۩else
smallsql/database/Index.java۞106۩page = (IndexNode)page.getValue();
smallsql/database/Index.java۞107۩}
smallsql/database/Index.java۞108۩throw new Error();
smallsql/database/Index.java۞109۩}
smallsql/database/Index.java۞123۩final Object findRows(Expression[] expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{
smallsql/database/Index.java۞124۩IndexNode page = rootPage;
smallsql/database/Index.java۞125۩int count = expressions.length;
smallsql/database/Index.java۞126۩for(int i = 0; i < count; i++){
smallsql/database/Index.java۞127۩page = findRows(page, expressions[i], searchNullValues, nodeList);
smallsql/database/Index.java۞128۩if(page == null)
smallsql/database/Index.java۞129۩return null;
smallsql/database/Index.java۞130۩if(i + 1 == count)
smallsql/database/Index.java۞131۩return page.getValue();
smallsql/database/Index.java۞132۩else
smallsql/database/Index.java۞133۩page = (IndexNode)page.getValue();
smallsql/database/Index.java۞134۩}
smallsql/database/Index.java۞135۩throw new Error();
smallsql/database/Index.java۞136۩}
smallsql/database/Index.java۞152۩final private IndexNode findRows(IndexNode page, Expression expr, boolean searchNullValues, ArrayList nodeList) throws Exception{
smallsql/database/Index.java۞153۩if(expr.isNull()){
smallsql/database/Index.java۞154۩if(!searchNullValues){
smallsql/database/Index.java۞155۩return null;
smallsql/database/Index.java۞156۩}
smallsql/database/Index.java۞157۩page = findNull(page);
smallsql/database/Index.java۞158۩}else{
smallsql/database/Index.java۞159۩switch(expr.getDataType()){
smallsql/database/Index.java۞160۩case SQLTokenizer.REAL:
smallsql/database/Index.java۞161۩page = find( page, floatToBinarySortOrder( expr.getFloat()), 2, nodeList );
smallsql/database/Index.java۞162۩break;
smallsql/database/Index.java۞163۩case SQLTokenizer.DOUBLE:
smallsql/database/Index.java۞164۩case SQLTokenizer.FLOAT:
smallsql/database/Index.java۞165۩page = find( page, doubleToBinarySortOrder( expr.getDouble()), 4, nodeList );
smallsql/database/Index.java۞166۩break;
smallsql/database/Index.java۞167۩case SQLTokenizer.TINYINT:
smallsql/database/Index.java۞168۩page = find( page, expr.getInt(), 1, nodeList );
smallsql/database/Index.java۞169۩break;
smallsql/database/Index.java۞170۩case SQLTokenizer.SMALLINT:
smallsql/database/Index.java۞171۩page = find( page, shortToBinarySortOrder( expr.getInt()), 1, nodeList );
smallsql/database/Index.java۞172۩break;
smallsql/database/Index.java۞173۩case SQLTokenizer.INT:
smallsql/database/Index.java۞174۩page = find( page, intToBinarySortOrder( expr.getInt()), 2, nodeList );
smallsql/database/Index.java۞175۩break;
smallsql/database/Index.java۞176۩case SQLTokenizer.BIGINT:
smallsql/database/Index.java۞177۩case SQLTokenizer.DATE:
smallsql/database/Index.java۞178۩case SQLTokenizer.TIME:
smallsql/database/Index.java۞179۩case SQLTokenizer.TIMESTAMP:
smallsql/database/Index.java۞180۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/Index.java۞181۩case SQLTokenizer.MONEY:
smallsql/database/Index.java۞182۩case SQLTokenizer.SMALLMONEY:
smallsql/database/Index.java۞183۩page = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );
smallsql/database/Index.java۞184۩break;
smallsql/database/Index.java۞185۩case SQLTokenizer.VARCHAR:
smallsql/database/Index.java۞186۩case SQLTokenizer.NVARCHAR:
smallsql/database/Index.java۞187۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/Index.java۞188۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/Index.java۞189۩case SQLTokenizer.CLOB:
smallsql/database/Index.java۞190۩page = find( page, stringToBinarySortOrder( expr.getString(), false ), nodeList );
smallsql/database/Index.java۞191۩break;
smallsql/database/Index.java۞192۩case SQLTokenizer.NCHAR:
smallsql/database/Index.java۞193۩case SQLTokenizer.CHAR:
smallsql/database/Index.java۞194۩page = find( page, stringToBinarySortOrder( expr.getString(), true ), nodeList );
smallsql/database/Index.java۞195۩break;
smallsql/database/Index.java۞196۩case SQLTokenizer.VARBINARY:
smallsql/database/Index.java۞197۩case SQLTokenizer.BINARY:
smallsql/database/Index.java۞198۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/Index.java۞199۩case SQLTokenizer.BLOB:
smallsql/database/Index.java۞200۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/Index.java۞201۩page = find( page, bytesToBinarySortOrder( expr.getBytes()), nodeList );
smallsql/database/Index.java۞202۩break;
smallsql/database/Index.java۞203۩case SQLTokenizer.BIT:
smallsql/database/Index.java۞204۩case SQLTokenizer.BOOLEAN:
smallsql/database/Index.java۞205۩page = find( page, expr.getBoolean() ? 2 : 1, 1, nodeList );
smallsql/database/Index.java۞206۩break;
smallsql/database/Index.java۞207۩case SQLTokenizer.NUMERIC:
smallsql/database/Index.java۞208۩case SQLTokenizer.DECIMAL:
smallsql/database/Index.java۞209۩page = find( page, numericToBinarySortOrder( expr.getNumeric() ), nodeList );
smallsql/database/Index.java۞210۩break;
smallsql/database/Index.java۞211۩default:
smallsql/database/Index.java۞213۩throw new Error(String.valueOf(expr.getDataType()));
smallsql/database/Index.java۞214۩}
smallsql/database/Index.java۞215۩}
smallsql/database/Index.java۞216۩return page;
smallsql/database/Index.java۞217۩}
smallsql/database/Index.java۞225۩final void addValues( long rowOffset, Expressions expressions ) throws Exception{
smallsql/database/Index.java۞226۩IndexNode page = this.rootPage;
smallsql/database/Index.java۞227۩int count = expressions.size();
smallsql/database/Index.java۞228۩for(int i=0; i<count; i++){
smallsql/database/Index.java۞229۩Expression expr = expressions.get(i);
smallsql/database/Index.java۞230۩boolean isLastValues = (i == count-1);
smallsql/database/Index.java۞231۩if(expr.isNull()){
smallsql/database/Index.java۞232۩page = addNull(page, rowOffset, isLastValues);
smallsql/database/Index.java۞233۩}else{
smallsql/database/Index.java۞234۩switch(expr.getDataType()){
smallsql/database/Index.java۞235۩case SQLTokenizer.REAL:
smallsql/database/Index.java۞236۩page = add( page, rowOffset, floatToBinarySortOrder( expr.getFloat()), isLastValues, 2 );
smallsql/database/Index.java۞237۩break;
smallsql/database/Index.java۞238۩case SQLTokenizer.DOUBLE:
smallsql/database/Index.java۞239۩case SQLTokenizer.FLOAT:
smallsql/database/Index.java۞240۩page = add( page, rowOffset, doubleToBinarySortOrder( expr.getDouble()), isLastValues, 4 );
smallsql/database/Index.java۞241۩break;
smallsql/database/Index.java۞242۩case SQLTokenizer.TINYINT:
smallsql/database/Index.java۞243۩page = add( page, rowOffset, expr.getInt(), isLastValues, 1 );
smallsql/database/Index.java۞244۩break;
smallsql/database/Index.java۞245۩case SQLTokenizer.SMALLINT:
smallsql/database/Index.java۞246۩page = add( page, rowOffset, shortToBinarySortOrder( expr.getInt()), isLastValues, 1 );
smallsql/database/Index.java۞247۩break;
smallsql/database/Index.java۞248۩case SQLTokenizer.INT:
smallsql/database/Index.java۞249۩page = add( page, rowOffset, intToBinarySortOrder( expr.getInt()), isLastValues, 2 );
smallsql/database/Index.java۞250۩break;
smallsql/database/Index.java۞251۩case SQLTokenizer.BIGINT:
smallsql/database/Index.java۞252۩case SQLTokenizer.DATE:
smallsql/database/Index.java۞253۩case SQLTokenizer.TIME:
smallsql/database/Index.java۞254۩case SQLTokenizer.TIMESTAMP:
smallsql/database/Index.java۞255۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/Index.java۞256۩case SQLTokenizer.MONEY:
smallsql/database/Index.java۞257۩case SQLTokenizer.SMALLMONEY:
smallsql/database/Index.java۞258۩page = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );
smallsql/database/Index.java۞259۩break;
smallsql/database/Index.java۞260۩case SQLTokenizer.VARCHAR:
smallsql/database/Index.java۞261۩case SQLTokenizer.NVARCHAR:
smallsql/database/Index.java۞262۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/Index.java۞263۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/Index.java۞264۩page = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), false ), isLastValues );
smallsql/database/Index.java۞265۩break;
smallsql/database/Index.java۞266۩case SQLTokenizer.NCHAR:
smallsql/database/Index.java۞267۩case SQLTokenizer.CHAR:
smallsql/database/Index.java۞268۩page = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), true ), isLastValues );
smallsql/database/Index.java۞269۩break;
smallsql/database/Index.java۞270۩case SQLTokenizer.VARBINARY:
smallsql/database/Index.java۞271۩case SQLTokenizer.BINARY:
smallsql/database/Index.java۞272۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/Index.java۞273۩case SQLTokenizer.BLOB:
smallsql/database/Index.java۞274۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/Index.java۞275۩page = add( page, rowOffset, bytesToBinarySortOrder( expr.getBytes()), isLastValues );
smallsql/database/Index.java۞276۩break;
smallsql/database/Index.java۞277۩case SQLTokenizer.BIT:
smallsql/database/Index.java۞278۩case SQLTokenizer.BOOLEAN:
smallsql/database/Index.java۞279۩page = add( page, rowOffset, expr.getBoolean() ? 2 : 1, isLastValues, 1 );
smallsql/database/Index.java۞280۩break;
smallsql/database/Index.java۞281۩case SQLTokenizer.NUMERIC:
smallsql/database/Index.java۞282۩case SQLTokenizer.DECIMAL:
smallsql/database/Index.java۞283۩page = add( page, rowOffset, numericToBinarySortOrder( expr.getNumeric()), isLastValues );
smallsql/database/Index.java۞284۩break;
smallsql/database/Index.java۞285۩default:
smallsql/database/Index.java۞287۩throw new Error(String.valueOf(expr.getDataType()));
smallsql/database/Index.java۞288۩}
smallsql/database/Index.java۞289۩}
smallsql/database/Index.java۞290۩}
smallsql/database/Index.java۞291۩}
smallsql/database/Index.java۞294۩final void removeValue( long rowOffset, Expressions expressions ) throws Exception{
smallsql/database/Index.java۞295۩ArrayList nodeList = new ArrayList();
smallsql/database/Index.java۞296۩Object obj = findRows(expressions, true, nodeList);
smallsql/database/Index.java۞297۩if(!rootPage.getUnique()){
smallsql/database/Index.java۞298۩LongTreeList list = (LongTreeList)obj;
smallsql/database/Index.java۞299۩list.remove(rowOffset);
smallsql/database/Index.java۞300۩if(list.getSize() > 0) return;
smallsql/database/Index.java۞301۩}
smallsql/database/Index.java۞302۩IndexNode node = (IndexNode)nodeList.get(nodeList.size()-1);
smallsql/database/Index.java۞303۩node.clearValue();
smallsql/database/Index.java۞304۩for(int i = nodeList.size()-2; i >= 0; i--){
smallsql/database/Index.java۞305۩if(!node.isEmpty())
smallsql/database/Index.java۞306۩break;
smallsql/database/Index.java۞307۩IndexNode parent = (IndexNode)nodeList.get(i);
smallsql/database/Index.java۞308۩parent.removeNode( node.getDigit() );
smallsql/database/Index.java۞309۩node = parent;
smallsql/database/Index.java۞310۩}
smallsql/database/Index.java۞311۩}
smallsql/database/Index.java۞314۩final private IndexNode findNull(IndexNode page){
smallsql/database/Index.java۞315۩return page.getChildNode( (char)0 );
smallsql/database/Index.java۞316۩}
smallsql/database/Index.java۞319۩final private IndexNode addNull(IndexNode page, long rowOffset, boolean isLastValue) throws SQLException{
smallsql/database/Index.java۞320۩if(isLastValue){
smallsql/database/Index.java۞321۩page.addNode( (char)0, rowOffset );
smallsql/database/Index.java۞322۩return null;
smallsql/database/Index.java۞323۩}else
smallsql/database/Index.java۞324۩return page.addRoot((char)0);
smallsql/database/Index.java۞325۩}
smallsql/database/Index.java۞328۩final private IndexNode find(IndexNode node, long key, int digitCount, ArrayList nodeList){
smallsql/database/Index.java۞329۩for(int i=digitCount-1; i>=0; i--){
smallsql/database/Index.java۞330۩char digit = (char)(key >> (i<<4));
smallsql/database/Index.java۞331۩node = node.getChildNode(digit);
smallsql/database/Index.java۞333۩if(node == null) return null;
smallsql/database/Index.java۞334۩if(nodeList != null) nodeList.add(node);
smallsql/database/Index.java۞336۩if(equals(node.getRemainderValue(), key, i)){
smallsql/database/Index.java۞337۩return node;
smallsql/database/Index.java۞338۩}
smallsql/database/Index.java۞339۩}
smallsql/database/Index.java۞340۩return node;
smallsql/database/Index.java۞341۩}
smallsql/database/Index.java۞348۩final private IndexNode add(IndexNode node, long rowOffset, long key, boolean isLastValue, int digitCount) throws SQLException{
smallsql/database/Index.java۞349۩for(int i=digitCount-1; i>=0; i--){
smallsql/database/Index.java۞350۩char digit = (char)(key >> (i<<4));
smallsql/database/Index.java۞351۩if(i == 0){
smallsql/database/Index.java۞352۩if(isLastValue){
smallsql/database/Index.java۞353۩node.addNode( digit, rowOffset );
smallsql/database/Index.java۞354۩return null;
smallsql/database/Index.java۞355۩}
smallsql/database/Index.java۞356۩return node.addRoot(digit);
smallsql/database/Index.java۞357۩}
smallsql/database/Index.java۞358۩node = node.addNode(digit);
smallsql/database/Index.java۞359۩if(node.isEmpty()){
smallsql/database/Index.java۞360۩if(isLastValue){
smallsql/database/Index.java۞361۩node.addRemainderKey( rowOffset, key, i );
smallsql/database/Index.java۞362۩return null;
smallsql/database/Index.java۞363۩}
smallsql/database/Index.java۞364۩return node.addRootValue( key, i);
smallsql/database/Index.java۞365۩}else
smallsql/database/Index.java۞366۩if(equals(node.getRemainderValue(), key, i)){
smallsql/database/Index.java۞367۩if(isLastValue){
smallsql/database/Index.java۞368۩node.saveValue( rowOffset);
smallsql/database/Index.java۞369۩return null;
smallsql/database/Index.java۞370۩}
smallsql/database/Index.java۞371۩return node.addRoot();
smallsql/database/Index.java۞372۩}
smallsql/database/Index.java۞373۩}
smallsql/database/Index.java۞374۩throw new Error();
smallsql/database/Index.java۞375۩}
smallsql/database/Index.java۞378۩final private IndexNode find(IndexNode node, char[] key, ArrayList nodeList){
smallsql/database/Index.java۞379۩int length = key.length;
smallsql/database/Index.java۞380۩int i=-1;
smallsql/database/Index.java۞381۩while(true){
smallsql/database/Index.java۞383۩char digit = (i<0) ? (length == 0 ? (char)1 : 2)
smallsql/database/Index.java۞384۩: (key[i]);
smallsql/database/Index.java۞385۩node = node.getChildNode(digit);
smallsql/database/Index.java۞387۩if(node == null) return null;
smallsql/database/Index.java۞388۩if(nodeList != null) nodeList.add(node);
smallsql/database/Index.java۞389۩if(++i == length){
smallsql/database/Index.java۞390۩return node;
smallsql/database/Index.java۞391۩}
smallsql/database/Index.java۞393۩if(equals(node.getRemainderValue(), key, i)){
smallsql/database/Index.java۞394۩return node;
smallsql/database/Index.java۞395۩}
smallsql/database/Index.java۞396۩}
smallsql/database/Index.java۞397۩}
smallsql/database/Index.java۞403۩final private IndexNode add(IndexNode node, long rowOffset, char[] key, boolean isLast) throws SQLException{
smallsql/database/Index.java۞404۩int length = key.length;
smallsql/database/Index.java۞405۩int i=-1;
smallsql/database/Index.java۞406۩while(true){
smallsql/database/Index.java۞408۩char digit = (i<0) ? (length == 0 ? (char)1 : 2)
smallsql/database/Index.java۞409۩: (key[i]);
smallsql/database/Index.java۞410۩if(++i == length){
smallsql/database/Index.java۞411۩if(isLast){
smallsql/database/Index.java۞412۩node.addNode( digit, rowOffset );
smallsql/database/Index.java۞413۩return null;
smallsql/database/Index.java۞414۩}
smallsql/database/Index.java۞415۩return node.addRoot(digit);
smallsql/database/Index.java۞416۩}
smallsql/database/Index.java۞417۩node = node.addNode(digit);
smallsql/database/Index.java۞418۩if(node.isEmpty()){
smallsql/database/Index.java۞419۩if(isLast){
smallsql/database/Index.java۞420۩node.addRemainderKey( rowOffset, key, i );
smallsql/database/Index.java۞421۩return null;
smallsql/database/Index.java۞422۩}
smallsql/database/Index.java۞423۩return node.addRootValue( key, i );
smallsql/database/Index.java۞424۩}else
smallsql/database/Index.java۞425۩if(equals(node.getRemainderValue(), key, i)){
smallsql/database/Index.java۞426۩if(isLast){
smallsql/database/Index.java۞427۩node.saveValue(rowOffset);
smallsql/database/Index.java۞428۩return null;
smallsql/database/Index.java۞429۩}
smallsql/database/Index.java۞430۩return node.addRoot();
smallsql/database/Index.java۞431۩}
smallsql/database/Index.java۞432۩}
smallsql/database/Index.java۞433۩}
smallsql/database/Index.java۞439۩final void clear(){
smallsql/database/Index.java۞440۩rootPage.clear();
smallsql/database/Index.java۞441۩}
smallsql/database/Index.java۞449۩final static private int floatToBinarySortOrder(float value){
smallsql/database/Index.java۞450۩int intValue = Float.floatToIntBits(value);
smallsql/database/Index.java۞451۩return (intValue<0) ?
smallsql/database/Index.java۞452۩~intValue :
smallsql/database/Index.java۞453۩intValue ^ 0x80000000;
smallsql/database/Index.java۞454۩}
smallsql/database/Index.java۞456۩final static private long doubleToBinarySortOrder(double value){
smallsql/database/Index.java۞457۩long intValue = Double.doubleToLongBits(value);
smallsql/database/Index.java۞458۩return (intValue<0) ?
smallsql/database/Index.java۞459۩~intValue :
smallsql/database/Index.java۞460۩intValue ^ 0x8000000000000000L;
smallsql/database/Index.java۞461۩}
smallsql/database/Index.java۞463۩final static private int shortToBinarySortOrder(int value){
smallsql/database/Index.java۞464۩return value ^ 0x8000;
smallsql/database/Index.java۞465۩}
smallsql/database/Index.java۞467۩final static private int intToBinarySortOrder(int value){
smallsql/database/Index.java۞468۩return value ^ 0x80000000;
smallsql/database/Index.java۞469۩}
smallsql/database/Index.java۞471۩final static private long longToBinarySortOrder(long value){
smallsql/database/Index.java۞472۩return value ^ 0x8000000000000000L;
smallsql/database/Index.java۞473۩}
smallsql/database/Index.java۞476۩final static private char[] stringToBinarySortOrder(String value, boolean needTrim){
smallsql/database/Index.java۞477۩int length = value.length();
smallsql/database/Index.java۞478۩if(needTrim){
smallsql/database/Index.java۞479۩while(length > 0 && value.charAt(length-1) == ' ') length--;
smallsql/database/Index.java۞480۩}
smallsql/database/Index.java۞481۩char[] puffer = new char[length];
smallsql/database/Index.java۞482۩for(int i=0; i<length; i++){
smallsql/database/Index.java۞483۩puffer[i] = Character.toLowerCase(Character.toUpperCase( value.charAt(i) ));
smallsql/database/Index.java۞484۩}
smallsql/database/Index.java۞485۩return puffer;
smallsql/database/Index.java۞486۩}
smallsql/database/Index.java۞489۩final static private char[] bytesToBinarySortOrder(byte[] value){
smallsql/database/Index.java۞490۩int length = value.length;
smallsql/database/Index.java۞491۩char[] puffer = new char[length];
smallsql/database/Index.java۞492۩for(int i=0; i<length; i++){
smallsql/database/Index.java۞493۩puffer[i] = (char)(value[i] & 0xFF);
smallsql/database/Index.java۞494۩}
smallsql/database/Index.java۞495۩return puffer;
smallsql/database/Index.java۞496۩}
smallsql/database/Index.java۞499۩final static private char[] numericToBinarySortOrder(MutableNumeric numeric){
smallsql/database/Index.java۞500۩int[] value = numeric.getInternalValue();
smallsql/database/Index.java۞501۩int count = 1;
smallsql/database/Index.java۞502۩int i;
smallsql/database/Index.java۞503۩for(i=0; i<value.length; i++){
smallsql/database/Index.java۞504۩if(value[i] != 0){
smallsql/database/Index.java۞505۩count = 2*(value.length - i)+1;
smallsql/database/Index.java۞506۩break;
smallsql/database/Index.java۞507۩}
smallsql/database/Index.java۞508۩}
smallsql/database/Index.java۞509۩char[] puffer = new char[count];
smallsql/database/Index.java۞510۩puffer[0] = (char)count;
smallsql/database/Index.java۞511۩for(int c=1; c<count;){
smallsql/database/Index.java۞512۩puffer[c++] = (char)(value[i] >> 16);
smallsql/database/Index.java۞513۩puffer[c++] = (char)value[i++];
smallsql/database/Index.java۞514۩}
smallsql/database/Index.java۞515۩return puffer;
smallsql/database/Index.java۞516۩}
smallsql/database/Index.java۞527۩private final boolean equals(char[] src1, char[] src2, int offset2){
smallsql/database/Index.java۞528۩if(src1 == null) return false;
smallsql/database/Index.java۞529۩int length = src1.length;
smallsql/database/Index.java۞530۩if(length != src2.length - offset2) return false;
smallsql/database/Index.java۞531۩for(int i=0; i<length; i++){
smallsql/database/Index.java۞532۩if(src1[i] != src2[i+offset2]) return false;
smallsql/database/Index.java۞533۩}
smallsql/database/Index.java۞534۩return true;
smallsql/database/Index.java۞535۩}
smallsql/database/Index.java۞538۩private final boolean equals(char[] src1, long src2, int charCount){
smallsql/database/Index.java۞539۩if(src1 == null) return false;
smallsql/database/Index.java۞540۩int length = src1.length;
smallsql/database/Index.java۞541۩if(length != charCount) return false;
smallsql/database/Index.java۞542۩for(int i=0, d = charCount-1; i<length; i++){
smallsql/database/Index.java۞543۩if(src1[i] != (char)((src2 >> (d-- << 4)))) return false;
smallsql/database/Index.java۞544۩}
smallsql/database/Index.java۞545۩return true;
smallsql/database/Index.java۞546۩}
smallsql/database/Index.java۞547۩}
smallsql/database/IndexDescription.java۞34۩package smallsql.database;
smallsql/database/IndexDescription.java۞36۩import java.io.File;
smallsql/database/IndexDescription.java۞37۩import java.nio.ByteBuffer;
smallsql/database/IndexDescription.java۞38۩import java.nio.channels.FileChannel;
smallsql/database/IndexDescription.java۞39۩import java.sql.DriverManager;
smallsql/database/IndexDescription.java۞40۩import java.sql.SQLException;
smallsql/database/IndexDescription.java۞41۩import smallsql.database.language.Language;
smallsql/database/IndexDescription.java۞44۩final class IndexDescription {
smallsql/database/IndexDescription.java۞46۩static final int MAGIC_INDEX = 'S' << 24 | 'Q' << 16 | 'L' << 8 | 'I';
smallsql/database/IndexDescription.java۞47۩static final int INDEX_VERSION = 1;
smallsql/database/IndexDescription.java۞49۩private final String name;
smallsql/database/IndexDescription.java۞50۩final private int constraintType;
smallsql/database/IndexDescription.java۞51۩final private Strings columns;
smallsql/database/IndexDescription.java۞52۩private int[] matrix;
smallsql/database/IndexDescription.java۞53۩final private Expressions expressions;
smallsql/database/IndexDescription.java۞54۩private Index index;
smallsql/database/IndexDescription.java۞55۩private FileChannel raFile;
smallsql/database/IndexDescription.java۞63۩IndexDescription( String name, String tableName, int constraintType, Expressions expressions, Strings columns){
smallsql/database/IndexDescription.java۞64۩this.constraintType = constraintType;
smallsql/database/IndexDescription.java۞65۩this.expressions = expressions;
smallsql/database/IndexDescription.java۞66۩this.columns = columns;
smallsql/database/IndexDescription.java۞67۩this.name = createName(name, tableName);
smallsql/database/IndexDescription.java۞68۩}
smallsql/database/IndexDescription.java۞71۩private static String createName( String defaultName, String tableName ){
smallsql/database/IndexDescription.java۞72۩if(defaultName == null){
smallsql/database/IndexDescription.java۞73۩defaultName = tableName + "_" + Long.toHexString(System.currentTimeMillis()) + Integer.toHexString(new Object().hashCode());
smallsql/database/IndexDescription.java۞74۩}
smallsql/database/IndexDescription.java۞75۩return defaultName;
smallsql/database/IndexDescription.java۞76۩}
smallsql/database/IndexDescription.java۞79۩final String getName(){
smallsql/database/IndexDescription.java۞80۩return name;
smallsql/database/IndexDescription.java۞81۩}
smallsql/database/IndexDescription.java۞84۩final boolean isPrimary(){
smallsql/database/IndexDescription.java۞85۩return constraintType == SQLTokenizer.PRIMARY;
smallsql/database/IndexDescription.java۞86۩}
smallsql/database/IndexDescription.java۞89۩final boolean isUnique(){
smallsql/database/IndexDescription.java۞90۩return constraintType == SQLTokenizer.PRIMARY || constraintType == SQLTokenizer.UNIQUE;
smallsql/database/IndexDescription.java۞91۩}
smallsql/database/IndexDescription.java۞94۩final Strings getColumns(){
smallsql/database/IndexDescription.java۞95۩return columns;
smallsql/database/IndexDescription.java۞96۩}
smallsql/database/IndexDescription.java۞104۩final int matchFactor(Strings strings){
smallsql/database/IndexDescription.java۞105۩if(strings.size() < columns.size())
smallsql/database/IndexDescription.java۞106۩return Integer.MAX_VALUE;
smallsql/database/IndexDescription.java۞108۩nextColumn:
smallsql/database/IndexDescription.java۞109۩for(int c=0; c<columns.size(); c++){
smallsql/database/IndexDescription.java۞110۩String colName = columns.get(c);
smallsql/database/IndexDescription.java۞111۩for(int s=0; s<strings.size(); s++){
smallsql/database/IndexDescription.java۞112۩if(colName.equalsIgnoreCase(strings.get(s)) )
smallsql/database/IndexDescription.java۞113۩continue nextColumn;
smallsql/database/IndexDescription.java۞114۩}
smallsql/database/IndexDescription.java۞115۩return Integer.MAX_VALUE;
smallsql/database/IndexDescription.java۞116۩}
smallsql/database/IndexDescription.java۞117۩return strings.size() - columns.size();
smallsql/database/IndexDescription.java۞118۩}
smallsql/database/IndexDescription.java۞127۩final void init(Database database, TableView tableView){
smallsql/database/IndexDescription.java۞128۩int size = tableView.columns.size();
smallsql/database/IndexDescription.java۞129۩matrix = new int[size];
smallsql/database/IndexDescription.java۞130۩for(int i=0; i<matrix.length; i++){
smallsql/database/IndexDescription.java۞131۩matrix[i] = -1;
smallsql/database/IndexDescription.java۞132۩}
smallsql/database/IndexDescription.java۞134۩for(int i=0; i<columns.size(); i++){
smallsql/database/IndexDescription.java۞135۩matrix[tableView.findColumnIdx(columns.get(i))] = i;
smallsql/database/IndexDescription.java۞136۩}
smallsql/database/IndexDescription.java۞137۩}
smallsql/database/IndexDescription.java۞143۩final void create(SSConnection con, Database database, TableView tableView) throws Exception{
smallsql/database/IndexDescription.java۞144۩init( database, tableView );
smallsql/database/IndexDescription.java۞145۩raFile = createFile( con, database );
smallsql/database/IndexDescription.java۞146۩}
smallsql/database/IndexDescription.java۞149۩static File getFile(Database database, String name) throws Exception{
smallsql/database/IndexDescription.java۞150۩return new File( Utils.createIdxFileName( database, name ) );
smallsql/database/IndexDescription.java۞151۩}
smallsql/database/IndexDescription.java۞154۩private FileChannel createFile(SSConnection con, Database database) throws Exception{
smallsql/database/IndexDescription.java۞155۩if( database.isReadOnly() ){
smallsql/database/IndexDescription.java۞156۩throw SmallSQLException.create(Language.DB_READONLY);
smallsql/database/IndexDescription.java۞157۩}
smallsql/database/IndexDescription.java۞158۩File file = getFile( database, name );
smallsql/database/IndexDescription.java۞159۩boolean ok = file.createNewFile();
smallsql/database/IndexDescription.java۞160۩if(!ok) throw SmallSQLException.create(Language.INDEX_EXISTS, name);
smallsql/database/IndexDescription.java۞161۩FileChannel randomFile = Utils.openRaFile( file, database.isReadOnly() );
smallsql/database/IndexDescription.java۞162۩con.add(new CreateFile(file, randomFile, con, database));
smallsql/database/IndexDescription.java۞163۩writeMagic(randomFile);
smallsql/database/IndexDescription.java۞164۩return randomFile;
smallsql/database/IndexDescription.java۞165۩}
smallsql/database/IndexDescription.java۞168۩private void load(Database database) throws SQLException{
smallsql/database/IndexDescription.java۞169۩try{
smallsql/database/IndexDescription.java۞170۩File file = getFile( database, name );
smallsql/database/IndexDescription.java۞171۩if(!file.exists())
smallsql/database/IndexDescription.java۞172۩throw SmallSQLException.create(Language.INDEX_MISSING, name);
smallsql/database/IndexDescription.java۞173۩raFile = Utils.openRaFile( file, database.isReadOnly() );
smallsql/database/IndexDescription.java۞174۩ByteBuffer buffer = ByteBuffer.allocate(8);
smallsql/database/IndexDescription.java۞175۩raFile.read(buffer);
smallsql/database/IndexDescription.java۞176۩buffer.position(0);
smallsql/database/IndexDescription.java۞177۩int magic   = buffer.getInt();
smallsql/database/IndexDescription.java۞178۩int version = buffer.getInt();
smallsql/database/IndexDescription.java۞179۩if(magic != MAGIC_INDEX){
smallsql/database/IndexDescription.java۞180۩throw SmallSQLException.create(Language.INDEX_FILE_INVALID, file.getName());
smallsql/database/IndexDescription.java۞181۩}
smallsql/database/IndexDescription.java۞182۩if(version > INDEX_VERSION){
smallsql/database/IndexDescription.java۞183۩Object[] params = { new Integer(version), file.getName() };
smallsql/database/IndexDescription.java۞184۩throw SmallSQLException.create(Language.FILE_TOONEW, params);
smallsql/database/IndexDescription.java۞185۩}
smallsql/database/IndexDescription.java۞186۩}catch(Throwable e){
smallsql/database/IndexDescription.java۞187۩if(raFile != null)
smallsql/database/IndexDescription.java۞188۩try{
smallsql/database/IndexDescription.java۞189۩raFile.close();
smallsql/database/IndexDescription.java۞190۩}catch(Exception e2){
smallsql/database/IndexDescription.java۞191۩DriverManager.println(e2.toString());
smallsql/database/IndexDescription.java۞192۩}
smallsql/database/IndexDescription.java۞193۩throw SmallSQLException.createFromException(e);
smallsql/database/IndexDescription.java۞194۩}
smallsql/database/IndexDescription.java۞195۩}
smallsql/database/IndexDescription.java۞198۩void drop(Database database) throws Exception {
smallsql/database/IndexDescription.java۞199۩close();
smallsql/database/IndexDescription.java۞200۩boolean ok = getFile( database, name).delete();
smallsql/database/IndexDescription.java۞201۩if(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);
smallsql/database/IndexDescription.java۞202۩}
smallsql/database/IndexDescription.java۞205۩void close() throws Exception{
smallsql/database/IndexDescription.java۞206۩if(raFile != null){
smallsql/database/IndexDescription.java۞207۩raFile.close();
smallsql/database/IndexDescription.java۞208۩raFile = null;
smallsql/database/IndexDescription.java۞209۩}
smallsql/database/IndexDescription.java۞210۩}
smallsql/database/IndexDescription.java۞213۩private final void writeMagic(FileChannel raFile) throws Exception{
smallsql/database/IndexDescription.java۞214۩ByteBuffer buffer = ByteBuffer.allocate(8);
smallsql/database/IndexDescription.java۞215۩buffer.putInt(MAGIC_INDEX);
smallsql/database/IndexDescription.java۞216۩buffer.putInt(INDEX_VERSION);
smallsql/database/IndexDescription.java۞217۩buffer.position(0);
smallsql/database/IndexDescription.java۞218۩raFile.write(buffer);
smallsql/database/IndexDescription.java۞219۩}
smallsql/database/IndexDescription.java۞227۩final void writeExpression( int columnIdx, Expression valueExpression) {
smallsql/database/IndexDescription.java۞228۩int idx = matrix[columnIdx];
smallsql/database/IndexDescription.java۞229۩if(idx >= 0)
smallsql/database/IndexDescription.java۞230۩expressions.set(idx, valueExpression);
smallsql/database/IndexDescription.java۞231۩}
smallsql/database/IndexDescription.java۞238۩final void writeFinish(SSConnection con) {
smallsql/database/IndexDescription.java۞241۩}
smallsql/database/IndexDescription.java۞247۩final void save(StoreImpl store) throws SQLException{
smallsql/database/IndexDescription.java۞248۩store.writeInt(constraintType);
smallsql/database/IndexDescription.java۞249۩store.writeInt(columns.size());
smallsql/database/IndexDescription.java۞250۩for(int c=0; c<columns.size(); c++){
smallsql/database/IndexDescription.java۞251۩store.writeString( columns.get(c) );
smallsql/database/IndexDescription.java۞252۩}
smallsql/database/IndexDescription.java۞253۩store.writeString(name);
smallsql/database/IndexDescription.java۞254۩}
smallsql/database/IndexDescription.java۞260۩final static IndexDescription load(Database database, TableView tableView, StoreImpl store) throws SQLException{
smallsql/database/IndexDescription.java۞261۩int constraintType = store.readInt();
smallsql/database/IndexDescription.java۞262۩int count = store.readInt();
smallsql/database/IndexDescription.java۞263۩Strings columns = new Strings();
smallsql/database/IndexDescription.java۞264۩Expressions expressions = new Expressions();
smallsql/database/IndexDescription.java۞265۩SQLParser sqlParser = new SQLParser();
smallsql/database/IndexDescription.java۞266۩for(int c=0; c<count; c++){
smallsql/database/IndexDescription.java۞267۩String column = store.readString();
smallsql/database/IndexDescription.java۞268۩columns.add( column );
smallsql/database/IndexDescription.java۞269۩expressions.add( sqlParser.parseExpression(column));
smallsql/database/IndexDescription.java۞270۩}
smallsql/database/IndexDescription.java۞271۩IndexDescription indexDesc = new IndexDescription( store.readString(), tableView.name, constraintType, expressions, columns);
smallsql/database/IndexDescription.java۞272۩indexDesc.init( database, tableView );
smallsql/database/IndexDescription.java۞273۩indexDesc.load(database);
smallsql/database/IndexDescription.java۞274۩return indexDesc;
smallsql/database/IndexDescription.java۞275۩}
smallsql/database/IndexDescription.java۞278۩}
smallsql/database/IndexDescriptions.java۞34۩package smallsql.database;
smallsql/database/IndexDescriptions.java۞36۩import java.sql.SQLException;
smallsql/database/IndexDescriptions.java۞37۩import smallsql.database.language.Language;
smallsql/database/IndexDescriptions.java۞45۩class IndexDescriptions {
smallsql/database/IndexDescriptions.java۞46۩private int size;
smallsql/database/IndexDescriptions.java۞47۩private IndexDescription[] data;
smallsql/database/IndexDescriptions.java۞49۩private boolean hasPrimary;
smallsql/database/IndexDescriptions.java۞52۩IndexDescriptions(){
smallsql/database/IndexDescriptions.java۞53۩data = new IndexDescription[4];
smallsql/database/IndexDescriptions.java۞54۩}
smallsql/database/IndexDescriptions.java۞57۩final int size(){
smallsql/database/IndexDescriptions.java۞58۩return size;
smallsql/database/IndexDescriptions.java۞59۩}
smallsql/database/IndexDescriptions.java۞62۩final IndexDescription get(int idx){
smallsql/database/IndexDescriptions.java۞64۩if (idx >= size)
smallsql/database/IndexDescriptions.java۞65۩throw new IndexOutOfBoundsException("Column index: "+idx+", Size: "+size);
smallsql/database/IndexDescriptions.java۞66۩return data[idx];
smallsql/database/IndexDescriptions.java۞67۩}
smallsql/database/IndexDescriptions.java۞70۩final void add(IndexDescription descr) throws SQLException{
smallsql/database/IndexDescriptions.java۞71۩if(size >= data.length ){
smallsql/database/IndexDescriptions.java۞72۩resize(size << 1);
smallsql/database/IndexDescriptions.java۞73۩}
smallsql/database/IndexDescriptions.java۞74۩if(hasPrimary && descr.isPrimary()){
smallsql/database/IndexDescriptions.java۞75۩throw SmallSQLException.create(Language.PK_ONLYONE);
smallsql/database/IndexDescriptions.java۞76۩}
smallsql/database/IndexDescriptions.java۞77۩hasPrimary = descr.isPrimary();
smallsql/database/IndexDescriptions.java۞78۩data[size++] = descr;
smallsql/database/IndexDescriptions.java۞79۩}
smallsql/database/IndexDescriptions.java۞82۩private final void resize(int newSize){
smallsql/database/IndexDescriptions.java۞83۩IndexDescription[] dataNew = new IndexDescription[newSize];
smallsql/database/IndexDescriptions.java۞84۩System.arraycopy(data, 0, dataNew, 0, size);
smallsql/database/IndexDescriptions.java۞85۩data = dataNew;
smallsql/database/IndexDescriptions.java۞86۩}
smallsql/database/IndexDescriptions.java۞89۩final IndexDescription findBestMatch(Strings columns){
smallsql/database/IndexDescriptions.java۞90۩int bestFactor = Integer.MAX_VALUE;
smallsql/database/IndexDescriptions.java۞91۩int bestIdx = 0;
smallsql/database/IndexDescriptions.java۞92۩for(int i=0; i<size; i++){
smallsql/database/IndexDescriptions.java۞93۩int factor = data[i].matchFactor(columns);
smallsql/database/IndexDescriptions.java۞94۩if(factor == 0)
smallsql/database/IndexDescriptions.java۞95۩return data[i];
smallsql/database/IndexDescriptions.java۞97۩if(factor < bestFactor){
smallsql/database/IndexDescriptions.java۞98۩bestFactor = factor;
smallsql/database/IndexDescriptions.java۞99۩bestIdx = i;
smallsql/database/IndexDescriptions.java۞100۩}
smallsql/database/IndexDescriptions.java۞101۩}
smallsql/database/IndexDescriptions.java۞102۩if(bestFactor == Integer.MAX_VALUE)
smallsql/database/IndexDescriptions.java۞103۩return null;
smallsql/database/IndexDescriptions.java۞104۩else
smallsql/database/IndexDescriptions.java۞105۩return data[bestIdx];
smallsql/database/IndexDescriptions.java۞106۩}
smallsql/database/IndexDescriptions.java۞115۩void create(SSConnection con, Database database, TableView tableView) throws Exception{
smallsql/database/IndexDescriptions.java۞116۩for(int i=0; i<size; i++){
smallsql/database/IndexDescriptions.java۞117۩data[i].create(con, database, tableView);
smallsql/database/IndexDescriptions.java۞118۩}
smallsql/database/IndexDescriptions.java۞119۩}
smallsql/database/IndexDescriptions.java۞122۩void drop(Database database) throws Exception {
smallsql/database/IndexDescriptions.java۞123۩for(int i=0; i<size; i++){
smallsql/database/IndexDescriptions.java۞124۩data[i].drop(database);
smallsql/database/IndexDescriptions.java۞125۩}
smallsql/database/IndexDescriptions.java۞126۩}
smallsql/database/IndexDescriptions.java۞129۩void close() throws Exception{
smallsql/database/IndexDescriptions.java۞130۩for(int i=0; i<size; i++){
smallsql/database/IndexDescriptions.java۞131۩data[i].close();
smallsql/database/IndexDescriptions.java۞132۩}
smallsql/database/IndexDescriptions.java۞133۩}
smallsql/database/IndexDescriptions.java۞136۩void add(IndexDescriptions indexes) throws SQLException {
smallsql/database/IndexDescriptions.java۞137۩for(int i=0; i<indexes.size; i++){
smallsql/database/IndexDescriptions.java۞138۩add(indexes.data[i]);
smallsql/database/IndexDescriptions.java۞139۩}
smallsql/database/IndexDescriptions.java۞140۩}
smallsql/database/IndexDescriptions.java۞141۩}
smallsql/database/IndexNode.java۞33۩package smallsql.database;
smallsql/database/IndexNode.java۞35۩import java.sql.*;
smallsql/database/IndexNode.java۞36۩import smallsql.database.language.Language;
smallsql/database/IndexNode.java۞41۩class IndexNode {
smallsql/database/IndexNode.java۞42۩final private boolean unique;
smallsql/database/IndexNode.java۞43۩final private char digit;
smallsql/database/IndexNode.java۞45۩static final private IndexNode[] EMPTY_NODES = new IndexNode[0];
smallsql/database/IndexNode.java۞49۩private IndexNode[] nodes = EMPTY_NODES;
smallsql/database/IndexNode.java۞57۩private char[] remainderKey;
smallsql/database/IndexNode.java۞62۩private Object value;
smallsql/database/IndexNode.java۞86۩protected IndexNode(boolean unique, char digit){
smallsql/database/IndexNode.java۞87۩this.unique = unique;
smallsql/database/IndexNode.java۞88۩this.digit  = digit;
smallsql/database/IndexNode.java۞89۩}
smallsql/database/IndexNode.java۞97۩protected IndexNode createIndexNode(boolean unique, char digit){
smallsql/database/IndexNode.java۞98۩return new IndexNode(unique, digit);
smallsql/database/IndexNode.java۞99۩}
smallsql/database/IndexNode.java۞102۩final char getDigit(){
smallsql/database/IndexNode.java۞103۩return digit;
smallsql/database/IndexNode.java۞104۩}
smallsql/database/IndexNode.java۞107۩final boolean getUnique(){
smallsql/database/IndexNode.java۞108۩return unique;
smallsql/database/IndexNode.java۞109۩}
smallsql/database/IndexNode.java۞116۩final boolean isEmpty(){
smallsql/database/IndexNode.java۞117۩return nodes == EMPTY_NODES && value == null;
smallsql/database/IndexNode.java۞118۩}
smallsql/database/IndexNode.java۞121۩final void clear(){
smallsql/database/IndexNode.java۞122۩nodes = EMPTY_NODES;
smallsql/database/IndexNode.java۞123۩value = null;
smallsql/database/IndexNode.java۞124۩remainderKey = null;
smallsql/database/IndexNode.java۞125۩}
smallsql/database/IndexNode.java۞128۩final void clearValue(){
smallsql/database/IndexNode.java۞129۩value = null;
smallsql/database/IndexNode.java۞130۩}
smallsql/database/IndexNode.java۞137۩final Object getValue(){
smallsql/database/IndexNode.java۞138۩return value;
smallsql/database/IndexNode.java۞139۩}
smallsql/database/IndexNode.java۞142۩final IndexNode[] getChildNodes(){
smallsql/database/IndexNode.java۞143۩return nodes;
smallsql/database/IndexNode.java۞144۩}
smallsql/database/IndexNode.java۞151۩final IndexNode getChildNode(char digit){
smallsql/database/IndexNode.java۞152۩int pos = findNodePos(digit);
smallsql/database/IndexNode.java۞153۩if(pos >=0) return nodes[pos];
smallsql/database/IndexNode.java۞154۩return null;
smallsql/database/IndexNode.java۞155۩}
smallsql/database/IndexNode.java۞158۩final char[] getRemainderValue(){
smallsql/database/IndexNode.java۞159۩return remainderKey;
smallsql/database/IndexNode.java۞160۩}
smallsql/database/IndexNode.java۞167۩final IndexNode addNode(char digit) throws SQLException{
smallsql/database/IndexNode.java۞168۩if(remainderKey != null) moveRemainderValue();
smallsql/database/IndexNode.java۞169۩int pos = findNodePos( digit );
smallsql/database/IndexNode.java۞170۩if(pos == -1){
smallsql/database/IndexNode.java۞171۩IndexNode node = createIndexNode(unique, digit);
smallsql/database/IndexNode.java۞172۩saveNode( node );
smallsql/database/IndexNode.java۞173۩return node;
smallsql/database/IndexNode.java۞174۩}else{
smallsql/database/IndexNode.java۞175۩return nodes[pos];
smallsql/database/IndexNode.java۞176۩}
smallsql/database/IndexNode.java۞177۩}
smallsql/database/IndexNode.java۞184۩final void removeNode(char digit){
smallsql/database/IndexNode.java۞185۩int pos = findNodePos( digit );
smallsql/database/IndexNode.java۞186۩if(pos != -1){
smallsql/database/IndexNode.java۞187۩int length = nodes.length-1;
smallsql/database/IndexNode.java۞188۩IndexNode[] temp = new IndexNode[length];
smallsql/database/IndexNode.java۞189۩System.arraycopy(nodes, 0, temp, 0, pos);
smallsql/database/IndexNode.java۞190۩System.arraycopy(nodes, pos+1, temp, pos, length-pos);
smallsql/database/IndexNode.java۞191۩nodes = temp;
smallsql/database/IndexNode.java۞192۩}
smallsql/database/IndexNode.java۞193۩}
smallsql/database/IndexNode.java۞201۩final void addNode(char digit, long rowOffset) throws SQLException{
smallsql/database/IndexNode.java۞202۩IndexNode node = addNode(digit);
smallsql/database/IndexNode.java۞203۩if(node.remainderKey != null) node.moveRemainderValue();
smallsql/database/IndexNode.java۞204۩node.saveValue(rowOffset);
smallsql/database/IndexNode.java۞205۩}
smallsql/database/IndexNode.java۞215۩final void saveValue(long rowOffset) throws SQLException{
smallsql/database/IndexNode.java۞216۩if(unique){
smallsql/database/IndexNode.java۞217۩if(value != null) throw SmallSQLException.create(Language.KEY_DUPLICATE);
smallsql/database/IndexNode.java۞218۩value = new Long(rowOffset);
smallsql/database/IndexNode.java۞219۩}else{
smallsql/database/IndexNode.java۞220۩LongTreeList list = (LongTreeList)value;
smallsql/database/IndexNode.java۞221۩if(list == null){
smallsql/database/IndexNode.java۞222۩value = list = new LongTreeList();
smallsql/database/IndexNode.java۞223۩}
smallsql/database/IndexNode.java۞224۩list.add(rowOffset);
smallsql/database/IndexNode.java۞225۩}
smallsql/database/IndexNode.java۞226۩}
smallsql/database/IndexNode.java۞241۩final void addRemainderKey(long rowOffset, long remainderValue, int charCount) throws SQLException{
smallsql/database/IndexNode.java۞242۩saveRemainderValue(remainderValue, charCount);
smallsql/database/IndexNode.java۞243۩value = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);
smallsql/database/IndexNode.java۞244۩}
smallsql/database/IndexNode.java۞247۩final void addRemainderKey(long rowOffset, char[] remainderValue, int offset) throws SQLException{
smallsql/database/IndexNode.java۞248۩saveRemainderValue(remainderValue, offset);
smallsql/database/IndexNode.java۞249۩value = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);
smallsql/database/IndexNode.java۞250۩}
smallsql/database/IndexNode.java۞259۩final IndexNode addRoot(char digit) throws SQLException{
smallsql/database/IndexNode.java۞260۩IndexNode node = addNode(digit);
smallsql/database/IndexNode.java۞261۩if(node.remainderKey != null) node.moveRemainderValue();
smallsql/database/IndexNode.java۞262۩return node.addRoot();
smallsql/database/IndexNode.java۞263۩}
smallsql/database/IndexNode.java۞266۩final IndexNode addRootValue(char[] remainderValue, int offset) throws SQLException{
smallsql/database/IndexNode.java۞267۩saveRemainderValue(remainderValue, offset);
smallsql/database/IndexNode.java۞268۩return addRoot();
smallsql/database/IndexNode.java۞269۩}
smallsql/database/IndexNode.java۞272۩final IndexNode addRootValue( long remainderValue, int digitCount) throws SQLException{
smallsql/database/IndexNode.java۞273۩saveRemainderValue(remainderValue, digitCount);
smallsql/database/IndexNode.java۞274۩return addRoot();
smallsql/database/IndexNode.java۞275۩}
smallsql/database/IndexNode.java۞283۩private final void moveRemainderValue() throws SQLException{
smallsql/database/IndexNode.java۞284۩Object rowOffset = value;
smallsql/database/IndexNode.java۞285۩char[] puffer = remainderKey;
smallsql/database/IndexNode.java۞286۩value = null;
smallsql/database/IndexNode.java۞287۩remainderKey = null;
smallsql/database/IndexNode.java۞288۩IndexNode newNode = addNode(puffer[0]);
smallsql/database/IndexNode.java۞289۩if(puffer.length == 1){
smallsql/database/IndexNode.java۞290۩newNode.value  = rowOffset;
smallsql/database/IndexNode.java۞291۩}else{
smallsql/database/IndexNode.java۞292۩newNode.moveRemainderValueSub( rowOffset, puffer);
smallsql/database/IndexNode.java۞293۩}
smallsql/database/IndexNode.java۞294۩}
smallsql/database/IndexNode.java۞297۩private final void moveRemainderValueSub( Object rowOffset, char[] remainderValue){
smallsql/database/IndexNode.java۞298۩int length = remainderValue.length-1;
smallsql/database/IndexNode.java۞299۩this.remainderKey = new char[length];
smallsql/database/IndexNode.java۞300۩value = rowOffset;
smallsql/database/IndexNode.java۞301۩System.arraycopy( remainderValue, 1, this.remainderKey, 0, length);
smallsql/database/IndexNode.java۞302۩}
smallsql/database/IndexNode.java۞305۩private final void saveRemainderValue(char[] remainderValue, int offset){
smallsql/database/IndexNode.java۞306۩int length = remainderValue.length-offset;
smallsql/database/IndexNode.java۞307۩this.remainderKey = new char[length];
smallsql/database/IndexNode.java۞308۩System.arraycopy( remainderValue, offset, this.remainderKey, 0, length);
smallsql/database/IndexNode.java۞309۩}
smallsql/database/IndexNode.java۞312۩private final void saveRemainderValue( long remainderValue, int charCount){
smallsql/database/IndexNode.java۞313۩this.remainderKey = new char[charCount];
smallsql/database/IndexNode.java۞314۩for(int i=charCount-1, d=0; i>=0; i--){
smallsql/database/IndexNode.java۞315۩this.remainderKey[d++] = (char)(remainderValue >> (i<<4));
smallsql/database/IndexNode.java۞316۩}
smallsql/database/IndexNode.java۞317۩}
smallsql/database/IndexNode.java۞323۩final IndexNode addRoot() throws SQLException{
smallsql/database/IndexNode.java۞324۩IndexNode root = (IndexNode)value;
smallsql/database/IndexNode.java۞325۩if(root == null){
smallsql/database/IndexNode.java۞326۩value = root = createIndexNode(unique, (char)-1);
smallsql/database/IndexNode.java۞327۩}
smallsql/database/IndexNode.java۞328۩return root;
smallsql/database/IndexNode.java۞329۩}
smallsql/database/IndexNode.java۞332۩private final void saveNode(IndexNode node){
smallsql/database/IndexNode.java۞333۩int length = nodes.length;
smallsql/database/IndexNode.java۞334۩IndexNode[] temp = new IndexNode[length+1];
smallsql/database/IndexNode.java۞335۩if(length == 0){
smallsql/database/IndexNode.java۞336۩temp[0] = node;
smallsql/database/IndexNode.java۞337۩}else{
smallsql/database/IndexNode.java۞338۩int pos = findNodeInsertPos( node.digit, 0, length);
smallsql/database/IndexNode.java۞339۩System.arraycopy(nodes, 0, temp, 0, pos);
smallsql/database/IndexNode.java۞340۩System.arraycopy(nodes, pos, temp, pos+1, length-pos);
smallsql/database/IndexNode.java۞341۩temp[pos] = node;
smallsql/database/IndexNode.java۞342۩}
smallsql/database/IndexNode.java۞343۩nodes = temp;
smallsql/database/IndexNode.java۞344۩}
smallsql/database/IndexNode.java۞347۩private final int findNodeInsertPos(char digit, int start, int end){
smallsql/database/IndexNode.java۞348۩if(start == end) return start;
smallsql/database/IndexNode.java۞349۩int mid = start + (end - start)/2;
smallsql/database/IndexNode.java۞350۩char nodeDigit = nodes[mid].digit;
smallsql/database/IndexNode.java۞351۩if(nodeDigit == digit) return mid;
smallsql/database/IndexNode.java۞352۩if(nodeDigit < digit){
smallsql/database/IndexNode.java۞353۩return findNodeInsertPos( digit, mid+1, end );
smallsql/database/IndexNode.java۞354۩}else{
smallsql/database/IndexNode.java۞355۩if(start == mid) return start;
smallsql/database/IndexNode.java۞356۩return findNodeInsertPos( digit, start, mid );
smallsql/database/IndexNode.java۞357۩}
smallsql/database/IndexNode.java۞358۩}
smallsql/database/IndexNode.java۞361۩private final int findNodePos(char digit){
smallsql/database/IndexNode.java۞362۩return findNodePos(digit, 0, nodes.length);
smallsql/database/IndexNode.java۞363۩}
smallsql/database/IndexNode.java۞366۩private final int findNodePos(char digit, int start, int end){
smallsql/database/IndexNode.java۞367۩if(start == nodes.length) return -1;
smallsql/database/IndexNode.java۞368۩int mid = start + (end - start)/2;
smallsql/database/IndexNode.java۞369۩char nodeDigit = nodes[mid].digit;
smallsql/database/IndexNode.java۞370۩if(nodeDigit == digit) return mid;
smallsql/database/IndexNode.java۞371۩if(nodeDigit < digit){
smallsql/database/IndexNode.java۞372۩return findNodePos( digit, mid+1, end );
smallsql/database/IndexNode.java۞373۩}else{
smallsql/database/IndexNode.java۞374۩if(start == mid) return -1;
smallsql/database/IndexNode.java۞375۩return findNodePos( digit, start, mid-1 );
smallsql/database/IndexNode.java۞376۩}
smallsql/database/IndexNode.java۞377۩}
smallsql/database/IndexNode.java۞380۩void save(StoreImpl output) throws SQLException{
smallsql/database/IndexNode.java۞381۩output.writeShort(digit);
smallsql/database/IndexNode.java۞383۩int length = remainderKey == null ? 0 : remainderKey.length;
smallsql/database/IndexNode.java۞384۩output.writeInt(length);
smallsql/database/IndexNode.java۞385۩if(length>0) output.writeChars(remainderKey);
smallsql/database/IndexNode.java۞387۩if(value == null){
smallsql/database/IndexNode.java۞388۩output.writeByte(0);
smallsql/database/IndexNode.java۞389۩}else
smallsql/database/IndexNode.java۞390۩if(value instanceof Long){
smallsql/database/IndexNode.java۞391۩output.writeByte(1);
smallsql/database/IndexNode.java۞392۩output.writeLong( ((Long)value).longValue() );
smallsql/database/IndexNode.java۞393۩}else
smallsql/database/IndexNode.java۞394۩if(value instanceof LongTreeList){
smallsql/database/IndexNode.java۞395۩output.writeByte(2);
smallsql/database/IndexNode.java۞396۩((LongTreeList)value).save(output);
smallsql/database/IndexNode.java۞397۩}else
smallsql/database/IndexNode.java۞398۩if(value instanceof IndexNode){
smallsql/database/IndexNode.java۞399۩output.writeByte(3);
smallsql/database/IndexNode.java۞400۩((IndexNode)value).saveRef(output);
smallsql/database/IndexNode.java۞401۩}
smallsql/database/IndexNode.java۞403۩output.writeShort(nodes.length);
smallsql/database/IndexNode.java۞404۩for(int i=0; i<nodes.length; i++){
smallsql/database/IndexNode.java۞405۩nodes[i].saveRef( output );
smallsql/database/IndexNode.java۞406۩}
smallsql/database/IndexNode.java۞408۩}
smallsql/database/IndexNode.java۞412۩void saveRef(StoreImpl output) throws SQLException{
smallsql/database/IndexNode.java۞414۩}
smallsql/database/IndexNode.java۞417۩IndexNode loadRef( long offset ) throws SQLException{
smallsql/database/IndexNode.java۞418۩throw new Error();
smallsql/database/IndexNode.java۞419۩}
smallsql/database/IndexNode.java۞422۩void load(StoreImpl input) throws SQLException{
smallsql/database/IndexNode.java۞423۩int length = input.readInt();
smallsql/database/IndexNode.java۞424۩remainderKey = (length>0) ? input.readChars(length) : null;
smallsql/database/IndexNode.java۞426۩int valueType = input.readByte();
smallsql/database/IndexNode.java۞427۩switch(valueType){
smallsql/database/IndexNode.java۞428۩case 0:
smallsql/database/IndexNode.java۞429۩value = null;
smallsql/database/IndexNode.java۞430۩break;
smallsql/database/IndexNode.java۞431۩case 1:
smallsql/database/IndexNode.java۞432۩value = new Long(input.readLong());
smallsql/database/IndexNode.java۞433۩break;
smallsql/database/IndexNode.java۞434۩case 2:
smallsql/database/IndexNode.java۞435۩value = new LongTreeList(input);
smallsql/database/IndexNode.java۞436۩break;
smallsql/database/IndexNode.java۞437۩case 3:
smallsql/database/IndexNode.java۞438۩value = loadRef( input.readLong());
smallsql/database/IndexNode.java۞439۩break;
smallsql/database/IndexNode.java۞440۩default:
smallsql/database/IndexNode.java۞441۩throw SmallSQLException.create(Language.INDEX_CORRUPT, String.valueOf(valueType));
smallsql/database/IndexNode.java۞442۩}
smallsql/database/IndexNode.java۞444۩nodes = new IndexNode[input.readShort()];
smallsql/database/IndexNode.java۞445۩for(int i=0; i<nodes.length; i++){
smallsql/database/IndexNode.java۞446۩nodes[i] = loadRef( input.readLong() );
smallsql/database/IndexNode.java۞447۩}
smallsql/database/IndexNode.java۞448۩}
smallsql/database/IndexNode.java۞451۩}
smallsql/database/IndexNodeScrollStatus.java۞34۩package smallsql.database;
smallsql/database/IndexNodeScrollStatus.java۞39۩final class IndexNodeScrollStatus {
smallsql/database/IndexNodeScrollStatus.java۞40۩final boolean asc;
smallsql/database/IndexNodeScrollStatus.java۞41۩final IndexNode[] nodes;
smallsql/database/IndexNodeScrollStatus.java۞49۩int idx;
smallsql/database/IndexNodeScrollStatus.java۞50۩final Object nodeValue;
smallsql/database/IndexNodeScrollStatus.java۞54۩final int level;
smallsql/database/IndexNodeScrollStatus.java۞57۩IndexNodeScrollStatus(IndexNode node, boolean asc, boolean scroll, int level){
smallsql/database/IndexNodeScrollStatus.java۞58۩this.nodes = node.getChildNodes();
smallsql/database/IndexNodeScrollStatus.java۞59۩nodeValue = node.getValue();
smallsql/database/IndexNodeScrollStatus.java۞60۩this.asc = asc;
smallsql/database/IndexNodeScrollStatus.java۞61۩this.idx = (asc ^ scroll) ? nodes.length : -2;
smallsql/database/IndexNodeScrollStatus.java۞62۩this.level = level;
smallsql/database/IndexNodeScrollStatus.java۞63۩}
smallsql/database/IndexNodeScrollStatus.java۞66۩void afterLast(){
smallsql/database/IndexNodeScrollStatus.java۞67۩idx = (asc) ? nodes.length : -2;
smallsql/database/IndexNodeScrollStatus.java۞68۩}
smallsql/database/IndexNodeScrollStatus.java۞83۩}
smallsql/database/IndexScrollStatus.java۞34۩package smallsql.database;
smallsql/database/IndexScrollStatus.java۞39۩class IndexScrollStatus {
smallsql/database/IndexScrollStatus.java۞40۩private final IndexNode rootPage;
smallsql/database/IndexScrollStatus.java۞41۩private final Expressions expressions;
smallsql/database/IndexScrollStatus.java۞43۩private final java.util.Stack nodeStack = new java.util.Stack();
smallsql/database/IndexScrollStatus.java۞45۩private LongTreeList longList;
smallsql/database/IndexScrollStatus.java۞46۩private LongTreeListEnum longListEnum = new LongTreeListEnum();
smallsql/database/IndexScrollStatus.java۞49۩IndexScrollStatus(IndexNode rootPage, Expressions expressions){
smallsql/database/IndexScrollStatus.java۞50۩this.rootPage	= rootPage;
smallsql/database/IndexScrollStatus.java۞51۩this.expressions= expressions;
smallsql/database/IndexScrollStatus.java۞52۩reset();
smallsql/database/IndexScrollStatus.java۞53۩}
smallsql/database/IndexScrollStatus.java۞59۩final void reset(){
smallsql/database/IndexScrollStatus.java۞60۩nodeStack.clear();
smallsql/database/IndexScrollStatus.java۞61۩boolean asc = (expressions.get(0).getAlias() != SQLTokenizer.DESC_STR);
smallsql/database/IndexScrollStatus.java۞62۩nodeStack.push( new IndexNodeScrollStatus(rootPage, asc, true, 0) );
smallsql/database/IndexScrollStatus.java۞63۩}
smallsql/database/IndexScrollStatus.java۞70۩final long getRowOffset( boolean scroll){
smallsql/database/IndexScrollStatus.java۞71۩if(longList != null){
smallsql/database/IndexScrollStatus.java۞72۩long rowOffset = scroll ?
smallsql/database/IndexScrollStatus.java۞73۩longList.getNext(longListEnum) :
smallsql/database/IndexScrollStatus.java۞74۩longList.getPrevious(longListEnum);
smallsql/database/IndexScrollStatus.java۞75۩if(rowOffset < 0){
smallsql/database/IndexScrollStatus.java۞77۩longList = null;
smallsql/database/IndexScrollStatus.java۞78۩}else{
smallsql/database/IndexScrollStatus.java۞79۩return rowOffset;
smallsql/database/IndexScrollStatus.java۞80۩}
smallsql/database/IndexScrollStatus.java۞81۩}
smallsql/database/IndexScrollStatus.java۞82۩while(true){
smallsql/database/IndexScrollStatus.java۞83۩IndexNodeScrollStatus status = (IndexNodeScrollStatus)nodeStack.peek();
smallsql/database/IndexScrollStatus.java۞84۩int level = status.level;
smallsql/database/IndexScrollStatus.java۞85۩if(!status.asc ^ scroll){
smallsql/database/IndexScrollStatus.java۞87۩int idx = ++status.idx;
smallsql/database/IndexScrollStatus.java۞88۩if(idx == -1){
smallsql/database/IndexScrollStatus.java۞89۩if(status.nodeValue != null){
smallsql/database/IndexScrollStatus.java۞90۩if(status.nodeValue instanceof IndexNode){
smallsql/database/IndexScrollStatus.java۞91۩level++;
smallsql/database/IndexScrollStatus.java۞92۩nodeStack.push(
smallsql/database/IndexScrollStatus.java۞93۩new IndexNodeScrollStatus( 	(IndexNode)status.nodeValue,
smallsql/database/IndexScrollStatus.java۞94۩(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),
smallsql/database/IndexScrollStatus.java۞95۩scroll, level));
smallsql/database/IndexScrollStatus.java۞96۩continue;
smallsql/database/IndexScrollStatus.java۞97۩}else
smallsql/database/IndexScrollStatus.java۞98۩return getReturnValue(status.nodeValue);
smallsql/database/IndexScrollStatus.java۞99۩}
smallsql/database/IndexScrollStatus.java۞101۩idx = ++status.idx;
smallsql/database/IndexScrollStatus.java۞102۩}
smallsql/database/IndexScrollStatus.java۞103۩if(idx >= status.nodes.length){
smallsql/database/IndexScrollStatus.java۞105۩if(nodeStack.size() > 1){
smallsql/database/IndexScrollStatus.java۞106۩nodeStack.pop();
smallsql/database/IndexScrollStatus.java۞107۩continue;
smallsql/database/IndexScrollStatus.java۞108۩}else{
smallsql/database/IndexScrollStatus.java۞110۩status.idx = status.nodes.length;
smallsql/database/IndexScrollStatus.java۞111۩return -1;
smallsql/database/IndexScrollStatus.java۞112۩}
smallsql/database/IndexScrollStatus.java۞113۩}
smallsql/database/IndexScrollStatus.java۞114۩IndexNode node = status.nodes[idx];
smallsql/database/IndexScrollStatus.java۞115۩nodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );
smallsql/database/IndexScrollStatus.java۞116۩}else{
smallsql/database/IndexScrollStatus.java۞118۩int idx = --status.idx;
smallsql/database/IndexScrollStatus.java۞119۩if(idx == -1){
smallsql/database/IndexScrollStatus.java۞120۩if(status.nodeValue != null){
smallsql/database/IndexScrollStatus.java۞121۩if(status.nodeValue instanceof IndexNode){
smallsql/database/IndexScrollStatus.java۞122۩level++;
smallsql/database/IndexScrollStatus.java۞123۩nodeStack.push(
smallsql/database/IndexScrollStatus.java۞124۩new IndexNodeScrollStatus( 	(IndexNode)status.nodeValue,
smallsql/database/IndexScrollStatus.java۞125۩(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),
smallsql/database/IndexScrollStatus.java۞126۩scroll, level));
smallsql/database/IndexScrollStatus.java۞127۩continue;
smallsql/database/IndexScrollStatus.java۞128۩}else
smallsql/database/IndexScrollStatus.java۞129۩return getReturnValue(status.nodeValue);
smallsql/database/IndexScrollStatus.java۞130۩}
smallsql/database/IndexScrollStatus.java۞132۩}
smallsql/database/IndexScrollStatus.java۞133۩if(idx < 0){
smallsql/database/IndexScrollStatus.java۞135۩if(nodeStack.size() > 1){
smallsql/database/IndexScrollStatus.java۞136۩nodeStack.pop();
smallsql/database/IndexScrollStatus.java۞137۩continue;
smallsql/database/IndexScrollStatus.java۞138۩}else{
smallsql/database/IndexScrollStatus.java۞140۩return -1;
smallsql/database/IndexScrollStatus.java۞141۩}
smallsql/database/IndexScrollStatus.java۞142۩}
smallsql/database/IndexScrollStatus.java۞143۩IndexNode node = status.nodes[idx];
smallsql/database/IndexScrollStatus.java۞144۩nodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );
smallsql/database/IndexScrollStatus.java۞145۩}
smallsql/database/IndexScrollStatus.java۞146۩}
smallsql/database/IndexScrollStatus.java۞147۩}
smallsql/database/IndexScrollStatus.java۞154۩final void afterLast(){
smallsql/database/IndexScrollStatus.java۞155۩longList = null;
smallsql/database/IndexScrollStatus.java۞156۩nodeStack.setSize(1);
smallsql/database/IndexScrollStatus.java۞157۩((IndexNodeScrollStatus)nodeStack.peek()).afterLast();
smallsql/database/IndexScrollStatus.java۞158۩}
smallsql/database/IndexScrollStatus.java۞172۩private final long getReturnValue( Object value){
smallsql/database/IndexScrollStatus.java۞173۩if(rootPage.getUnique()){
smallsql/database/IndexScrollStatus.java۞174۩return ((Long)value).longValue();
smallsql/database/IndexScrollStatus.java۞175۩}else{
smallsql/database/IndexScrollStatus.java۞176۩longList = (LongTreeList)value;
smallsql/database/IndexScrollStatus.java۞177۩longListEnum.reset();
smallsql/database/IndexScrollStatus.java۞178۩return longList.getNext(longListEnum);
smallsql/database/IndexScrollStatus.java۞179۩}
smallsql/database/IndexScrollStatus.java۞181۩}
smallsql/database/IndexScrollStatus.java۞186۩}
smallsql/database/Join.java۞33۩package smallsql.database;
smallsql/database/Join.java۞36۩final class Join extends RowSource{
smallsql/database/Join.java۞38۩Expression condition;
smallsql/database/Join.java۞39۩private int type;
smallsql/database/Join.java۞40۩RowSource left;
smallsql/database/Join.java۞41۩RowSource right;
smallsql/database/Join.java۞42۩private boolean isAfterLast;
smallsql/database/Join.java۞45۩private LongLongList rowPositions;
smallsql/database/Join.java۞46۩private int row;
smallsql/database/Join.java۞49۩JoinScroll scroll;
smallsql/database/Join.java۞52۩Join( int type, RowSource left, RowSource right, Expression condition ){
smallsql/database/Join.java۞53۩this.type = type;
smallsql/database/Join.java۞54۩this.condition = condition;
smallsql/database/Join.java۞55۩this.left = left;
smallsql/database/Join.java۞56۩this.right = right;
smallsql/database/Join.java۞57۩}
smallsql/database/Join.java۞60۩final boolean isScrollable(){
smallsql/database/Join.java۞61۩return false;
smallsql/database/Join.java۞62۩}
smallsql/database/Join.java۞65۩void beforeFirst() throws Exception{
smallsql/database/Join.java۞66۩scroll.beforeFirst();
smallsql/database/Join.java۞67۩isAfterLast  = false;
smallsql/database/Join.java۞68۩row = 0;
smallsql/database/Join.java۞69۩}
smallsql/database/Join.java۞71۩boolean first() throws Exception{
smallsql/database/Join.java۞72۩beforeFirst();
smallsql/database/Join.java۞73۩return next();
smallsql/database/Join.java۞74۩}
smallsql/database/Join.java۞77۩boolean next() throws Exception{
smallsql/database/Join.java۞78۩if(isAfterLast) return false;
smallsql/database/Join.java۞79۩row++;
smallsql/database/Join.java۞80۩boolean result = scroll.next();
smallsql/database/Join.java۞81۩if(!result){
smallsql/database/Join.java۞82۩noRow();
smallsql/database/Join.java۞83۩}
smallsql/database/Join.java۞84۩return result;
smallsql/database/Join.java۞85۩}
smallsql/database/Join.java۞88۩void afterLast(){
smallsql/database/Join.java۞89۩isAfterLast = true;
smallsql/database/Join.java۞90۩noRow();
smallsql/database/Join.java۞91۩}
smallsql/database/Join.java۞94۩int getRow(){
smallsql/database/Join.java۞95۩return row;
smallsql/database/Join.java۞96۩}
smallsql/database/Join.java۞99۩final long getRowPosition(){
smallsql/database/Join.java۞100۩if(rowPositions == null) rowPositions = new LongLongList();
smallsql/database/Join.java۞101۩rowPositions.add( left.getRowPosition(), right.getRowPosition());
smallsql/database/Join.java۞102۩return rowPositions.size()-1;
smallsql/database/Join.java۞103۩}
smallsql/database/Join.java۞105۩final void setRowPosition(long rowPosition) throws Exception{
smallsql/database/Join.java۞106۩left .setRowPosition( rowPositions.get1((int)rowPosition));
smallsql/database/Join.java۞107۩right.setRowPosition( rowPositions.get2((int)rowPosition));
smallsql/database/Join.java۞108۩}
smallsql/database/Join.java۞111۩final boolean rowInserted(){
smallsql/database/Join.java۞112۩return left.rowInserted() || right.rowInserted();
smallsql/database/Join.java۞113۩}
smallsql/database/Join.java۞116۩final boolean rowDeleted(){
smallsql/database/Join.java۞117۩return left.rowDeleted() || right.rowDeleted();
smallsql/database/Join.java۞118۩}
smallsql/database/Join.java۞124۩void nullRow(){
smallsql/database/Join.java۞125۩left.nullRow();
smallsql/database/Join.java۞126۩right.nullRow();
smallsql/database/Join.java۞127۩row = 0;
smallsql/database/Join.java۞128۩}
smallsql/database/Join.java۞131۩void noRow(){
smallsql/database/Join.java۞132۩isAfterLast = true;
smallsql/database/Join.java۞133۩left.noRow();
smallsql/database/Join.java۞134۩right.noRow();
smallsql/database/Join.java۞135۩row = 0;
smallsql/database/Join.java۞136۩}
smallsql/database/Join.java۞139۩void execute() throws Exception{
smallsql/database/Join.java۞140۩left.execute();
smallsql/database/Join.java۞141۩right.execute();
smallsql/database/Join.java۞143۩if(!createJoinScrollIndex()){
smallsql/database/Join.java۞145۩scroll = new JoinScroll(type, left, right, condition);
smallsql/database/Join.java۞146۩}
smallsql/database/Join.java۞147۩}
smallsql/database/Join.java۞153۩boolean isExpressionsFromThisRowSource(Expressions columns){
smallsql/database/Join.java۞154۩if(left.isExpressionsFromThisRowSource(columns) || right.isExpressionsFromThisRowSource(columns)){
smallsql/database/Join.java۞155۩return true;
smallsql/database/Join.java۞156۩}
smallsql/database/Join.java۞157۩if(columns.size() == 1){
smallsql/database/Join.java۞158۩return false;
smallsql/database/Join.java۞159۩}
smallsql/database/Join.java۞164۩Expressions single = new Expressions();
smallsql/database/Join.java۞165۩for(int i=0; i<columns.size(); i++){
smallsql/database/Join.java۞166۩single.clear();
smallsql/database/Join.java۞167۩single.add(columns.get(i));
smallsql/database/Join.java۞168۩if(left.isExpressionsFromThisRowSource(columns) || right.isExpressionsFromThisRowSource(columns)){
smallsql/database/Join.java۞169۩continue;
smallsql/database/Join.java۞170۩}
smallsql/database/Join.java۞171۩return false;
smallsql/database/Join.java۞172۩}
smallsql/database/Join.java۞173۩return true;
smallsql/database/Join.java۞174۩}
smallsql/database/Join.java۞182۩private boolean createJoinScrollIndex() throws Exception{
smallsql/database/Join.java۞183۩if(type == CROSS_JOIN){
smallsql/database/Join.java۞184۩return false;
smallsql/database/Join.java۞185۩}
smallsql/database/Join.java۞186۩if(type != INNER_JOIN){
smallsql/database/Join.java۞188۩return false;
smallsql/database/Join.java۞189۩}
smallsql/database/Join.java۞190۩if(condition instanceof ExpressionArithmetic){
smallsql/database/Join.java۞191۩ExpressionArithmetic cond = (ExpressionArithmetic)condition;
smallsql/database/Join.java۞192۩Expressions leftEx = new Expressions();
smallsql/database/Join.java۞193۩Expressions rightEx = new Expressions();
smallsql/database/Join.java۞194۩int operation = createJoinScrollIndex(cond, leftEx, rightEx, 0);
smallsql/database/Join.java۞195۩if(operation != 0){
smallsql/database/Join.java۞196۩scroll = new JoinScrollIndex( type, left, right, leftEx, rightEx, operation);
smallsql/database/Join.java۞197۩return true;
smallsql/database/Join.java۞198۩}
smallsql/database/Join.java۞199۩}
smallsql/database/Join.java۞200۩return false;
smallsql/database/Join.java۞201۩}
smallsql/database/Join.java۞204۩private int createJoinScrollIndex(ExpressionArithmetic cond, Expressions leftEx, Expressions rightEx, int operation) throws Exception{
smallsql/database/Join.java۞205۩Expression[] params = cond.getParams();
smallsql/database/Join.java۞206۩int op = cond.getOperation();
smallsql/database/Join.java۞207۩if(op == ExpressionArithmetic.AND){
smallsql/database/Join.java۞208۩Expression param0 = params[0];
smallsql/database/Join.java۞209۩Expression param1 = params[1];
smallsql/database/Join.java۞210۩if(param0 instanceof ExpressionArithmetic && param1 instanceof ExpressionArithmetic){
smallsql/database/Join.java۞211۩op = createJoinScrollIndex((ExpressionArithmetic)param0, leftEx, rightEx, operation);
smallsql/database/Join.java۞212۩if(op == 0){
smallsql/database/Join.java۞213۩return 0;
smallsql/database/Join.java۞214۩}
smallsql/database/Join.java۞215۩return createJoinScrollIndex((ExpressionArithmetic)param1, leftEx, rightEx, operation);
smallsql/database/Join.java۞216۩}
smallsql/database/Join.java۞217۩return 0;
smallsql/database/Join.java۞218۩}
smallsql/database/Join.java۞219۩if(operation == 0){
smallsql/database/Join.java۞220۩operation = op;
smallsql/database/Join.java۞221۩}
smallsql/database/Join.java۞222۩if(operation != op){
smallsql/database/Join.java۞223۩return 0;
smallsql/database/Join.java۞224۩}
smallsql/database/Join.java۞225۩if(operation == ExpressionArithmetic.EQUALS){
smallsql/database/Join.java۞226۩Expression param0 = params[0];
smallsql/database/Join.java۞227۩Expression param1 = params[1];
smallsql/database/Join.java۞229۩Expressions columns0 = Utils.getExpressionNameFromTree(param0);
smallsql/database/Join.java۞230۩Expressions columns1 = Utils.getExpressionNameFromTree(param1);
smallsql/database/Join.java۞231۩if(left.isExpressionsFromThisRowSource(columns0) && right.isExpressionsFromThisRowSource(columns1)){
smallsql/database/Join.java۞232۩leftEx.add( param0 );
smallsql/database/Join.java۞233۩rightEx.add( param1 );
smallsql/database/Join.java۞234۩}else{
smallsql/database/Join.java۞235۩if(left.isExpressionsFromThisRowSource(columns1) && right.isExpressionsFromThisRowSource(columns0)){
smallsql/database/Join.java۞236۩leftEx.add( param1 );
smallsql/database/Join.java۞237۩rightEx.add( param0 );
smallsql/database/Join.java۞238۩}else{
smallsql/database/Join.java۞239۩return 0;
smallsql/database/Join.java۞240۩}
smallsql/database/Join.java۞241۩}
smallsql/database/Join.java۞243۩return operation;
smallsql/database/Join.java۞244۩}
smallsql/database/Join.java۞245۩return 0;
smallsql/database/Join.java۞246۩}
smallsql/database/Join.java۞249۩static final int CROSS_JOIN = 1;
smallsql/database/Join.java۞250۩static final int INNER_JOIN = 2;
smallsql/database/Join.java۞251۩static final int LEFT_JOIN  = 3;
smallsql/database/Join.java۞252۩static final int FULL_JOIN  = 4;
smallsql/database/Join.java۞253۩static final int RIGHT_JOIN = 5;
smallsql/database/Join.java۞254۩}
smallsql/database/JoinScroll.java۞34۩package smallsql.database;
smallsql/database/JoinScroll.java۞41۩class JoinScroll{
smallsql/database/JoinScroll.java۞43۩private final Expression condition;
smallsql/database/JoinScroll.java۞44۩final int type;
smallsql/database/JoinScroll.java۞45۩final RowSource left;
smallsql/database/JoinScroll.java۞46۩final RowSource right;
smallsql/database/JoinScroll.java۞48۩private boolean isBeforeFirst = true;
smallsql/database/JoinScroll.java۞49۩private boolean isOuterValid = true;
smallsql/database/JoinScroll.java۞52۩private boolean[] isFullNotValid;
smallsql/database/JoinScroll.java۞53۩private int fullRightRowCounter;
smallsql/database/JoinScroll.java۞54۩private int fullRowCount;
smallsql/database/JoinScroll.java۞55۩private int fullReturnCounter = -1;
smallsql/database/JoinScroll.java۞58۩JoinScroll( int type, RowSource left, RowSource right, Expression condition ){
smallsql/database/JoinScroll.java۞59۩this.type = type;
smallsql/database/JoinScroll.java۞60۩this.condition = condition;
smallsql/database/JoinScroll.java۞61۩this.left = left;
smallsql/database/JoinScroll.java۞62۩this.right = right;
smallsql/database/JoinScroll.java۞63۩if(type == Join.FULL_JOIN){
smallsql/database/JoinScroll.java۞64۩isFullNotValid = new boolean[10];
smallsql/database/JoinScroll.java۞65۩}
smallsql/database/JoinScroll.java۞66۩}
smallsql/database/JoinScroll.java۞69۩void beforeFirst() throws Exception{
smallsql/database/JoinScroll.java۞70۩left.beforeFirst();
smallsql/database/JoinScroll.java۞71۩right.beforeFirst();
smallsql/database/JoinScroll.java۞72۩isBeforeFirst = true;
smallsql/database/JoinScroll.java۞73۩fullRightRowCounter = 0;
smallsql/database/JoinScroll.java۞74۩fullRowCount        = 0;
smallsql/database/JoinScroll.java۞75۩fullReturnCounter   = -1;
smallsql/database/JoinScroll.java۞76۩}
smallsql/database/JoinScroll.java۞80۩boolean next() throws Exception{
smallsql/database/JoinScroll.java۞81۩boolean result;
smallsql/database/JoinScroll.java۞82۩if(fullReturnCounter >=0){
smallsql/database/JoinScroll.java۞83۩do{
smallsql/database/JoinScroll.java۞84۩if(fullReturnCounter >= fullRowCount){
smallsql/database/JoinScroll.java۞85۩return false;
smallsql/database/JoinScroll.java۞86۩}
smallsql/database/JoinScroll.java۞87۩right.next();
smallsql/database/JoinScroll.java۞88۩}while(isFullNotValid[fullReturnCounter++]);
smallsql/database/JoinScroll.java۞89۩return true;
smallsql/database/JoinScroll.java۞90۩}
smallsql/database/JoinScroll.java۞91۩do{
smallsql/database/JoinScroll.java۞92۩if(isBeforeFirst){
smallsql/database/JoinScroll.java۞93۩result = left.next();
smallsql/database/JoinScroll.java۞94۩if(result){
smallsql/database/JoinScroll.java۞95۩result = right.first();
smallsql/database/JoinScroll.java۞96۩if(!result){
smallsql/database/JoinScroll.java۞97۩switch(type){
smallsql/database/JoinScroll.java۞98۩case Join.LEFT_JOIN:
smallsql/database/JoinScroll.java۞99۩case Join.FULL_JOIN:
smallsql/database/JoinScroll.java۞100۩isOuterValid = false;
smallsql/database/JoinScroll.java۞101۩isBeforeFirst = false;
smallsql/database/JoinScroll.java۞102۩right.nullRow();
smallsql/database/JoinScroll.java۞103۩return true;
smallsql/database/JoinScroll.java۞104۩}
smallsql/database/JoinScroll.java۞105۩}else fullRightRowCounter++;
smallsql/database/JoinScroll.java۞106۩}else{
smallsql/database/JoinScroll.java۞108۩if(type == Join.FULL_JOIN){
smallsql/database/JoinScroll.java۞109۩while(right.next()){
smallsql/database/JoinScroll.java۞110۩fullRightRowCounter++;
smallsql/database/JoinScroll.java۞111۩}
smallsql/database/JoinScroll.java۞112۩fullRowCount = fullRightRowCounter;
smallsql/database/JoinScroll.java۞113۩}
smallsql/database/JoinScroll.java۞114۩}
smallsql/database/JoinScroll.java۞115۩}else{
smallsql/database/JoinScroll.java۞116۩result = right.next();
smallsql/database/JoinScroll.java۞117۩if(!result){
smallsql/database/JoinScroll.java۞118۩switch(type){
smallsql/database/JoinScroll.java۞119۩case Join.LEFT_JOIN:
smallsql/database/JoinScroll.java۞120۩case Join.FULL_JOIN:
smallsql/database/JoinScroll.java۞121۩if(isOuterValid){
smallsql/database/JoinScroll.java۞122۩isOuterValid = false;
smallsql/database/JoinScroll.java۞123۩right.nullRow();
smallsql/database/JoinScroll.java۞124۩return true;
smallsql/database/JoinScroll.java۞125۩}
smallsql/database/JoinScroll.java۞126۩fullRowCount = Math.max( fullRowCount, fullRightRowCounter);
smallsql/database/JoinScroll.java۞127۩fullRightRowCounter = 0;
smallsql/database/JoinScroll.java۞128۩}
smallsql/database/JoinScroll.java۞129۩isOuterValid = true;
smallsql/database/JoinScroll.java۞130۩result = left.next();
smallsql/database/JoinScroll.java۞131۩if(result){
smallsql/database/JoinScroll.java۞132۩result = right.first();
smallsql/database/JoinScroll.java۞133۩if(!result){
smallsql/database/JoinScroll.java۞134۩switch(type){
smallsql/database/JoinScroll.java۞135۩case Join.LEFT_JOIN:
smallsql/database/JoinScroll.java۞136۩case Join.FULL_JOIN:
smallsql/database/JoinScroll.java۞137۩isOuterValid = false;
smallsql/database/JoinScroll.java۞138۩right.nullRow();
smallsql/database/JoinScroll.java۞139۩return true;
smallsql/database/JoinScroll.java۞140۩}
smallsql/database/JoinScroll.java۞141۩}else fullRightRowCounter++;
smallsql/database/JoinScroll.java۞142۩}
smallsql/database/JoinScroll.java۞144۩}else fullRightRowCounter++;
smallsql/database/JoinScroll.java۞145۩}
smallsql/database/JoinScroll.java۞146۩isBeforeFirst = false;
smallsql/database/JoinScroll.java۞147۩}while(result && !getBoolean());
smallsql/database/JoinScroll.java۞148۩isOuterValid = false;
smallsql/database/JoinScroll.java۞149۩if(type == Join.FULL_JOIN){
smallsql/database/JoinScroll.java۞150۩if(fullRightRowCounter >= isFullNotValid.length){
smallsql/database/JoinScroll.java۞151۩boolean[] temp = new boolean[fullRightRowCounter << 1];
smallsql/database/JoinScroll.java۞152۩System.arraycopy( isFullNotValid, 0, temp, 0, fullRightRowCounter);
smallsql/database/JoinScroll.java۞153۩isFullNotValid = temp;
smallsql/database/JoinScroll.java۞154۩}
smallsql/database/JoinScroll.java۞155۩if(!result){
smallsql/database/JoinScroll.java۞156۩if(fullRowCount == 0){
smallsql/database/JoinScroll.java۞157۩return false;
smallsql/database/JoinScroll.java۞158۩}
smallsql/database/JoinScroll.java۞159۩if(fullReturnCounter<0) {
smallsql/database/JoinScroll.java۞160۩fullReturnCounter = 0;
smallsql/database/JoinScroll.java۞161۩right.first();
smallsql/database/JoinScroll.java۞162۩left.nullRow();
smallsql/database/JoinScroll.java۞163۩}
smallsql/database/JoinScroll.java۞164۩while(isFullNotValid[fullReturnCounter++]){
smallsql/database/JoinScroll.java۞165۩if(fullReturnCounter >= fullRowCount){
smallsql/database/JoinScroll.java۞166۩return false;
smallsql/database/JoinScroll.java۞167۩}
smallsql/database/JoinScroll.java۞168۩right.next();
smallsql/database/JoinScroll.java۞169۩}
smallsql/database/JoinScroll.java۞170۩return true;
smallsql/database/JoinScroll.java۞171۩}else
smallsql/database/JoinScroll.java۞172۩isFullNotValid[fullRightRowCounter-1] = result;
smallsql/database/JoinScroll.java۞173۩}
smallsql/database/JoinScroll.java۞174۩return result;
smallsql/database/JoinScroll.java۞175۩}
smallsql/database/JoinScroll.java۞178۩private boolean getBoolean() throws Exception{
smallsql/database/JoinScroll.java۞179۩return type == Join.CROSS_JOIN || condition.getBoolean();
smallsql/database/JoinScroll.java۞180۩}
smallsql/database/JoinScroll.java۞181۩}
smallsql/database/JoinScrollIndex.java۞34۩package smallsql.database;
smallsql/database/JoinScrollIndex.java۞39۩class JoinScrollIndex extends JoinScroll{
smallsql/database/JoinScrollIndex.java۞41۩private final int compare;
smallsql/database/JoinScrollIndex.java۞43۩Expressions leftEx;
smallsql/database/JoinScrollIndex.java۞44۩Expressions rightEx;
smallsql/database/JoinScrollIndex.java۞46۩private Index index;
smallsql/database/JoinScrollIndex.java۞48۩private LongTreeList rowList;
smallsql/database/JoinScrollIndex.java۞50۩private final LongTreeListEnum longListEnum = new LongTreeListEnum();
smallsql/database/JoinScrollIndex.java۞53۩JoinScrollIndex( int joinType, RowSource left, RowSource right, Expressions leftEx, Expressions rightEx, int compare)
smallsql/database/JoinScrollIndex.java۞54۩throws Exception{
smallsql/database/JoinScrollIndex.java۞55۩super( joinType, left, right, null);
smallsql/database/JoinScrollIndex.java۞56۩this.leftEx = leftEx;
smallsql/database/JoinScrollIndex.java۞57۩this.rightEx = rightEx;
smallsql/database/JoinScrollIndex.java۞58۩this.compare = compare;
smallsql/database/JoinScrollIndex.java۞59۩createIndex(rightEx);
smallsql/database/JoinScrollIndex.java۞60۩}
smallsql/database/JoinScrollIndex.java۞63۩private void createIndex(Expressions rightEx) throws Exception{
smallsql/database/JoinScrollIndex.java۞64۩index = new Index(false);
smallsql/database/JoinScrollIndex.java۞65۩right.beforeFirst();
smallsql/database/JoinScrollIndex.java۞66۩while(right.next()){
smallsql/database/JoinScrollIndex.java۞67۩index.addValues(right.getRowPosition(), rightEx);
smallsql/database/JoinScrollIndex.java۞68۩}
smallsql/database/JoinScrollIndex.java۞69۩}
smallsql/database/JoinScrollIndex.java۞72۩boolean next() throws Exception{
smallsql/database/JoinScrollIndex.java۞73۩switch(compare){
smallsql/database/JoinScrollIndex.java۞74۩case ExpressionArithmetic.EQUALS:
smallsql/database/JoinScrollIndex.java۞75۩return nextEquals();
smallsql/database/JoinScrollIndex.java۞76۩default:
smallsql/database/JoinScrollIndex.java۞77۩throw new Error("Compare operation not supported:" + compare);
smallsql/database/JoinScrollIndex.java۞78۩}
smallsql/database/JoinScrollIndex.java۞80۩}
smallsql/database/JoinScrollIndex.java۞83۩private boolean nextEquals() throws Exception{
smallsql/database/JoinScrollIndex.java۞84۩if(rowList != null){
smallsql/database/JoinScrollIndex.java۞85۩long rowPosition = rowList.getNext(longListEnum);
smallsql/database/JoinScrollIndex.java۞86۩if(rowPosition != -1){
smallsql/database/JoinScrollIndex.java۞87۩right.setRowPosition(rowPosition);
smallsql/database/JoinScrollIndex.java۞88۩return true;
smallsql/database/JoinScrollIndex.java۞89۩}
smallsql/database/JoinScrollIndex.java۞90۩rowList = null;
smallsql/database/JoinScrollIndex.java۞91۩}
smallsql/database/JoinScrollIndex.java۞92۩Object rows;
smallsql/database/JoinScrollIndex.java۞93۩do{
smallsql/database/JoinScrollIndex.java۞94۩if(!left.next()){
smallsql/database/JoinScrollIndex.java۞95۩return false;
smallsql/database/JoinScrollIndex.java۞96۩}
smallsql/database/JoinScrollIndex.java۞97۩rows = index.findRows(leftEx, false, null);
smallsql/database/JoinScrollIndex.java۞98۩}while(rows == null);
smallsql/database/JoinScrollIndex.java۞100۩if(rows instanceof Long){
smallsql/database/JoinScrollIndex.java۞101۩right.setRowPosition(((Long)rows).longValue());
smallsql/database/JoinScrollIndex.java۞102۩}else{
smallsql/database/JoinScrollIndex.java۞103۩rowList = (LongTreeList)rows;
smallsql/database/JoinScrollIndex.java۞104۩longListEnum.reset();
smallsql/database/JoinScrollIndex.java۞105۩right.setRowPosition(rowList.getNext(longListEnum));
smallsql/database/JoinScrollIndex.java۞106۩}
smallsql/database/JoinScrollIndex.java۞107۩return true;
smallsql/database/JoinScrollIndex.java۞108۩}
smallsql/database/JoinScrollIndex.java۞111۩}
smallsql/database/Lobs.java۞34۩package smallsql.database;
smallsql/database/Lobs.java۞36۩import java.io.File;
smallsql/database/Lobs.java۞41۩class Lobs extends Table {
smallsql/database/Lobs.java۞43۩Lobs(Table table) throws Exception{
smallsql/database/Lobs.java۞44۩super(table.database, table.name);
smallsql/database/Lobs.java۞45۩raFile = Utils.openRaFile( getFile(database), database.isReadOnly() );
smallsql/database/Lobs.java۞46۩}
smallsql/database/Lobs.java۞52۩@Override
smallsql/database/Lobs.java۞53۩File getFile(Database database){
smallsql/database/Lobs.java۞54۩return new File( Utils.createLobFileName( database, name ) );
smallsql/database/Lobs.java۞55۩}
smallsql/database/Lobs.java۞58۩}
smallsql/database/Logger.java۞34۩package smallsql.database;
smallsql/database/Logger.java۞36۩import java.io.PrintWriter;
smallsql/database/Logger.java۞37۩import java.sql.*;
smallsql/database/Logger.java۞42۩class Logger {
smallsql/database/Logger.java۞45۩boolean isLogging(){
smallsql/database/Logger.java۞46۩return DriverManager.getLogWriter() != null;
smallsql/database/Logger.java۞47۩}
smallsql/database/Logger.java۞49۩void println(String msg){
smallsql/database/Logger.java۞50۩PrintWriter log = DriverManager.getLogWriter();
smallsql/database/Logger.java۞51۩if(log != null){
smallsql/database/Logger.java۞52۩synchronized(log){
smallsql/database/Logger.java۞53۩log.print("[Small SQL]");
smallsql/database/Logger.java۞54۩log.println(msg);
smallsql/database/Logger.java۞55۩log.flush();
smallsql/database/Logger.java۞56۩}
smallsql/database/Logger.java۞57۩}
smallsql/database/Logger.java۞58۩}
smallsql/database/Logger.java۞59۩}
smallsql/database/LongList.java۞34۩package smallsql.database;
smallsql/database/LongList.java۞40۩class LongList {
smallsql/database/LongList.java۞42۩private int size;
smallsql/database/LongList.java۞43۩private long[] data;
smallsql/database/LongList.java۞45۩LongList(){
smallsql/database/LongList.java۞46۩this(16);
smallsql/database/LongList.java۞47۩}
smallsql/database/LongList.java۞50۩LongList(int initialSize){
smallsql/database/LongList.java۞51۩data = new long[initialSize];
smallsql/database/LongList.java۞52۩}
smallsql/database/LongList.java۞55۩final int size(){
smallsql/database/LongList.java۞56۩return size;
smallsql/database/LongList.java۞57۩}
smallsql/database/LongList.java۞60۩final long get(int idx){
smallsql/database/LongList.java۞61۩if (idx >= size)
smallsql/database/LongList.java۞62۩throw new IndexOutOfBoundsException("Index: "+idx+", Size: "+size);
smallsql/database/LongList.java۞63۩return data[idx];
smallsql/database/LongList.java۞64۩}
smallsql/database/LongList.java۞67۩final void add(long value){
smallsql/database/LongList.java۞68۩if(size >= data.length ){
smallsql/database/LongList.java۞69۩resize(size << 1);
smallsql/database/LongList.java۞70۩}
smallsql/database/LongList.java۞71۩data[ size++ ] = value;
smallsql/database/LongList.java۞72۩}
smallsql/database/LongList.java۞75۩final void clear(){
smallsql/database/LongList.java۞76۩size = 0;
smallsql/database/LongList.java۞77۩}
smallsql/database/LongList.java۞80۩private final void resize(int newSize){
smallsql/database/LongList.java۞81۩long[] dataNew = new long[newSize];
smallsql/database/LongList.java۞82۩System.arraycopy(data, 0, dataNew, 0, size);
smallsql/database/LongList.java۞83۩data = dataNew;
smallsql/database/LongList.java۞84۩}
smallsql/database/LongList.java۞86۩}
smallsql/database/LongLongList.java۞33۩package smallsql.database;
smallsql/database/LongLongList.java۞40۩final class LongLongList {
smallsql/database/LongLongList.java۞41۩private int size;
smallsql/database/LongLongList.java۞42۩private long[] data;
smallsql/database/LongLongList.java۞44۩LongLongList(){
smallsql/database/LongLongList.java۞45۩this(16);
smallsql/database/LongLongList.java۞46۩}
smallsql/database/LongLongList.java۞47۩LongLongList(int initialSize){
smallsql/database/LongLongList.java۞48۩data = new long[initialSize*2];
smallsql/database/LongLongList.java۞49۩}
smallsql/database/LongLongList.java۞51۩final int size(){
smallsql/database/LongLongList.java۞52۩return size;
smallsql/database/LongLongList.java۞53۩}
smallsql/database/LongLongList.java۞55۩final long get1(int idx){
smallsql/database/LongLongList.java۞56۩if (idx >= size)
smallsql/database/LongLongList.java۞57۩throw new IndexOutOfBoundsException("Index: "+idx+", Size: "+size);
smallsql/database/LongLongList.java۞58۩return data[idx << 1];
smallsql/database/LongLongList.java۞59۩}
smallsql/database/LongLongList.java۞61۩final long get2(int idx){
smallsql/database/LongLongList.java۞62۩if (idx >= size)
smallsql/database/LongLongList.java۞63۩throw new IndexOutOfBoundsException("Index: "+idx+", Size: "+size);
smallsql/database/LongLongList.java۞64۩return data[(idx << 1) +1];
smallsql/database/LongLongList.java۞65۩}
smallsql/database/LongLongList.java۞67۩final void add(long value1, long value2){
smallsql/database/LongLongList.java۞68۩int size2 = size << 1;
smallsql/database/LongLongList.java۞69۩if(size2 >= data.length ){
smallsql/database/LongLongList.java۞70۩resize(size2);
smallsql/database/LongLongList.java۞71۩}
smallsql/database/LongLongList.java۞72۩data[ size2   ] = value1;
smallsql/database/LongLongList.java۞73۩data[ size2 +1] = value2;
smallsql/database/LongLongList.java۞74۩size++;
smallsql/database/LongLongList.java۞75۩}
smallsql/database/LongLongList.java۞77۩final void clear(){
smallsql/database/LongLongList.java۞78۩size = 0;
smallsql/database/LongLongList.java۞79۩}
smallsql/database/LongLongList.java۞81۩private final void resize(int newSize){
smallsql/database/LongLongList.java۞82۩long[] dataNew = new long[newSize << 1];
smallsql/database/LongLongList.java۞83۩System.arraycopy(data, 0, dataNew, 0, size << 1);
smallsql/database/LongLongList.java۞84۩data = dataNew;
smallsql/database/LongLongList.java۞85۩}
smallsql/database/LongLongList.java۞86۩}
smallsql/database/LongTreeList.java۞33۩package smallsql.database;
smallsql/database/LongTreeList.java۞35۩import java.sql.*;
smallsql/database/LongTreeList.java۞36۩import smallsql.database.language.Language;
smallsql/database/LongTreeList.java۞53۩final class LongTreeList {
smallsql/database/LongTreeList.java۞158۩private byte[] data;
smallsql/database/LongTreeList.java۞159۩private int size;
smallsql/database/LongTreeList.java۞160۩private int offset;
smallsql/database/LongTreeList.java۞161۩static final private int pointerSize = 3;
smallsql/database/LongTreeList.java۞167۩LongTreeList(){
smallsql/database/LongTreeList.java۞168۩data = new byte[25];
smallsql/database/LongTreeList.java۞169۩}
smallsql/database/LongTreeList.java۞175۩LongTreeList(long value) throws SQLException{
smallsql/database/LongTreeList.java۞176۩this();
smallsql/database/LongTreeList.java۞177۩add(value);
smallsql/database/LongTreeList.java۞178۩}
smallsql/database/LongTreeList.java۞183۩LongTreeList(StoreImpl input){
smallsql/database/LongTreeList.java۞184۩int readSize = input.readInt();
smallsql/database/LongTreeList.java۞185۩data     = input.readBytes(readSize);
smallsql/database/LongTreeList.java۞186۩}
smallsql/database/LongTreeList.java۞193۩final void save(StoreImpl output){
smallsql/database/LongTreeList.java۞194۩output.writeInt(size);
smallsql/database/LongTreeList.java۞195۩output.writeBytes(data, 0, size);
smallsql/database/LongTreeList.java۞196۩}
smallsql/database/LongTreeList.java۞204۩final void add(long value) throws SQLException{
smallsql/database/LongTreeList.java۞205۩offset = 0;
smallsql/database/LongTreeList.java۞206۩if(size == 0){
smallsql/database/LongTreeList.java۞207۩writeShort( (int)(value >> 48) );
smallsql/database/LongTreeList.java۞208۩writePointer ( offset+pointerSize+2 );
smallsql/database/LongTreeList.java۞209۩writeShort( 0 );
smallsql/database/LongTreeList.java۞210۩writeShort( (int)(value >> 32) );
smallsql/database/LongTreeList.java۞211۩writePointer ( offset+pointerSize+2 );
smallsql/database/LongTreeList.java۞212۩writeShort( 0 );
smallsql/database/LongTreeList.java۞213۩writeShort( (int)(value >> 16) );
smallsql/database/LongTreeList.java۞214۩writePointer ( offset+pointerSize+2 );
smallsql/database/LongTreeList.java۞215۩writeShort( 0 );
smallsql/database/LongTreeList.java۞216۩writeShort( (int)(value) );
smallsql/database/LongTreeList.java۞217۩writeShort( 0 );
smallsql/database/LongTreeList.java۞218۩size = offset;
smallsql/database/LongTreeList.java۞219۩return;
smallsql/database/LongTreeList.java۞220۩}
smallsql/database/LongTreeList.java۞221۩int shift = 48;
smallsql/database/LongTreeList.java۞222۩boolean firstNode = (size > 2);
smallsql/database/LongTreeList.java۞223۩while(shift>=0){
smallsql/database/LongTreeList.java۞224۩int octet = (int)(value >> shift) & 0xFFFF;
smallsql/database/LongTreeList.java۞225۩while(true){
smallsql/database/LongTreeList.java۞226۩int nextEntry = getUnsignedShort();
smallsql/database/LongTreeList.java۞227۩if(nextEntry == octet){
smallsql/database/LongTreeList.java۞228۩if(shift == 0) return;
smallsql/database/LongTreeList.java۞229۩offset = getPointer();
smallsql/database/LongTreeList.java۞230۩firstNode = true;
smallsql/database/LongTreeList.java۞231۩break;
smallsql/database/LongTreeList.java۞232۩}
smallsql/database/LongTreeList.java۞233۩if((nextEntry == 0 && !firstNode) || nextEntry > octet){
smallsql/database/LongTreeList.java۞234۩offset -= 2;
smallsql/database/LongTreeList.java۞235۩while(true){
smallsql/database/LongTreeList.java۞236۩if(shift != 0){
smallsql/database/LongTreeList.java۞237۩offset = insertNode(octet);
smallsql/database/LongTreeList.java۞238۩}else{
smallsql/database/LongTreeList.java۞239۩insertNodeLastLevel(octet);
smallsql/database/LongTreeList.java۞240۩return;
smallsql/database/LongTreeList.java۞241۩}
smallsql/database/LongTreeList.java۞242۩shift -= 16;
smallsql/database/LongTreeList.java۞243۩octet = (int)(value >> shift) & 0xFFFF;
smallsql/database/LongTreeList.java۞244۩}
smallsql/database/LongTreeList.java۞245۩}
smallsql/database/LongTreeList.java۞246۩firstNode = false;
smallsql/database/LongTreeList.java۞247۩if(shift != 0) offset += pointerSize;
smallsql/database/LongTreeList.java۞248۩}
smallsql/database/LongTreeList.java۞249۩shift -= 16;
smallsql/database/LongTreeList.java۞250۩}
smallsql/database/LongTreeList.java۞251۩}
smallsql/database/LongTreeList.java۞259۩final void remove(long value) throws SQLException{
smallsql/database/LongTreeList.java۞260۩if(size == 0) return;
smallsql/database/LongTreeList.java۞261۩int offset1 = 0;
smallsql/database/LongTreeList.java۞262۩int offset2 = 0;
smallsql/database/LongTreeList.java۞263۩int offset3 = 0;
smallsql/database/LongTreeList.java۞264۩offset = 0;
smallsql/database/LongTreeList.java۞265۩int shift = 48;
smallsql/database/LongTreeList.java۞266۩boolean firstNode = true;
smallsql/database/LongTreeList.java۞267۩boolean firstNode1 = true;
smallsql/database/LongTreeList.java۞268۩boolean firstNode2 = true;
smallsql/database/LongTreeList.java۞269۩boolean firstNode3 = true;
smallsql/database/LongTreeList.java۞270۩while(shift>=0){
smallsql/database/LongTreeList.java۞271۩int octet = (int)(value >> shift) & 0xFFFF;
smallsql/database/LongTreeList.java۞272۩while(true){
smallsql/database/LongTreeList.java۞273۩int nextEntry = getUnsignedShort();
smallsql/database/LongTreeList.java۞274۩if(nextEntry == octet){
smallsql/database/LongTreeList.java۞275۩if(shift == 0){
smallsql/database/LongTreeList.java۞277۩offset -= 2;
smallsql/database/LongTreeList.java۞278۩removeNodeLastLevel();
smallsql/database/LongTreeList.java۞279۩while(firstNode && getUnsignedShort() == 0){
smallsql/database/LongTreeList.java۞280۩offset -= 2;
smallsql/database/LongTreeList.java۞281۩removeNodeLastLevel();
smallsql/database/LongTreeList.java۞282۩if(shift >= 3)
smallsql/database/LongTreeList.java۞283۩break;
smallsql/database/LongTreeList.java۞284۩offset = offset1;
smallsql/database/LongTreeList.java۞285۩offset1 = offset2;
smallsql/database/LongTreeList.java۞286۩offset2 = offset3;
smallsql/database/LongTreeList.java۞287۩firstNode = firstNode1;
smallsql/database/LongTreeList.java۞288۩firstNode1 = firstNode2;
smallsql/database/LongTreeList.java۞289۩firstNode2 = firstNode3;
smallsql/database/LongTreeList.java۞290۩removeNode();
smallsql/database/LongTreeList.java۞291۩shift++;
smallsql/database/LongTreeList.java۞292۩}
smallsql/database/LongTreeList.java۞293۩return;
smallsql/database/LongTreeList.java۞294۩}
smallsql/database/LongTreeList.java۞295۩offset3 = offset2;
smallsql/database/LongTreeList.java۞296۩offset2 = offset1;
smallsql/database/LongTreeList.java۞297۩offset1 = offset -2;
smallsql/database/LongTreeList.java۞298۩offset = getPointer();
smallsql/database/LongTreeList.java۞299۩firstNode3 = firstNode2;
smallsql/database/LongTreeList.java۞300۩firstNode2 = firstNode1;
smallsql/database/LongTreeList.java۞301۩firstNode1 = firstNode;
smallsql/database/LongTreeList.java۞302۩firstNode = true;
smallsql/database/LongTreeList.java۞303۩break;
smallsql/database/LongTreeList.java۞304۩}
smallsql/database/LongTreeList.java۞305۩if((nextEntry == 0 && !firstNode) || nextEntry > octet){
smallsql/database/LongTreeList.java۞307۩return;
smallsql/database/LongTreeList.java۞308۩}
smallsql/database/LongTreeList.java۞309۩firstNode = false;
smallsql/database/LongTreeList.java۞310۩if(shift != 0) offset += pointerSize;
smallsql/database/LongTreeList.java۞311۩}
smallsql/database/LongTreeList.java۞312۩shift -= 16;
smallsql/database/LongTreeList.java۞313۩}
smallsql/database/LongTreeList.java۞314۩}
smallsql/database/LongTreeList.java۞322۩final long getNext(LongTreeListEnum listEnum){
smallsql/database/LongTreeList.java۞323۩int shift = (3-listEnum.stack) << 4;
smallsql/database/LongTreeList.java۞324۩if(shift >= 64) return -1;
smallsql/database/LongTreeList.java۞325۩offset 		= listEnum.offsetStack[listEnum.stack];
smallsql/database/LongTreeList.java۞326۩long result = listEnum.resultStack[listEnum.stack];
smallsql/database/LongTreeList.java۞327۩boolean firstNode = (offset == 0);
smallsql/database/LongTreeList.java۞328۩while(true){
smallsql/database/LongTreeList.java۞329۩int nextEntry = getUnsignedShort();
smallsql/database/LongTreeList.java۞330۩if(nextEntry != 0 || firstNode){
smallsql/database/LongTreeList.java۞332۩result |= (((long)nextEntry) << shift);
smallsql/database/LongTreeList.java۞333۩if(listEnum.stack>=3){
smallsql/database/LongTreeList.java۞334۩listEnum.offsetStack[listEnum.stack] = offset;
smallsql/database/LongTreeList.java۞335۩return result;
smallsql/database/LongTreeList.java۞336۩}
smallsql/database/LongTreeList.java۞337۩listEnum.offsetStack[listEnum.stack] = offset+pointerSize;
smallsql/database/LongTreeList.java۞338۩offset = getPointer();
smallsql/database/LongTreeList.java۞339۩shift -= 16;
smallsql/database/LongTreeList.java۞340۩listEnum.stack++;
smallsql/database/LongTreeList.java۞341۩listEnum.resultStack[listEnum.stack] = result;
smallsql/database/LongTreeList.java۞342۩firstNode = true;
smallsql/database/LongTreeList.java۞343۩}else{
smallsql/database/LongTreeList.java۞345۩shift += 16;
smallsql/database/LongTreeList.java۞346۩listEnum.stack--;
smallsql/database/LongTreeList.java۞347۩if(listEnum.stack<0) return -1;
smallsql/database/LongTreeList.java۞348۩result = listEnum.resultStack[listEnum.stack];
smallsql/database/LongTreeList.java۞349۩offset = listEnum.offsetStack[listEnum.stack];
smallsql/database/LongTreeList.java۞350۩firstNode = false;
smallsql/database/LongTreeList.java۞351۩}
smallsql/database/LongTreeList.java۞352۩}
smallsql/database/LongTreeList.java۞353۩}
smallsql/database/LongTreeList.java۞361۩final long getPrevious(LongTreeListEnum listEnum){
smallsql/database/LongTreeList.java۞362۩int shift = (3-listEnum.stack) << 4;
smallsql/database/LongTreeList.java۞363۩if(shift >= 64){
smallsql/database/LongTreeList.java۞364۩shift = 48;
smallsql/database/LongTreeList.java۞365۩offset = 0;
smallsql/database/LongTreeList.java۞366۩listEnum.stack = 0;
smallsql/database/LongTreeList.java۞367۩listEnum.offsetStack[0] = 2 + pointerSize;
smallsql/database/LongTreeList.java۞368۩loopToEndOfNode(listEnum);
smallsql/database/LongTreeList.java۞369۩}else{
smallsql/database/LongTreeList.java۞370۩setPreviousOffset(listEnum);
smallsql/database/LongTreeList.java۞371۩}
smallsql/database/LongTreeList.java۞372۩long result = listEnum.resultStack[listEnum.stack];
smallsql/database/LongTreeList.java۞373۩while(true){
smallsql/database/LongTreeList.java۞374۩int nextEntry = (offset < 0) ? -1 : getUnsignedShort();
smallsql/database/LongTreeList.java۞375۩if(nextEntry >= 0){
smallsql/database/LongTreeList.java۞377۩result |= (((long)nextEntry) << shift);
smallsql/database/LongTreeList.java۞378۩if(listEnum.stack>=3){
smallsql/database/LongTreeList.java۞379۩listEnum.offsetStack[listEnum.stack] = offset;
smallsql/database/LongTreeList.java۞380۩return result;
smallsql/database/LongTreeList.java۞381۩}
smallsql/database/LongTreeList.java۞382۩listEnum.offsetStack[listEnum.stack] = offset+pointerSize;
smallsql/database/LongTreeList.java۞383۩offset = getPointer();
smallsql/database/LongTreeList.java۞384۩shift -= 16;
smallsql/database/LongTreeList.java۞385۩listEnum.stack++;
smallsql/database/LongTreeList.java۞386۩listEnum.resultStack[listEnum.stack] = result;
smallsql/database/LongTreeList.java۞387۩loopToEndOfNode(listEnum);
smallsql/database/LongTreeList.java۞388۩}else{
smallsql/database/LongTreeList.java۞390۩shift += 16;
smallsql/database/LongTreeList.java۞391۩listEnum.stack--;
smallsql/database/LongTreeList.java۞392۩if(listEnum.stack<0) return -1;
smallsql/database/LongTreeList.java۞393۩result = listEnum.resultStack[listEnum.stack];
smallsql/database/LongTreeList.java۞394۩setPreviousOffset(listEnum);
smallsql/database/LongTreeList.java۞395۩}
smallsql/database/LongTreeList.java۞396۩}
smallsql/database/LongTreeList.java۞397۩}
smallsql/database/LongTreeList.java۞407۩final private void setPreviousOffset(LongTreeListEnum listEnum){
smallsql/database/LongTreeList.java۞408۩int previousOffset = listEnum.offsetStack[listEnum.stack] - 2*(2 + (listEnum.stack>=3 ? 0 : pointerSize));
smallsql/database/LongTreeList.java۞409۩if(listEnum.stack == 0){
smallsql/database/LongTreeList.java۞410۩offset = previousOffset;
smallsql/database/LongTreeList.java۞411۩return;
smallsql/database/LongTreeList.java۞412۩}
smallsql/database/LongTreeList.java۞413۩offset = listEnum.offsetStack[listEnum.stack-1] - pointerSize;
smallsql/database/LongTreeList.java۞414۩int pointer = getPointer();
smallsql/database/LongTreeList.java۞415۩if(pointer <= previousOffset){
smallsql/database/LongTreeList.java۞416۩offset = previousOffset;
smallsql/database/LongTreeList.java۞417۩return;
smallsql/database/LongTreeList.java۞418۩}
smallsql/database/LongTreeList.java۞419۩offset = -1;
smallsql/database/LongTreeList.java۞420۩}
smallsql/database/LongTreeList.java۞426۩final private void loopToEndOfNode(LongTreeListEnum listEnum){
smallsql/database/LongTreeList.java۞427۩int nextEntry;
smallsql/database/LongTreeList.java۞428۩int nextOffset1, nextOffset2;
smallsql/database/LongTreeList.java۞429۩nextOffset1 = offset;
smallsql/database/LongTreeList.java۞430۩offset += 2;
smallsql/database/LongTreeList.java۞431۩if(listEnum.stack<3)
smallsql/database/LongTreeList.java۞432۩offset += pointerSize;
smallsql/database/LongTreeList.java۞433۩do{
smallsql/database/LongTreeList.java۞434۩nextOffset2 = nextOffset1;
smallsql/database/LongTreeList.java۞435۩nextOffset1 = offset;
smallsql/database/LongTreeList.java۞436۩nextEntry = getUnsignedShort();
smallsql/database/LongTreeList.java۞437۩if(listEnum.stack<3)
smallsql/database/LongTreeList.java۞438۩offset += pointerSize;
smallsql/database/LongTreeList.java۞439۩}while(nextEntry != 0);
smallsql/database/LongTreeList.java۞440۩offset = nextOffset2;
smallsql/database/LongTreeList.java۞441۩}
smallsql/database/LongTreeList.java۞453۩final private int insertNode(int octet) throws SQLException{
smallsql/database/LongTreeList.java۞454۩int oldOffset = offset;
smallsql/database/LongTreeList.java۞456۩if(data.length < size + 4 + pointerSize) resize();
smallsql/database/LongTreeList.java۞457۩System.arraycopy(data, oldOffset, data, oldOffset + 2+pointerSize, size-oldOffset);
smallsql/database/LongTreeList.java۞458۩size += 2+pointerSize;
smallsql/database/LongTreeList.java۞460۩writeShort( octet );
smallsql/database/LongTreeList.java۞461۩writePointer( size );
smallsql/database/LongTreeList.java۞464۩correctPointers( 0, oldOffset, 2+pointerSize, 0 );
smallsql/database/LongTreeList.java۞466۩data[size++] = (byte)0;
smallsql/database/LongTreeList.java۞467۩data[size++] = (byte)0;
smallsql/database/LongTreeList.java۞468۩return size-2;
smallsql/database/LongTreeList.java۞469۩}
smallsql/database/LongTreeList.java۞477۩final private void insertNodeLastLevel(int octet) throws SQLException{
smallsql/database/LongTreeList.java۞478۩int oldOffset = offset;
smallsql/database/LongTreeList.java۞480۩if(data.length < size + 2) resize();
smallsql/database/LongTreeList.java۞481۩System.arraycopy(data, offset, data, offset + 2, size-offset);
smallsql/database/LongTreeList.java۞482۩size += 2;
smallsql/database/LongTreeList.java۞483۩writeShort( octet );
smallsql/database/LongTreeList.java۞486۩correctPointers( 0, oldOffset, 2, 0 );
smallsql/database/LongTreeList.java۞487۩}
smallsql/database/LongTreeList.java۞495۩final private void removeNode() throws SQLException{
smallsql/database/LongTreeList.java۞496۩int oldOffset = offset;
smallsql/database/LongTreeList.java۞499۩correctPointers( 0, oldOffset, -(2+pointerSize), 0 );
smallsql/database/LongTreeList.java۞501۩size -= 2+pointerSize;
smallsql/database/LongTreeList.java۞502۩System.arraycopy(data, oldOffset + 2+pointerSize, data, oldOffset, size-oldOffset);
smallsql/database/LongTreeList.java۞504۩offset = oldOffset;
smallsql/database/LongTreeList.java۞505۩}
smallsql/database/LongTreeList.java۞513۩final private void removeNodeLastLevel() throws SQLException{
smallsql/database/LongTreeList.java۞514۩int oldOffset = offset;
smallsql/database/LongTreeList.java۞517۩correctPointers( 0, oldOffset, -2, 0 );
smallsql/database/LongTreeList.java۞519۩size -= 2;
smallsql/database/LongTreeList.java۞520۩System.arraycopy(data, oldOffset + 2, data, oldOffset, size-oldOffset);
smallsql/database/LongTreeList.java۞522۩offset = oldOffset;
smallsql/database/LongTreeList.java۞523۩}
smallsql/database/LongTreeList.java۞533۩final private void correctPointers(int startOffset, int oldOffset, int diff, int level){
smallsql/database/LongTreeList.java۞534۩offset = startOffset;
smallsql/database/LongTreeList.java۞535۩boolean firstNode = true;
smallsql/database/LongTreeList.java۞536۩while(offset < size){
smallsql/database/LongTreeList.java۞537۩if(offset == oldOffset){
smallsql/database/LongTreeList.java۞538۩int absDiff = Math.abs(diff);
smallsql/database/LongTreeList.java۞539۩if(absDiff == 2) return;
smallsql/database/LongTreeList.java۞540۩offset += absDiff;
smallsql/database/LongTreeList.java۞541۩firstNode = false;
smallsql/database/LongTreeList.java۞542۩continue;
smallsql/database/LongTreeList.java۞543۩}
smallsql/database/LongTreeList.java۞544۩int value = getUnsignedShort();
smallsql/database/LongTreeList.java۞545۩if(value != 0 || firstNode){
smallsql/database/LongTreeList.java۞546۩int pointer = getPointer();
smallsql/database/LongTreeList.java۞547۩if(pointer > oldOffset){
smallsql/database/LongTreeList.java۞548۩offset  -= pointerSize;
smallsql/database/LongTreeList.java۞549۩writePointer( pointer + diff );
smallsql/database/LongTreeList.java۞550۩if(diff > 0) pointer += diff;
smallsql/database/LongTreeList.java۞551۩}
smallsql/database/LongTreeList.java۞552۩if(level < 2){
smallsql/database/LongTreeList.java۞553۩startOffset = offset;
smallsql/database/LongTreeList.java۞554۩correctPointers( pointer, oldOffset, diff, level+1);
smallsql/database/LongTreeList.java۞555۩offset = startOffset;
smallsql/database/LongTreeList.java۞556۩}
smallsql/database/LongTreeList.java۞557۩firstNode = false;
smallsql/database/LongTreeList.java۞558۩}else{
smallsql/database/LongTreeList.java۞559۩return;
smallsql/database/LongTreeList.java۞560۩}
smallsql/database/LongTreeList.java۞561۩}
smallsql/database/LongTreeList.java۞562۩}
smallsql/database/LongTreeList.java۞568۩final private int getPointer(){
smallsql/database/LongTreeList.java۞569۩int value = 0;
smallsql/database/LongTreeList.java۞570۩for(int i=0; i<pointerSize; i++){
smallsql/database/LongTreeList.java۞571۩value <<= 8;
smallsql/database/LongTreeList.java۞572۩value += (data[offset++] & 0xFF);
smallsql/database/LongTreeList.java۞573۩}
smallsql/database/LongTreeList.java۞574۩return value;
smallsql/database/LongTreeList.java۞575۩}
smallsql/database/LongTreeList.java۞581۩final private void writePointer(int value){
smallsql/database/LongTreeList.java۞582۩for(int i=pointerSize-1; i>=0; i--){
smallsql/database/LongTreeList.java۞583۩data[offset++] = (byte)(value >> (i*8));
smallsql/database/LongTreeList.java۞584۩}
smallsql/database/LongTreeList.java۞585۩}
smallsql/database/LongTreeList.java۞591۩final private int getUnsignedShort(){
smallsql/database/LongTreeList.java۞592۩return ((data[ offset++ ] & 0xFF) << 8) | (data[ offset++ ] & 0xFF);
smallsql/database/LongTreeList.java۞593۩}
smallsql/database/LongTreeList.java۞600۩final private void writeShort(int value){
smallsql/database/LongTreeList.java۞601۩data[offset++] = (byte)(value >> 8);
smallsql/database/LongTreeList.java۞602۩data[offset++] = (byte)(value);
smallsql/database/LongTreeList.java۞603۩}
smallsql/database/LongTreeList.java۞609۩private final void resize() throws SQLException{
smallsql/database/LongTreeList.java۞610۩int newsize = data.length << 1;
smallsql/database/LongTreeList.java۞611۩if(newsize > 0xFFFFFF){
smallsql/database/LongTreeList.java۞612۩newsize = 0xFFFFFF;
smallsql/database/LongTreeList.java۞613۩if(newsize == data.length) throw SmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);
smallsql/database/LongTreeList.java۞614۩}
smallsql/database/LongTreeList.java۞615۩byte[] temp = new byte[newsize];
smallsql/database/LongTreeList.java۞616۩System.arraycopy(data, 0, temp, 0, data.length);
smallsql/database/LongTreeList.java۞617۩data = temp;
smallsql/database/LongTreeList.java۞618۩}
smallsql/database/LongTreeList.java۞620۩final int getSize() {
smallsql/database/LongTreeList.java۞621۩return size;
smallsql/database/LongTreeList.java۞622۩}
smallsql/database/LongTreeList.java۞623۩}
smallsql/database/LongTreeListEnum.java۞33۩package smallsql.database;
smallsql/database/LongTreeListEnum.java۞39۩public class LongTreeListEnum {
smallsql/database/LongTreeListEnum.java۞41۩long[] resultStack = new long[4];
smallsql/database/LongTreeListEnum.java۞42۩int[]  offsetStack = new int[4];
smallsql/database/LongTreeListEnum.java۞43۩int stack;
smallsql/database/LongTreeListEnum.java۞48۩final void reset(){
smallsql/database/LongTreeListEnum.java۞49۩stack = 0;
smallsql/database/LongTreeListEnum.java۞50۩offsetStack[0] = 0;
smallsql/database/LongTreeListEnum.java۞51۩}
smallsql/database/LongTreeListEnum.java۞53۩}
smallsql/database/MemoryResult.java۞33۩package smallsql.database;
smallsql/database/MemoryResult.java۞35۩import java.sql.*;
smallsql/database/MemoryResult.java۞36۩import java.util.ArrayList;
smallsql/database/MemoryResult.java۞37۩import java.util.List;
smallsql/database/MemoryResult.java۞38۩import smallsql.database.language.Language;
smallsql/database/MemoryResult.java۞44۩class MemoryResult extends DataSource {
smallsql/database/MemoryResult.java۞46۩ExpressionValue[] currentRow;
smallsql/database/MemoryResult.java۞47۩private final Columns columns = new Columns();
smallsql/database/MemoryResult.java۞48۩private int rowIdx = -1;
smallsql/database/MemoryResult.java۞49۩private List rowList = new ArrayList();
smallsql/database/MemoryResult.java۞54۩MemoryResult(){}
smallsql/database/MemoryResult.java۞60۩MemoryResult(Object[][] data, int colCount) throws SQLException{
smallsql/database/MemoryResult.java۞61۩for(int c=0; c<colCount; c++){
smallsql/database/MemoryResult.java۞62۩Column column = new Column();
smallsql/database/MemoryResult.java۞63۩column.setDataType(SQLTokenizer.NULL);
smallsql/database/MemoryResult.java۞64۩columns.add( column );
smallsql/database/MemoryResult.java۞65۩}
smallsql/database/MemoryResult.java۞66۩for(int r=0; r<data.length; r++){
smallsql/database/MemoryResult.java۞67۩Object[] row = data[r];
smallsql/database/MemoryResult.java۞68۩ExpressionValue[] rowValues = new ExpressionValue[row.length];
smallsql/database/MemoryResult.java۞69۩addRow(rowValues);
smallsql/database/MemoryResult.java۞70۩for(int c=0; c<colCount; c++){
smallsql/database/MemoryResult.java۞71۩ExpressionValue expr = rowValues[c] = new ExpressionValue();
smallsql/database/MemoryResult.java۞72۩expr.set( row[c], -1);
smallsql/database/MemoryResult.java۞73۩Column column = columns.get(c);
smallsql/database/MemoryResult.java۞74۩if(expr.getDataType() != SQLTokenizer.NULL){
smallsql/database/MemoryResult.java۞75۩column.setDataType(expr.getDataType());
smallsql/database/MemoryResult.java۞76۩}
smallsql/database/MemoryResult.java۞77۩if(expr.getPrecision() > column.getPrecision()){
smallsql/database/MemoryResult.java۞78۩column.setPrecision(expr.getPrecision());
smallsql/database/MemoryResult.java۞79۩}
smallsql/database/MemoryResult.java۞80۩}
smallsql/database/MemoryResult.java۞81۩}
smallsql/database/MemoryResult.java۞82۩}
smallsql/database/MemoryResult.java۞84۩final void addRow(ExpressionValue[] row){
smallsql/database/MemoryResult.java۞85۩rowList.add(row);
smallsql/database/MemoryResult.java۞86۩}
smallsql/database/MemoryResult.java۞93۩final Column getColumn(int colIdx){
smallsql/database/MemoryResult.java۞94۩return columns.get(colIdx);
smallsql/database/MemoryResult.java۞95۩}
smallsql/database/MemoryResult.java۞102۩final void addColumn(Column column){
smallsql/database/MemoryResult.java۞103۩columns.add(column);
smallsql/database/MemoryResult.java۞104۩}
smallsql/database/MemoryResult.java۞113۩final boolean isScrollable(){
smallsql/database/MemoryResult.java۞114۩return true;
smallsql/database/MemoryResult.java۞115۩}
smallsql/database/MemoryResult.java۞118۩final void beforeFirst(){
smallsql/database/MemoryResult.java۞119۩rowIdx = -1;
smallsql/database/MemoryResult.java۞120۩currentRow = null;
smallsql/database/MemoryResult.java۞121۩}
smallsql/database/MemoryResult.java۞123۩final boolean isBeforeFirst(){
smallsql/database/MemoryResult.java۞124۩return rowIdx < 0 || rowList.size() == 0;
smallsql/database/MemoryResult.java۞125۩}
smallsql/database/MemoryResult.java۞127۩final boolean isFirst(){
smallsql/database/MemoryResult.java۞128۩return rowIdx == 0 && currentRow != null;
smallsql/database/MemoryResult.java۞129۩}
smallsql/database/MemoryResult.java۞131۩final boolean first(){
smallsql/database/MemoryResult.java۞132۩rowIdx = 0;
smallsql/database/MemoryResult.java۞133۩return move();
smallsql/database/MemoryResult.java۞134۩}
smallsql/database/MemoryResult.java۞136۩final boolean previous(){
smallsql/database/MemoryResult.java۞137۩if(rowIdx-- < 0) rowIdx = -1;
smallsql/database/MemoryResult.java۞138۩return move();
smallsql/database/MemoryResult.java۞139۩}
smallsql/database/MemoryResult.java۞141۩final boolean next(){
smallsql/database/MemoryResult.java۞142۩rowIdx++;
smallsql/database/MemoryResult.java۞143۩return move();
smallsql/database/MemoryResult.java۞144۩}
smallsql/database/MemoryResult.java۞146۩final boolean last(){
smallsql/database/MemoryResult.java۞147۩rowIdx = rowList.size() - 1;
smallsql/database/MemoryResult.java۞148۩return move();
smallsql/database/MemoryResult.java۞149۩}
smallsql/database/MemoryResult.java۞152۩final boolean isLast(){
smallsql/database/MemoryResult.java۞153۩return rowIdx == rowList.size() - 1 && currentRow != null;
smallsql/database/MemoryResult.java۞154۩}
smallsql/database/MemoryResult.java۞156۩final boolean isAfterLast(){
smallsql/database/MemoryResult.java۞157۩return rowIdx >= rowList.size() || rowList.size() == 0;
smallsql/database/MemoryResult.java۞158۩}
smallsql/database/MemoryResult.java۞160۩final void afterLast(){
smallsql/database/MemoryResult.java۞161۩rowIdx = rowList.size();
smallsql/database/MemoryResult.java۞162۩currentRow = null;
smallsql/database/MemoryResult.java۞163۩}
smallsql/database/MemoryResult.java۞166۩final boolean absolute(int row) throws SQLException{
smallsql/database/MemoryResult.java۞167۩if(row == 0) throw SmallSQLException.create(Language.ROW_0_ABSOLUTE);
smallsql/database/MemoryResult.java۞168۩rowIdx = (row > 0) ?
smallsql/database/MemoryResult.java۞169۩Math.min( row - 1, rowList.size() ):
smallsql/database/MemoryResult.java۞170۩Math.max( row +rowList.size(), -1 );
smallsql/database/MemoryResult.java۞171۩return move();
smallsql/database/MemoryResult.java۞172۩}
smallsql/database/MemoryResult.java۞175۩final boolean relative(int rows){
smallsql/database/MemoryResult.java۞176۩if(rows == 0) return (currentRow != null);
smallsql/database/MemoryResult.java۞177۩rowIdx = Math.min( Math.max( rowIdx + rows, -1), rowList.size());
smallsql/database/MemoryResult.java۞178۩return move();
smallsql/database/MemoryResult.java۞179۩}
smallsql/database/MemoryResult.java۞182۩final int getRow(){
smallsql/database/MemoryResult.java۞183۩return currentRow == null ? 0 : rowIdx+1;
smallsql/database/MemoryResult.java۞184۩}
smallsql/database/MemoryResult.java۞187۩final long getRowPosition(){
smallsql/database/MemoryResult.java۞188۩return rowIdx;
smallsql/database/MemoryResult.java۞189۩}
smallsql/database/MemoryResult.java۞192۩final void setRowPosition(long rowPosition) throws Exception{
smallsql/database/MemoryResult.java۞193۩rowIdx = (int)rowPosition;
smallsql/database/MemoryResult.java۞194۩move();
smallsql/database/MemoryResult.java۞195۩}
smallsql/database/MemoryResult.java۞198۩final boolean rowInserted(){
smallsql/database/MemoryResult.java۞199۩return false;
smallsql/database/MemoryResult.java۞200۩}
smallsql/database/MemoryResult.java۞203۩final boolean rowDeleted(){
smallsql/database/MemoryResult.java۞204۩return false;
smallsql/database/MemoryResult.java۞205۩}
smallsql/database/MemoryResult.java۞208۩void nullRow(){
smallsql/database/MemoryResult.java۞209۩throw new Error();
smallsql/database/MemoryResult.java۞210۩}
smallsql/database/MemoryResult.java۞213۩void noRow(){
smallsql/database/MemoryResult.java۞214۩currentRow = null;
smallsql/database/MemoryResult.java۞215۩}
smallsql/database/MemoryResult.java۞218۩final private boolean move(){
smallsql/database/MemoryResult.java۞219۩if(rowIdx < rowList.size() && rowIdx >= 0){
smallsql/database/MemoryResult.java۞220۩currentRow = (ExpressionValue[])rowList.get(rowIdx);
smallsql/database/MemoryResult.java۞221۩return true;
smallsql/database/MemoryResult.java۞222۩}
smallsql/database/MemoryResult.java۞223۩currentRow = null;
smallsql/database/MemoryResult.java۞224۩return false;
smallsql/database/MemoryResult.java۞225۩}
smallsql/database/MemoryResult.java۞233۩boolean isNull( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞234۩return get( colIdx ).isNull();
smallsql/database/MemoryResult.java۞235۩}
smallsql/database/MemoryResult.java۞238۩boolean getBoolean( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞239۩return get( colIdx ).getBoolean();
smallsql/database/MemoryResult.java۞240۩}
smallsql/database/MemoryResult.java۞242۩int getInt( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞243۩return get( colIdx ).getInt();
smallsql/database/MemoryResult.java۞244۩}
smallsql/database/MemoryResult.java۞246۩long getLong( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞247۩return get( colIdx ).getLong();
smallsql/database/MemoryResult.java۞248۩}
smallsql/database/MemoryResult.java۞250۩float getFloat( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞251۩return get( colIdx ).getFloat();
smallsql/database/MemoryResult.java۞252۩}
smallsql/database/MemoryResult.java۞254۩double getDouble( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞255۩return get( colIdx ).getDouble();
smallsql/database/MemoryResult.java۞256۩}
smallsql/database/MemoryResult.java۞258۩long getMoney( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞259۩return get( colIdx ).getMoney();
smallsql/database/MemoryResult.java۞260۩}
smallsql/database/MemoryResult.java۞262۩MutableNumeric getNumeric( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞263۩return get( colIdx ).getNumeric();
smallsql/database/MemoryResult.java۞264۩}
smallsql/database/MemoryResult.java۞266۩Object getObject( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞267۩return get( colIdx ).getObject();
smallsql/database/MemoryResult.java۞268۩}
smallsql/database/MemoryResult.java۞270۩String getString( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞271۩return get( colIdx ).getString();
smallsql/database/MemoryResult.java۞272۩}
smallsql/database/MemoryResult.java۞275۩byte[] getBytes( int colIdx ) throws Exception{
smallsql/database/MemoryResult.java۞276۩return get( colIdx ).getBytes();
smallsql/database/MemoryResult.java۞277۩}
smallsql/database/MemoryResult.java۞280۩int getDataType( int colIdx ){
smallsql/database/MemoryResult.java۞281۩return columns.get( colIdx ).getDataType();
smallsql/database/MemoryResult.java۞283۩}
smallsql/database/MemoryResult.java۞286۩final TableView getTableView(){
smallsql/database/MemoryResult.java۞287۩return null;
smallsql/database/MemoryResult.java۞288۩}
smallsql/database/MemoryResult.java۞291۩final void deleteRow() throws Exception{
smallsql/database/MemoryResult.java۞292۩throw SmallSQLException.create(Language.RSET_READONLY);
smallsql/database/MemoryResult.java۞293۩}
smallsql/database/MemoryResult.java۞296۩final void updateRow(Expression[] updateValues) throws Exception{
smallsql/database/MemoryResult.java۞297۩throw SmallSQLException.create(Language.RSET_READONLY);
smallsql/database/MemoryResult.java۞298۩}
smallsql/database/MemoryResult.java۞301۩final void insertRow(Expression[] updateValues) throws Exception{
smallsql/database/MemoryResult.java۞302۩throw SmallSQLException.create(Language.RSET_READONLY);
smallsql/database/MemoryResult.java۞303۩}
smallsql/database/MemoryResult.java۞317۩private Expression get(int colIdx) throws Exception{
smallsql/database/MemoryResult.java۞318۩if(currentRow == null) throw SmallSQLException.create(Language.ROW_NOCURRENT);
smallsql/database/MemoryResult.java۞319۩return currentRow[ colIdx ];
smallsql/database/MemoryResult.java۞320۩}
smallsql/database/MemoryResult.java۞326۩int getRowCount(){
smallsql/database/MemoryResult.java۞327۩return rowList.size();
smallsql/database/MemoryResult.java۞328۩}
smallsql/database/MemoryResult.java۞331۩void execute() throws Exception{
smallsql/database/MemoryResult.java۞332۩rowList.clear();
smallsql/database/MemoryResult.java۞333۩}
smallsql/database/MemoryResult.java۞334۩}
smallsql/database/MemoryStream.java۞33۩package smallsql.database;
smallsql/database/MemoryStream.java۞35۩import java.io.*;
smallsql/database/MemoryStream.java۞36۩import java.nio.ByteBuffer;
smallsql/database/MemoryStream.java۞37۩import java.nio.channels.FileChannel;
smallsql/database/MemoryStream.java۞43۩class MemoryStream {
smallsql/database/MemoryStream.java۞44۩private byte[] puffer;
smallsql/database/MemoryStream.java۞45۩private int offset;
smallsql/database/MemoryStream.java۞47۩MemoryStream(){
smallsql/database/MemoryStream.java۞48۩puffer = new byte[256];
smallsql/database/MemoryStream.java۞49۩}
smallsql/database/MemoryStream.java۞51۩void writeTo(FileChannel file) throws IOException{
smallsql/database/MemoryStream.java۞52۩ByteBuffer buffer = ByteBuffer.wrap( puffer, 0, offset );
smallsql/database/MemoryStream.java۞53۩file.write(buffer);
smallsql/database/MemoryStream.java۞54۩}
smallsql/database/MemoryStream.java۞56۩void writeByte(int value){
smallsql/database/MemoryStream.java۞57۩verifyFreePufferSize(1);
smallsql/database/MemoryStream.java۞58۩puffer[ offset++ ] = (byte)(value);
smallsql/database/MemoryStream.java۞59۩}
smallsql/database/MemoryStream.java۞61۩void writeShort(int value){
smallsql/database/MemoryStream.java۞62۩verifyFreePufferSize(2);
smallsql/database/MemoryStream.java۞63۩puffer[ offset++ ] = (byte)(value >> 8);
smallsql/database/MemoryStream.java۞64۩puffer[ offset++ ] = (byte)(value);
smallsql/database/MemoryStream.java۞65۩}
smallsql/database/MemoryStream.java۞67۩void writeInt(int value){
smallsql/database/MemoryStream.java۞68۩verifyFreePufferSize(4);
smallsql/database/MemoryStream.java۞69۩puffer[ offset++ ] = (byte)(value >> 24);
smallsql/database/MemoryStream.java۞70۩puffer[ offset++ ] = (byte)(value >> 16);
smallsql/database/MemoryStream.java۞71۩puffer[ offset++ ] = (byte)(value >> 8);
smallsql/database/MemoryStream.java۞72۩puffer[ offset++ ] = (byte)(value);
smallsql/database/MemoryStream.java۞73۩}
smallsql/database/MemoryStream.java۞75۩void writeLong(long value){
smallsql/database/MemoryStream.java۞76۩verifyFreePufferSize(8);
smallsql/database/MemoryStream.java۞77۩puffer[ offset++ ] = (byte)(value >> 56);
smallsql/database/MemoryStream.java۞78۩puffer[ offset++ ] = (byte)(value >> 48);
smallsql/database/MemoryStream.java۞79۩puffer[ offset++ ] = (byte)(value >> 40);
smallsql/database/MemoryStream.java۞80۩puffer[ offset++ ] = (byte)(value >> 32);
smallsql/database/MemoryStream.java۞81۩puffer[ offset++ ] = (byte)(value >> 24);
smallsql/database/MemoryStream.java۞82۩puffer[ offset++ ] = (byte)(value >> 16);
smallsql/database/MemoryStream.java۞83۩puffer[ offset++ ] = (byte)(value >> 8);
smallsql/database/MemoryStream.java۞84۩puffer[ offset++ ] = (byte)(value);
smallsql/database/MemoryStream.java۞85۩}
smallsql/database/MemoryStream.java۞87۩void writeChars(char[] value){
smallsql/database/MemoryStream.java۞88۩verifyFreePufferSize(2*value.length);
smallsql/database/MemoryStream.java۞89۩for(int i=0; i<value.length; i++){
smallsql/database/MemoryStream.java۞90۩char c = value[i];
smallsql/database/MemoryStream.java۞91۩puffer[ offset++ ] = (byte)(c >> 8);
smallsql/database/MemoryStream.java۞92۩puffer[ offset++ ] = (byte)(c);
smallsql/database/MemoryStream.java۞93۩}
smallsql/database/MemoryStream.java۞94۩}
smallsql/database/MemoryStream.java۞96۩void writeBytes(byte[] value, int off, int length){
smallsql/database/MemoryStream.java۞97۩verifyFreePufferSize(length);
smallsql/database/MemoryStream.java۞98۩System.arraycopy(value, off, puffer, offset, length);
smallsql/database/MemoryStream.java۞99۩offset += length;
smallsql/database/MemoryStream.java۞100۩}
smallsql/database/MemoryStream.java۞102۩private void verifyFreePufferSize(int freeSize){
smallsql/database/MemoryStream.java۞103۩int minSize = offset+freeSize;
smallsql/database/MemoryStream.java۞104۩if(minSize < puffer.length){
smallsql/database/MemoryStream.java۞105۩int newSize = puffer.length << 1;
smallsql/database/MemoryStream.java۞106۩if(newSize < minSize) newSize = minSize;
smallsql/database/MemoryStream.java۞107۩byte[] temp = new byte[newSize];
smallsql/database/MemoryStream.java۞108۩System.arraycopy(puffer, 0, temp, 0, offset);
smallsql/database/MemoryStream.java۞109۩puffer = temp;
smallsql/database/MemoryStream.java۞110۩}
smallsql/database/MemoryStream.java۞111۩}
smallsql/database/MemoryStream.java۞114۩void skip(int count){
smallsql/database/MemoryStream.java۞115۩offset += count;
smallsql/database/MemoryStream.java۞116۩}
smallsql/database/MemoryStream.java۞119۩int readByte(){
smallsql/database/MemoryStream.java۞120۩return puffer[ offset++ ];
smallsql/database/MemoryStream.java۞121۩}
smallsql/database/MemoryStream.java۞124۩int readShort(){
smallsql/database/MemoryStream.java۞125۩return ((puffer[ offset++ ] & 0xFF) << 8) | (puffer[ offset++ ] & 0xFF);
smallsql/database/MemoryStream.java۞126۩}
smallsql/database/MemoryStream.java۞129۩int readInt(){
smallsql/database/MemoryStream.java۞130۩return ((puffer[ offset++ ] & 0xFF) << 24)
smallsql/database/MemoryStream.java۞131۩| ((puffer[ offset++ ] & 0xFF) << 16)
smallsql/database/MemoryStream.java۞132۩| ((puffer[ offset++ ] & 0xFF) << 8)
smallsql/database/MemoryStream.java۞133۩|  (puffer[ offset++ ] & 0xFF);
smallsql/database/MemoryStream.java۞134۩}
smallsql/database/MemoryStream.java۞137۩long readLong(){
smallsql/database/MemoryStream.java۞138۩return (((long)(puffer[ offset++ ] & 0xFF)) << 56)
smallsql/database/MemoryStream.java۞139۩| (((long)(puffer[ offset++ ] & 0xFF)) << 48)
smallsql/database/MemoryStream.java۞140۩| (((long)(puffer[ offset++ ] & 0xFF)) << 40)
smallsql/database/MemoryStream.java۞141۩| (((long)(puffer[ offset++ ] & 0xFF)) << 32)
smallsql/database/MemoryStream.java۞142۩| ((puffer[ offset++ ] & 0xFF) << 24)
smallsql/database/MemoryStream.java۞143۩| ((puffer[ offset++ ] & 0xFF) << 16)
smallsql/database/MemoryStream.java۞144۩| ((puffer[ offset++ ] & 0xFF) << 8)
smallsql/database/MemoryStream.java۞145۩|  (puffer[ offset++ ] & 0xFF);
smallsql/database/MemoryStream.java۞146۩}
smallsql/database/MemoryStream.java۞149۩char[] readChars(int length){
smallsql/database/MemoryStream.java۞150۩char[] chars = new char[length];
smallsql/database/MemoryStream.java۞151۩for(int i=0; i<length; i++){
smallsql/database/MemoryStream.java۞152۩chars[i] = (char)readShort();
smallsql/database/MemoryStream.java۞153۩}
smallsql/database/MemoryStream.java۞154۩return chars;
smallsql/database/MemoryStream.java۞155۩}
smallsql/database/MemoryStream.java۞157۩byte[] readBytes(int length){
smallsql/database/MemoryStream.java۞158۩byte[] bytes = new byte[length];
smallsql/database/MemoryStream.java۞159۩System.arraycopy(puffer, offset, bytes, 0, length);
smallsql/database/MemoryStream.java۞160۩offset += length;
smallsql/database/MemoryStream.java۞161۩return bytes;
smallsql/database/MemoryStream.java۞162۩}
smallsql/database/MemoryStream.java۞163۩}
smallsql/database/Money.java۞33۩package smallsql.database;
smallsql/database/Money.java۞35۩import java.math.*;
smallsql/database/Money.java۞37۩public class Money extends Number implements Mutable{
smallsql/database/Money.java۞42۩private static final long serialVersionUID = -620300937494609089L;
smallsql/database/Money.java۞43۩long value;
smallsql/database/Money.java۞49۩private Money(){}
smallsql/database/Money.java۞52۩public Money(double value){
smallsql/database/Money.java۞53۩this.value = (long)(value * 10000);
smallsql/database/Money.java۞54۩}
smallsql/database/Money.java۞56۩public Money(float value){
smallsql/database/Money.java۞57۩this.value = (long)(value * 10000);
smallsql/database/Money.java۞58۩}
smallsql/database/Money.java۞61۩public static Money createFromUnscaledValue(long value){
smallsql/database/Money.java۞62۩Money money = new Money();
smallsql/database/Money.java۞63۩money.value = value;
smallsql/database/Money.java۞64۩return money;
smallsql/database/Money.java۞65۩}
smallsql/database/Money.java۞67۩public static Money createFromUnscaledValue(int value){
smallsql/database/Money.java۞68۩Money money = new Money();
smallsql/database/Money.java۞69۩money.value = value;
smallsql/database/Money.java۞70۩return money;
smallsql/database/Money.java۞71۩}
smallsql/database/Money.java۞73۩public int intValue() {
smallsql/database/Money.java۞74۩return (int)(value / 10000.0);
smallsql/database/Money.java۞75۩}
smallsql/database/Money.java۞76۩public float floatValue() {
smallsql/database/Money.java۞77۩return value / 10000.0F;
smallsql/database/Money.java۞78۩}
smallsql/database/Money.java۞79۩public double doubleValue() {
smallsql/database/Money.java۞80۩return value / 10000.0;
smallsql/database/Money.java۞81۩}
smallsql/database/Money.java۞82۩public long longValue() {
smallsql/database/Money.java۞83۩return (long)(value / 10000.0);
smallsql/database/Money.java۞84۩}
smallsql/database/Money.java۞86۩public String toString(){
smallsql/database/Money.java۞87۩StringBuffer buffer = new StringBuffer();
smallsql/database/Money.java۞88۩buffer.append(longValue()).append('.');
smallsql/database/Money.java۞89۩final long v = Math.abs(value);
smallsql/database/Money.java۞90۩buffer.append( (char)((v % 10000) / 1000 + '0') );
smallsql/database/Money.java۞91۩buffer.append( (char)((v % 1000) / 100 + '0') );
smallsql/database/Money.java۞92۩buffer.append( (char)((v % 100) / 10 + '0') );
smallsql/database/Money.java۞93۩buffer.append( (char)((v % 10) + '0') );
smallsql/database/Money.java۞95۩return buffer.toString();
smallsql/database/Money.java۞96۩}
smallsql/database/Money.java۞98۩public boolean equals(Object obj){
smallsql/database/Money.java۞99۩return (obj instanceof Money && ((Money)obj).value == value);
smallsql/database/Money.java۞100۩}
smallsql/database/Money.java۞102۩public int hashCode(){
smallsql/database/Money.java۞103۩return (int)(value ^ (value >>> 32));
smallsql/database/Money.java۞104۩}
smallsql/database/Money.java۞106۩public long unscaledValue(){
smallsql/database/Money.java۞107۩return value;
smallsql/database/Money.java۞108۩}
smallsql/database/Money.java۞110۩public static long parseMoney( String str ){
smallsql/database/Money.java۞112۩return Utils.doubleToMoney(Double.parseDouble( str ));
smallsql/database/Money.java۞113۩}
smallsql/database/Money.java۞115۩private byte[] toByteArray(){
smallsql/database/Money.java۞116۩byte[] bytes = new byte[8];
smallsql/database/Money.java۞118۩int offset = 0;
smallsql/database/Money.java۞119۩bytes[offset++] = (byte)(value >> 56);
smallsql/database/Money.java۞120۩bytes[offset++] = (byte)(value >> 48);
smallsql/database/Money.java۞121۩bytes[offset++] = (byte)(value >> 40);
smallsql/database/Money.java۞122۩bytes[offset++] = (byte)(value >> 32);
smallsql/database/Money.java۞123۩bytes[offset++] = (byte)(value >> 24);
smallsql/database/Money.java۞124۩bytes[offset++] = (byte)(value >> 16);
smallsql/database/Money.java۞125۩bytes[offset++] = (byte)(value >> 8);
smallsql/database/Money.java۞126۩bytes[offset++] = (byte)(value);
smallsql/database/Money.java۞127۩return bytes;
smallsql/database/Money.java۞128۩}
smallsql/database/Money.java۞130۩public BigDecimal toBigDecimal(){
smallsql/database/Money.java۞131۩if(value == 0) return ZERO;
smallsql/database/Money.java۞132۩return new BigDecimal( new BigInteger( toByteArray() ), 4 );
smallsql/database/Money.java۞133۩}
smallsql/database/Money.java۞136۩public Object getImmutableObject(){
smallsql/database/Money.java۞137۩return toBigDecimal();
smallsql/database/Money.java۞138۩}
smallsql/database/Money.java۞140۩static private final BigDecimal ZERO = new BigDecimal("0.0000");
smallsql/database/Money.java۞141۩}
smallsql/database/Mutable.java۞33۩package smallsql.database;
smallsql/database/Mutable.java۞39۩interface Mutable {
smallsql/database/Mutable.java۞41۩Object getImmutableObject();
smallsql/database/Mutable.java۞43۩}
smallsql/database/MutableDouble.java۞33۩package smallsql.database;
smallsql/database/MutableDouble.java۞39۩final class MutableDouble extends Number implements Mutable{
smallsql/database/MutableDouble.java۞41۩double value;
smallsql/database/MutableDouble.java۞43۩MutableDouble(double value){
smallsql/database/MutableDouble.java۞44۩this.value = value;
smallsql/database/MutableDouble.java۞45۩}
smallsql/database/MutableDouble.java۞47۩public double doubleValue() {
smallsql/database/MutableDouble.java۞48۩return value;
smallsql/database/MutableDouble.java۞49۩}
smallsql/database/MutableDouble.java۞51۩public float floatValue() {
smallsql/database/MutableDouble.java۞52۩return (float)value;
smallsql/database/MutableDouble.java۞53۩}
smallsql/database/MutableDouble.java۞55۩public int intValue() {
smallsql/database/MutableDouble.java۞56۩return (int)value;
smallsql/database/MutableDouble.java۞57۩}
smallsql/database/MutableDouble.java۞59۩public long longValue() {
smallsql/database/MutableDouble.java۞60۩return (long)value;
smallsql/database/MutableDouble.java۞61۩}
smallsql/database/MutableDouble.java۞63۩public String toString(){
smallsql/database/MutableDouble.java۞64۩return String.valueOf(value);
smallsql/database/MutableDouble.java۞65۩}
smallsql/database/MutableDouble.java۞67۩public Object getImmutableObject(){
smallsql/database/MutableDouble.java۞68۩return new Double(value);
smallsql/database/MutableDouble.java۞69۩}
smallsql/database/MutableDouble.java۞70۩}
smallsql/database/MutableFloat.java۞33۩package smallsql.database;
smallsql/database/MutableFloat.java۞39۩final class MutableFloat extends Number implements Mutable{
smallsql/database/MutableFloat.java۞41۩float value;
smallsql/database/MutableFloat.java۞43۩MutableFloat(float value){
smallsql/database/MutableFloat.java۞44۩this.value = value;
smallsql/database/MutableFloat.java۞45۩}
smallsql/database/MutableFloat.java۞47۩public double doubleValue() {
smallsql/database/MutableFloat.java۞48۩return value;
smallsql/database/MutableFloat.java۞49۩}
smallsql/database/MutableFloat.java۞51۩public float floatValue() {
smallsql/database/MutableFloat.java۞52۩return value;
smallsql/database/MutableFloat.java۞53۩}
smallsql/database/MutableFloat.java۞55۩public int intValue() {
smallsql/database/MutableFloat.java۞56۩return (int)value;
smallsql/database/MutableFloat.java۞57۩}
smallsql/database/MutableFloat.java۞59۩public long longValue() {
smallsql/database/MutableFloat.java۞60۩return (long)value;
smallsql/database/MutableFloat.java۞61۩}
smallsql/database/MutableFloat.java۞63۩public String toString(){
smallsql/database/MutableFloat.java۞64۩return String.valueOf(value);
smallsql/database/MutableFloat.java۞65۩}
smallsql/database/MutableFloat.java۞67۩public Object getImmutableObject(){
smallsql/database/MutableFloat.java۞68۩return new Float(value);
smallsql/database/MutableFloat.java۞69۩}
smallsql/database/MutableFloat.java۞70۩}
smallsql/database/MutableInteger.java۞33۩package smallsql.database;
smallsql/database/MutableInteger.java۞39۩final class MutableInteger extends Number implements Mutable{
smallsql/database/MutableInteger.java۞41۩int value;
smallsql/database/MutableInteger.java۞43۩MutableInteger(int value){
smallsql/database/MutableInteger.java۞44۩this.value = value;
smallsql/database/MutableInteger.java۞45۩}
smallsql/database/MutableInteger.java۞47۩public double doubleValue() {
smallsql/database/MutableInteger.java۞48۩return value;
smallsql/database/MutableInteger.java۞49۩}
smallsql/database/MutableInteger.java۞51۩public float floatValue() {
smallsql/database/MutableInteger.java۞52۩return value;
smallsql/database/MutableInteger.java۞53۩}
smallsql/database/MutableInteger.java۞55۩public int intValue() {
smallsql/database/MutableInteger.java۞56۩return value;
smallsql/database/MutableInteger.java۞57۩}
smallsql/database/MutableInteger.java۞59۩public long longValue() {
smallsql/database/MutableInteger.java۞60۩return value;
smallsql/database/MutableInteger.java۞61۩}
smallsql/database/MutableInteger.java۞63۩public String toString(){
smallsql/database/MutableInteger.java۞64۩return String.valueOf(value);
smallsql/database/MutableInteger.java۞65۩}
smallsql/database/MutableInteger.java۞67۩public Object getImmutableObject(){
smallsql/database/MutableInteger.java۞68۩return Utils.getInteger(value);
smallsql/database/MutableInteger.java۞69۩}
smallsql/database/MutableInteger.java۞70۩}
smallsql/database/MutableLong.java۞33۩package smallsql.database;
smallsql/database/MutableLong.java۞39۩final class MutableLong extends Number implements Mutable{
smallsql/database/MutableLong.java۞41۩long value;
smallsql/database/MutableLong.java۞43۩MutableLong(long value){
smallsql/database/MutableLong.java۞44۩this.value = value;
smallsql/database/MutableLong.java۞45۩}
smallsql/database/MutableLong.java۞47۩public double doubleValue() {
smallsql/database/MutableLong.java۞48۩return value;
smallsql/database/MutableLong.java۞49۩}
smallsql/database/MutableLong.java۞51۩public float floatValue() {
smallsql/database/MutableLong.java۞52۩return value;
smallsql/database/MutableLong.java۞53۩}
smallsql/database/MutableLong.java۞55۩public int intValue() {
smallsql/database/MutableLong.java۞56۩return (int)value;
smallsql/database/MutableLong.java۞57۩}
smallsql/database/MutableLong.java۞59۩public long longValue() {
smallsql/database/MutableLong.java۞60۩return value;
smallsql/database/MutableLong.java۞61۩}
smallsql/database/MutableLong.java۞63۩public String toString(){
smallsql/database/MutableLong.java۞64۩return String.valueOf(value);
smallsql/database/MutableLong.java۞65۩}
smallsql/database/MutableLong.java۞67۩public Object getImmutableObject(){
smallsql/database/MutableLong.java۞68۩return new Long(value);
smallsql/database/MutableLong.java۞69۩}
smallsql/database/MutableLong.java۞70۩}
smallsql/database/MutableNumeric.java۞33۩package smallsql.database;
smallsql/database/MutableNumeric.java۞35۩import java.math.*;
smallsql/database/MutableNumeric.java۞37۩class MutableNumeric extends Number implements Mutable{
smallsql/database/MutableNumeric.java۞39۩private static final long serialVersionUID = -750525164208565056L;
smallsql/database/MutableNumeric.java۞40۩private int[] value;
smallsql/database/MutableNumeric.java۞41۩private int scale;
smallsql/database/MutableNumeric.java۞42۩private int signum;
smallsql/database/MutableNumeric.java۞48۩MutableNumeric(byte[] complement){
smallsql/database/MutableNumeric.java۞49۩setValue(complement);
smallsql/database/MutableNumeric.java۞50۩}
smallsql/database/MutableNumeric.java۞52۩private void setValue(byte[] complement){
smallsql/database/MutableNumeric.java۞53۩int length = complement.length;
smallsql/database/MutableNumeric.java۞54۩if(length == 0){
smallsql/database/MutableNumeric.java۞55۩value   = EMPTY_INTS;
smallsql/database/MutableNumeric.java۞56۩signum  = 0;
smallsql/database/MutableNumeric.java۞57۩return;
smallsql/database/MutableNumeric.java۞58۩}
smallsql/database/MutableNumeric.java۞59۩value = new int[ (length + 3) / 4 ];
smallsql/database/MutableNumeric.java۞60۩if(complement[0] < 0){
smallsql/database/MutableNumeric.java۞61۩negate( complement );
smallsql/database/MutableNumeric.java۞62۩signum = -1;
smallsql/database/MutableNumeric.java۞63۩}else{
smallsql/database/MutableNumeric.java۞64۩signum = 0;
smallsql/database/MutableNumeric.java۞65۩for(int i=0; i<complement.length; i++)
smallsql/database/MutableNumeric.java۞66۩if(complement[i] != 0){
smallsql/database/MutableNumeric.java۞67۩signum = 1;
smallsql/database/MutableNumeric.java۞68۩break;
smallsql/database/MutableNumeric.java۞69۩}
smallsql/database/MutableNumeric.java۞70۩}
smallsql/database/MutableNumeric.java۞71۩for(int v=value.length-1; v>=0; v--){
smallsql/database/MutableNumeric.java۞72۩int temp = 0;
smallsql/database/MutableNumeric.java۞73۩for(int i=0; i<4 && 0<length; i++){
smallsql/database/MutableNumeric.java۞74۩temp |= (complement[ --length ] & 0xFF) << (i*8);
smallsql/database/MutableNumeric.java۞75۩}
smallsql/database/MutableNumeric.java۞76۩value[v] = temp;
smallsql/database/MutableNumeric.java۞77۩}
smallsql/database/MutableNumeric.java۞78۩}
smallsql/database/MutableNumeric.java۞80۩MutableNumeric(int complement){
smallsql/database/MutableNumeric.java۞81۩if(complement == 0){
smallsql/database/MutableNumeric.java۞82۩signum = 0;
smallsql/database/MutableNumeric.java۞83۩value = EMPTY_INTS;
smallsql/database/MutableNumeric.java۞84۩}else{
smallsql/database/MutableNumeric.java۞85۩value = new int[1];
smallsql/database/MutableNumeric.java۞86۩if(complement < 0){
smallsql/database/MutableNumeric.java۞87۩value[0] = -complement;
smallsql/database/MutableNumeric.java۞88۩signum = -1;
smallsql/database/MutableNumeric.java۞89۩}else{
smallsql/database/MutableNumeric.java۞90۩value[0] = complement;
smallsql/database/MutableNumeric.java۞91۩signum = 1;
smallsql/database/MutableNumeric.java۞92۩}
smallsql/database/MutableNumeric.java۞93۩}
smallsql/database/MutableNumeric.java۞94۩}
smallsql/database/MutableNumeric.java۞96۩MutableNumeric(int complement, int scale){
smallsql/database/MutableNumeric.java۞97۩this( complement );
smallsql/database/MutableNumeric.java۞98۩this.scale = scale;
smallsql/database/MutableNumeric.java۞99۩}
smallsql/database/MutableNumeric.java۞101۩MutableNumeric(long complement){
smallsql/database/MutableNumeric.java۞102۩if(complement == 0){
smallsql/database/MutableNumeric.java۞103۩signum = 0;
smallsql/database/MutableNumeric.java۞104۩value = EMPTY_INTS;
smallsql/database/MutableNumeric.java۞105۩}else{
smallsql/database/MutableNumeric.java۞106۩value = new int[2];
smallsql/database/MutableNumeric.java۞107۩if(complement < 0){
smallsql/database/MutableNumeric.java۞108۩value[0] = (int)(~(complement >> 32));
smallsql/database/MutableNumeric.java۞109۩value[1] = (int)(-complement);
smallsql/database/MutableNumeric.java۞110۩signum = -1;
smallsql/database/MutableNumeric.java۞111۩}else{
smallsql/database/MutableNumeric.java۞112۩value[0] = (int)(complement >> 32);
smallsql/database/MutableNumeric.java۞113۩value[1] = (int)complement;
smallsql/database/MutableNumeric.java۞114۩signum = 1;
smallsql/database/MutableNumeric.java۞115۩}
smallsql/database/MutableNumeric.java۞116۩}
smallsql/database/MutableNumeric.java۞117۩}
smallsql/database/MutableNumeric.java۞119۩MutableNumeric(long complement, int scale){
smallsql/database/MutableNumeric.java۞120۩this( complement );
smallsql/database/MutableNumeric.java۞121۩this.scale = scale;
smallsql/database/MutableNumeric.java۞122۩}
smallsql/database/MutableNumeric.java۞124۩MutableNumeric(double val){
smallsql/database/MutableNumeric.java۞126۩this( new BigDecimal( String.valueOf(val) ) );
smallsql/database/MutableNumeric.java۞127۩}
smallsql/database/MutableNumeric.java۞129۩MutableNumeric(float val){
smallsql/database/MutableNumeric.java۞131۩this( new BigDecimal( String.valueOf(val) ) );
smallsql/database/MutableNumeric.java۞132۩}
smallsql/database/MutableNumeric.java۞134۩MutableNumeric(String val){
smallsql/database/MutableNumeric.java۞135۩this( new BigDecimal( val ) );
smallsql/database/MutableNumeric.java۞136۩}
smallsql/database/MutableNumeric.java۞138۩MutableNumeric( BigDecimal big ){
smallsql/database/MutableNumeric.java۞139۩this(big.unscaledValue().toByteArray() );
smallsql/database/MutableNumeric.java۞140۩scale   = big.scale();
smallsql/database/MutableNumeric.java۞141۩}
smallsql/database/MutableNumeric.java۞143۩MutableNumeric(int signum, int[] value, int scale){
smallsql/database/MutableNumeric.java۞144۩this.signum = signum;
smallsql/database/MutableNumeric.java۞145۩this.value  = value;
smallsql/database/MutableNumeric.java۞146۩this.scale  = scale;
smallsql/database/MutableNumeric.java۞147۩}
smallsql/database/MutableNumeric.java۞149۩MutableNumeric(MutableNumeric numeric){
smallsql/database/MutableNumeric.java۞150۩this.signum = numeric.signum;
smallsql/database/MutableNumeric.java۞151۩this.value  = new int[numeric.value.length];
smallsql/database/MutableNumeric.java۞152۩System.arraycopy(numeric.value, 0, value, 0, value.length);
smallsql/database/MutableNumeric.java۞153۩this.scale  = numeric.scale;
smallsql/database/MutableNumeric.java۞154۩}
smallsql/database/MutableNumeric.java۞157۩int[] getInternalValue(){
smallsql/database/MutableNumeric.java۞158۩return value;
smallsql/database/MutableNumeric.java۞159۩}
smallsql/database/MutableNumeric.java۞166۩void add(MutableNumeric num){
smallsql/database/MutableNumeric.java۞167۩if(num.scale < scale){
smallsql/database/MutableNumeric.java۞168۩num.setScale(scale);
smallsql/database/MutableNumeric.java۞169۩}else
smallsql/database/MutableNumeric.java۞170۩if(num.scale > scale){
smallsql/database/MutableNumeric.java۞171۩setScale(num.scale);
smallsql/database/MutableNumeric.java۞172۩}
smallsql/database/MutableNumeric.java۞173۩add( num.signum, num.value );
smallsql/database/MutableNumeric.java۞174۩}
smallsql/database/MutableNumeric.java۞177۩private void add( int sig2, int[] val2){
smallsql/database/MutableNumeric.java۞178۩if(val2.length > value.length){
smallsql/database/MutableNumeric.java۞179۩int[] temp = val2;
smallsql/database/MutableNumeric.java۞180۩val2 = value;
smallsql/database/MutableNumeric.java۞181۩value = temp;
smallsql/database/MutableNumeric.java۞182۩int tempi = signum;
smallsql/database/MutableNumeric.java۞183۩signum = sig2;
smallsql/database/MutableNumeric.java۞184۩sig2 = tempi;
smallsql/database/MutableNumeric.java۞185۩}
smallsql/database/MutableNumeric.java۞186۩if(signum != sig2)
smallsql/database/MutableNumeric.java۞187۩sub(val2);
smallsql/database/MutableNumeric.java۞188۩else
smallsql/database/MutableNumeric.java۞189۩add(val2);
smallsql/database/MutableNumeric.java۞190۩}
smallsql/database/MutableNumeric.java۞199۩private void add( int[] val2){
smallsql/database/MutableNumeric.java۞200۩long temp = 0;
smallsql/database/MutableNumeric.java۞201۩int v1 = value.length;
smallsql/database/MutableNumeric.java۞202۩for(int v2 = val2.length; v2>0; ){
smallsql/database/MutableNumeric.java۞203۩temp = (value[--v1] & 0xFFFFFFFFL) + (val2 [--v2] & 0xFFFFFFFFL) + (temp >>> 32);
smallsql/database/MutableNumeric.java۞204۩value[v1] = (int)temp;
smallsql/database/MutableNumeric.java۞205۩}
smallsql/database/MutableNumeric.java۞206۩boolean uebertrag = (temp >>> 32) != 0;
smallsql/database/MutableNumeric.java۞207۩while(v1 > 0 && uebertrag)
smallsql/database/MutableNumeric.java۞208۩uebertrag = (value[--v1] = value[v1] + 1) == 0;
smallsql/database/MutableNumeric.java۞211۩if(uebertrag){
smallsql/database/MutableNumeric.java۞212۩resizeValue(1);
smallsql/database/MutableNumeric.java۞213۩}
smallsql/database/MutableNumeric.java۞214۩}
smallsql/database/MutableNumeric.java۞222۩private void resizeValue(int highBits){
smallsql/database/MutableNumeric.java۞223۩int val[] = new int[value.length+1];
smallsql/database/MutableNumeric.java۞224۩val[0] = highBits;
smallsql/database/MutableNumeric.java۞225۩System.arraycopy(value, 0, val, 1, value.length);
smallsql/database/MutableNumeric.java۞226۩value = val;
smallsql/database/MutableNumeric.java۞227۩}
smallsql/database/MutableNumeric.java۞234۩void sub(MutableNumeric num){
smallsql/database/MutableNumeric.java۞235۩if(num.scale < scale){
smallsql/database/MutableNumeric.java۞236۩num.setScale(scale);
smallsql/database/MutableNumeric.java۞237۩}else
smallsql/database/MutableNumeric.java۞238۩if(num.scale > scale){
smallsql/database/MutableNumeric.java۞239۩setScale(num.scale);
smallsql/database/MutableNumeric.java۞240۩}
smallsql/database/MutableNumeric.java۞241۩add( -num.signum, num.value );
smallsql/database/MutableNumeric.java۞242۩}
smallsql/database/MutableNumeric.java۞250۩private void sub(int[] val2){
smallsql/database/MutableNumeric.java۞251۩long temp = 0;
smallsql/database/MutableNumeric.java۞252۩int v1 = value.length;
smallsql/database/MutableNumeric.java۞253۩for(int v2 = val2.length; v2>0; ){
smallsql/database/MutableNumeric.java۞254۩temp = (value[--v1] & 0xFFFFFFFFL) - (val2 [--v2] & 0xFFFFFFFFL) + (temp >>>= 32);
smallsql/database/MutableNumeric.java۞255۩value[v1] = (int)temp;
smallsql/database/MutableNumeric.java۞256۩}
smallsql/database/MutableNumeric.java۞258۩boolean uebertrag = (temp >>> 32) != 0;
smallsql/database/MutableNumeric.java۞259۩while(v1 > 0 && uebertrag)
smallsql/database/MutableNumeric.java۞260۩uebertrag = (value[--v1] = value[v1] - 1) == -1;
smallsql/database/MutableNumeric.java۞262۩if(uebertrag){
smallsql/database/MutableNumeric.java۞263۩signum = -signum;
smallsql/database/MutableNumeric.java۞264۩int last = value.length-1;
smallsql/database/MutableNumeric.java۞265۩for(int i=0; i<=last; i++){
smallsql/database/MutableNumeric.java۞266۩value[i] = (i == last) ? -value[i] : ~value[i];
smallsql/database/MutableNumeric.java۞267۩}
smallsql/database/MutableNumeric.java۞268۩}
smallsql/database/MutableNumeric.java۞269۩}
smallsql/database/MutableNumeric.java۞271۩void mul(MutableNumeric num){
smallsql/database/MutableNumeric.java۞273۩BigDecimal big = toBigDecimal().multiply(num.toBigDecimal() );
smallsql/database/MutableNumeric.java۞274۩setValue( big.unscaledValue().toByteArray() );
smallsql/database/MutableNumeric.java۞275۩scale = big.scale();
smallsql/database/MutableNumeric.java۞276۩signum = big.signum();
smallsql/database/MutableNumeric.java۞277۩}
smallsql/database/MutableNumeric.java۞279۩final void mul(int factor){
smallsql/database/MutableNumeric.java۞280۩if(factor < 0){
smallsql/database/MutableNumeric.java۞281۩factor = - factor;
smallsql/database/MutableNumeric.java۞282۩signum = -signum;
smallsql/database/MutableNumeric.java۞283۩}
smallsql/database/MutableNumeric.java۞284۩long carryover = 0;
smallsql/database/MutableNumeric.java۞285۩for(int i = value.length-1; i>=0; i--){
smallsql/database/MutableNumeric.java۞286۩long v = (value[i] & 0xFFFFFFFFL) * factor + carryover;
smallsql/database/MutableNumeric.java۞287۩value[i] = (int)v;
smallsql/database/MutableNumeric.java۞288۩carryover = v >> 32;
smallsql/database/MutableNumeric.java۞289۩}
smallsql/database/MutableNumeric.java۞290۩if(carryover > 0){
smallsql/database/MutableNumeric.java۞291۩resizeValue( (int)carryover );
smallsql/database/MutableNumeric.java۞292۩}
smallsql/database/MutableNumeric.java۞293۩}
smallsql/database/MutableNumeric.java۞296۩void div(MutableNumeric num){
smallsql/database/MutableNumeric.java۞298۩int newScale = Math.max(scale+5, num.scale +4);
smallsql/database/MutableNumeric.java۞299۩BigDecimal big = toBigDecimal().divide(num.toBigDecimal(), newScale, BigDecimal.ROUND_HALF_EVEN);
smallsql/database/MutableNumeric.java۞300۩setValue( big.unscaledValue().toByteArray() );
smallsql/database/MutableNumeric.java۞301۩scale = big.scale();
smallsql/database/MutableNumeric.java۞302۩signum = big.signum();
smallsql/database/MutableNumeric.java۞303۩}
smallsql/database/MutableNumeric.java۞306۩final void div(int quotient){
smallsql/database/MutableNumeric.java۞308۩mul(100000);
smallsql/database/MutableNumeric.java۞309۩scale += 5;
smallsql/database/MutableNumeric.java۞311۩divImpl(quotient);
smallsql/database/MutableNumeric.java۞312۩}
smallsql/database/MutableNumeric.java۞315۩final private void divImpl(int quotient){
smallsql/database/MutableNumeric.java۞316۩if(quotient == 1) return;
smallsql/database/MutableNumeric.java۞317۩if(quotient < 0){
smallsql/database/MutableNumeric.java۞318۩quotient = - quotient;
smallsql/database/MutableNumeric.java۞319۩signum = -signum;
smallsql/database/MutableNumeric.java۞320۩}
smallsql/database/MutableNumeric.java۞321۩int valueLength = value.length;
smallsql/database/MutableNumeric.java۞322۩long carryover = 0;
smallsql/database/MutableNumeric.java۞323۩for(int i = 0; i<valueLength; i++){
smallsql/database/MutableNumeric.java۞324۩long v = (value[i] & 0xFFFFFFFFL) + carryover;
smallsql/database/MutableNumeric.java۞325۩value[i] = (int)(v / quotient);
smallsql/database/MutableNumeric.java۞326۩carryover = ((v % quotient) << 32);
smallsql/database/MutableNumeric.java۞327۩}
smallsql/database/MutableNumeric.java۞328۩carryover /= quotient;
smallsql/database/MutableNumeric.java۞329۩if(carryover > 2147483648L ||
smallsql/database/MutableNumeric.java۞330۩(carryover == 2147483648L && (value[valueLength-1] % 2 == 1))){
smallsql/database/MutableNumeric.java۞331۩int i = valueLength-1;
smallsql/database/MutableNumeric.java۞332۩boolean isCarryOver = true;
smallsql/database/MutableNumeric.java۞333۩while(i >= 0 && isCarryOver)
smallsql/database/MutableNumeric.java۞334۩isCarryOver = (value[i--] += 1) == 0;
smallsql/database/MutableNumeric.java۞335۩}
smallsql/database/MutableNumeric.java۞336۩if(valueLength>1 && value[0] == 0){
smallsql/database/MutableNumeric.java۞337۩int[] temp = new int[valueLength-1];
smallsql/database/MutableNumeric.java۞338۩System.arraycopy(value, 1, temp, 0, valueLength-1);
smallsql/database/MutableNumeric.java۞339۩value = temp;
smallsql/database/MutableNumeric.java۞340۩}
smallsql/database/MutableNumeric.java۞342۩}
smallsql/database/MutableNumeric.java۞345۩void mod(MutableNumeric num){
smallsql/database/MutableNumeric.java۞347۩num = new MutableNumeric( doubleValue() % num.doubleValue() );
smallsql/database/MutableNumeric.java۞348۩value = num.value;
smallsql/database/MutableNumeric.java۞349۩scale = num.scale;
smallsql/database/MutableNumeric.java۞350۩signum = num.signum;
smallsql/database/MutableNumeric.java۞351۩}
smallsql/database/MutableNumeric.java۞354۩int getScale(){
smallsql/database/MutableNumeric.java۞355۩return scale;
smallsql/database/MutableNumeric.java۞356۩}
smallsql/database/MutableNumeric.java۞359۩void setScale(int newScale){
smallsql/database/MutableNumeric.java۞360۩if(newScale == scale) return;
smallsql/database/MutableNumeric.java۞361۩int factor = 1;
smallsql/database/MutableNumeric.java۞362۩if(newScale > scale){
smallsql/database/MutableNumeric.java۞363۩for(;newScale>scale; scale++){
smallsql/database/MutableNumeric.java۞364۩factor *=10;
smallsql/database/MutableNumeric.java۞365۩if(factor == 1000000000){
smallsql/database/MutableNumeric.java۞366۩mul(factor);
smallsql/database/MutableNumeric.java۞367۩factor = 1;
smallsql/database/MutableNumeric.java۞368۩}
smallsql/database/MutableNumeric.java۞369۩}
smallsql/database/MutableNumeric.java۞370۩mul(factor);
smallsql/database/MutableNumeric.java۞371۩}else{
smallsql/database/MutableNumeric.java۞372۩for(;newScale<scale; scale--){
smallsql/database/MutableNumeric.java۞373۩factor *=10;
smallsql/database/MutableNumeric.java۞374۩if(factor == 1000000000){
smallsql/database/MutableNumeric.java۞375۩divImpl(factor);
smallsql/database/MutableNumeric.java۞376۩factor = 1;
smallsql/database/MutableNumeric.java۞377۩}
smallsql/database/MutableNumeric.java۞378۩}
smallsql/database/MutableNumeric.java۞379۩divImpl(factor);
smallsql/database/MutableNumeric.java۞380۩}
smallsql/database/MutableNumeric.java۞381۩}
smallsql/database/MutableNumeric.java۞389۩int getSignum() {
smallsql/database/MutableNumeric.java۞390۩return signum;
smallsql/database/MutableNumeric.java۞391۩}
smallsql/database/MutableNumeric.java۞394۩void setSignum(int signum){
smallsql/database/MutableNumeric.java۞395۩this.signum = signum;
smallsql/database/MutableNumeric.java۞396۩}
smallsql/database/MutableNumeric.java۞399۩void floor(){
smallsql/database/MutableNumeric.java۞401۩int oldScale = scale;
smallsql/database/MutableNumeric.java۞402۩setScale(0);
smallsql/database/MutableNumeric.java۞403۩setScale(oldScale);
smallsql/database/MutableNumeric.java۞404۩}
smallsql/database/MutableNumeric.java۞407۩private void negate(byte[] complement){
smallsql/database/MutableNumeric.java۞408۩int last = complement.length-1;
smallsql/database/MutableNumeric.java۞409۩for(int i=0; i<=last; i++){
smallsql/database/MutableNumeric.java۞410۩complement[i] = (byte)( (i == last) ? -complement[i] : ~complement[i]);
smallsql/database/MutableNumeric.java۞411۩}
smallsql/database/MutableNumeric.java۞412۩while(complement[last] == 0){
smallsql/database/MutableNumeric.java۞413۩last--;
smallsql/database/MutableNumeric.java۞414۩complement[last]++;
smallsql/database/MutableNumeric.java۞415۩}
smallsql/database/MutableNumeric.java۞416۩}
smallsql/database/MutableNumeric.java۞424۩byte[] toByteArray(){
smallsql/database/MutableNumeric.java۞425۩if(signum == 0) return EMPTY_BYTES;
smallsql/database/MutableNumeric.java۞426۩byte[] complement;
smallsql/database/MutableNumeric.java۞427۩int offset;
smallsql/database/MutableNumeric.java۞429۩int v = 0;
smallsql/database/MutableNumeric.java۞430۩while(v < value.length && value[v] == 0) v++;
smallsql/database/MutableNumeric.java۞431۩if (v == value.length) return EMPTY_BYTES;
smallsql/database/MutableNumeric.java۞433۩if(value[v] < 0){
smallsql/database/MutableNumeric.java۞436۩complement = new byte[(value.length-v)*4 + 4];
smallsql/database/MutableNumeric.java۞437۩if(signum < 0)
smallsql/database/MutableNumeric.java۞438۩complement[0] = complement[1] = complement[2] = complement[3] = -1;
smallsql/database/MutableNumeric.java۞439۩offset = 4;
smallsql/database/MutableNumeric.java۞440۩}else{
smallsql/database/MutableNumeric.java۞441۩complement = new byte[(value.length-v)*4];
smallsql/database/MutableNumeric.java۞442۩offset = 0;
smallsql/database/MutableNumeric.java۞443۩}
smallsql/database/MutableNumeric.java۞444۩int last = value.length-1;
smallsql/database/MutableNumeric.java۞445۩for(; v <= last; v++){
smallsql/database/MutableNumeric.java۞446۩int val = (signum>0) ? value[v] : (v == last) ? -value[v] : ~value[v];
smallsql/database/MutableNumeric.java۞447۩complement[offset++] = (byte)(val >> 24);
smallsql/database/MutableNumeric.java۞448۩complement[offset++] = (byte)(val >> 16);
smallsql/database/MutableNumeric.java۞449۩complement[offset++] = (byte)(val >> 8);
smallsql/database/MutableNumeric.java۞450۩complement[offset++] = (byte)(val);
smallsql/database/MutableNumeric.java۞451۩}
smallsql/database/MutableNumeric.java۞452۩return complement;
smallsql/database/MutableNumeric.java۞453۩}
smallsql/database/MutableNumeric.java۞455۩public int intValue(){
smallsql/database/MutableNumeric.java۞456۩return Utils.long2int(longValue());
smallsql/database/MutableNumeric.java۞457۩}
smallsql/database/MutableNumeric.java۞460۩public long longValue(){
smallsql/database/MutableNumeric.java۞461۩if(value.length == 0 || signum == 0){
smallsql/database/MutableNumeric.java۞462۩return 0;
smallsql/database/MutableNumeric.java۞463۩}else{
smallsql/database/MutableNumeric.java۞464۩if (value.length == 1 && (value[0] > 0)){
smallsql/database/MutableNumeric.java۞466۩return Utils.double2long(value[0] / scaleDoubleFactor[scale] * signum);
smallsql/database/MutableNumeric.java۞467۩}else
smallsql/database/MutableNumeric.java۞468۩if (value.length == 1){
smallsql/database/MutableNumeric.java۞470۩long temp = value[0] & 0xFFFFFFFFL;
smallsql/database/MutableNumeric.java۞471۩return Utils.double2long(temp / scaleDoubleFactor[scale] * signum);
smallsql/database/MutableNumeric.java۞472۩}else
smallsql/database/MutableNumeric.java۞473۩if (value.length == 2 && (value[0] > 0)){
smallsql/database/MutableNumeric.java۞475۩long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);
smallsql/database/MutableNumeric.java۞476۩return Utils.double2long(temp / scaleDoubleFactor[scale] * signum);
smallsql/database/MutableNumeric.java۞477۩}else{
smallsql/database/MutableNumeric.java۞478۩if(scale != 0){
smallsql/database/MutableNumeric.java۞479۩MutableNumeric numeric = new MutableNumeric(this);
smallsql/database/MutableNumeric.java۞480۩numeric.setScale(0);
smallsql/database/MutableNumeric.java۞481۩return numeric.longValue();
smallsql/database/MutableNumeric.java۞482۩}
smallsql/database/MutableNumeric.java۞483۩return (signum > 0) ? Long.MAX_VALUE : Long.MIN_VALUE;
smallsql/database/MutableNumeric.java۞484۩}
smallsql/database/MutableNumeric.java۞485۩}
smallsql/database/MutableNumeric.java۞486۩}
smallsql/database/MutableNumeric.java۞489۩public float floatValue(){
smallsql/database/MutableNumeric.java۞490۩if(value.length == 0 || signum == 0){
smallsql/database/MutableNumeric.java۞491۩return 0;
smallsql/database/MutableNumeric.java۞492۩}else{
smallsql/database/MutableNumeric.java۞493۩if (value.length == 1 && (value[0] > 0)){
smallsql/database/MutableNumeric.java۞495۩return value[0] / scaleFloatFactor[scale] * signum;
smallsql/database/MutableNumeric.java۞496۩}else
smallsql/database/MutableNumeric.java۞497۩if (value.length == 1){
smallsql/database/MutableNumeric.java۞499۩long temp = value[0] & 0xFFFFFFFFL;
smallsql/database/MutableNumeric.java۞500۩return temp / scaleFloatFactor[scale] * signum;
smallsql/database/MutableNumeric.java۞501۩}else
smallsql/database/MutableNumeric.java۞502۩if (value.length == 2 && (value[0] > 0)){
smallsql/database/MutableNumeric.java۞504۩long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);
smallsql/database/MutableNumeric.java۞505۩return temp / scaleFloatFactor[scale] * signum;
smallsql/database/MutableNumeric.java۞506۩}else{
smallsql/database/MutableNumeric.java۞507۩return new BigDecimal( new BigInteger( toByteArray() ), scale ).floatValue();
smallsql/database/MutableNumeric.java۞508۩}
smallsql/database/MutableNumeric.java۞509۩}
smallsql/database/MutableNumeric.java۞510۩}
smallsql/database/MutableNumeric.java۞512۩public double doubleValue(){
smallsql/database/MutableNumeric.java۞513۩if(value.length == 0 || signum == 0){
smallsql/database/MutableNumeric.java۞514۩return 0;
smallsql/database/MutableNumeric.java۞515۩}else{
smallsql/database/MutableNumeric.java۞516۩if (value.length == 1 && (value[0] > 0)){
smallsql/database/MutableNumeric.java۞518۩return value[0] / scaleDoubleFactor[scale] * signum;
smallsql/database/MutableNumeric.java۞519۩}else
smallsql/database/MutableNumeric.java۞520۩if (value.length == 1){
smallsql/database/MutableNumeric.java۞522۩long temp = value[0] & 0xFFFFFFFFL;
smallsql/database/MutableNumeric.java۞523۩return temp / scaleDoubleFactor[scale] * signum;
smallsql/database/MutableNumeric.java۞524۩}else
smallsql/database/MutableNumeric.java۞525۩if (value.length == 2 && (value[0] > 0)){
smallsql/database/MutableNumeric.java۞527۩long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);
smallsql/database/MutableNumeric.java۞528۩return temp / scaleDoubleFactor[scale] * signum;
smallsql/database/MutableNumeric.java۞529۩}else{
smallsql/database/MutableNumeric.java۞530۩return new BigDecimal( new BigInteger( toByteArray() ), scale ).doubleValue();
smallsql/database/MutableNumeric.java۞531۩}
smallsql/database/MutableNumeric.java۞532۩}
smallsql/database/MutableNumeric.java۞533۩}
smallsql/database/MutableNumeric.java۞535۩public String toString(){
smallsql/database/MutableNumeric.java۞536۩StringBuffer buf = new StringBuffer();
smallsql/database/MutableNumeric.java۞537۩if(value.length == 0 || signum == 0){
smallsql/database/MutableNumeric.java۞538۩buf.append( '0' );
smallsql/database/MutableNumeric.java۞539۩}else{
smallsql/database/MutableNumeric.java۞540۩if (value.length == 1 && (value[0] > 0)){
smallsql/database/MutableNumeric.java۞542۩buf.append( Integer.toString(value[0]) );
smallsql/database/MutableNumeric.java۞543۩}else
smallsql/database/MutableNumeric.java۞544۩if (value.length == 1){
smallsql/database/MutableNumeric.java۞546۩long temp = value[0] & 0xFFFFFFFFL;
smallsql/database/MutableNumeric.java۞547۩buf.append( Long.toString( temp ) );
smallsql/database/MutableNumeric.java۞548۩}else
smallsql/database/MutableNumeric.java۞549۩if (value.length == 2 && (value[0] > 0)){
smallsql/database/MutableNumeric.java۞551۩long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);
smallsql/database/MutableNumeric.java۞552۩buf.append( Long.toString( temp ) );
smallsql/database/MutableNumeric.java۞553۩}else{
smallsql/database/MutableNumeric.java۞554۩return new BigDecimal( new BigInteger( toByteArray() ), scale ).toString();
smallsql/database/MutableNumeric.java۞555۩}
smallsql/database/MutableNumeric.java۞556۩}
smallsql/database/MutableNumeric.java۞557۩if(scale > 0){
smallsql/database/MutableNumeric.java۞558۩while(buf.length() <= scale) buf.insert( 0, '0' );
smallsql/database/MutableNumeric.java۞559۩buf.insert( buf.length() - scale, '.' );
smallsql/database/MutableNumeric.java۞560۩}
smallsql/database/MutableNumeric.java۞561۩if (signum < 0) buf.insert( 0, '-');
smallsql/database/MutableNumeric.java۞562۩return buf.toString();
smallsql/database/MutableNumeric.java۞563۩}
smallsql/database/MutableNumeric.java۞565۩public int compareTo(MutableNumeric numeric){
smallsql/database/MutableNumeric.java۞567۩return toBigDecimal().compareTo(numeric.toBigDecimal());
smallsql/database/MutableNumeric.java۞568۩}
smallsql/database/MutableNumeric.java۞570۩public boolean equals(Object obj){
smallsql/database/MutableNumeric.java۞571۩if(!(obj instanceof MutableNumeric)) return false;
smallsql/database/MutableNumeric.java۞572۩return compareTo((MutableNumeric)obj) == 0;
smallsql/database/MutableNumeric.java۞573۩}
smallsql/database/MutableNumeric.java۞575۩public BigDecimal toBigDecimal(){
smallsql/database/MutableNumeric.java۞576۩if(signum == 0) return new BigDecimal( BigInteger.ZERO, scale);
smallsql/database/MutableNumeric.java۞577۩return new BigDecimal( new BigInteger( toByteArray() ), scale );
smallsql/database/MutableNumeric.java۞578۩}
smallsql/database/MutableNumeric.java۞580۩public BigDecimal toBigDecimal(int newScale){
smallsql/database/MutableNumeric.java۞581۩if(newScale == this.scale) return toBigDecimal();
smallsql/database/MutableNumeric.java۞582۩return toBigDecimal().setScale( newScale, BigDecimal.ROUND_HALF_EVEN);
smallsql/database/MutableNumeric.java۞583۩}
smallsql/database/MutableNumeric.java۞585۩public Object getImmutableObject(){
smallsql/database/MutableNumeric.java۞586۩return toBigDecimal();
smallsql/database/MutableNumeric.java۞587۩}
smallsql/database/MutableNumeric.java۞590۩private static final byte[] EMPTY_BYTES = new byte[0];
smallsql/database/MutableNumeric.java۞591۩private static final int [] EMPTY_INTS  = new int [0];
smallsql/database/MutableNumeric.java۞592۩private static final double[] scaleDoubleFactor = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000 };
smallsql/database/MutableNumeric.java۞593۩private static final float[]  scaleFloatFactor =  { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000 };
smallsql/database/MutableNumeric.java۞594۩}
smallsql/database/NoFromResult.java۞34۩package smallsql.database;
smallsql/database/NoFromResult.java۞41۩final  class NoFromResult extends RowSource {
smallsql/database/NoFromResult.java۞43۩private int rowPos;
smallsql/database/NoFromResult.java۞46۩final boolean isScrollable(){
smallsql/database/NoFromResult.java۞47۩return true;
smallsql/database/NoFromResult.java۞48۩}
smallsql/database/NoFromResult.java۞51۩final void beforeFirst(){
smallsql/database/NoFromResult.java۞52۩rowPos = 0;
smallsql/database/NoFromResult.java۞53۩}
smallsql/database/NoFromResult.java۞55۩final boolean isBeforeFirst(){
smallsql/database/NoFromResult.java۞56۩return rowPos <= 0;
smallsql/database/NoFromResult.java۞57۩}
smallsql/database/NoFromResult.java۞59۩final boolean isFirst(){
smallsql/database/NoFromResult.java۞60۩return rowPos == 1;
smallsql/database/NoFromResult.java۞61۩}
smallsql/database/NoFromResult.java۞63۩final boolean first(){
smallsql/database/NoFromResult.java۞64۩rowPos = 1;
smallsql/database/NoFromResult.java۞65۩return true;
smallsql/database/NoFromResult.java۞66۩}
smallsql/database/NoFromResult.java۞68۩final boolean previous(){
smallsql/database/NoFromResult.java۞69۩rowPos--;
smallsql/database/NoFromResult.java۞70۩return rowPos == 1;
smallsql/database/NoFromResult.java۞71۩}
smallsql/database/NoFromResult.java۞74۩final boolean next(){
smallsql/database/NoFromResult.java۞75۩rowPos++;
smallsql/database/NoFromResult.java۞76۩return rowPos == 1;
smallsql/database/NoFromResult.java۞77۩}
smallsql/database/NoFromResult.java۞79۩final boolean last(){
smallsql/database/NoFromResult.java۞80۩rowPos = 1;
smallsql/database/NoFromResult.java۞81۩return true;
smallsql/database/NoFromResult.java۞82۩}
smallsql/database/NoFromResult.java۞84۩final boolean isLast(){
smallsql/database/NoFromResult.java۞85۩return rowPos == 1;
smallsql/database/NoFromResult.java۞86۩}
smallsql/database/NoFromResult.java۞88۩final boolean isAfterLast(){
smallsql/database/NoFromResult.java۞89۩return rowPos > 1;
smallsql/database/NoFromResult.java۞90۩}
smallsql/database/NoFromResult.java۞92۩final void afterLast(){
smallsql/database/NoFromResult.java۞93۩rowPos = 2;
smallsql/database/NoFromResult.java۞94۩}
smallsql/database/NoFromResult.java۞96۩final boolean absolute(int row){
smallsql/database/NoFromResult.java۞97۩rowPos = (row > 0) ?
smallsql/database/NoFromResult.java۞98۩Math.min( row, 1 ) :
smallsql/database/NoFromResult.java۞99۩Math.min( row +1, -1 );
smallsql/database/NoFromResult.java۞100۩return rowPos == 1;
smallsql/database/NoFromResult.java۞101۩}
smallsql/database/NoFromResult.java۞103۩final boolean relative(int rows){
smallsql/database/NoFromResult.java۞104۩if(rows == 0) return rowPos == 1;
smallsql/database/NoFromResult.java۞105۩rowPos = Math.min( Math.max( rowPos + rows, -1), 1);
smallsql/database/NoFromResult.java۞106۩return rowPos == 1;
smallsql/database/NoFromResult.java۞107۩}
smallsql/database/NoFromResult.java۞109۩final int getRow(){
smallsql/database/NoFromResult.java۞110۩return rowPos == 1 ? 1 : 0;
smallsql/database/NoFromResult.java۞111۩}
smallsql/database/NoFromResult.java۞113۩final long getRowPosition() {
smallsql/database/NoFromResult.java۞114۩return rowPos;
smallsql/database/NoFromResult.java۞115۩}
smallsql/database/NoFromResult.java۞118۩final void setRowPosition(long rowPosition){
smallsql/database/NoFromResult.java۞119۩rowPos = (int)rowPosition;
smallsql/database/NoFromResult.java۞120۩}
smallsql/database/NoFromResult.java۞123۩final boolean rowInserted(){
smallsql/database/NoFromResult.java۞124۩return false;
smallsql/database/NoFromResult.java۞125۩}
smallsql/database/NoFromResult.java۞128۩final boolean rowDeleted(){
smallsql/database/NoFromResult.java۞129۩return false;
smallsql/database/NoFromResult.java۞130۩}
smallsql/database/NoFromResult.java۞133۩final void nullRow() {
smallsql/database/NoFromResult.java۞134۩throw new Error();
smallsql/database/NoFromResult.java۞135۩}
smallsql/database/NoFromResult.java۞138۩final void noRow() {
smallsql/database/NoFromResult.java۞139۩throw new Error();
smallsql/database/NoFromResult.java۞140۩}
smallsql/database/NoFromResult.java۞143۩final void execute() throws Exception{}
smallsql/database/NoFromResult.java۞149۩boolean isExpressionsFromThisRowSource(Expressions columns){
smallsql/database/NoFromResult.java۞151۩return columns.size() == 0;
smallsql/database/NoFromResult.java۞152۩}
smallsql/database/NoFromResult.java۞153۩}
smallsql/database/RowSource.java۞33۩package smallsql.database;
smallsql/database/RowSource.java۞35۩import java.sql.*;
smallsql/database/RowSource.java۞36۩import smallsql.database.language.Language;
smallsql/database/RowSource.java۞56۩abstract class RowSource {
smallsql/database/RowSource.java۞62۩abstract boolean isScrollable();
smallsql/database/RowSource.java۞67۩abstract void beforeFirst() throws Exception;
smallsql/database/RowSource.java۞74۩boolean isBeforeFirst() throws SQLException{
smallsql/database/RowSource.java۞75۩throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/RowSource.java۞76۩}
smallsql/database/RowSource.java۞81۩boolean isFirst() throws SQLException{
smallsql/database/RowSource.java۞82۩throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/RowSource.java۞83۩}
smallsql/database/RowSource.java۞90۩abstract boolean first() throws Exception;
smallsql/database/RowSource.java۞92۩boolean previous() throws Exception{
smallsql/database/RowSource.java۞93۩throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/RowSource.java۞94۩}
smallsql/database/RowSource.java۞96۩abstract boolean next() throws Exception;
smallsql/database/RowSource.java۞99۩boolean last() throws Exception{
smallsql/database/RowSource.java۞100۩throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/RowSource.java۞101۩}
smallsql/database/RowSource.java۞107۩boolean isLast() throws Exception{
smallsql/database/RowSource.java۞108۩throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/RowSource.java۞109۩}
smallsql/database/RowSource.java۞114۩boolean isAfterLast() throws SQLException, Exception{
smallsql/database/RowSource.java۞115۩throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/RowSource.java۞116۩}
smallsql/database/RowSource.java۞119۩abstract void afterLast() throws Exception;
smallsql/database/RowSource.java۞122۩boolean absolute(int row) throws Exception{
smallsql/database/RowSource.java۞123۩throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/RowSource.java۞124۩}
smallsql/database/RowSource.java۞127۩boolean relative(int rows) throws Exception{
smallsql/database/RowSource.java۞128۩throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/RowSource.java۞129۩}
smallsql/database/RowSource.java۞132۩abstract int getRow() throws Exception;
smallsql/database/RowSource.java۞143۩abstract long getRowPosition();
smallsql/database/RowSource.java۞149۩abstract void setRowPosition(long rowPosition) throws Exception;
smallsql/database/RowSource.java۞155۩abstract void nullRow();
smallsql/database/RowSource.java۞161۩abstract void noRow();
smallsql/database/RowSource.java۞167۩abstract boolean rowInserted();
smallsql/database/RowSource.java۞172۩abstract boolean rowDeleted();
smallsql/database/RowSource.java۞179۩boolean hasAlias(){
smallsql/database/RowSource.java۞180۩return true;
smallsql/database/RowSource.java۞181۩}
smallsql/database/RowSource.java۞184۩void setAlias(String name) throws SQLException{
smallsql/database/RowSource.java۞185۩throw SmallSQLException.create(Language.ALIAS_UNSUPPORTED);
smallsql/database/RowSource.java۞186۩}
smallsql/database/RowSource.java۞192۩abstract void execute() throws Exception;
smallsql/database/RowSource.java۞201۩abstract boolean isExpressionsFromThisRowSource(Expressions columns);
smallsql/database/RowSource.java۞203۩}
smallsql/database/SQLParser.java۞33۩package smallsql.database;
smallsql/database/SQLParser.java۞35۩import java.util.List;
smallsql/database/SQLParser.java۞36۩import java.sql.*;
smallsql/database/SQLParser.java۞37۩import smallsql.database.language.Language;
smallsql/database/SQLParser.java۞39۩final class SQLParser {
smallsql/database/SQLParser.java۞41۩SSConnection con;
smallsql/database/SQLParser.java۞42۩private char[] sql;
smallsql/database/SQLParser.java۞43۩private List tokens;
smallsql/database/SQLParser.java۞44۩private int tokenIdx;
smallsql/database/SQLParser.java۞46۩Command parse(SSConnection con, String sqlString) throws SQLException{
smallsql/database/SQLParser.java۞47۩this.con = con;
smallsql/database/SQLParser.java۞48۩Command cmd = parse( sqlString.toCharArray() );
smallsql/database/SQLParser.java۞49۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞50۩if(token != null){
smallsql/database/SQLParser.java۞51۩throw createSyntaxError(token, Language.STXADD_ADDITIONAL_TOK);
smallsql/database/SQLParser.java۞52۩}
smallsql/database/SQLParser.java۞53۩return cmd;
smallsql/database/SQLParser.java۞54۩}
smallsql/database/SQLParser.java۞56۩final private Command parse(char[] sql) throws SQLException{
smallsql/database/SQLParser.java۞57۩this.sql = sql;
smallsql/database/SQLParser.java۞58۩this.tokens = SQLTokenizer.parseSQL( sql );
smallsql/database/SQLParser.java۞59۩tokenIdx = 0;
smallsql/database/SQLParser.java۞61۩SQLToken token = nextToken(COMMANDS);
smallsql/database/SQLParser.java۞62۩switch (token.value){
smallsql/database/SQLParser.java۞63۩case SQLTokenizer.SELECT:
smallsql/database/SQLParser.java۞64۩return select();
smallsql/database/SQLParser.java۞65۩case SQLTokenizer.DELETE:
smallsql/database/SQLParser.java۞66۩return delete();
smallsql/database/SQLParser.java۞67۩case SQLTokenizer.INSERT:
smallsql/database/SQLParser.java۞68۩return insert();
smallsql/database/SQLParser.java۞69۩case SQLTokenizer.UPDATE:
smallsql/database/SQLParser.java۞70۩return update();
smallsql/database/SQLParser.java۞71۩case SQLTokenizer.CREATE:
smallsql/database/SQLParser.java۞72۩return create();
smallsql/database/SQLParser.java۞73۩case SQLTokenizer.DROP:
smallsql/database/SQLParser.java۞74۩return drop();
smallsql/database/SQLParser.java۞75۩case SQLTokenizer.ALTER:
smallsql/database/SQLParser.java۞76۩return alter();
smallsql/database/SQLParser.java۞77۩case SQLTokenizer.SET:
smallsql/database/SQLParser.java۞78۩return set();
smallsql/database/SQLParser.java۞79۩case SQLTokenizer.USE:
smallsql/database/SQLParser.java۞80۩token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞81۩String name = token.getName( sql );
smallsql/database/SQLParser.java۞82۩checkValidIdentifier( name, token );
smallsql/database/SQLParser.java۞83۩CommandSet set = new CommandSet( con.log, SQLTokenizer.USE);
smallsql/database/SQLParser.java۞84۩set.name = name;
smallsql/database/SQLParser.java۞85۩return set;
smallsql/database/SQLParser.java۞86۩case SQLTokenizer.EXECUTE:
smallsql/database/SQLParser.java۞87۩return execute();
smallsql/database/SQLParser.java۞88۩case SQLTokenizer.TRUNCATE:
smallsql/database/SQLParser.java۞89۩return truncate();
smallsql/database/SQLParser.java۞90۩default:
smallsql/database/SQLParser.java۞91۩throw new Error();
smallsql/database/SQLParser.java۞92۩}
smallsql/database/SQLParser.java۞93۩}
smallsql/database/SQLParser.java۞96۩Expression parseExpression(String expr) throws SQLException{
smallsql/database/SQLParser.java۞97۩this.sql = expr.toCharArray();
smallsql/database/SQLParser.java۞98۩this.tokens = SQLTokenizer.parseSQL( sql );
smallsql/database/SQLParser.java۞99۩tokenIdx = 0;
smallsql/database/SQLParser.java۞100۩return expression( null, 0);
smallsql/database/SQLParser.java۞101۩}
smallsql/database/SQLParser.java۞112۩private SQLException createSyntaxError(SQLToken token, String addMessageCode) {
smallsql/database/SQLParser.java۞113۩String message = getErrorString(token, addMessageCode, null);
smallsql/database/SQLParser.java۞114۩return SmallSQLException.create(Language.CUSTOM_MESSAGE, message);
smallsql/database/SQLParser.java۞115۩}
smallsql/database/SQLParser.java۞128۩private SQLException createSyntaxError(SQLToken token, String addMessageCode,
smallsql/database/SQLParser.java۞129۩Object param0) {
smallsql/database/SQLParser.java۞130۩String message = getErrorString(token, addMessageCode, param0);
smallsql/database/SQLParser.java۞131۩return SmallSQLException.create(Language.CUSTOM_MESSAGE, message);
smallsql/database/SQLParser.java۞132۩}
smallsql/database/SQLParser.java۞143۩private SQLException createSyntaxError(SQLToken token, int[] validValues){
smallsql/database/SQLParser.java۞144۩String msgStr = SmallSQLException.translateMsg(
smallsql/database/SQLParser.java۞145۩Language.STXADD_KEYS_REQUIRED, new Object[] { });
smallsql/database/SQLParser.java۞147۩StringBuffer msgBuf = new StringBuffer( msgStr );
smallsql/database/SQLParser.java۞149۩for(int i=0; i<validValues.length; i++){
smallsql/database/SQLParser.java۞150۩String name = SQLTokenizer.getKeyWord(validValues[i]);
smallsql/database/SQLParser.java۞151۩if(name == null) name = String.valueOf( (char)validValues[i] );
smallsql/database/SQLParser.java۞152۩msgBuf.append( name );
smallsql/database/SQLParser.java۞153۩if (i < validValues.length - 2)
smallsql/database/SQLParser.java۞154۩msgBuf.append( ", ");
smallsql/database/SQLParser.java۞155۩else
smallsql/database/SQLParser.java۞156۩if ( i == validValues.length - 2 )
smallsql/database/SQLParser.java۞157۩msgBuf.append( " or ");
smallsql/database/SQLParser.java۞158۩}
smallsql/database/SQLParser.java۞160۩String message = getErrorString(
smallsql/database/SQLParser.java۞161۩token, Language.CUSTOM_MESSAGE, msgBuf);
smallsql/database/SQLParser.java۞162۩return SmallSQLException.create(Language.CUSTOM_MESSAGE, message);
smallsql/database/SQLParser.java۞163۩}
smallsql/database/SQLParser.java۞176۩private String getErrorString(SQLToken token, String middleMsgCode,
smallsql/database/SQLParser.java۞177۩Object middleMsgParam) {
smallsql/database/SQLParser.java۞178۩StringBuffer buffer = new StringBuffer(1024);
smallsql/database/SQLParser.java۞182۩if(token != null){
smallsql/database/SQLParser.java۞183۩Object[] params = { String.valueOf(token.offset),
smallsql/database/SQLParser.java۞184۩String.valueOf(sql, token.offset, token.length) };
smallsql/database/SQLParser.java۞185۩String begin = SmallSQLException.translateMsg(Language.SYNTAX_BASE_OFS, params);
smallsql/database/SQLParser.java۞186۩buffer.append(begin);
smallsql/database/SQLParser.java۞187۩}
smallsql/database/SQLParser.java۞188۩else{
smallsql/database/SQLParser.java۞189۩String begin = SmallSQLException.translateMsg(
smallsql/database/SQLParser.java۞190۩Language.SYNTAX_BASE_END, new Object[] { });
smallsql/database/SQLParser.java۞191۩buffer.append(begin);
smallsql/database/SQLParser.java۞192۩}
smallsql/database/SQLParser.java۞196۩String middle = SmallSQLException.translateMsg(
smallsql/database/SQLParser.java۞197۩middleMsgCode, new Object[] { middleMsgParam });
smallsql/database/SQLParser.java۞199۩buffer.append(middle);
smallsql/database/SQLParser.java۞203۩int valOffset = (token != null) ? token.offset : sql.length;
smallsql/database/SQLParser.java۞204۩int valBegin = Math.max( 0, valOffset-40);
smallsql/database/SQLParser.java۞205۩int valEnd   = Math.min( valOffset+20, sql.length );
smallsql/database/SQLParser.java۞206۩String lineSeparator = System.getProperty( "line.separator" );
smallsql/database/SQLParser.java۞207۩buffer.append( lineSeparator );
smallsql/database/SQLParser.java۞208۩buffer.append( sql, valBegin, valEnd-valBegin);
smallsql/database/SQLParser.java۞209۩buffer.append( lineSeparator );
smallsql/database/SQLParser.java۞210۩for(; valBegin<valOffset; valBegin++) buffer.append(' ');
smallsql/database/SQLParser.java۞211۩buffer.append('^');
smallsql/database/SQLParser.java۞213۩return buffer.toString();
smallsql/database/SQLParser.java۞214۩}
smallsql/database/SQLParser.java۞216۩private void checkValidIdentifier(String name, SQLToken token) throws SQLException{
smallsql/database/SQLParser.java۞217۩if(token.value == SQLTokenizer.ASTERISK) return;
smallsql/database/SQLParser.java۞218۩if(token.value != SQLTokenizer.VALUE &&
smallsql/database/SQLParser.java۞219۩token.value != SQLTokenizer.IDENTIFIER &&
smallsql/database/SQLParser.java۞220۩token.value < 200){
smallsql/database/SQLParser.java۞221۩throw createSyntaxError( token, Language.STXADD_IDENT_EXPECT);
smallsql/database/SQLParser.java۞222۩}
smallsql/database/SQLParser.java۞223۩if(name.length() == 0) {
smallsql/database/SQLParser.java۞224۩throw createSyntaxError( token, Language.STXADD_IDENT_EMPTY, name);
smallsql/database/SQLParser.java۞225۩}
smallsql/database/SQLParser.java۞226۩char firstChar = name.charAt(0);
smallsql/database/SQLParser.java۞227۩if(firstChar != '#' && firstChar < '@') {
smallsql/database/SQLParser.java۞228۩throw createSyntaxError( token, Language.STXADD_IDENT_WRONG, name );
smallsql/database/SQLParser.java۞229۩}
smallsql/database/SQLParser.java۞230۩}
smallsql/database/SQLParser.java۞238۩private String getIdentifier(SQLToken token) throws SQLException{
smallsql/database/SQLParser.java۞239۩String name = token.getName(sql);
smallsql/database/SQLParser.java۞240۩checkValidIdentifier( name, token );
smallsql/database/SQLParser.java۞241۩return name;
smallsql/database/SQLParser.java۞242۩}
smallsql/database/SQLParser.java۞250۩private String nextIdentifier() throws SQLException{
smallsql/database/SQLParser.java۞251۩return getIdentifier( nextToken( MISSING_IDENTIFIER ) );
smallsql/database/SQLParser.java۞252۩}
smallsql/database/SQLParser.java۞261۩private String nextIdentiferPart(String name) throws SQLException{
smallsql/database/SQLParser.java۞262۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞264۩if(token != null && token.value == SQLTokenizer.POINT){
smallsql/database/SQLParser.java۞265۩return nextIdentifier();
smallsql/database/SQLParser.java۞266۩}else{
smallsql/database/SQLParser.java۞267۩previousToken();
smallsql/database/SQLParser.java۞268۩}
smallsql/database/SQLParser.java۞269۩return name;
smallsql/database/SQLParser.java۞270۩}
smallsql/database/SQLParser.java۞273۩final private boolean isKeyword(SQLToken token){
smallsql/database/SQLParser.java۞274۩if(token == null) return false;
smallsql/database/SQLParser.java۞275۩switch(token.value){
smallsql/database/SQLParser.java۞276۩case SQLTokenizer.SELECT:
smallsql/database/SQLParser.java۞277۩case SQLTokenizer.INSERT:
smallsql/database/SQLParser.java۞278۩case SQLTokenizer.UPDATE:
smallsql/database/SQLParser.java۞279۩case SQLTokenizer.UNION:
smallsql/database/SQLParser.java۞280۩case SQLTokenizer.FROM:
smallsql/database/SQLParser.java۞281۩case SQLTokenizer.WHERE:
smallsql/database/SQLParser.java۞282۩case SQLTokenizer.GROUP:
smallsql/database/SQLParser.java۞283۩case SQLTokenizer.HAVING:
smallsql/database/SQLParser.java۞284۩case SQLTokenizer.ORDER:
smallsql/database/SQLParser.java۞285۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞286۩case SQLTokenizer.SET:
smallsql/database/SQLParser.java۞287۩case SQLTokenizer.JOIN:
smallsql/database/SQLParser.java۞288۩case SQLTokenizer.LIMIT:
smallsql/database/SQLParser.java۞289۩return true;
smallsql/database/SQLParser.java۞290۩}
smallsql/database/SQLParser.java۞291۩return false;
smallsql/database/SQLParser.java۞292۩}
smallsql/database/SQLParser.java۞297۩private SQLToken lastToken(){
smallsql/database/SQLParser.java۞298۩if(tokenIdx > tokens.size()){
smallsql/database/SQLParser.java۞299۩return null;
smallsql/database/SQLParser.java۞300۩}
smallsql/database/SQLParser.java۞301۩return (SQLToken)tokens.get( tokenIdx-1 );
smallsql/database/SQLParser.java۞302۩}
smallsql/database/SQLParser.java۞303۩private void previousToken(){
smallsql/database/SQLParser.java۞304۩tokenIdx--;
smallsql/database/SQLParser.java۞305۩}
smallsql/database/SQLParser.java۞307۩private SQLToken nextToken(){
smallsql/database/SQLParser.java۞308۩if(tokenIdx >= tokens.size()){
smallsql/database/SQLParser.java۞309۩tokenIdx++;
smallsql/database/SQLParser.java۞310۩return null;
smallsql/database/SQLParser.java۞311۩}
smallsql/database/SQLParser.java۞312۩return (SQLToken)tokens.get( tokenIdx++ );
smallsql/database/SQLParser.java۞313۩}
smallsql/database/SQLParser.java۞315۩private SQLToken nextToken( int[] validValues) throws SQLException{
smallsql/database/SQLParser.java۞316۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞317۩if(token == null) throw createSyntaxError( token, validValues);
smallsql/database/SQLParser.java۞318۩if(validValues == MISSING_EXPRESSION){
smallsql/database/SQLParser.java۞319۩return token;
smallsql/database/SQLParser.java۞320۩}
smallsql/database/SQLParser.java۞321۩if(validValues == MISSING_IDENTIFIER){
smallsql/database/SQLParser.java۞323۩switch(token.value){
smallsql/database/SQLParser.java۞324۩case SQLTokenizer.PARENTHESIS_L:
smallsql/database/SQLParser.java۞325۩case SQLTokenizer.PARENTHESIS_R:
smallsql/database/SQLParser.java۞326۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞327۩throw createSyntaxError( token, validValues);
smallsql/database/SQLParser.java۞328۩}
smallsql/database/SQLParser.java۞329۩return token;
smallsql/database/SQLParser.java۞330۩}
smallsql/database/SQLParser.java۞331۩for(int i=validValues.length-1; i>=0; i--){
smallsql/database/SQLParser.java۞332۩if(token.value == validValues[i]) return token;
smallsql/database/SQLParser.java۞333۩}
smallsql/database/SQLParser.java۞334۩throw createSyntaxError( token, validValues);
smallsql/database/SQLParser.java۞335۩}
smallsql/database/SQLParser.java۞343۩private CommandSelect singleSelect() throws SQLException{
smallsql/database/SQLParser.java۞344۩CommandSelect selCmd = new CommandSelect(con.log);
smallsql/database/SQLParser.java۞345۩SQLToken token;
smallsql/database/SQLParser.java۞347۩Switch: while(true){
smallsql/database/SQLParser.java۞348۩token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞349۩switch(token.value){
smallsql/database/SQLParser.java۞350۩case SQLTokenizer.TOP:
smallsql/database/SQLParser.java۞351۩token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞352۩try{
smallsql/database/SQLParser.java۞353۩int maxRows = Integer.parseInt(token.getName(sql));
smallsql/database/SQLParser.java۞354۩selCmd.setMaxRows(maxRows);
smallsql/database/SQLParser.java۞355۩}catch(NumberFormatException e){
smallsql/database/SQLParser.java۞356۩throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));
smallsql/database/SQLParser.java۞357۩}
smallsql/database/SQLParser.java۞358۩break;
smallsql/database/SQLParser.java۞359۩case SQLTokenizer.ALL:
smallsql/database/SQLParser.java۞360۩selCmd.setDistinct(false);
smallsql/database/SQLParser.java۞361۩break;
smallsql/database/SQLParser.java۞362۩case SQLTokenizer.DISTINCT:
smallsql/database/SQLParser.java۞363۩selCmd.setDistinct(true);
smallsql/database/SQLParser.java۞364۩break;
smallsql/database/SQLParser.java۞365۩default:
smallsql/database/SQLParser.java۞366۩previousToken();
smallsql/database/SQLParser.java۞367۩break Switch;
smallsql/database/SQLParser.java۞368۩}
smallsql/database/SQLParser.java۞369۩}
smallsql/database/SQLParser.java۞371۩while(true){
smallsql/database/SQLParser.java۞372۩Expression column = expression(selCmd, 0);
smallsql/database/SQLParser.java۞373۩selCmd.addColumnExpression( column );
smallsql/database/SQLParser.java۞375۩token = nextToken();
smallsql/database/SQLParser.java۞376۩if(token == null) return selCmd;
smallsql/database/SQLParser.java۞378۩boolean as = false;
smallsql/database/SQLParser.java۞379۩if(token.value == SQLTokenizer.AS){
smallsql/database/SQLParser.java۞380۩token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞381۩as = true;
smallsql/database/SQLParser.java۞382۩}
smallsql/database/SQLParser.java۞384۩if(as || (!isKeyword(token))){
smallsql/database/SQLParser.java۞385۩String alias = getIdentifier( token);
smallsql/database/SQLParser.java۞386۩column.setAlias( alias );
smallsql/database/SQLParser.java۞387۩token = nextToken();
smallsql/database/SQLParser.java۞388۩if(token == null) return selCmd;
smallsql/database/SQLParser.java۞389۩}
smallsql/database/SQLParser.java۞391۩switch(token.value){
smallsql/database/SQLParser.java۞392۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞393۩if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );
smallsql/database/SQLParser.java۞394۩column = null;
smallsql/database/SQLParser.java۞395۩break;
smallsql/database/SQLParser.java۞396۩case SQLTokenizer.FROM:
smallsql/database/SQLParser.java۞397۩if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );
smallsql/database/SQLParser.java۞398۩column = null;
smallsql/database/SQLParser.java۞399۩from(selCmd);
smallsql/database/SQLParser.java۞400۩return selCmd;
smallsql/database/SQLParser.java۞402۩default:
smallsql/database/SQLParser.java۞403۩if(!isKeyword(token))
smallsql/database/SQLParser.java۞404۩throw createSyntaxError( token, new int[]{SQLTokenizer.COMMA, SQLTokenizer.FROM} );
smallsql/database/SQLParser.java۞405۩previousToken();
smallsql/database/SQLParser.java۞406۩return selCmd;
smallsql/database/SQLParser.java۞407۩}
smallsql/database/SQLParser.java۞408۩}
smallsql/database/SQLParser.java۞409۩}
smallsql/database/SQLParser.java۞412۩final private CommandSelect select() throws SQLException{
smallsql/database/SQLParser.java۞413۩CommandSelect selCmd = singleSelect();
smallsql/database/SQLParser.java۞414۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞416۩UnionAll union = null;
smallsql/database/SQLParser.java۞418۩while(token != null && token.value == SQLTokenizer.UNION){
smallsql/database/SQLParser.java۞419۩if(union == null){
smallsql/database/SQLParser.java۞420۩union = new UnionAll();
smallsql/database/SQLParser.java۞421۩union.addDataSource(new ViewResult( con, selCmd ));
smallsql/database/SQLParser.java۞422۩selCmd = new CommandSelect(con.log);
smallsql/database/SQLParser.java۞423۩selCmd.setSource( union );
smallsql/database/SQLParser.java۞424۩DataSources from = new DataSources();
smallsql/database/SQLParser.java۞425۩from.add(union);
smallsql/database/SQLParser.java۞426۩selCmd.setTables( from );
smallsql/database/SQLParser.java۞427۩selCmd.addColumnExpression( new ExpressionName("*") );
smallsql/database/SQLParser.java۞428۩}
smallsql/database/SQLParser.java۞429۩nextToken(MISSING_ALL);
smallsql/database/SQLParser.java۞430۩nextToken(MISSING_SELECT);
smallsql/database/SQLParser.java۞431۩union.addDataSource( new ViewResult( con, singleSelect() ) );
smallsql/database/SQLParser.java۞432۩token = nextToken();
smallsql/database/SQLParser.java۞433۩}
smallsql/database/SQLParser.java۞434۩if(token != null && token.value == SQLTokenizer.ORDER){
smallsql/database/SQLParser.java۞435۩order( selCmd );
smallsql/database/SQLParser.java۞436۩token = nextToken();
smallsql/database/SQLParser.java۞437۩}
smallsql/database/SQLParser.java۞438۩if(token != null && token.value == SQLTokenizer.LIMIT){
smallsql/database/SQLParser.java۞439۩limit( selCmd );
smallsql/database/SQLParser.java۞440۩token = nextToken();
smallsql/database/SQLParser.java۞441۩}
smallsql/database/SQLParser.java۞442۩previousToken();
smallsql/database/SQLParser.java۞443۩return selCmd;
smallsql/database/SQLParser.java۞444۩}
smallsql/database/SQLParser.java۞447۩private Command delete() throws SQLException{
smallsql/database/SQLParser.java۞448۩CommandDelete cmd = new CommandDelete(con.log);
smallsql/database/SQLParser.java۞449۩nextToken(MISSING_FROM);
smallsql/database/SQLParser.java۞450۩from(cmd);
smallsql/database/SQLParser.java۞451۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞452۩if(token != null){
smallsql/database/SQLParser.java۞453۩if(token.value != SQLTokenizer.WHERE)
smallsql/database/SQLParser.java۞454۩throw this.createSyntaxError(token, MISSING_WHERE);
smallsql/database/SQLParser.java۞455۩where(cmd);
smallsql/database/SQLParser.java۞456۩}
smallsql/database/SQLParser.java۞457۩return cmd;
smallsql/database/SQLParser.java۞458۩}
smallsql/database/SQLParser.java۞461۩private Command truncate() throws SQLException{
smallsql/database/SQLParser.java۞462۩CommandDelete cmd = new CommandDelete(con.log);
smallsql/database/SQLParser.java۞463۩nextToken(MISSING_TABLE);
smallsql/database/SQLParser.java۞464۩from(cmd);
smallsql/database/SQLParser.java۞465۩return cmd;
smallsql/database/SQLParser.java۞466۩}
smallsql/database/SQLParser.java۞469۩private Command insert() throws SQLException{
smallsql/database/SQLParser.java۞470۩SQLToken token = nextToken( MISSING_INTO );
smallsql/database/SQLParser.java۞471۩CommandInsert cmd = new CommandInsert( con.log, nextIdentifier() );
smallsql/database/SQLParser.java۞473۩int parthesisCount = 0;
smallsql/database/SQLParser.java۞475۩token = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);
smallsql/database/SQLParser.java۞476۩if(token.value == SQLTokenizer.PARENTHESIS_L){
smallsql/database/SQLParser.java۞477۩token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞478۩if(token.value == SQLTokenizer.SELECT){
smallsql/database/SQLParser.java۞479۩parthesisCount++;
smallsql/database/SQLParser.java۞480۩cmd.noColumns = true;
smallsql/database/SQLParser.java۞481۩}else{
smallsql/database/SQLParser.java۞482۩previousToken();
smallsql/database/SQLParser.java۞483۩Expressions list = expressionParenthesisList(cmd);
smallsql/database/SQLParser.java۞484۩for(int i=0; i<list.size(); i++){
smallsql/database/SQLParser.java۞485۩cmd.addColumnExpression( list.get( i ) );
smallsql/database/SQLParser.java۞486۩}
smallsql/database/SQLParser.java۞487۩token = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);
smallsql/database/SQLParser.java۞488۩}
smallsql/database/SQLParser.java۞489۩}else cmd.noColumns = true;
smallsql/database/SQLParser.java۞491۩Switch: while(true)
smallsql/database/SQLParser.java۞492۩switch(token.value){
smallsql/database/SQLParser.java۞493۩case SQLTokenizer.VALUES:{
smallsql/database/SQLParser.java۞494۩token = nextToken(MISSING_PARENTHESIS_L);
smallsql/database/SQLParser.java۞495۩cmd.addValues( expressionParenthesisList(cmd) );
smallsql/database/SQLParser.java۞496۩return cmd;
smallsql/database/SQLParser.java۞497۩}
smallsql/database/SQLParser.java۞498۩case SQLTokenizer.SELECT:
smallsql/database/SQLParser.java۞499۩cmd.addValues( select() );
smallsql/database/SQLParser.java۞500۩while(parthesisCount-- > 0){
smallsql/database/SQLParser.java۞501۩nextToken(MISSING_PARENTHESIS_R);
smallsql/database/SQLParser.java۞502۩}
smallsql/database/SQLParser.java۞503۩return cmd;
smallsql/database/SQLParser.java۞504۩case SQLTokenizer.PARENTHESIS_L:
smallsql/database/SQLParser.java۞505۩token = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);
smallsql/database/SQLParser.java۞506۩parthesisCount++;
smallsql/database/SQLParser.java۞507۩continue Switch;
smallsql/database/SQLParser.java۞508۩default:
smallsql/database/SQLParser.java۞509۩throw new Error();
smallsql/database/SQLParser.java۞510۩}
smallsql/database/SQLParser.java۞511۩}
smallsql/database/SQLParser.java۞514۩private Command update() throws SQLException{
smallsql/database/SQLParser.java۞515۩CommandUpdate cmd = new CommandUpdate(con.log);
smallsql/database/SQLParser.java۞517۩DataSources tables = new DataSources();
smallsql/database/SQLParser.java۞518۩cmd.setTables( tables );
smallsql/database/SQLParser.java۞519۩cmd.setSource( rowSource( cmd, tables, 0 ) );
smallsql/database/SQLParser.java۞521۩SQLToken token = nextToken(MISSING_SET);
smallsql/database/SQLParser.java۞522۩while(true){
smallsql/database/SQLParser.java۞523۩token = nextToken();
smallsql/database/SQLParser.java۞524۩Expression dest = expressionSingle( cmd, token);
smallsql/database/SQLParser.java۞525۩if(dest.getType() != Expression.NAME) throw createSyntaxError( token, MISSING_IDENTIFIER );
smallsql/database/SQLParser.java۞526۩nextToken(MISSING_EQUALS);
smallsql/database/SQLParser.java۞527۩Expression src = expression(cmd, 0);
smallsql/database/SQLParser.java۞528۩cmd.addSetting( dest, src);
smallsql/database/SQLParser.java۞529۩token = nextToken();
smallsql/database/SQLParser.java۞530۩if(token == null) break;
smallsql/database/SQLParser.java۞531۩switch(token.value){
smallsql/database/SQLParser.java۞532۩case SQLTokenizer.WHERE:
smallsql/database/SQLParser.java۞533۩where(cmd);
smallsql/database/SQLParser.java۞534۩return cmd;
smallsql/database/SQLParser.java۞535۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞536۩continue;
smallsql/database/SQLParser.java۞537۩default: throw createSyntaxError( token, MISSING_WHERE_COMMA );
smallsql/database/SQLParser.java۞538۩}
smallsql/database/SQLParser.java۞539۩}
smallsql/database/SQLParser.java۞540۩return cmd;
smallsql/database/SQLParser.java۞541۩}
smallsql/database/SQLParser.java۞544۩private Command create() throws SQLException{
smallsql/database/SQLParser.java۞545۩while(true){
smallsql/database/SQLParser.java۞546۩SQLToken token = nextToken(COMMANDS_CREATE);
smallsql/database/SQLParser.java۞547۩switch(token.value){
smallsql/database/SQLParser.java۞548۩case SQLTokenizer.DATABASE:
smallsql/database/SQLParser.java۞549۩return createDatabase();
smallsql/database/SQLParser.java۞550۩case SQLTokenizer.TABLE:
smallsql/database/SQLParser.java۞551۩return createTable();
smallsql/database/SQLParser.java۞552۩case SQLTokenizer.VIEW:
smallsql/database/SQLParser.java۞553۩return createView();
smallsql/database/SQLParser.java۞554۩case SQLTokenizer.INDEX:
smallsql/database/SQLParser.java۞555۩return createIndex(false);
smallsql/database/SQLParser.java۞556۩case SQLTokenizer.PROCEDURE:
smallsql/database/SQLParser.java۞557۩return createProcedure();
smallsql/database/SQLParser.java۞558۩case SQLTokenizer.UNIQUE:
smallsql/database/SQLParser.java۞559۩do{
smallsql/database/SQLParser.java۞560۩token = nextToken(COMMANDS_CREATE_UNIQUE);
smallsql/database/SQLParser.java۞561۩}while(token.value == SQLTokenizer.INDEX);
smallsql/database/SQLParser.java۞562۩return createIndex(true);
smallsql/database/SQLParser.java۞563۩case SQLTokenizer.NONCLUSTERED:
smallsql/database/SQLParser.java۞564۩case SQLTokenizer.CLUSTERED:
smallsql/database/SQLParser.java۞565۩continue;
smallsql/database/SQLParser.java۞566۩default:
smallsql/database/SQLParser.java۞567۩throw createSyntaxError( token, COMMANDS_CREATE );
smallsql/database/SQLParser.java۞568۩}
smallsql/database/SQLParser.java۞569۩}
smallsql/database/SQLParser.java۞570۩}
smallsql/database/SQLParser.java۞573۩private CommandCreateDatabase createDatabase() throws SQLException{
smallsql/database/SQLParser.java۞574۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞575۩if(token == null) throw createSyntaxError( token, MISSING_EXPRESSION );
smallsql/database/SQLParser.java۞576۩return new CommandCreateDatabase( con.log, token.getName(sql));
smallsql/database/SQLParser.java۞577۩}
smallsql/database/SQLParser.java۞580۩private CommandTable createTable() throws SQLException{
smallsql/database/SQLParser.java۞581۩String catalog;
smallsql/database/SQLParser.java۞582۩String tableName = catalog = nextIdentifier();
smallsql/database/SQLParser.java۞583۩tableName = nextIdentiferPart(tableName);
smallsql/database/SQLParser.java۞584۩if(tableName == catalog) catalog = null;
smallsql/database/SQLParser.java۞585۩CommandTable cmdCreate = new CommandTable( con.log, catalog, tableName, SQLTokenizer.CREATE );
smallsql/database/SQLParser.java۞586۩SQLToken token = nextToken( MISSING_PARENTHESIS_L );
smallsql/database/SQLParser.java۞588۩nextCol:
smallsql/database/SQLParser.java۞589۩while(true){
smallsql/database/SQLParser.java۞590۩token = nextToken( MISSING_EXPRESSION );
smallsql/database/SQLParser.java۞592۩String constraintName;
smallsql/database/SQLParser.java۞593۩if(token.value == SQLTokenizer.CONSTRAINT){
smallsql/database/SQLParser.java۞595۩constraintName = nextIdentifier();
smallsql/database/SQLParser.java۞596۩token = nextToken( MISSING_KEYTYPE );
smallsql/database/SQLParser.java۞597۩}else{
smallsql/database/SQLParser.java۞598۩constraintName = null;
smallsql/database/SQLParser.java۞599۩}
smallsql/database/SQLParser.java۞600۩switch(token.value){
smallsql/database/SQLParser.java۞601۩case SQLTokenizer.PRIMARY:
smallsql/database/SQLParser.java۞602۩case SQLTokenizer.UNIQUE:
smallsql/database/SQLParser.java۞603۩case SQLTokenizer.FOREIGN:
smallsql/database/SQLParser.java۞604۩IndexDescription index = index(cmdCreate, token.value, tableName, constraintName, null);
smallsql/database/SQLParser.java۞605۩if(token.value == SQLTokenizer.FOREIGN){
smallsql/database/SQLParser.java۞606۩nextToken( MISSING_REFERENCES );
smallsql/database/SQLParser.java۞607۩String pk = nextIdentifier();
smallsql/database/SQLParser.java۞608۩Expressions expressions = new Expressions();
smallsql/database/SQLParser.java۞609۩Strings columns = new Strings();
smallsql/database/SQLParser.java۞610۩expressionDefList( cmdCreate, expressions, columns );
smallsql/database/SQLParser.java۞611۩IndexDescription pkIndex = new IndexDescription( null, pk, SQLTokenizer.UNIQUE, expressions, columns);
smallsql/database/SQLParser.java۞612۩ForeignKey foreignKey = new ForeignKey(pk, pkIndex, tableName, index);
smallsql/database/SQLParser.java۞613۩cmdCreate.addForeingnKey(foreignKey);
smallsql/database/SQLParser.java۞614۩}else{
smallsql/database/SQLParser.java۞615۩cmdCreate.addIndex( index );
smallsql/database/SQLParser.java۞616۩}
smallsql/database/SQLParser.java۞618۩token = nextToken( MISSING_COMMA_PARENTHESIS );
smallsql/database/SQLParser.java۞619۩switch(token.value){
smallsql/database/SQLParser.java۞620۩case SQLTokenizer.PARENTHESIS_R:
smallsql/database/SQLParser.java۞621۩return cmdCreate;
smallsql/database/SQLParser.java۞622۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞623۩continue nextCol;
smallsql/database/SQLParser.java۞624۩}
smallsql/database/SQLParser.java۞625۩}
smallsql/database/SQLParser.java۞627۩token = addColumn( token, cmdCreate );
smallsql/database/SQLParser.java۞628۩if(token == null){
smallsql/database/SQLParser.java۞629۩throw createSyntaxError(token, MISSING_COMMA_PARENTHESIS);
smallsql/database/SQLParser.java۞630۩}
smallsql/database/SQLParser.java۞631۩switch(token.value){
smallsql/database/SQLParser.java۞632۩case SQLTokenizer.PARENTHESIS_R:
smallsql/database/SQLParser.java۞633۩return cmdCreate;
smallsql/database/SQLParser.java۞634۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞635۩continue nextCol;
smallsql/database/SQLParser.java۞636۩default:
smallsql/database/SQLParser.java۞637۩throw createSyntaxError(token, MISSING_COMMA_PARENTHESIS);
smallsql/database/SQLParser.java۞638۩}
smallsql/database/SQLParser.java۞639۩}
smallsql/database/SQLParser.java۞640۩}
smallsql/database/SQLParser.java۞649۩private SQLToken addColumn(SQLToken token, CommandTable cmdCreate) throws SQLException{
smallsql/database/SQLParser.java۞650۩String colName = getIdentifier( token );
smallsql/database/SQLParser.java۞651۩Column col = datatype(false);
smallsql/database/SQLParser.java۞652۩col.setName( colName );
smallsql/database/SQLParser.java۞654۩token = nextToken();
smallsql/database/SQLParser.java۞655۩boolean nullableWasSet = false;
smallsql/database/SQLParser.java۞656۩boolean defaultWasSet = col.isAutoIncrement();
smallsql/database/SQLParser.java۞657۩while(true){
smallsql/database/SQLParser.java۞658۩if(token == null){
smallsql/database/SQLParser.java۞659۩cmdCreate.addColumn( col );
smallsql/database/SQLParser.java۞660۩return null;
smallsql/database/SQLParser.java۞661۩}
smallsql/database/SQLParser.java۞662۩switch(token.value){
smallsql/database/SQLParser.java۞663۩case SQLTokenizer.PARENTHESIS_R:
smallsql/database/SQLParser.java۞664۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞665۩cmdCreate.addColumn( col );
smallsql/database/SQLParser.java۞666۩return token;
smallsql/database/SQLParser.java۞667۩case SQLTokenizer.DEFAULT:
smallsql/database/SQLParser.java۞668۩if(defaultWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );
smallsql/database/SQLParser.java۞669۩int offset = token.offset + token.length;
smallsql/database/SQLParser.java۞670۩token = nextToken();
smallsql/database/SQLParser.java۞671۩if(token != null) offset = token.offset;
smallsql/database/SQLParser.java۞672۩previousToken();
smallsql/database/SQLParser.java۞673۩Expression expr = expression(cmdCreate, 0);
smallsql/database/SQLParser.java۞674۩SQLToken last = lastToken();
smallsql/database/SQLParser.java۞675۩int length = last.offset + last.length - offset;
smallsql/database/SQLParser.java۞676۩String def = new String( sql, offset, length );
smallsql/database/SQLParser.java۞677۩col.setDefaultValue( expr, def );
smallsql/database/SQLParser.java۞678۩defaultWasSet = true;
smallsql/database/SQLParser.java۞679۩break;
smallsql/database/SQLParser.java۞680۩case SQLTokenizer.IDENTITY:
smallsql/database/SQLParser.java۞681۩if(defaultWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );
smallsql/database/SQLParser.java۞682۩col.setAutoIncrement(true);
smallsql/database/SQLParser.java۞683۩defaultWasSet = true;
smallsql/database/SQLParser.java۞684۩break;
smallsql/database/SQLParser.java۞685۩case SQLTokenizer.NULL:
smallsql/database/SQLParser.java۞686۩if(nullableWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );
smallsql/database/SQLParser.java۞688۩nullableWasSet = true;
smallsql/database/SQLParser.java۞689۩break;
smallsql/database/SQLParser.java۞690۩case SQLTokenizer.NOT:
smallsql/database/SQLParser.java۞691۩if(nullableWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );
smallsql/database/SQLParser.java۞692۩token = nextToken( MISSING_NULL );
smallsql/database/SQLParser.java۞693۩col.setNullable(false);
smallsql/database/SQLParser.java۞694۩nullableWasSet = true;
smallsql/database/SQLParser.java۞695۩break;
smallsql/database/SQLParser.java۞696۩case SQLTokenizer.PRIMARY:
smallsql/database/SQLParser.java۞697۩case SQLTokenizer.UNIQUE:
smallsql/database/SQLParser.java۞698۩IndexDescription index = index(cmdCreate, token.value, cmdCreate.name, null, colName);
smallsql/database/SQLParser.java۞699۩cmdCreate.addIndex( index );
smallsql/database/SQLParser.java۞700۩break;
smallsql/database/SQLParser.java۞701۩default:
smallsql/database/SQLParser.java۞702۩throw createSyntaxError(token, MISSING_OPTIONS_DATATYPE);
smallsql/database/SQLParser.java۞703۩}
smallsql/database/SQLParser.java۞704۩token = nextToken();
smallsql/database/SQLParser.java۞705۩}
smallsql/database/SQLParser.java۞706۩}
smallsql/database/SQLParser.java۞719۩private IndexDescription index(Command cmd, int constraintType, String tableName, String contrainName, String columnName) throws SQLException{
smallsql/database/SQLParser.java۞720۩if(constraintType != SQLTokenizer.UNIQUE) nextToken( MISSING_KEY );
smallsql/database/SQLParser.java۞721۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞722۩if(token != null){
smallsql/database/SQLParser.java۞723۩switch(token.value){
smallsql/database/SQLParser.java۞724۩case SQLTokenizer.CLUSTERED:
smallsql/database/SQLParser.java۞725۩case SQLTokenizer.NONCLUSTERED:
smallsql/database/SQLParser.java۞727۩break;
smallsql/database/SQLParser.java۞728۩default:
smallsql/database/SQLParser.java۞729۩previousToken();
smallsql/database/SQLParser.java۞730۩}
smallsql/database/SQLParser.java۞731۩}else{
smallsql/database/SQLParser.java۞732۩previousToken();
smallsql/database/SQLParser.java۞733۩}
smallsql/database/SQLParser.java۞734۩Strings columns = new Strings();
smallsql/database/SQLParser.java۞735۩Expressions expressions = new Expressions();
smallsql/database/SQLParser.java۞736۩if(columnName != null){
smallsql/database/SQLParser.java۞738۩columns.add(columnName);
smallsql/database/SQLParser.java۞739۩expressions.add(new ExpressionName(columnName));
smallsql/database/SQLParser.java۞740۩}else{
smallsql/database/SQLParser.java۞742۩expressionDefList( cmd, expressions, columns );
smallsql/database/SQLParser.java۞743۩}
smallsql/database/SQLParser.java۞744۩return new IndexDescription( contrainName, tableName, constraintType, expressions, columns);
smallsql/database/SQLParser.java۞745۩}
smallsql/database/SQLParser.java۞752۩private Column datatype(boolean isEscape) throws SQLException{
smallsql/database/SQLParser.java۞753۩SQLToken token;
smallsql/database/SQLParser.java۞754۩int dataType;
smallsql/database/SQLParser.java۞755۩if(isEscape){
smallsql/database/SQLParser.java۞756۩token = nextToken( MISSING_SQL_DATATYPE );
smallsql/database/SQLParser.java۞757۩switch(token.value){
smallsql/database/SQLParser.java۞758۩case SQLTokenizer.SQL_BIGINT: 			dataType = SQLTokenizer.BIGINT;		break;
smallsql/database/SQLParser.java۞759۩case SQLTokenizer.SQL_BINARY:			dataType = SQLTokenizer.BINARY; 	break;
smallsql/database/SQLParser.java۞760۩case SQLTokenizer.SQL_BIT:				dataType = SQLTokenizer.BIT;		break;
smallsql/database/SQLParser.java۞761۩case SQLTokenizer.SQL_CHAR:				dataType = SQLTokenizer.CHAR;		break;
smallsql/database/SQLParser.java۞762۩case SQLTokenizer.SQL_DATE:				dataType = SQLTokenizer.DATE;		break;
smallsql/database/SQLParser.java۞763۩case SQLTokenizer.SQL_DECIMAL:			dataType = SQLTokenizer.DECIMAL;	break;
smallsql/database/SQLParser.java۞764۩case SQLTokenizer.SQL_DOUBLE:			dataType = SQLTokenizer.DOUBLE;		break;
smallsql/database/SQLParser.java۞765۩case SQLTokenizer.SQL_FLOAT:			dataType = SQLTokenizer.FLOAT;		break;
smallsql/database/SQLParser.java۞766۩case SQLTokenizer.SQL_INTEGER:			dataType = SQLTokenizer.INT;		break;
smallsql/database/SQLParser.java۞767۩case SQLTokenizer.SQL_LONGVARBINARY:	dataType = SQLTokenizer.LONGVARBINARY;break;
smallsql/database/SQLParser.java۞768۩case SQLTokenizer.SQL_LONGVARCHAR:		dataType = SQLTokenizer.LONGVARCHAR;break;
smallsql/database/SQLParser.java۞769۩case SQLTokenizer.SQL_REAL:				dataType = SQLTokenizer.REAL;		break;
smallsql/database/SQLParser.java۞770۩case SQLTokenizer.SQL_SMALLINT:			dataType = SQLTokenizer.SMALLINT;	break;
smallsql/database/SQLParser.java۞771۩case SQLTokenizer.SQL_TIME:				dataType = SQLTokenizer.TIME;		break;
smallsql/database/SQLParser.java۞772۩case SQLTokenizer.SQL_TIMESTAMP:		dataType = SQLTokenizer.TIMESTAMP;	break;
smallsql/database/SQLParser.java۞773۩case SQLTokenizer.SQL_TINYINT:			dataType = SQLTokenizer.TINYINT;	break;
smallsql/database/SQLParser.java۞774۩case SQLTokenizer.SQL_VARBINARY:		dataType = SQLTokenizer.VARBINARY;	break;
smallsql/database/SQLParser.java۞775۩case SQLTokenizer.SQL_VARCHAR:			dataType = SQLTokenizer.VARCHAR;	break;
smallsql/database/SQLParser.java۞776۩default: throw new Error();
smallsql/database/SQLParser.java۞777۩}
smallsql/database/SQLParser.java۞778۩}else{
smallsql/database/SQLParser.java۞779۩token = nextToken( MISSING_DATATYPE );
smallsql/database/SQLParser.java۞780۩dataType = token.value;
smallsql/database/SQLParser.java۞781۩}
smallsql/database/SQLParser.java۞782۩Column col = new Column();
smallsql/database/SQLParser.java۞785۩if(dataType == SQLTokenizer.LONG){
smallsql/database/SQLParser.java۞786۩token = nextToken();
smallsql/database/SQLParser.java۞787۩if(token != null && token.value == SQLTokenizer.RAW){
smallsql/database/SQLParser.java۞788۩dataType = SQLTokenizer.LONGVARBINARY;
smallsql/database/SQLParser.java۞789۩}else{
smallsql/database/SQLParser.java۞790۩dataType = SQLTokenizer.LONGVARCHAR;
smallsql/database/SQLParser.java۞791۩previousToken();
smallsql/database/SQLParser.java۞792۩}
smallsql/database/SQLParser.java۞793۩}
smallsql/database/SQLParser.java۞795۩switch(dataType){
smallsql/database/SQLParser.java۞796۩case SQLTokenizer.RAW:
smallsql/database/SQLParser.java۞797۩dataType = SQLTokenizer.VARBINARY;
smallsql/database/SQLParser.java۞799۩case SQLTokenizer.CHAR:
smallsql/database/SQLParser.java۞800۩case SQLTokenizer.VARCHAR:
smallsql/database/SQLParser.java۞801۩case SQLTokenizer.NCHAR:
smallsql/database/SQLParser.java۞802۩case SQLTokenizer.NVARCHAR:
smallsql/database/SQLParser.java۞803۩case SQLTokenizer.BINARY:
smallsql/database/SQLParser.java۞804۩case SQLTokenizer.VARBINARY:
smallsql/database/SQLParser.java۞805۩{
smallsql/database/SQLParser.java۞807۩token = nextToken();
smallsql/database/SQLParser.java۞808۩int displaySize;
smallsql/database/SQLParser.java۞809۩if(token == null || token.value != SQLTokenizer.PARENTHESIS_L){
smallsql/database/SQLParser.java۞810۩displaySize = 30;
smallsql/database/SQLParser.java۞811۩previousToken();
smallsql/database/SQLParser.java۞812۩}else{
smallsql/database/SQLParser.java۞813۩token = nextToken( MISSING_EXPRESSION );
smallsql/database/SQLParser.java۞814۩try{
smallsql/database/SQLParser.java۞815۩displaySize = Integer.parseInt(token.getName(sql) );
smallsql/database/SQLParser.java۞816۩}catch(Exception e){
smallsql/database/SQLParser.java۞817۩throw createSyntaxError(token, MISSING_NUMBERVALUE );
smallsql/database/SQLParser.java۞818۩}
smallsql/database/SQLParser.java۞819۩nextToken( MISSING_PARENTHESIS_R );
smallsql/database/SQLParser.java۞820۩}
smallsql/database/SQLParser.java۞821۩col.setPrecision( displaySize );
smallsql/database/SQLParser.java۞822۩break;
smallsql/database/SQLParser.java۞823۩}
smallsql/database/SQLParser.java۞824۩case SQLTokenizer.SYSNAME:
smallsql/database/SQLParser.java۞825۩col.setPrecision(255);
smallsql/database/SQLParser.java۞826۩dataType = SQLTokenizer.VARCHAR;
smallsql/database/SQLParser.java۞827۩break;
smallsql/database/SQLParser.java۞828۩case SQLTokenizer.COUNTER:
smallsql/database/SQLParser.java۞829۩col.setAutoIncrement(true);
smallsql/database/SQLParser.java۞830۩dataType = SQLTokenizer.INT;
smallsql/database/SQLParser.java۞831۩break;
smallsql/database/SQLParser.java۞832۩case SQLTokenizer.NUMERIC:
smallsql/database/SQLParser.java۞833۩case SQLTokenizer.DECIMAL:
smallsql/database/SQLParser.java۞834۩token = nextToken();
smallsql/database/SQLParser.java۞835۩if(token != null && token.value == SQLTokenizer.PARENTHESIS_L){
smallsql/database/SQLParser.java۞837۩token = nextToken( MISSING_EXPRESSION );
smallsql/database/SQLParser.java۞838۩int value;
smallsql/database/SQLParser.java۞839۩try{
smallsql/database/SQLParser.java۞840۩value = Integer.parseInt(token.getName(sql) );
smallsql/database/SQLParser.java۞841۩}catch(Exception e){
smallsql/database/SQLParser.java۞842۩throw createSyntaxError(token, MISSING_NUMBERVALUE );
smallsql/database/SQLParser.java۞843۩}
smallsql/database/SQLParser.java۞844۩col.setPrecision(value);
smallsql/database/SQLParser.java۞845۩token = nextToken( MISSING_COMMA_PARENTHESIS );
smallsql/database/SQLParser.java۞846۩if(token.value == SQLTokenizer.COMMA){
smallsql/database/SQLParser.java۞848۩token = nextToken( MISSING_EXPRESSION );
smallsql/database/SQLParser.java۞849۩try{
smallsql/database/SQLParser.java۞850۩value = Integer.parseInt(token.getName(sql) );
smallsql/database/SQLParser.java۞851۩}catch(Exception e){
smallsql/database/SQLParser.java۞852۩throw createSyntaxError(token, MISSING_NUMBERVALUE );
smallsql/database/SQLParser.java۞853۩}
smallsql/database/SQLParser.java۞854۩col.setScale(value);
smallsql/database/SQLParser.java۞855۩nextToken( MISSING_PARENTHESIS_R );
smallsql/database/SQLParser.java۞856۩}
smallsql/database/SQLParser.java۞857۩}else{
smallsql/database/SQLParser.java۞858۩col.setPrecision(18);
smallsql/database/SQLParser.java۞859۩previousToken();
smallsql/database/SQLParser.java۞860۩}
smallsql/database/SQLParser.java۞861۩break;
smallsql/database/SQLParser.java۞862۩}
smallsql/database/SQLParser.java۞863۩col.setDataType( dataType );
smallsql/database/SQLParser.java۞864۩return col;
smallsql/database/SQLParser.java۞865۩}
smallsql/database/SQLParser.java۞867۩private CommandCreateView createView() throws SQLException{
smallsql/database/SQLParser.java۞868۩String viewName = nextIdentifier();
smallsql/database/SQLParser.java۞870۩nextToken(MISSING_AS);
smallsql/database/SQLParser.java۞871۩SQLToken token = nextToken(MISSING_SELECT);
smallsql/database/SQLParser.java۞872۩CommandCreateView cmd = new CommandCreateView( con.log, viewName );
smallsql/database/SQLParser.java۞874۩cmd.sql = new String(sql, token.offset, sql.length-token.offset );
smallsql/database/SQLParser.java۞875۩select();
smallsql/database/SQLParser.java۞876۩return cmd;
smallsql/database/SQLParser.java۞877۩}
smallsql/database/SQLParser.java۞880۩private CommandTable createIndex(boolean unique) throws SQLException{
smallsql/database/SQLParser.java۞881۩String indexName = nextIdentifier();
smallsql/database/SQLParser.java۞882۩nextToken(MISSING_ON);
smallsql/database/SQLParser.java۞883۩String catalog;
smallsql/database/SQLParser.java۞884۩String tableName = catalog = nextIdentifier();
smallsql/database/SQLParser.java۞885۩tableName = nextIdentiferPart(tableName);
smallsql/database/SQLParser.java۞886۩if(tableName == catalog) catalog = null;
smallsql/database/SQLParser.java۞887۩CommandTable cmd = new CommandTable( con.log, catalog, tableName, SQLTokenizer.INDEX );
smallsql/database/SQLParser.java۞888۩Expressions expressions = new Expressions();
smallsql/database/SQLParser.java۞889۩Strings columns = new Strings();
smallsql/database/SQLParser.java۞890۩expressionDefList( cmd, expressions, columns );
smallsql/database/SQLParser.java۞891۩IndexDescription indexDesc = new IndexDescription(
smallsql/database/SQLParser.java۞892۩indexName,
smallsql/database/SQLParser.java۞893۩tableName,
smallsql/database/SQLParser.java۞894۩unique ? SQLTokenizer.UNIQUE : SQLTokenizer.INDEX,
smallsql/database/SQLParser.java۞895۩expressions,
smallsql/database/SQLParser.java۞896۩columns);
smallsql/database/SQLParser.java۞898۩Object[] param = { "Create Index" };
smallsql/database/SQLParser.java۞899۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);
smallsql/database/SQLParser.java۞900۩}
smallsql/database/SQLParser.java۞902۩private CommandCreateDatabase createProcedure() throws SQLException{
smallsql/database/SQLParser.java۞904۩Object[] param = { "Create Procedure" };
smallsql/database/SQLParser.java۞905۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);
smallsql/database/SQLParser.java۞906۩}
smallsql/database/SQLParser.java۞908۩private Command drop() throws SQLException{
smallsql/database/SQLParser.java۞909۩SQLToken tokenType = nextToken(COMMANDS_DROP);
smallsql/database/SQLParser.java۞911۩String catalog;
smallsql/database/SQLParser.java۞912۩String name = catalog = nextIdentifier();
smallsql/database/SQLParser.java۞913۩name = nextIdentiferPart( name );
smallsql/database/SQLParser.java۞914۩if(name == catalog) catalog = null;
smallsql/database/SQLParser.java۞916۩switch(tokenType.value){
smallsql/database/SQLParser.java۞917۩case SQLTokenizer.DATABASE:
smallsql/database/SQLParser.java۞918۩case SQLTokenizer.TABLE:
smallsql/database/SQLParser.java۞919۩case SQLTokenizer.VIEW:
smallsql/database/SQLParser.java۞920۩case SQLTokenizer.INDEX:
smallsql/database/SQLParser.java۞921۩case SQLTokenizer.PROCEDURE:
smallsql/database/SQLParser.java۞922۩return new CommandDrop( con.log, catalog, name, tokenType.value);
smallsql/database/SQLParser.java۞923۩default:
smallsql/database/SQLParser.java۞924۩throw createSyntaxError( tokenType, COMMANDS_DROP );
smallsql/database/SQLParser.java۞925۩}
smallsql/database/SQLParser.java۞926۩}
smallsql/database/SQLParser.java۞929۩private Command alter() throws SQLException{
smallsql/database/SQLParser.java۞930۩SQLToken tokenType = nextToken(COMMANDS_ALTER);
smallsql/database/SQLParser.java۞931۩String catalog;
smallsql/database/SQLParser.java۞932۩String tableName = catalog = nextIdentifier();
smallsql/database/SQLParser.java۞933۩switch(tokenType.value){
smallsql/database/SQLParser.java۞934۩case SQLTokenizer.TABLE:
smallsql/database/SQLParser.java۞935۩case SQLTokenizer.VIEW:
smallsql/database/SQLParser.java۞936۩case SQLTokenizer.INDEX:
smallsql/database/SQLParser.java۞937۩case SQLTokenizer.PROCEDURE:
smallsql/database/SQLParser.java۞938۩tableName = nextIdentiferPart(tableName);
smallsql/database/SQLParser.java۞939۩if(tableName == catalog) catalog = null;
smallsql/database/SQLParser.java۞940۩}
smallsql/database/SQLParser.java۞941۩switch(tokenType.value){
smallsql/database/SQLParser.java۞943۩case SQLTokenizer.TABLE:
smallsql/database/SQLParser.java۞944۩return alterTable( catalog, tableName );
smallsql/database/SQLParser.java۞948۩default:
smallsql/database/SQLParser.java۞949۩Object[] param = { "ALTER " + tokenType.getName( sql ) };
smallsql/database/SQLParser.java۞950۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);
smallsql/database/SQLParser.java۞951۩}
smallsql/database/SQLParser.java۞952۩}
smallsql/database/SQLParser.java۞955۩Command alterTable( String catalog, String name ) throws SQLException{
smallsql/database/SQLParser.java۞956۩SQLToken tokenType = nextToken(MISSING_ADD_ALTER_DROP);
smallsql/database/SQLParser.java۞957۩CommandTable cmd = new CommandTable( con.log, catalog, name, tokenType.value );
smallsql/database/SQLParser.java۞958۩switch(tokenType.value){
smallsql/database/SQLParser.java۞959۩case SQLTokenizer.ADD:
smallsql/database/SQLParser.java۞960۩SQLToken token;
smallsql/database/SQLParser.java۞961۩do{
smallsql/database/SQLParser.java۞962۩token = nextToken( MISSING_IDENTIFIER );
smallsql/database/SQLParser.java۞963۩token = addColumn( token, cmd );
smallsql/database/SQLParser.java۞964۩}while(token != null && token.value == SQLTokenizer.COMMA );
smallsql/database/SQLParser.java۞966۩return cmd;
smallsql/database/SQLParser.java۞967۩default:
smallsql/database/SQLParser.java۞968۩Object[] param = { "ALTER TABLE " + tokenType.getName( sql ) };
smallsql/database/SQLParser.java۞969۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);
smallsql/database/SQLParser.java۞970۩}
smallsql/database/SQLParser.java۞971۩}
smallsql/database/SQLParser.java۞974۩private CommandSet set() throws SQLException{
smallsql/database/SQLParser.java۞975۩SQLToken token = nextToken( COMMANDS_SET );
smallsql/database/SQLParser.java۞976۩switch(token.value){
smallsql/database/SQLParser.java۞977۩case SQLTokenizer.TRANSACTION:
smallsql/database/SQLParser.java۞978۩return setTransaction();
smallsql/database/SQLParser.java۞979۩default:
smallsql/database/SQLParser.java۞980۩throw new Error();
smallsql/database/SQLParser.java۞981۩}
smallsql/database/SQLParser.java۞982۩}
smallsql/database/SQLParser.java۞984۩private CommandSet setTransaction() throws SQLException{
smallsql/database/SQLParser.java۞985۩SQLToken token = nextToken( MISSING_ISOLATION );
smallsql/database/SQLParser.java۞986۩token = nextToken( MISSING_LEVEL );
smallsql/database/SQLParser.java۞987۩token = nextToken( COMMANDS_TRANS_LEVEL );
smallsql/database/SQLParser.java۞988۩CommandSet cmd = new CommandSet( con.log, SQLTokenizer.LEVEL );
smallsql/database/SQLParser.java۞989۩switch(token.value){
smallsql/database/SQLParser.java۞990۩case SQLTokenizer.READ:
smallsql/database/SQLParser.java۞991۩token = nextToken( MISSING_COMM_UNCOMM );
smallsql/database/SQLParser.java۞992۩switch(token.value){
smallsql/database/SQLParser.java۞993۩case SQLTokenizer.COMMITTED:
smallsql/database/SQLParser.java۞994۩cmd.isolationLevel = Connection.TRANSACTION_READ_COMMITTED;
smallsql/database/SQLParser.java۞995۩break;
smallsql/database/SQLParser.java۞996۩case SQLTokenizer.UNCOMMITTED:
smallsql/database/SQLParser.java۞997۩cmd.isolationLevel = Connection.TRANSACTION_READ_UNCOMMITTED;
smallsql/database/SQLParser.java۞998۩break;
smallsql/database/SQLParser.java۞999۩default:
smallsql/database/SQLParser.java۞1000۩throw new Error();
smallsql/database/SQLParser.java۞1001۩}
smallsql/database/SQLParser.java۞1002۩return cmd;
smallsql/database/SQLParser.java۞1003۩case SQLTokenizer.REPEATABLE:
smallsql/database/SQLParser.java۞1004۩token = nextToken( MISSING_READ );
smallsql/database/SQLParser.java۞1005۩cmd.isolationLevel = Connection.TRANSACTION_REPEATABLE_READ;
smallsql/database/SQLParser.java۞1006۩return cmd;
smallsql/database/SQLParser.java۞1007۩case SQLTokenizer.SERIALIZABLE:
smallsql/database/SQLParser.java۞1008۩cmd.isolationLevel = Connection.TRANSACTION_SERIALIZABLE;
smallsql/database/SQLParser.java۞1009۩return cmd;
smallsql/database/SQLParser.java۞1010۩default:
smallsql/database/SQLParser.java۞1011۩throw new Error();
smallsql/database/SQLParser.java۞1012۩}
smallsql/database/SQLParser.java۞1015۩}
smallsql/database/SQLParser.java۞1017۩private Command execute() throws SQLException{
smallsql/database/SQLParser.java۞1019۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Execute");
smallsql/database/SQLParser.java۞1020۩}
smallsql/database/SQLParser.java۞1029۩private Expressions expressionParenthesisList(Command cmd) throws SQLException{
smallsql/database/SQLParser.java۞1030۩Expressions list = new Expressions();
smallsql/database/SQLParser.java۞1031۩{
smallsql/database/SQLParser.java۞1032۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞1033۩if(token != null && token.value == SQLTokenizer.PARENTHESIS_R){
smallsql/database/SQLParser.java۞1035۩return list;
smallsql/database/SQLParser.java۞1036۩}
smallsql/database/SQLParser.java۞1037۩previousToken();
smallsql/database/SQLParser.java۞1038۩}
smallsql/database/SQLParser.java۞1039۩while(true){
smallsql/database/SQLParser.java۞1040۩list.add( expression(cmd, 0) );
smallsql/database/SQLParser.java۞1041۩SQLToken token = nextToken(MISSING_COMMA_PARENTHESIS);
smallsql/database/SQLParser.java۞1042۩switch(token.value){
smallsql/database/SQLParser.java۞1043۩case SQLTokenizer.PARENTHESIS_R:
smallsql/database/SQLParser.java۞1044۩return list;
smallsql/database/SQLParser.java۞1045۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞1046۩continue;
smallsql/database/SQLParser.java۞1047۩default:
smallsql/database/SQLParser.java۞1048۩throw new Error();
smallsql/database/SQLParser.java۞1049۩}
smallsql/database/SQLParser.java۞1050۩}
smallsql/database/SQLParser.java۞1051۩}
smallsql/database/SQLParser.java۞1057۩private Expressions expressionTokenList(Command cmd, int listType) throws SQLException{
smallsql/database/SQLParser.java۞1058۩Expressions list = new Expressions();
smallsql/database/SQLParser.java۞1059۩while(true){
smallsql/database/SQLParser.java۞1060۩Expression expr = expression(cmd, 0);
smallsql/database/SQLParser.java۞1061۩list.add( expr );
smallsql/database/SQLParser.java۞1062۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞1064۩if(listType == SQLTokenizer.ORDER && token != null){
smallsql/database/SQLParser.java۞1065۩switch(token.value){
smallsql/database/SQLParser.java۞1066۩case SQLTokenizer.DESC:
smallsql/database/SQLParser.java۞1067۩expr.setAlias(SQLTokenizer.DESC_STR);
smallsql/database/SQLParser.java۞1069۩case SQLTokenizer.ASC:
smallsql/database/SQLParser.java۞1070۩token = nextToken();
smallsql/database/SQLParser.java۞1071۩}
smallsql/database/SQLParser.java۞1072۩}
smallsql/database/SQLParser.java۞1074۩if(token == null) {
smallsql/database/SQLParser.java۞1075۩previousToken();
smallsql/database/SQLParser.java۞1076۩return list;
smallsql/database/SQLParser.java۞1077۩}
smallsql/database/SQLParser.java۞1079۩switch(token.value){
smallsql/database/SQLParser.java۞1080۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞1081۩continue;
smallsql/database/SQLParser.java۞1082۩default:
smallsql/database/SQLParser.java۞1083۩if(isKeyword(token) ){
smallsql/database/SQLParser.java۞1084۩previousToken();
smallsql/database/SQLParser.java۞1085۩return list;
smallsql/database/SQLParser.java۞1086۩}
smallsql/database/SQLParser.java۞1087۩throw createSyntaxError( token, MISSING_TOKEN_LIST);
smallsql/database/SQLParser.java۞1088۩}
smallsql/database/SQLParser.java۞1089۩}
smallsql/database/SQLParser.java۞1090۩}
smallsql/database/SQLParser.java۞1093۩private void expressionDefList(Command cmd, Expressions expressions, Strings columns) throws SQLException{
smallsql/database/SQLParser.java۞1094۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞1095۩if(token.value != SQLTokenizer.PARENTHESIS_L) throw createSyntaxError(token, MISSING_PARENTHESIS_L );
smallsql/database/SQLParser.java۞1096۩Loop:
smallsql/database/SQLParser.java۞1097۩while(true){
smallsql/database/SQLParser.java۞1098۩int offset = token.offset + token.length;
smallsql/database/SQLParser.java۞1099۩token = nextToken();
smallsql/database/SQLParser.java۞1100۩if(token != null) offset = token.offset;
smallsql/database/SQLParser.java۞1101۩previousToken();
smallsql/database/SQLParser.java۞1103۩expressions.add( expression(cmd, 0) );
smallsql/database/SQLParser.java۞1104۩SQLToken last = lastToken();
smallsql/database/SQLParser.java۞1105۩int length = last.offset + last.length - offset;
smallsql/database/SQLParser.java۞1106۩columns.add( new String( sql, offset, length ) );
smallsql/database/SQLParser.java۞1108۩token = nextToken(MISSING_COMMA_PARENTHESIS);
smallsql/database/SQLParser.java۞1109۩switch(token.value){
smallsql/database/SQLParser.java۞1110۩case SQLTokenizer.PARENTHESIS_R:
smallsql/database/SQLParser.java۞1111۩break Loop;
smallsql/database/SQLParser.java۞1112۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞1113۩continue;
smallsql/database/SQLParser.java۞1114۩default:
smallsql/database/SQLParser.java۞1115۩throw new Error();
smallsql/database/SQLParser.java۞1116۩}
smallsql/database/SQLParser.java۞1117۩}
smallsql/database/SQLParser.java۞1118۩}
smallsql/database/SQLParser.java۞1126۩private Expression expression(Command cmd, int previousOperationLevel) throws SQLException{
smallsql/database/SQLParser.java۞1127۩SQLToken token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞1128۩Expression leftExpr;
smallsql/database/SQLParser.java۞1129۩switch(token.value){
smallsql/database/SQLParser.java۞1130۩case SQLTokenizer.NOT:
smallsql/database/SQLParser.java۞1131۩leftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.NOT      / 10), ExpressionArithmetic.NOT);
smallsql/database/SQLParser.java۞1132۩break;
smallsql/database/SQLParser.java۞1133۩case SQLTokenizer.MINUS:
smallsql/database/SQLParser.java۞1134۩leftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.NEGATIVE / 10), ExpressionArithmetic.NEGATIVE);
smallsql/database/SQLParser.java۞1135۩break;
smallsql/database/SQLParser.java۞1136۩case SQLTokenizer.TILDE:
smallsql/database/SQLParser.java۞1137۩leftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.BIT_NOT  / 10), ExpressionArithmetic.BIT_NOT);
smallsql/database/SQLParser.java۞1138۩break;
smallsql/database/SQLParser.java۞1139۩case SQLTokenizer.PARENTHESIS_L:
smallsql/database/SQLParser.java۞1140۩leftExpr = expression( cmd, 0);
smallsql/database/SQLParser.java۞1141۩token = nextToken(MISSING_PARENTHESIS_R);
smallsql/database/SQLParser.java۞1142۩break;
smallsql/database/SQLParser.java۞1143۩default:
smallsql/database/SQLParser.java۞1144۩leftExpr = expressionSingle( cmd, token);
smallsql/database/SQLParser.java۞1145۩}
smallsql/database/SQLParser.java۞1146۩boolean isNot = false;
smallsql/database/SQLParser.java۞1147۩while((token = nextToken()) != null){
smallsql/database/SQLParser.java۞1148۩Expression rightExpr;
smallsql/database/SQLParser.java۞1149۩int operation = ExpressionArithmetic.getOperationFromToken(token.value);
smallsql/database/SQLParser.java۞1150۩int level = operation / 10;
smallsql/database/SQLParser.java۞1151۩if(previousOperationLevel >= level){
smallsql/database/SQLParser.java۞1152۩previousToken();
smallsql/database/SQLParser.java۞1153۩return leftExpr;
smallsql/database/SQLParser.java۞1154۩}
smallsql/database/SQLParser.java۞1155۩switch(token.value){
smallsql/database/SQLParser.java۞1156۩case SQLTokenizer.PLUS:
smallsql/database/SQLParser.java۞1157۩case SQLTokenizer.MINUS:
smallsql/database/SQLParser.java۞1158۩case SQLTokenizer.ASTERISK:
smallsql/database/SQLParser.java۞1159۩case SQLTokenizer.SLACH:
smallsql/database/SQLParser.java۞1160۩case SQLTokenizer.PERCENT:
smallsql/database/SQLParser.java۞1161۩case SQLTokenizer.EQUALS:
smallsql/database/SQLParser.java۞1162۩case SQLTokenizer.LESSER:
smallsql/database/SQLParser.java۞1163۩case SQLTokenizer.LESSER_EQU:
smallsql/database/SQLParser.java۞1164۩case SQLTokenizer.GREATER:
smallsql/database/SQLParser.java۞1165۩case SQLTokenizer.GREATER_EQU:
smallsql/database/SQLParser.java۞1166۩case SQLTokenizer.UNEQUALS:
smallsql/database/SQLParser.java۞1167۩case SQLTokenizer.LIKE:
smallsql/database/SQLParser.java۞1168۩case SQLTokenizer.OR:
smallsql/database/SQLParser.java۞1169۩case SQLTokenizer.AND:
smallsql/database/SQLParser.java۞1170۩case SQLTokenizer.BIT_AND:
smallsql/database/SQLParser.java۞1171۩case SQLTokenizer.BIT_OR:
smallsql/database/SQLParser.java۞1172۩case SQLTokenizer.BIT_XOR:
smallsql/database/SQLParser.java۞1173۩rightExpr = expression( cmd, level );
smallsql/database/SQLParser.java۞1174۩leftExpr = new ExpressionArithmetic( leftExpr, rightExpr, operation );
smallsql/database/SQLParser.java۞1175۩break;
smallsql/database/SQLParser.java۞1176۩case SQLTokenizer.BETWEEN:
smallsql/database/SQLParser.java۞1177۩rightExpr = expression( cmd, ExpressionArithmetic.AND );
smallsql/database/SQLParser.java۞1178۩nextToken( MISSING_AND );
smallsql/database/SQLParser.java۞1179۩Expression rightExpr2 = expression( cmd, level );
smallsql/database/SQLParser.java۞1180۩leftExpr = new ExpressionArithmetic( leftExpr, rightExpr, rightExpr2, operation );
smallsql/database/SQLParser.java۞1181۩break;
smallsql/database/SQLParser.java۞1182۩case SQLTokenizer.IN:
smallsql/database/SQLParser.java۞1183۩nextToken(MISSING_PARENTHESIS_L);
smallsql/database/SQLParser.java۞1184۩token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞1185۩if(token.value == SQLTokenizer.SELECT){
smallsql/database/SQLParser.java۞1186۩CommandSelect cmdSel = select();
smallsql/database/SQLParser.java۞1187۩leftExpr = new ExpressionInSelect( con, leftExpr, cmdSel, operation );
smallsql/database/SQLParser.java۞1188۩nextToken(MISSING_PARENTHESIS_R);
smallsql/database/SQLParser.java۞1189۩}else{
smallsql/database/SQLParser.java۞1190۩previousToken();
smallsql/database/SQLParser.java۞1191۩Expressions list = expressionParenthesisList( cmd );
smallsql/database/SQLParser.java۞1192۩leftExpr = new ExpressionArithmetic( leftExpr, list, operation );
smallsql/database/SQLParser.java۞1193۩}
smallsql/database/SQLParser.java۞1194۩break;
smallsql/database/SQLParser.java۞1195۩case SQLTokenizer.IS:
smallsql/database/SQLParser.java۞1196۩token = nextToken(MISSING_NOT_NULL);
smallsql/database/SQLParser.java۞1197۩if(token.value == SQLTokenizer.NOT){
smallsql/database/SQLParser.java۞1198۩nextToken(MISSING_NULL);
smallsql/database/SQLParser.java۞1199۩operation++;
smallsql/database/SQLParser.java۞1200۩}
smallsql/database/SQLParser.java۞1201۩leftExpr = new ExpressionArithmetic( leftExpr, operation );
smallsql/database/SQLParser.java۞1202۩break;
smallsql/database/SQLParser.java۞1203۩case SQLTokenizer.NOT:
smallsql/database/SQLParser.java۞1204۩token = nextToken(MISSING_BETWEEN_IN);
smallsql/database/SQLParser.java۞1205۩previousToken();
smallsql/database/SQLParser.java۞1206۩isNot = true;
smallsql/database/SQLParser.java۞1207۩continue;
smallsql/database/SQLParser.java۞1208۩default:
smallsql/database/SQLParser.java۞1209۩previousToken();
smallsql/database/SQLParser.java۞1210۩return leftExpr;
smallsql/database/SQLParser.java۞1211۩}
smallsql/database/SQLParser.java۞1212۩if(isNot){
smallsql/database/SQLParser.java۞1213۩isNot = false;
smallsql/database/SQLParser.java۞1214۩leftExpr =  new ExpressionArithmetic( leftExpr, ExpressionArithmetic.NOT);
smallsql/database/SQLParser.java۞1215۩}
smallsql/database/SQLParser.java۞1216۩}
smallsql/database/SQLParser.java۞1217۩previousToken();
smallsql/database/SQLParser.java۞1218۩return leftExpr;
smallsql/database/SQLParser.java۞1219۩}
smallsql/database/SQLParser.java۞1226۩private Expression expressionSingle(Command cmd, SQLToken token) throws SQLException{
smallsql/database/SQLParser.java۞1227۩boolean isMinus = false;
smallsql/database/SQLParser.java۞1228۩if(token != null){
smallsql/database/SQLParser.java۞1229۩switch(token.value){
smallsql/database/SQLParser.java۞1230۩case SQLTokenizer.NULL:
smallsql/database/SQLParser.java۞1231۩return new ExpressionValue( null, SQLTokenizer.NULL );
smallsql/database/SQLParser.java۞1232۩case SQLTokenizer.STRING:
smallsql/database/SQLParser.java۞1233۩return new ExpressionValue( token.getName(null), SQLTokenizer.VARCHAR );
smallsql/database/SQLParser.java۞1234۩case SQLTokenizer.IDENTIFIER:
smallsql/database/SQLParser.java۞1235۩{
smallsql/database/SQLParser.java۞1236۩String name = getIdentifier( token );
smallsql/database/SQLParser.java۞1237۩ExpressionName expr =  new ExpressionName( name );
smallsql/database/SQLParser.java۞1238۩SQLToken token2 = nextToken();
smallsql/database/SQLParser.java۞1239۩if(token2 != null && token2.value == SQLTokenizer.POINT){
smallsql/database/SQLParser.java۞1240۩expr.setNameAfterTableAlias( nextIdentifier() );
smallsql/database/SQLParser.java۞1241۩}else{
smallsql/database/SQLParser.java۞1242۩previousToken();
smallsql/database/SQLParser.java۞1243۩}
smallsql/database/SQLParser.java۞1244۩return expr;
smallsql/database/SQLParser.java۞1245۩}
smallsql/database/SQLParser.java۞1246۩case SQLTokenizer.TRUE:
smallsql/database/SQLParser.java۞1247۩return new ExpressionValue( Boolean.TRUE, SQLTokenizer.BOOLEAN );
smallsql/database/SQLParser.java۞1248۩case SQLTokenizer.FALSE:
smallsql/database/SQLParser.java۞1249۩return new ExpressionValue( Boolean.FALSE, SQLTokenizer.BOOLEAN );
smallsql/database/SQLParser.java۞1250۩case SQLTokenizer.ESCAPE_L:{
smallsql/database/SQLParser.java۞1251۩token = nextToken(COMMANDS_ESCAPE);
smallsql/database/SQLParser.java۞1252۩SQLToken para = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞1253۩Expression expr;
smallsql/database/SQLParser.java۞1254۩switch(token.value){
smallsql/database/SQLParser.java۞1255۩case SQLTokenizer.D:
smallsql/database/SQLParser.java۞1256۩expr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.DATE), SQLTokenizer.DATE );
smallsql/database/SQLParser.java۞1257۩break;
smallsql/database/SQLParser.java۞1258۩case SQLTokenizer.T:
smallsql/database/SQLParser.java۞1259۩expr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.TIME), SQLTokenizer.TIME );
smallsql/database/SQLParser.java۞1260۩break;
smallsql/database/SQLParser.java۞1261۩case SQLTokenizer.TS:
smallsql/database/SQLParser.java۞1262۩expr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.TIMESTAMP), SQLTokenizer.TIMESTAMP );
smallsql/database/SQLParser.java۞1263۩break;
smallsql/database/SQLParser.java۞1264۩case SQLTokenizer.FN:
smallsql/database/SQLParser.java۞1265۩nextToken(MISSING_PARENTHESIS_L);
smallsql/database/SQLParser.java۞1266۩expr = function(cmd, para, true);
smallsql/database/SQLParser.java۞1267۩break;
smallsql/database/SQLParser.java۞1268۩case SQLTokenizer.CALL:
smallsql/database/SQLParser.java۞1269۩throw new java.lang.UnsupportedOperationException("call escape sequence");
smallsql/database/SQLParser.java۞1270۩default: throw new Error();
smallsql/database/SQLParser.java۞1271۩}
smallsql/database/SQLParser.java۞1272۩token = nextToken( ESCAPE_MISSING_CLOSE );
smallsql/database/SQLParser.java۞1273۩return expr;
smallsql/database/SQLParser.java۞1274۩}
smallsql/database/SQLParser.java۞1275۩case SQLTokenizer.QUESTION:
smallsql/database/SQLParser.java۞1276۩ExpressionValue param = new ExpressionValue();
smallsql/database/SQLParser.java۞1277۩cmd.addParameter( param );
smallsql/database/SQLParser.java۞1278۩return param;
smallsql/database/SQLParser.java۞1279۩case SQLTokenizer.CASE:
smallsql/database/SQLParser.java۞1280۩return caseExpr(cmd);
smallsql/database/SQLParser.java۞1281۩case SQLTokenizer.MINUS:
smallsql/database/SQLParser.java۞1282۩case SQLTokenizer.PLUS:
smallsql/database/SQLParser.java۞1284۩do{
smallsql/database/SQLParser.java۞1285۩if(token.value == SQLTokenizer.MINUS)
smallsql/database/SQLParser.java۞1286۩isMinus = !isMinus;
smallsql/database/SQLParser.java۞1287۩token = nextToken();
smallsql/database/SQLParser.java۞1288۩if(token == null) throw createSyntaxError( token, MISSING_EXPRESSION );
smallsql/database/SQLParser.java۞1289۩}while(token.value == SQLTokenizer.MINUS || token.value == SQLTokenizer.PLUS);
smallsql/database/SQLParser.java۞1291۩default:
smallsql/database/SQLParser.java۞1292۩SQLToken token2 = nextToken();
smallsql/database/SQLParser.java۞1293۩if(token2 != null && token2.value == SQLTokenizer.PARENTHESIS_L){
smallsql/database/SQLParser.java۞1294۩if(isMinus)
smallsql/database/SQLParser.java۞1295۩return new ExpressionArithmetic( function( cmd, token, false ),  ExpressionArithmetic.NEGATIVE );
smallsql/database/SQLParser.java۞1296۩return function( cmd, token, false );
smallsql/database/SQLParser.java۞1297۩}else{
smallsql/database/SQLParser.java۞1299۩char chr1 = sql[ token.offset ];
smallsql/database/SQLParser.java۞1300۩if(chr1 == '$'){
smallsql/database/SQLParser.java۞1301۩previousToken();
smallsql/database/SQLParser.java۞1302۩String tok = new String(sql, token.offset+1, token.length-1);
smallsql/database/SQLParser.java۞1303۩if(isMinus) tok = "-" + tok;
smallsql/database/SQLParser.java۞1304۩return new ExpressionValue( new Money(Double.parseDouble(tok)), SQLTokenizer.MONEY );
smallsql/database/SQLParser.java۞1305۩}
smallsql/database/SQLParser.java۞1306۩String tok = new String(sql, token.offset, token.length);
smallsql/database/SQLParser.java۞1307۩if((chr1 >= '0' && '9' >= chr1) || chr1 == '.'){
smallsql/database/SQLParser.java۞1308۩previousToken();
smallsql/database/SQLParser.java۞1310۩if(token.length>1 && (sql[ token.offset +1 ] | 0x20) == 'x'){
smallsql/database/SQLParser.java۞1312۩if(isMinus) {
smallsql/database/SQLParser.java۞1313۩throw createSyntaxError(token, Language.STXADD_OPER_MINUS);
smallsql/database/SQLParser.java۞1314۩}
smallsql/database/SQLParser.java۞1315۩return new ExpressionValue( Utils.hex2bytes( sql, token.offset+2, token.length-2), SQLTokenizer.VARBINARY );
smallsql/database/SQLParser.java۞1316۩}
smallsql/database/SQLParser.java۞1317۩if(isMinus) tok = "-" + tok;
smallsql/database/SQLParser.java۞1318۩if(Utils.indexOf( '.', sql, token.offset, token.length ) >= 0 ||
smallsql/database/SQLParser.java۞1319۩Utils.indexOf( 'e', sql, token.offset, token.length ) >= 0){
smallsql/database/SQLParser.java۞1320۩return new ExpressionValue( new Double(tok), SQLTokenizer.DOUBLE );
smallsql/database/SQLParser.java۞1321۩}else{
smallsql/database/SQLParser.java۞1322۩try{
smallsql/database/SQLParser.java۞1323۩return new ExpressionValue( new Integer(tok), SQLTokenizer.INT );
smallsql/database/SQLParser.java۞1324۩}catch(NumberFormatException e){
smallsql/database/SQLParser.java۞1325۩return new ExpressionValue( new Long(tok), SQLTokenizer.BIGINT );
smallsql/database/SQLParser.java۞1326۩}
smallsql/database/SQLParser.java۞1327۩}
smallsql/database/SQLParser.java۞1328۩}else{
smallsql/database/SQLParser.java۞1330۩checkValidIdentifier( tok, token );
smallsql/database/SQLParser.java۞1331۩ExpressionName expr = new ExpressionName(tok);
smallsql/database/SQLParser.java۞1332۩if(token2 != null && token2.value == SQLTokenizer.POINT){
smallsql/database/SQLParser.java۞1333۩expr.setNameAfterTableAlias( nextIdentifier() );
smallsql/database/SQLParser.java۞1334۩}else{
smallsql/database/SQLParser.java۞1335۩previousToken();
smallsql/database/SQLParser.java۞1336۩}
smallsql/database/SQLParser.java۞1337۩if(isMinus)
smallsql/database/SQLParser.java۞1338۩return new ExpressionArithmetic( expr,  ExpressionArithmetic.NEGATIVE );
smallsql/database/SQLParser.java۞1339۩return expr;
smallsql/database/SQLParser.java۞1340۩}
smallsql/database/SQLParser.java۞1341۩}
smallsql/database/SQLParser.java۞1342۩}
smallsql/database/SQLParser.java۞1343۩}
smallsql/database/SQLParser.java۞1344۩return null;
smallsql/database/SQLParser.java۞1345۩}
smallsql/database/SQLParser.java۞1348۩ExpressionFunctionCase caseExpr(final Command cmd) throws SQLException{
smallsql/database/SQLParser.java۞1349۩ExpressionFunctionCase expr = new ExpressionFunctionCase();
smallsql/database/SQLParser.java۞1350۩SQLToken token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞1352۩Expression input = null;
smallsql/database/SQLParser.java۞1353۩if(token.value != SQLTokenizer.WHEN){
smallsql/database/SQLParser.java۞1355۩previousToken();
smallsql/database/SQLParser.java۞1356۩input = expression(cmd, 0);
smallsql/database/SQLParser.java۞1357۩token = nextToken(MISSING_WHEN_ELSE_END);
smallsql/database/SQLParser.java۞1358۩}
smallsql/database/SQLParser.java۞1360۩while(true){
smallsql/database/SQLParser.java۞1361۩switch(token.value){
smallsql/database/SQLParser.java۞1362۩case SQLTokenizer.WHEN:
smallsql/database/SQLParser.java۞1363۩Expression condition = expression(cmd, 0);
smallsql/database/SQLParser.java۞1364۩if(input != null){
smallsql/database/SQLParser.java۞1366۩condition = new ExpressionArithmetic( input, condition, ExpressionArithmetic.EQUALS);
smallsql/database/SQLParser.java۞1367۩}
smallsql/database/SQLParser.java۞1368۩nextToken(MISSING_THEN);
smallsql/database/SQLParser.java۞1369۩Expression result = expression(cmd, 0);
smallsql/database/SQLParser.java۞1370۩expr.addCase(condition, result);
smallsql/database/SQLParser.java۞1371۩break;
smallsql/database/SQLParser.java۞1372۩case SQLTokenizer.ELSE:
smallsql/database/SQLParser.java۞1373۩expr.setElseResult(expression(cmd, 0));
smallsql/database/SQLParser.java۞1374۩break;
smallsql/database/SQLParser.java۞1375۩case SQLTokenizer.END:
smallsql/database/SQLParser.java۞1376۩expr.setEnd();
smallsql/database/SQLParser.java۞1377۩return expr;
smallsql/database/SQLParser.java۞1378۩default:
smallsql/database/SQLParser.java۞1379۩throw new Error();
smallsql/database/SQLParser.java۞1380۩}
smallsql/database/SQLParser.java۞1381۩token = nextToken(MISSING_WHEN_ELSE_END);
smallsql/database/SQLParser.java۞1382۩}
smallsql/database/SQLParser.java۞1383۩}
smallsql/database/SQLParser.java۞1391۩private Expression function( Command cmd, SQLToken token, boolean isEscape ) throws SQLException{
smallsql/database/SQLParser.java۞1392۩Expression expr;
smallsql/database/SQLParser.java۞1393۩switch(token.value){
smallsql/database/SQLParser.java۞1394۩case SQLTokenizer.CONVERT:{
smallsql/database/SQLParser.java۞1395۩Column col;
smallsql/database/SQLParser.java۞1396۩Expression style = null;
smallsql/database/SQLParser.java۞1397۩if(isEscape){
smallsql/database/SQLParser.java۞1398۩expr = expression( cmd, 0);
smallsql/database/SQLParser.java۞1399۩nextToken(MISSING_COMMA);
smallsql/database/SQLParser.java۞1400۩col = datatype(isEscape);
smallsql/database/SQLParser.java۞1401۩}else{
smallsql/database/SQLParser.java۞1402۩col = datatype(isEscape);
smallsql/database/SQLParser.java۞1403۩nextToken(MISSING_COMMA);
smallsql/database/SQLParser.java۞1404۩expr = expression( cmd, 0);
smallsql/database/SQLParser.java۞1405۩token = nextToken(MISSING_COMMA_PARENTHESIS);
smallsql/database/SQLParser.java۞1406۩if(token.value == SQLTokenizer.COMMA){
smallsql/database/SQLParser.java۞1407۩style = expression( cmd, 0);
smallsql/database/SQLParser.java۞1408۩}else
smallsql/database/SQLParser.java۞1409۩previousToken();
smallsql/database/SQLParser.java۞1410۩}
smallsql/database/SQLParser.java۞1411۩nextToken(MISSING_PARENTHESIS_R);
smallsql/database/SQLParser.java۞1412۩return new ExpressionFunctionConvert( col, expr, style );
smallsql/database/SQLParser.java۞1413۩}
smallsql/database/SQLParser.java۞1414۩case SQLTokenizer.CAST:
smallsql/database/SQLParser.java۞1415۩expr = expression( cmd, 0);
smallsql/database/SQLParser.java۞1416۩nextToken(MISSING_AS);
smallsql/database/SQLParser.java۞1417۩Column col = datatype(false);
smallsql/database/SQLParser.java۞1418۩nextToken(MISSING_PARENTHESIS_R);
smallsql/database/SQLParser.java۞1419۩return new ExpressionFunctionConvert( col, expr, null );
smallsql/database/SQLParser.java۞1420۩case SQLTokenizer.TIMESTAMPDIFF:
smallsql/database/SQLParser.java۞1421۩token = nextToken(MISSING_INTERVALS);
smallsql/database/SQLParser.java۞1422۩nextToken(MISSING_COMMA);
smallsql/database/SQLParser.java۞1423۩expr = expression( cmd, 0);
smallsql/database/SQLParser.java۞1424۩nextToken(MISSING_COMMA);
smallsql/database/SQLParser.java۞1425۩expr = new ExpressionFunctionTimestampDiff( token.value, expr, expression( cmd, 0));
smallsql/database/SQLParser.java۞1426۩nextToken(MISSING_PARENTHESIS_R);
smallsql/database/SQLParser.java۞1427۩return expr;
smallsql/database/SQLParser.java۞1428۩case SQLTokenizer.TIMESTAMPADD:
smallsql/database/SQLParser.java۞1429۩token = nextToken(MISSING_INTERVALS);
smallsql/database/SQLParser.java۞1430۩nextToken(MISSING_COMMA);
smallsql/database/SQLParser.java۞1431۩expr = expression( cmd, 0);
smallsql/database/SQLParser.java۞1432۩nextToken(MISSING_COMMA);
smallsql/database/SQLParser.java۞1433۩expr = new ExpressionFunctionTimestampAdd( token.value, expr, expression( cmd, 0));
smallsql/database/SQLParser.java۞1434۩nextToken(MISSING_PARENTHESIS_R);
smallsql/database/SQLParser.java۞1435۩return expr;
smallsql/database/SQLParser.java۞1436۩}
smallsql/database/SQLParser.java۞1437۩Expressions paramList = expressionParenthesisList(cmd);
smallsql/database/SQLParser.java۞1438۩int paramCount = paramList.size();
smallsql/database/SQLParser.java۞1439۩Expression[] params = paramList.toArray();
smallsql/database/SQLParser.java۞1440۩boolean invalidParamCount;
smallsql/database/SQLParser.java۞1441۩switch(token.value){
smallsql/database/SQLParser.java۞1443۩case SQLTokenizer.ABS:
smallsql/database/SQLParser.java۞1444۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1445۩expr = new ExpressionFunctionAbs();
smallsql/database/SQLParser.java۞1446۩break;
smallsql/database/SQLParser.java۞1447۩case SQLTokenizer.ACOS:
smallsql/database/SQLParser.java۞1448۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1449۩expr = new ExpressionFunctionACos();
smallsql/database/SQLParser.java۞1450۩break;
smallsql/database/SQLParser.java۞1451۩case SQLTokenizer.ASIN:
smallsql/database/SQLParser.java۞1452۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1453۩expr = new ExpressionFunctionASin();
smallsql/database/SQLParser.java۞1454۩break;
smallsql/database/SQLParser.java۞1455۩case SQLTokenizer.ATAN:
smallsql/database/SQLParser.java۞1456۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1457۩expr = new ExpressionFunctionATan();
smallsql/database/SQLParser.java۞1458۩break;
smallsql/database/SQLParser.java۞1459۩case SQLTokenizer.ATAN2:
smallsql/database/SQLParser.java۞1460۩invalidParamCount = (paramCount != 2);
smallsql/database/SQLParser.java۞1461۩expr = new ExpressionFunctionATan2();
smallsql/database/SQLParser.java۞1462۩break;
smallsql/database/SQLParser.java۞1463۩case SQLTokenizer.CEILING:
smallsql/database/SQLParser.java۞1464۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1465۩expr = new ExpressionFunctionCeiling();
smallsql/database/SQLParser.java۞1466۩break;
smallsql/database/SQLParser.java۞1467۩case SQLTokenizer.COS:
smallsql/database/SQLParser.java۞1468۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1469۩expr = new ExpressionFunctionCos();
smallsql/database/SQLParser.java۞1470۩break;
smallsql/database/SQLParser.java۞1471۩case SQLTokenizer.COT:
smallsql/database/SQLParser.java۞1472۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1473۩expr = new ExpressionFunctionCot();
smallsql/database/SQLParser.java۞1474۩break;
smallsql/database/SQLParser.java۞1475۩case SQLTokenizer.DEGREES:
smallsql/database/SQLParser.java۞1476۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1477۩expr = new ExpressionFunctionDegrees();
smallsql/database/SQLParser.java۞1478۩break;
smallsql/database/SQLParser.java۞1479۩case SQLTokenizer.EXP:
smallsql/database/SQLParser.java۞1480۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1481۩expr = new ExpressionFunctionExp();
smallsql/database/SQLParser.java۞1482۩break;
smallsql/database/SQLParser.java۞1483۩case SQLTokenizer.FLOOR:
smallsql/database/SQLParser.java۞1484۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1485۩expr = new ExpressionFunctionFloor();
smallsql/database/SQLParser.java۞1486۩break;
smallsql/database/SQLParser.java۞1487۩case SQLTokenizer.LOG:
smallsql/database/SQLParser.java۞1488۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1489۩expr = new ExpressionFunctionLog();
smallsql/database/SQLParser.java۞1490۩break;
smallsql/database/SQLParser.java۞1491۩case SQLTokenizer.LOG10:
smallsql/database/SQLParser.java۞1492۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1493۩expr = new ExpressionFunctionLog10();
smallsql/database/SQLParser.java۞1494۩break;
smallsql/database/SQLParser.java۞1495۩case SQLTokenizer.MOD:
smallsql/database/SQLParser.java۞1496۩invalidParamCount = (paramCount != 2);
smallsql/database/SQLParser.java۞1497۩expr = new ExpressionFunctionMod();
smallsql/database/SQLParser.java۞1498۩break;
smallsql/database/SQLParser.java۞1499۩case SQLTokenizer.PI:
smallsql/database/SQLParser.java۞1500۩invalidParamCount = (paramCount != 0);
smallsql/database/SQLParser.java۞1501۩expr = new ExpressionFunctionPI();
smallsql/database/SQLParser.java۞1502۩break;
smallsql/database/SQLParser.java۞1503۩case SQLTokenizer.POWER:
smallsql/database/SQLParser.java۞1504۩invalidParamCount = (paramCount != 2);
smallsql/database/SQLParser.java۞1505۩expr = new ExpressionFunctionPower();
smallsql/database/SQLParser.java۞1506۩break;
smallsql/database/SQLParser.java۞1507۩case SQLTokenizer.RADIANS:
smallsql/database/SQLParser.java۞1508۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1509۩expr = new ExpressionFunctionRadians();
smallsql/database/SQLParser.java۞1510۩break;
smallsql/database/SQLParser.java۞1511۩case SQLTokenizer.RAND:
smallsql/database/SQLParser.java۞1512۩invalidParamCount =  (paramCount != 0) && (paramCount != 1);
smallsql/database/SQLParser.java۞1513۩expr = new ExpressionFunctionRand();
smallsql/database/SQLParser.java۞1514۩break;
smallsql/database/SQLParser.java۞1515۩case SQLTokenizer.ROUND:
smallsql/database/SQLParser.java۞1516۩invalidParamCount =  (paramCount != 2);
smallsql/database/SQLParser.java۞1517۩expr = new ExpressionFunctionRound();
smallsql/database/SQLParser.java۞1518۩break;
smallsql/database/SQLParser.java۞1519۩case SQLTokenizer.SIN:
smallsql/database/SQLParser.java۞1520۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1521۩expr = new ExpressionFunctionSin();
smallsql/database/SQLParser.java۞1522۩break;
smallsql/database/SQLParser.java۞1523۩case SQLTokenizer.SIGN:
smallsql/database/SQLParser.java۞1524۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1525۩expr = new ExpressionFunctionSign();
smallsql/database/SQLParser.java۞1526۩break;
smallsql/database/SQLParser.java۞1527۩case SQLTokenizer.SQRT:
smallsql/database/SQLParser.java۞1528۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1529۩expr = new ExpressionFunctionSqrt();
smallsql/database/SQLParser.java۞1530۩break;
smallsql/database/SQLParser.java۞1531۩case SQLTokenizer.TAN:
smallsql/database/SQLParser.java۞1532۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1533۩expr = new ExpressionFunctionTan();
smallsql/database/SQLParser.java۞1534۩break;
smallsql/database/SQLParser.java۞1535۩case SQLTokenizer.TRUNCATE:
smallsql/database/SQLParser.java۞1536۩invalidParamCount =  (paramCount != 2);
smallsql/database/SQLParser.java۞1537۩expr = new ExpressionFunctionTruncate();
smallsql/database/SQLParser.java۞1538۩break;
smallsql/database/SQLParser.java۞1541۩case SQLTokenizer.ASCII:
smallsql/database/SQLParser.java۞1542۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1543۩expr = new ExpressionFunctionAscii();
smallsql/database/SQLParser.java۞1544۩break;
smallsql/database/SQLParser.java۞1545۩case SQLTokenizer.BITLEN:
smallsql/database/SQLParser.java۞1546۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1547۩expr = new ExpressionFunctionBitLen();
smallsql/database/SQLParser.java۞1548۩break;
smallsql/database/SQLParser.java۞1549۩case SQLTokenizer.CHARLEN:
smallsql/database/SQLParser.java۞1550۩case SQLTokenizer.CHARACTLEN:
smallsql/database/SQLParser.java۞1551۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1552۩expr = new ExpressionFunctionCharLen();
smallsql/database/SQLParser.java۞1553۩break;
smallsql/database/SQLParser.java۞1554۩case SQLTokenizer.CHAR:
smallsql/database/SQLParser.java۞1555۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1556۩expr = new ExpressionFunctionChar();
smallsql/database/SQLParser.java۞1557۩break;
smallsql/database/SQLParser.java۞1558۩case SQLTokenizer.CONCAT:
smallsql/database/SQLParser.java۞1559۩if(paramCount != 2){
smallsql/database/SQLParser.java۞1560۩invalidParamCount = true;
smallsql/database/SQLParser.java۞1561۩expr = null;
smallsql/database/SQLParser.java۞1562۩break;
smallsql/database/SQLParser.java۞1563۩}
smallsql/database/SQLParser.java۞1564۩invalidParamCount = false;
smallsql/database/SQLParser.java۞1565۩expr = new ExpressionArithmetic( params[0], params[1], ExpressionArithmetic.ADD);
smallsql/database/SQLParser.java۞1566۩break;
smallsql/database/SQLParser.java۞1567۩case SQLTokenizer.DIFFERENCE:
smallsql/database/SQLParser.java۞1568۩invalidParamCount = (paramCount != 2);
smallsql/database/SQLParser.java۞1569۩expr = new ExpressionFunctionDifference();
smallsql/database/SQLParser.java۞1570۩break;
smallsql/database/SQLParser.java۞1571۩case SQLTokenizer.INSERT:
smallsql/database/SQLParser.java۞1572۩invalidParamCount = (paramCount != 4);
smallsql/database/SQLParser.java۞1573۩expr = new ExpressionFunctionInsert();
smallsql/database/SQLParser.java۞1574۩break;
smallsql/database/SQLParser.java۞1575۩case SQLTokenizer.LCASE:
smallsql/database/SQLParser.java۞1576۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1577۩expr = new ExpressionFunctionLCase();
smallsql/database/SQLParser.java۞1578۩break;
smallsql/database/SQLParser.java۞1579۩case SQLTokenizer.LEFT:
smallsql/database/SQLParser.java۞1580۩invalidParamCount = (paramCount != 2);
smallsql/database/SQLParser.java۞1581۩expr = new ExpressionFunctionLeft();
smallsql/database/SQLParser.java۞1582۩break;
smallsql/database/SQLParser.java۞1583۩case SQLTokenizer.LENGTH:
smallsql/database/SQLParser.java۞1584۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1585۩expr = new ExpressionFunctionLength();
smallsql/database/SQLParser.java۞1586۩break;
smallsql/database/SQLParser.java۞1587۩case SQLTokenizer.LOCATE:
smallsql/database/SQLParser.java۞1588۩invalidParamCount = (paramCount != 2) && (paramCount != 3);
smallsql/database/SQLParser.java۞1589۩expr = new ExpressionFunctionLocate();
smallsql/database/SQLParser.java۞1590۩break;
smallsql/database/SQLParser.java۞1591۩case SQLTokenizer.LTRIM:
smallsql/database/SQLParser.java۞1592۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1593۩expr = new ExpressionFunctionLTrim();
smallsql/database/SQLParser.java۞1594۩break;
smallsql/database/SQLParser.java۞1595۩case SQLTokenizer.OCTETLEN:
smallsql/database/SQLParser.java۞1596۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1597۩expr = new ExpressionFunctionOctetLen();
smallsql/database/SQLParser.java۞1598۩break;
smallsql/database/SQLParser.java۞1599۩case SQLTokenizer.REPEAT:
smallsql/database/SQLParser.java۞1600۩invalidParamCount = (paramCount != 2);
smallsql/database/SQLParser.java۞1601۩expr = new ExpressionFunctionRepeat();
smallsql/database/SQLParser.java۞1602۩break;
smallsql/database/SQLParser.java۞1603۩case SQLTokenizer.REPLACE:
smallsql/database/SQLParser.java۞1604۩invalidParamCount = (paramCount != 3);
smallsql/database/SQLParser.java۞1605۩expr = new ExpressionFunctionReplace();
smallsql/database/SQLParser.java۞1606۩break;
smallsql/database/SQLParser.java۞1607۩case SQLTokenizer.RIGHT:
smallsql/database/SQLParser.java۞1608۩invalidParamCount = (paramCount != 2);
smallsql/database/SQLParser.java۞1609۩expr = new ExpressionFunctionRight();
smallsql/database/SQLParser.java۞1610۩break;
smallsql/database/SQLParser.java۞1611۩case SQLTokenizer.RTRIM:
smallsql/database/SQLParser.java۞1612۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1613۩expr = new ExpressionFunctionRTrim();
smallsql/database/SQLParser.java۞1614۩break;
smallsql/database/SQLParser.java۞1615۩case SQLTokenizer.SPACE:
smallsql/database/SQLParser.java۞1616۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1617۩expr = new ExpressionFunctionSpace();
smallsql/database/SQLParser.java۞1618۩break;
smallsql/database/SQLParser.java۞1619۩case SQLTokenizer.SOUNDEX:
smallsql/database/SQLParser.java۞1620۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1621۩expr = new ExpressionFunctionSoundex();
smallsql/database/SQLParser.java۞1622۩break;
smallsql/database/SQLParser.java۞1623۩case SQLTokenizer.SUBSTRING:
smallsql/database/SQLParser.java۞1624۩invalidParamCount = (paramCount != 3);
smallsql/database/SQLParser.java۞1625۩expr = new ExpressionFunctionSubstring();
smallsql/database/SQLParser.java۞1626۩break;
smallsql/database/SQLParser.java۞1627۩case SQLTokenizer.UCASE:
smallsql/database/SQLParser.java۞1628۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1629۩expr = new ExpressionFunctionUCase();
smallsql/database/SQLParser.java۞1630۩break;
smallsql/database/SQLParser.java۞1633۩case SQLTokenizer.CURDATE:
smallsql/database/SQLParser.java۞1634۩case SQLTokenizer.CURRENTDATE:
smallsql/database/SQLParser.java۞1635۩invalidParamCount = (paramCount != 0);
smallsql/database/SQLParser.java۞1636۩expr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.DATE), SQLTokenizer.DATE);
smallsql/database/SQLParser.java۞1637۩break;
smallsql/database/SQLParser.java۞1638۩case SQLTokenizer.CURTIME:
smallsql/database/SQLParser.java۞1639۩invalidParamCount = (paramCount != 0);
smallsql/database/SQLParser.java۞1640۩expr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.TIME), SQLTokenizer.TIME);
smallsql/database/SQLParser.java۞1641۩break;
smallsql/database/SQLParser.java۞1642۩case SQLTokenizer.DAYOFMONTH:
smallsql/database/SQLParser.java۞1643۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1644۩expr = new ExpressionFunctionDayOfMonth();
smallsql/database/SQLParser.java۞1645۩break;
smallsql/database/SQLParser.java۞1646۩case SQLTokenizer.DAYOFWEEK:
smallsql/database/SQLParser.java۞1647۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1648۩expr = new ExpressionFunctionDayOfWeek();
smallsql/database/SQLParser.java۞1649۩break;
smallsql/database/SQLParser.java۞1650۩case SQLTokenizer.DAYOFYEAR:
smallsql/database/SQLParser.java۞1651۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1652۩expr = new ExpressionFunctionDayOfYear();
smallsql/database/SQLParser.java۞1653۩break;
smallsql/database/SQLParser.java۞1654۩case SQLTokenizer.HOUR:
smallsql/database/SQLParser.java۞1655۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1656۩expr = new ExpressionFunctionHour();
smallsql/database/SQLParser.java۞1657۩break;
smallsql/database/SQLParser.java۞1658۩case SQLTokenizer.MINUTE:
smallsql/database/SQLParser.java۞1659۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1660۩expr = new ExpressionFunctionMinute();
smallsql/database/SQLParser.java۞1661۩break;
smallsql/database/SQLParser.java۞1662۩case SQLTokenizer.MONTH:
smallsql/database/SQLParser.java۞1663۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1664۩expr = new ExpressionFunctionMonth();
smallsql/database/SQLParser.java۞1665۩break;
smallsql/database/SQLParser.java۞1666۩case SQLTokenizer.NOW:
smallsql/database/SQLParser.java۞1667۩invalidParamCount = (paramCount != 0);
smallsql/database/SQLParser.java۞1668۩expr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.TIMESTAMP), SQLTokenizer.TIMESTAMP);
smallsql/database/SQLParser.java۞1669۩break;
smallsql/database/SQLParser.java۞1670۩case SQLTokenizer.YEAR:
smallsql/database/SQLParser.java۞1671۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1672۩expr = new ExpressionFunctionYear();
smallsql/database/SQLParser.java۞1673۩break;
smallsql/database/SQLParser.java۞1676۩case SQLTokenizer.IIF:
smallsql/database/SQLParser.java۞1677۩invalidParamCount = (paramCount != 3);
smallsql/database/SQLParser.java۞1678۩expr = new ExpressionFunctionIIF();
smallsql/database/SQLParser.java۞1679۩break;
smallsql/database/SQLParser.java۞1680۩case SQLTokenizer.SWITCH:
smallsql/database/SQLParser.java۞1681۩invalidParamCount = (paramCount % 2 != 0);
smallsql/database/SQLParser.java۞1682۩ExpressionFunctionCase exprCase = new ExpressionFunctionCase();
smallsql/database/SQLParser.java۞1683۩for(int i=0; i < paramCount-1; i +=2)
smallsql/database/SQLParser.java۞1684۩exprCase.addCase(params[i], params[i+1] );
smallsql/database/SQLParser.java۞1685۩exprCase.setEnd();
smallsql/database/SQLParser.java۞1686۩expr = exprCase;
smallsql/database/SQLParser.java۞1687۩break;
smallsql/database/SQLParser.java۞1688۩case SQLTokenizer.IFNULL:
smallsql/database/SQLParser.java۞1689۩switch(paramCount){
smallsql/database/SQLParser.java۞1690۩case 1:
smallsql/database/SQLParser.java۞1691۩return new ExpressionArithmetic( params[0], ExpressionArithmetic.ISNULL );
smallsql/database/SQLParser.java۞1692۩case 2:
smallsql/database/SQLParser.java۞1693۩invalidParamCount = false;
smallsql/database/SQLParser.java۞1694۩expr = new ExpressionFunctionIIF();
smallsql/database/SQLParser.java۞1695۩Expression[] newParams = new Expression[3];
smallsql/database/SQLParser.java۞1696۩newParams[0] = new ExpressionArithmetic( params[0], ExpressionArithmetic.ISNULL );
smallsql/database/SQLParser.java۞1697۩newParams[1] = params[1];
smallsql/database/SQLParser.java۞1698۩newParams[2] = params[0];
smallsql/database/SQLParser.java۞1699۩params = newParams;
smallsql/database/SQLParser.java۞1700۩paramCount = 3;
smallsql/database/SQLParser.java۞1701۩break;
smallsql/database/SQLParser.java۞1702۩default:
smallsql/database/SQLParser.java۞1703۩invalidParamCount = true;
smallsql/database/SQLParser.java۞1704۩expr = null;
smallsql/database/SQLParser.java۞1705۩}
smallsql/database/SQLParser.java۞1706۩break;
smallsql/database/SQLParser.java۞1709۩case SQLTokenizer.COUNT:
smallsql/database/SQLParser.java۞1710۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1711۩if(params[0].getType() == Expression.NAME){
smallsql/database/SQLParser.java۞1713۩ExpressionName param = (ExpressionName)params[0];
smallsql/database/SQLParser.java۞1714۩if("*".equals(param.getName()) && param.getTableAlias() == null){
smallsql/database/SQLParser.java۞1716۩params[0] = new ExpressionValue("*", SQLTokenizer.VARCHAR);
smallsql/database/SQLParser.java۞1717۩}
smallsql/database/SQLParser.java۞1718۩}
smallsql/database/SQLParser.java۞1719۩expr = new ExpressionName( Expression.COUNT );
smallsql/database/SQLParser.java۞1720۩break;
smallsql/database/SQLParser.java۞1721۩case SQLTokenizer.SUM:
smallsql/database/SQLParser.java۞1722۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1723۩expr = new ExpressionName( Expression.SUM );
smallsql/database/SQLParser.java۞1724۩break;
smallsql/database/SQLParser.java۞1725۩case SQLTokenizer.MAX:
smallsql/database/SQLParser.java۞1726۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1727۩expr = new ExpressionName( Expression.MAX );
smallsql/database/SQLParser.java۞1728۩break;
smallsql/database/SQLParser.java۞1729۩case SQLTokenizer.MIN:
smallsql/database/SQLParser.java۞1730۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1731۩expr = new ExpressionName( Expression.MIN );
smallsql/database/SQLParser.java۞1732۩break;
smallsql/database/SQLParser.java۞1733۩case SQLTokenizer.FIRST:
smallsql/database/SQLParser.java۞1734۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1735۩expr = new ExpressionName( Expression.FIRST );
smallsql/database/SQLParser.java۞1736۩break;
smallsql/database/SQLParser.java۞1737۩case SQLTokenizer.LAST:
smallsql/database/SQLParser.java۞1738۩invalidParamCount = (paramCount != 1);
smallsql/database/SQLParser.java۞1739۩expr = new ExpressionName( Expression.LAST );
smallsql/database/SQLParser.java۞1740۩break;
smallsql/database/SQLParser.java۞1741۩case SQLTokenizer.AVG:
smallsql/database/SQLParser.java۞1742۩if(paramCount != 1){
smallsql/database/SQLParser.java۞1743۩invalidParamCount = true;
smallsql/database/SQLParser.java۞1744۩expr = null;
smallsql/database/SQLParser.java۞1745۩break;
smallsql/database/SQLParser.java۞1746۩}
smallsql/database/SQLParser.java۞1747۩expr = new ExpressionName( Expression.SUM );
smallsql/database/SQLParser.java۞1748۩expr.setParams( params );
smallsql/database/SQLParser.java۞1749۩Expression expr2 = new ExpressionName( Expression.COUNT );
smallsql/database/SQLParser.java۞1750۩expr2.setParams( params );
smallsql/database/SQLParser.java۞1751۩expr = new ExpressionArithmetic( expr, expr2, ExpressionArithmetic.DIV );
smallsql/database/SQLParser.java۞1752۩return expr;
smallsql/database/SQLParser.java۞1753۩default:
smallsql/database/SQLParser.java۞1754۩throw createSyntaxError(token, Language.STXADD_FUNC_UNKNOWN);
smallsql/database/SQLParser.java۞1755۩}
smallsql/database/SQLParser.java۞1756۩if(invalidParamCount) {
smallsql/database/SQLParser.java۞1757۩throw createSyntaxError(token, Language.STXADD_PARAM_INVALID_COUNT);
smallsql/database/SQLParser.java۞1758۩}
smallsql/database/SQLParser.java۞1759۩expr.setParams( params );
smallsql/database/SQLParser.java۞1760۩return expr;
smallsql/database/SQLParser.java۞1761۩}
smallsql/database/SQLParser.java۞1766۩private RowSource tableSource( Command cmd, DataSources tables) throws SQLException{
smallsql/database/SQLParser.java۞1767۩SQLToken token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞1768۩switch(token.value){
smallsql/database/SQLParser.java۞1769۩case SQLTokenizer.PARENTHESIS_L:
smallsql/database/SQLParser.java۞1770۩return rowSource( cmd, tables, SQLTokenizer.PARENTHESIS_R );
smallsql/database/SQLParser.java۞1771۩case SQLTokenizer.ESCAPE_L:
smallsql/database/SQLParser.java۞1772۩token = nextToken(MISSING_OJ);
smallsql/database/SQLParser.java۞1773۩return rowSource( cmd, tables, SQLTokenizer.ESCAPE_R );
smallsql/database/SQLParser.java۞1774۩case SQLTokenizer.SELECT:
smallsql/database/SQLParser.java۞1776۩ViewResult viewResult = new ViewResult( con, select() );
smallsql/database/SQLParser.java۞1777۩tables.add(viewResult);
smallsql/database/SQLParser.java۞1778۩return viewResult;
smallsql/database/SQLParser.java۞1779۩}
smallsql/database/SQLParser.java۞1780۩String catalog = null;
smallsql/database/SQLParser.java۞1781۩String name = getIdentifier( token );
smallsql/database/SQLParser.java۞1782۩token = nextToken();
smallsql/database/SQLParser.java۞1784۩if(token != null && token.value == SQLTokenizer.POINT){
smallsql/database/SQLParser.java۞1785۩catalog = name;
smallsql/database/SQLParser.java۞1786۩name = nextIdentifier();
smallsql/database/SQLParser.java۞1787۩token = nextToken();
smallsql/database/SQLParser.java۞1788۩}
smallsql/database/SQLParser.java۞1791۩TableView tableView = Database.getTableView( con, catalog, name);
smallsql/database/SQLParser.java۞1792۩TableViewResult table = TableViewResult.createResult(tableView);
smallsql/database/SQLParser.java۞1793۩tables.add( table );
smallsql/database/SQLParser.java۞1795۩if(token != null && token.value == SQLTokenizer.AS){
smallsql/database/SQLParser.java۞1797۩token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞1798۩table.setAlias( token.getName( sql ) );
smallsql/database/SQLParser.java۞1799۩}else{
smallsql/database/SQLParser.java۞1800۩previousToken();
smallsql/database/SQLParser.java۞1801۩}
smallsql/database/SQLParser.java۞1802۩return table;
smallsql/database/SQLParser.java۞1803۩}
smallsql/database/SQLParser.java۞1809۩private Join join(Command cmd, DataSources tables, RowSource left, int type) throws SQLException{
smallsql/database/SQLParser.java۞1810۩RowSource right = rowSource(cmd, tables, 0);
smallsql/database/SQLParser.java۞1811۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞1813۩while(true){
smallsql/database/SQLParser.java۞1814۩if(token == null) {
smallsql/database/SQLParser.java۞1815۩throw createSyntaxError(token, Language.STXADD_JOIN_INVALID);
smallsql/database/SQLParser.java۞1816۩}
smallsql/database/SQLParser.java۞1818۩switch(token.value){
smallsql/database/SQLParser.java۞1819۩case SQLTokenizer.ON:
smallsql/database/SQLParser.java۞1820۩if(type == Join.RIGHT_JOIN)
smallsql/database/SQLParser.java۞1821۩return new Join( Join.LEFT_JOIN, right, left, expression( cmd, 0 ) );
smallsql/database/SQLParser.java۞1822۩return new Join( type, left, right, expression( cmd, 0 ) );
smallsql/database/SQLParser.java۞1823۩default:
smallsql/database/SQLParser.java۞1824۩if(!right.hasAlias()){
smallsql/database/SQLParser.java۞1825۩right.setAlias( token.getName( sql ) );
smallsql/database/SQLParser.java۞1826۩token = nextToken();
smallsql/database/SQLParser.java۞1827۩continue;
smallsql/database/SQLParser.java۞1828۩}
smallsql/database/SQLParser.java۞1829۩throw createSyntaxError( token, MISSING_ON );
smallsql/database/SQLParser.java۞1830۩}
smallsql/database/SQLParser.java۞1831۩}
smallsql/database/SQLParser.java۞1832۩}
smallsql/database/SQLParser.java۞1838۩private RowSource rowSource(Command cmd, DataSources tables, int parenthesis) throws SQLException{
smallsql/database/SQLParser.java۞1839۩RowSource fromSource = null;
smallsql/database/SQLParser.java۞1840۩fromSource = tableSource(cmd, tables);
smallsql/database/SQLParser.java۞1842۩while(true){
smallsql/database/SQLParser.java۞1843۩SQLToken token = nextToken();
smallsql/database/SQLParser.java۞1844۩if(token == null) return fromSource;
smallsql/database/SQLParser.java۞1845۩switch(token.value){
smallsql/database/SQLParser.java۞1846۩case SQLTokenizer.ON:
smallsql/database/SQLParser.java۞1847۩previousToken();
smallsql/database/SQLParser.java۞1848۩return fromSource;
smallsql/database/SQLParser.java۞1849۩case SQLTokenizer.CROSS:
smallsql/database/SQLParser.java۞1850۩nextToken(MISSING_JOIN);
smallsql/database/SQLParser.java۞1852۩case SQLTokenizer.COMMA:
smallsql/database/SQLParser.java۞1853۩fromSource = new Join( Join.CROSS_JOIN, fromSource, rowSource(cmd, tables, 0), null);
smallsql/database/SQLParser.java۞1854۩break;
smallsql/database/SQLParser.java۞1855۩case SQLTokenizer.INNER:
smallsql/database/SQLParser.java۞1856۩nextToken(MISSING_JOIN);
smallsql/database/SQLParser.java۞1858۩case SQLTokenizer.JOIN:
smallsql/database/SQLParser.java۞1859۩fromSource = join( cmd, tables, fromSource, Join.INNER_JOIN );
smallsql/database/SQLParser.java۞1860۩break;
smallsql/database/SQLParser.java۞1861۩case SQLTokenizer.LEFT:
smallsql/database/SQLParser.java۞1862۩token = nextToken(MISSING_OUTER_JOIN);
smallsql/database/SQLParser.java۞1863۩if(token.value == SQLTokenizer.OUTER)
smallsql/database/SQLParser.java۞1864۩token = nextToken(MISSING_JOIN);
smallsql/database/SQLParser.java۞1865۩fromSource = join( cmd, tables, fromSource, Join.LEFT_JOIN );
smallsql/database/SQLParser.java۞1866۩break;
smallsql/database/SQLParser.java۞1867۩case SQLTokenizer.RIGHT:
smallsql/database/SQLParser.java۞1868۩token = nextToken(MISSING_OUTER_JOIN);
smallsql/database/SQLParser.java۞1869۩if(token.value == SQLTokenizer.OUTER)
smallsql/database/SQLParser.java۞1870۩token = nextToken(MISSING_JOIN);
smallsql/database/SQLParser.java۞1871۩fromSource = join( cmd, tables, fromSource, Join.RIGHT_JOIN );
smallsql/database/SQLParser.java۞1872۩break;
smallsql/database/SQLParser.java۞1873۩case SQLTokenizer.FULL:
smallsql/database/SQLParser.java۞1874۩token = nextToken(MISSING_OUTER_JOIN);
smallsql/database/SQLParser.java۞1875۩if(token.value == SQLTokenizer.OUTER)
smallsql/database/SQLParser.java۞1876۩token = nextToken(MISSING_JOIN);
smallsql/database/SQLParser.java۞1877۩fromSource = join( cmd, tables, fromSource, Join.FULL_JOIN );
smallsql/database/SQLParser.java۞1878۩break;
smallsql/database/SQLParser.java۞1879۩case SQLTokenizer.PARENTHESIS_R:
smallsql/database/SQLParser.java۞1880۩case SQLTokenizer.ESCAPE_R:
smallsql/database/SQLParser.java۞1881۩if(parenthesis == token.value) return fromSource;
smallsql/database/SQLParser.java۞1882۩if(parenthesis == 0){
smallsql/database/SQLParser.java۞1883۩previousToken();
smallsql/database/SQLParser.java۞1884۩return fromSource;
smallsql/database/SQLParser.java۞1885۩}
smallsql/database/SQLParser.java۞1886۩throw createSyntaxError( token, Language.STXADD_FROM_PAR_CLOSE );
smallsql/database/SQLParser.java۞1887۩default:
smallsql/database/SQLParser.java۞1888۩if(isKeyword(token)){
smallsql/database/SQLParser.java۞1889۩previousToken();
smallsql/database/SQLParser.java۞1890۩return fromSource;
smallsql/database/SQLParser.java۞1891۩}
smallsql/database/SQLParser.java۞1892۩if(!fromSource.hasAlias()){
smallsql/database/SQLParser.java۞1893۩fromSource.setAlias( token.getName( sql ) );
smallsql/database/SQLParser.java۞1894۩break;
smallsql/database/SQLParser.java۞1895۩}
smallsql/database/SQLParser.java۞1896۩throw createSyntaxError( token, new int[]{SQLTokenizer.COMMA, SQLTokenizer.GROUP, SQLTokenizer.ORDER, SQLTokenizer.HAVING} );
smallsql/database/SQLParser.java۞1897۩}
smallsql/database/SQLParser.java۞1898۩}
smallsql/database/SQLParser.java۞1899۩}
smallsql/database/SQLParser.java۞1901۩private void from(CommandSelect cmd) throws SQLException{
smallsql/database/SQLParser.java۞1902۩DataSources tables = new DataSources();
smallsql/database/SQLParser.java۞1903۩cmd.setTables(tables);
smallsql/database/SQLParser.java۞1904۩cmd.setSource( rowSource( cmd, tables, 0 ) );
smallsql/database/SQLParser.java۞1906۩SQLToken token;
smallsql/database/SQLParser.java۞1907۩while(null != (token = nextToken())){
smallsql/database/SQLParser.java۞1908۩switch(token.value){
smallsql/database/SQLParser.java۞1909۩case SQLTokenizer.WHERE:
smallsql/database/SQLParser.java۞1910۩where( cmd );
smallsql/database/SQLParser.java۞1911۩break;
smallsql/database/SQLParser.java۞1912۩case SQLTokenizer.GROUP:
smallsql/database/SQLParser.java۞1913۩group( cmd );
smallsql/database/SQLParser.java۞1914۩break;
smallsql/database/SQLParser.java۞1915۩case SQLTokenizer.HAVING:
smallsql/database/SQLParser.java۞1916۩having( cmd );
smallsql/database/SQLParser.java۞1917۩break;
smallsql/database/SQLParser.java۞1918۩default:
smallsql/database/SQLParser.java۞1919۩previousToken();
smallsql/database/SQLParser.java۞1920۩return;
smallsql/database/SQLParser.java۞1921۩}
smallsql/database/SQLParser.java۞1922۩}
smallsql/database/SQLParser.java۞1923۩}
smallsql/database/SQLParser.java۞1925۩private void order(CommandSelect cmd) throws SQLException{
smallsql/database/SQLParser.java۞1926۩nextToken(MISSING_BY);
smallsql/database/SQLParser.java۞1927۩cmd.setOrder(expressionTokenList(cmd, SQLTokenizer.ORDER));
smallsql/database/SQLParser.java۞1928۩}
smallsql/database/SQLParser.java۞1930۩private void limit(CommandSelect selCmd) throws SQLException{
smallsql/database/SQLParser.java۞1931۩SQLToken token = nextToken(MISSING_EXPRESSION);
smallsql/database/SQLParser.java۞1932۩try{
smallsql/database/SQLParser.java۞1933۩int maxRows = Integer.parseInt(token.getName(sql));
smallsql/database/SQLParser.java۞1934۩selCmd.setMaxRows(maxRows);
smallsql/database/SQLParser.java۞1935۩}catch(NumberFormatException e){
smallsql/database/SQLParser.java۞1936۩throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));
smallsql/database/SQLParser.java۞1937۩}
smallsql/database/SQLParser.java۞1938۩}
smallsql/database/SQLParser.java۞1940۩private void group(CommandSelect cmd) throws SQLException{
smallsql/database/SQLParser.java۞1941۩nextToken(MISSING_BY);
smallsql/database/SQLParser.java۞1942۩cmd.setGroup( expressionTokenList(cmd, SQLTokenizer.GROUP) );
smallsql/database/SQLParser.java۞1943۩}
smallsql/database/SQLParser.java۞1945۩private void where(CommandSelect cmd) throws SQLException{
smallsql/database/SQLParser.java۞1946۩cmd.setWhere( expression(cmd, 0) );
smallsql/database/SQLParser.java۞1947۩}
smallsql/database/SQLParser.java۞1949۩private void having(CommandSelect cmd) throws SQLException{
smallsql/database/SQLParser.java۞1950۩cmd.setHaving( expression(cmd, 0) );
smallsql/database/SQLParser.java۞1951۩}
smallsql/database/SQLParser.java۞1954۩private static final int[] COMMANDS = {SQLTokenizer.SELECT, SQLTokenizer.DELETE, SQLTokenizer.INSERT, SQLTokenizer.UPDATE, SQLTokenizer.CREATE, SQLTokenizer.DROP, SQLTokenizer.ALTER, SQLTokenizer.SET, SQLTokenizer.USE, SQLTokenizer.EXECUTE, SQLTokenizer.TRUNCATE};
smallsql/database/SQLParser.java۞1955۩private static final int[] COMMANDS_ESCAPE = {SQLTokenizer.D, SQLTokenizer.T, SQLTokenizer.TS, SQLTokenizer.FN, SQLTokenizer.CALL};
smallsql/database/SQLParser.java۞1956۩private static final int[] COMMANDS_ALTER = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW,  SQLTokenizer.PROCEDURE, };
smallsql/database/SQLParser.java۞1957۩private static final int[] COMMANDS_CREATE = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED};
smallsql/database/SQLParser.java۞1958۩private static final int[] COMMANDS_DROP = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE};
smallsql/database/SQLParser.java۞1959۩private static final int[] COMMANDS_SET = {SQLTokenizer.TRANSACTION};
smallsql/database/SQLParser.java۞1960۩private static final int[] COMMANDS_CREATE_UNIQUE = {SQLTokenizer.INDEX, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED};
smallsql/database/SQLParser.java۞1961۩private static final int[] MISSING_TABLE = {SQLTokenizer.TABLE};
smallsql/database/SQLParser.java۞1962۩private static final int[] ESCAPE_MISSING_CLOSE = {SQLTokenizer.ESCAPE_R};
smallsql/database/SQLParser.java۞1963۩private static final int[] MISSING_EXPRESSION = {SQLTokenizer.VALUE};
smallsql/database/SQLParser.java۞1964۩private static final int[] MISSING_IDENTIFIER = {SQLTokenizer.IDENTIFIER};
smallsql/database/SQLParser.java۞1965۩private static final int[] MISSING_BY = {SQLTokenizer.BY};
smallsql/database/SQLParser.java۞1966۩private static final int[] MISSING_PARENTHESIS_L = {SQLTokenizer.PARENTHESIS_L};
smallsql/database/SQLParser.java۞1967۩private static final int[] MISSING_PARENTHESIS_R = {SQLTokenizer.PARENTHESIS_R};
smallsql/database/SQLParser.java۞1968۩private static final int[] MISSING_DATATYPE  = {SQLTokenizer.BIT, SQLTokenizer.BOOLEAN, SQLTokenizer.BINARY, SQLTokenizer.VARBINARY, SQLTokenizer.RAW, SQLTokenizer.LONGVARBINARY, SQLTokenizer.BLOB, SQLTokenizer.TINYINT, SQLTokenizer.SMALLINT, SQLTokenizer.INT, SQLTokenizer.COUNTER, SQLTokenizer. BIGINT, SQLTokenizer.SMALLMONEY, SQLTokenizer.MONEY, SQLTokenizer.DECIMAL, SQLTokenizer.NUMERIC, SQLTokenizer.REAL, SQLTokenizer.FLOAT, SQLTokenizer.DOUBLE, SQLTokenizer.DATE, SQLTokenizer.TIME, SQLTokenizer.TIMESTAMP, SQLTokenizer.SMALLDATETIME, SQLTokenizer.CHAR, SQLTokenizer.NCHAR, SQLTokenizer.VARCHAR, SQLTokenizer.NVARCHAR, SQLTokenizer.LONG, SQLTokenizer.LONGNVARCHAR, SQLTokenizer.LONGVARCHAR, SQLTokenizer.CLOB, SQLTokenizer.NCLOB, SQLTokenizer.UNIQUEIDENTIFIER, SQLTokenizer.JAVA_OBJECT, SQLTokenizer.SYSNAME};
smallsql/database/SQLParser.java۞1969۩private static final int[] MISSING_SQL_DATATYPE = { SQLTokenizer.SQL_BIGINT , SQLTokenizer.SQL_BINARY , SQLTokenizer.SQL_BIT , SQLTokenizer.SQL_CHAR , SQLTokenizer.SQL_DATE , SQLTokenizer.SQL_DECIMAL , SQLTokenizer.SQL_DOUBLE , SQLTokenizer.SQL_FLOAT , SQLTokenizer.SQL_INTEGER , SQLTokenizer.SQL_LONGVARBINARY , SQLTokenizer.SQL_LONGVARCHAR , SQLTokenizer.SQL_REAL , SQLTokenizer.SQL_SMALLINT , SQLTokenizer.SQL_TIME , SQLTokenizer.SQL_TIMESTAMP , SQLTokenizer.SQL_TINYINT , SQLTokenizer.SQL_VARBINARY , SQLTokenizer.SQL_VARCHAR };
smallsql/database/SQLParser.java۞1970۩private static final int[] MISSING_INTO = {SQLTokenizer.INTO};
smallsql/database/SQLParser.java۞1971۩private static final int[] MISSING_BETWEEN_IN = {SQLTokenizer.BETWEEN, SQLTokenizer.IN};
smallsql/database/SQLParser.java۞1972۩private static final int[] MISSING_NOT_NULL = {SQLTokenizer.NOT, SQLTokenizer.NULL};
smallsql/database/SQLParser.java۞1973۩private static final int[] MISSING_NULL = {SQLTokenizer.NULL};
smallsql/database/SQLParser.java۞1974۩private static final int[] MISSING_COMMA = {SQLTokenizer.COMMA};
smallsql/database/SQLParser.java۞1975۩private static final int[] MISSING_COMMA_PARENTHESIS = {SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R};
smallsql/database/SQLParser.java۞1976۩private static final int[] MISSING_PARENTHESIS_VALUES_SELECT = {SQLTokenizer.PARENTHESIS_L, SQLTokenizer.VALUES, SQLTokenizer.SELECT};
smallsql/database/SQLParser.java۞1977۩private static final int[] MISSING_TOKEN_LIST = {SQLTokenizer.COMMA, SQLTokenizer.FROM, SQLTokenizer.GROUP, SQLTokenizer.HAVING, SQLTokenizer.ORDER};
smallsql/database/SQLParser.java۞1978۩private static final int[] MISSING_FROM = {SQLTokenizer.FROM};
smallsql/database/SQLParser.java۞1979۩private static final int[] MISSING_SET = {SQLTokenizer.SET};
smallsql/database/SQLParser.java۞1980۩private static final int[] MISSING_EQUALS = {SQLTokenizer.EQUALS};
smallsql/database/SQLParser.java۞1981۩private static final int[] MISSING_WHERE = {SQLTokenizer.WHERE};
smallsql/database/SQLParser.java۞1982۩private static final int[] MISSING_WHERE_COMMA = {SQLTokenizer.WHERE, SQLTokenizer.COMMA};
smallsql/database/SQLParser.java۞1983۩private static final int[] MISSING_ISOLATION = {SQLTokenizer.ISOLATION};
smallsql/database/SQLParser.java۞1984۩private static final int[] MISSING_LEVEL = {SQLTokenizer.LEVEL};
smallsql/database/SQLParser.java۞1985۩private static final int[] COMMANDS_TRANS_LEVEL = {SQLTokenizer.READ, SQLTokenizer.REPEATABLE, SQLTokenizer.SERIALIZABLE};
smallsql/database/SQLParser.java۞1986۩private static final int[] MISSING_READ = {SQLTokenizer.READ};
smallsql/database/SQLParser.java۞1987۩private static final int[] MISSING_COMM_UNCOMM = {SQLTokenizer.COMMITTED, SQLTokenizer.UNCOMMITTED};
smallsql/database/SQLParser.java۞1988۩private static final int[] MISSING_OPTIONS_DATATYPE = { SQLTokenizer.DEFAULT, SQLTokenizer.IDENTITY, SQLTokenizer.NOT, SQLTokenizer.NULL, SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R};
smallsql/database/SQLParser.java۞1989۩private static final int[] MISSING_NUMBERVALUE = {SQLTokenizer.NUMBERVALUE};
smallsql/database/SQLParser.java۞1990۩private static final int[] MISSING_AND = {SQLTokenizer.AND};
smallsql/database/SQLParser.java۞1991۩private static final int[] MISSING_JOIN = {SQLTokenizer.JOIN};
smallsql/database/SQLParser.java۞1992۩private static final int[] MISSING_OUTER_JOIN = {SQLTokenizer.OUTER, SQLTokenizer.JOIN};
smallsql/database/SQLParser.java۞1993۩private static final int[] MISSING_OJ = {SQLTokenizer.OJ};
smallsql/database/SQLParser.java۞1994۩private static final int[] MISSING_ON = {SQLTokenizer.ON};
smallsql/database/SQLParser.java۞1995۩private static final int[] MISSING_KEYTYPE = {SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.FOREIGN};
smallsql/database/SQLParser.java۞1996۩private static final int[] MISSING_KEY = {SQLTokenizer.KEY};
smallsql/database/SQLParser.java۞1997۩private static final int[] MISSING_REFERENCES = {SQLTokenizer.REFERENCES};
smallsql/database/SQLParser.java۞1998۩private static final int[] MISSING_AS = {SQLTokenizer.AS};
smallsql/database/SQLParser.java۞1999۩private static final int[] MISSING_SELECT = {SQLTokenizer.SELECT};
smallsql/database/SQLParser.java۞2000۩private static final int[] MISSING_INTERVALS = {SQLTokenizer.SQL_TSI_FRAC_SECOND, SQLTokenizer.SQL_TSI_SECOND, SQLTokenizer.SQL_TSI_MINUTE, SQLTokenizer.SQL_TSI_HOUR, SQLTokenizer.SQL_TSI_DAY, SQLTokenizer.SQL_TSI_WEEK, SQLTokenizer.SQL_TSI_MONTH, SQLTokenizer.SQL_TSI_QUARTER, SQLTokenizer.SQL_TSI_YEAR, SQLTokenizer.MILLISECOND, SQLTokenizer.SECOND, SQLTokenizer.MINUTE, SQLTokenizer.HOUR, SQLTokenizer.DAY, SQLTokenizer.WEEK, SQLTokenizer.MONTH, SQLTokenizer.QUARTER, SQLTokenizer.YEAR, SQLTokenizer.D};
smallsql/database/SQLParser.java۞2001۩private static final int[] MISSING_ALL = {SQLTokenizer.ALL};
smallsql/database/SQLParser.java۞2002۩private static final int[] MISSING_THEN = {SQLTokenizer.THEN};
smallsql/database/SQLParser.java۞2003۩private static final int[] MISSING_WHEN_ELSE_END = {SQLTokenizer.WHEN, SQLTokenizer.ELSE, SQLTokenizer.END};
smallsql/database/SQLParser.java۞2004۩private static final int[] MISSING_ADD_ALTER_DROP = {SQLTokenizer.ADD, SQLTokenizer.ALTER, SQLTokenizer.DROP};
smallsql/database/SQLParser.java۞2007۩}
smallsql/database/SQLToken.java۞33۩package smallsql.database;
smallsql/database/SQLToken.java۞39۩class SQLToken{
smallsql/database/SQLToken.java۞40۩int value;
smallsql/database/SQLToken.java۞41۩int offset;
smallsql/database/SQLToken.java۞42۩int length;
smallsql/database/SQLToken.java۞43۩String name;
smallsql/database/SQLToken.java۞45۩SQLToken (int value, int tokenStart, int tokenEnd){
smallsql/database/SQLToken.java۞46۩this.value  = value;
smallsql/database/SQLToken.java۞47۩this.offset = tokenStart;
smallsql/database/SQLToken.java۞48۩this.length = tokenEnd-tokenStart;
smallsql/database/SQLToken.java۞49۩}
smallsql/database/SQLToken.java۞54۩SQLToken (String name, int value, int tokenStart, int tokenEnd){
smallsql/database/SQLToken.java۞55۩this.value  = value;
smallsql/database/SQLToken.java۞56۩this.offset = tokenStart;
smallsql/database/SQLToken.java۞57۩this.length = tokenEnd-tokenStart;
smallsql/database/SQLToken.java۞58۩this.name   = name;
smallsql/database/SQLToken.java۞59۩}
smallsql/database/SQLToken.java۞61۩String getName(char[] sql){
smallsql/database/SQLToken.java۞62۩if(name != null) return name;
smallsql/database/SQLToken.java۞63۩return new String( sql, offset, length );
smallsql/database/SQLToken.java۞64۩}
smallsql/database/SQLToken.java۞65۩}
smallsql/database/SQLTokenizer.java۞33۩package smallsql.database;
smallsql/database/SQLTokenizer.java۞35۩import java.util.*;
smallsql/database/SQLTokenizer.java۞36۩import java.sql.SQLException;
smallsql/database/SQLTokenizer.java۞37۩import java.sql.Types;
smallsql/database/SQLTokenizer.java۞39۩import smallsql.database.language.Language;
smallsql/database/SQLTokenizer.java۞41۩public class SQLTokenizer {
smallsql/database/SQLTokenizer.java۞42۩private static final int NOT_COMMENT = 0;
smallsql/database/SQLTokenizer.java۞43۩private static final int LINE_COMMENT = 1;
smallsql/database/SQLTokenizer.java۞44۩private static final int MULTI_COMMENT = 2;
smallsql/database/SQLTokenizer.java۞46۩public static List parseSQL( char[] sql ) throws SQLException{
smallsql/database/SQLTokenizer.java۞47۩SearchNode node = searchTree;
smallsql/database/SQLTokenizer.java۞48۩ArrayList tokens = new ArrayList();
smallsql/database/SQLTokenizer.java۞49۩int value = 0;
smallsql/database/SQLTokenizer.java۞50۩int tokenStart = 0;
smallsql/database/SQLTokenizer.java۞51۩boolean wasWhiteSpace = true;
smallsql/database/SQLTokenizer.java۞52۩int comment = NOT_COMMENT;
smallsql/database/SQLTokenizer.java۞53۩char quote = 0;
smallsql/database/SQLTokenizer.java۞54۩StringBuffer quoteBuffer = new StringBuffer();
smallsql/database/SQLTokenizer.java۞56۩for(int i=0; i<sql.length; i++){
smallsql/database/SQLTokenizer.java۞57۩char c = sql[i];
smallsql/database/SQLTokenizer.java۞58۩switch(c){
smallsql/database/SQLTokenizer.java۞59۩case '\"':
smallsql/database/SQLTokenizer.java۞60۩case '\'':
smallsql/database/SQLTokenizer.java۞61۩if (comment != NOT_COMMENT) {
smallsql/database/SQLTokenizer.java۞62۩break;
smallsql/database/SQLTokenizer.java۞63۩}else if(quote == 0){
smallsql/database/SQLTokenizer.java۞64۩quote = c;
smallsql/database/SQLTokenizer.java۞65۩}else if(quote == c){
smallsql/database/SQLTokenizer.java۞67۩if(i+1<sql.length && sql[i+1] == quote){
smallsql/database/SQLTokenizer.java۞68۩quoteBuffer.append(quote);
smallsql/database/SQLTokenizer.java۞69۩i++;
smallsql/database/SQLTokenizer.java۞70۩}else{
smallsql/database/SQLTokenizer.java۞71۩tokens.add( new SQLToken( quoteBuffer.toString(), (quote == '\'') ? STRING : IDENTIFIER,       tokenStart, i+1) );
smallsql/database/SQLTokenizer.java۞72۩quoteBuffer.setLength(0);
smallsql/database/SQLTokenizer.java۞73۩quote = 0;
smallsql/database/SQLTokenizer.java۞74۩tokenStart = i+1;
smallsql/database/SQLTokenizer.java۞75۩wasWhiteSpace = true;
smallsql/database/SQLTokenizer.java۞76۩}
smallsql/database/SQLTokenizer.java۞77۩}else quoteBuffer.append(c);
smallsql/database/SQLTokenizer.java۞78۩break;
smallsql/database/SQLTokenizer.java۞79۩case '.':
smallsql/database/SQLTokenizer.java۞80۩if (comment != NOT_COMMENT) {
smallsql/database/SQLTokenizer.java۞81۩break;
smallsql/database/SQLTokenizer.java۞82۩}else if(quote == 0){
smallsql/database/SQLTokenizer.java۞90۩int k=tokenStart;
smallsql/database/SQLTokenizer.java۞91۩if(k == i){
smallsql/database/SQLTokenizer.java۞92۩if(sql.length> k+1){
smallsql/database/SQLTokenizer.java۞93۩char cc = sql[k+1];
smallsql/database/SQLTokenizer.java۞94۩if((cc >= '0') && cc <= '9') break;
smallsql/database/SQLTokenizer.java۞95۩}
smallsql/database/SQLTokenizer.java۞96۩}else{
smallsql/database/SQLTokenizer.java۞97۩for(; k<i; k++){
smallsql/database/SQLTokenizer.java۞98۩char cc = sql[k];
smallsql/database/SQLTokenizer.java۞99۩if((cc != '-' && cc != '$' && cc < '0') || cc > '9') break;
smallsql/database/SQLTokenizer.java۞100۩}
smallsql/database/SQLTokenizer.java۞101۩if(k>=i) break;
smallsql/database/SQLTokenizer.java۞102۩}
smallsql/database/SQLTokenizer.java۞103۩}
smallsql/database/SQLTokenizer.java۞106۩case '-':
smallsql/database/SQLTokenizer.java۞107۩if (comment != NOT_COMMENT) {
smallsql/database/SQLTokenizer.java۞108۩break;
smallsql/database/SQLTokenizer.java۞109۩}
smallsql/database/SQLTokenizer.java۞111۩else if (c == '-' && (i+1 < sql.length) && (sql[i+1] == '-')) {
smallsql/database/SQLTokenizer.java۞112۩if(!wasWhiteSpace){
smallsql/database/SQLTokenizer.java۞113۩tokens.add( new SQLToken( value, tokenStart, i) );
smallsql/database/SQLTokenizer.java۞114۩value = 0;
smallsql/database/SQLTokenizer.java۞115۩}
smallsql/database/SQLTokenizer.java۞116۩i++;
smallsql/database/SQLTokenizer.java۞117۩tokenStart = i+1;
smallsql/database/SQLTokenizer.java۞118۩comment = LINE_COMMENT;
smallsql/database/SQLTokenizer.java۞119۩}
smallsql/database/SQLTokenizer.java۞120۩else if(quote == 0 && !wasWhiteSpace){
smallsql/database/SQLTokenizer.java۞121۩char c1 = sql[tokenStart];
smallsql/database/SQLTokenizer.java۞122۩char cx = sql[i-1];
smallsql/database/SQLTokenizer.java۞123۩if(((c1 >= '0' && c1 <= '9') || c1 == '.') && (cx == 'e' || cx == 'E'))
smallsql/database/SQLTokenizer.java۞125۩break;
smallsql/database/SQLTokenizer.java۞126۩if(c1 == '$' && tokenStart+1 == i)
smallsql/database/SQLTokenizer.java۞128۩break;
smallsql/database/SQLTokenizer.java۞129۩}
smallsql/database/SQLTokenizer.java۞130۩case ' ':
smallsql/database/SQLTokenizer.java۞131۩case '\t':
smallsql/database/SQLTokenizer.java۞132۩case '\n':
smallsql/database/SQLTokenizer.java۞133۩case '\r':
smallsql/database/SQLTokenizer.java۞134۩case ',':
smallsql/database/SQLTokenizer.java۞135۩case '(':
smallsql/database/SQLTokenizer.java۞136۩case ')':
smallsql/database/SQLTokenizer.java۞137۩case '{':
smallsql/database/SQLTokenizer.java۞138۩case '}':
smallsql/database/SQLTokenizer.java۞139۩case '*':
smallsql/database/SQLTokenizer.java۞140۩case '+':
smallsql/database/SQLTokenizer.java۞141۩case '/':
smallsql/database/SQLTokenizer.java۞142۩case '%':
smallsql/database/SQLTokenizer.java۞143۩case '&':
smallsql/database/SQLTokenizer.java۞144۩case '|':
smallsql/database/SQLTokenizer.java۞145۩case '=':
smallsql/database/SQLTokenizer.java۞146۩case '<':
smallsql/database/SQLTokenizer.java۞147۩case '>':
smallsql/database/SQLTokenizer.java۞148۩case '?':
smallsql/database/SQLTokenizer.java۞149۩case '^':
smallsql/database/SQLTokenizer.java۞150۩case '~':
smallsql/database/SQLTokenizer.java۞152۩if (comment == LINE_COMMENT) {
smallsql/database/SQLTokenizer.java۞154۩if (c == '\r' || c == '\n') {
smallsql/database/SQLTokenizer.java۞155۩comment = NOT_COMMENT;
smallsql/database/SQLTokenizer.java۞156۩wasWhiteSpace = true;
smallsql/database/SQLTokenizer.java۞157۩}
smallsql/database/SQLTokenizer.java۞158۩tokenStart = i+1;
smallsql/database/SQLTokenizer.java۞159۩break;
smallsql/database/SQLTokenizer.java۞160۩}
smallsql/database/SQLTokenizer.java۞162۩else if (comment == MULTI_COMMENT) {
smallsql/database/SQLTokenizer.java۞164۩if (c == '*' && (i+1 < sql.length) && (sql[i+1] == '/')) {
smallsql/database/SQLTokenizer.java۞165۩comment = NOT_COMMENT;
smallsql/database/SQLTokenizer.java۞166۩wasWhiteSpace = true;
smallsql/database/SQLTokenizer.java۞167۩i++;
smallsql/database/SQLTokenizer.java۞168۩}
smallsql/database/SQLTokenizer.java۞169۩tokenStart = i + 1;
smallsql/database/SQLTokenizer.java۞170۩break;
smallsql/database/SQLTokenizer.java۞171۩}
smallsql/database/SQLTokenizer.java۞172۩else if(quote == 0){
smallsql/database/SQLTokenizer.java۞173۩if(!wasWhiteSpace){
smallsql/database/SQLTokenizer.java۞174۩tokens.add( new SQLToken( value, tokenStart, i) );
smallsql/database/SQLTokenizer.java۞175۩value = 0;
smallsql/database/SQLTokenizer.java۞176۩}
smallsql/database/SQLTokenizer.java۞177۩switch(c){
smallsql/database/SQLTokenizer.java۞178۩case ' ':
smallsql/database/SQLTokenizer.java۞179۩case '\t':
smallsql/database/SQLTokenizer.java۞180۩case '\n':
smallsql/database/SQLTokenizer.java۞181۩case '\r':
smallsql/database/SQLTokenizer.java۞183۩break;
smallsql/database/SQLTokenizer.java۞184۩case '<':
smallsql/database/SQLTokenizer.java۞185۩if((i+1 < sql.length) && (sql[i+1] == '>')){
smallsql/database/SQLTokenizer.java۞186۩tokens.add( new SQLToken( UNEQUALS, i, i+2) );
smallsql/database/SQLTokenizer.java۞187۩i++;
smallsql/database/SQLTokenizer.java۞188۩break;
smallsql/database/SQLTokenizer.java۞189۩}
smallsql/database/SQLTokenizer.java۞190۩case '>':
smallsql/database/SQLTokenizer.java۞191۩if((i+1 < sql.length) && (sql[i+1] == '=')){
smallsql/database/SQLTokenizer.java۞192۩tokens.add( new SQLToken( 100 + c, i, i+2) );
smallsql/database/SQLTokenizer.java۞193۩i++;
smallsql/database/SQLTokenizer.java۞194۩break;
smallsql/database/SQLTokenizer.java۞195۩}
smallsql/database/SQLTokenizer.java۞197۩case '/':
smallsql/database/SQLTokenizer.java۞198۩if((i+1 < sql.length) && (sql[i+1] == '*')){
smallsql/database/SQLTokenizer.java۞199۩i++;
smallsql/database/SQLTokenizer.java۞200۩tokenStart = i+1;
smallsql/database/SQLTokenizer.java۞201۩comment = MULTI_COMMENT;
smallsql/database/SQLTokenizer.java۞202۩break;
smallsql/database/SQLTokenizer.java۞203۩}
smallsql/database/SQLTokenizer.java۞204۩default:
smallsql/database/SQLTokenizer.java۞205۩tokens.add( new SQLToken( c, i, i+1) );
smallsql/database/SQLTokenizer.java۞206۩}
smallsql/database/SQLTokenizer.java۞207۩wasWhiteSpace = true;
smallsql/database/SQLTokenizer.java۞208۩tokenStart = i+1;
smallsql/database/SQLTokenizer.java۞209۩}else{
smallsql/database/SQLTokenizer.java۞210۩quoteBuffer.append(c);
smallsql/database/SQLTokenizer.java۞211۩}
smallsql/database/SQLTokenizer.java۞212۩break;
smallsql/database/SQLTokenizer.java۞213۩default:
smallsql/database/SQLTokenizer.java۞214۩if (comment != NOT_COMMENT) {
smallsql/database/SQLTokenizer.java۞215۩break;
smallsql/database/SQLTokenizer.java۞216۩}else if(quote == 0){
smallsql/database/SQLTokenizer.java۞217۩if(wasWhiteSpace){
smallsql/database/SQLTokenizer.java۞218۩node = searchTree;
smallsql/database/SQLTokenizer.java۞219۩}else{
smallsql/database/SQLTokenizer.java۞220۩if(node == null){
smallsql/database/SQLTokenizer.java۞221۩value = 0;
smallsql/database/SQLTokenizer.java۞222۩wasWhiteSpace = false;
smallsql/database/SQLTokenizer.java۞223۩break;
smallsql/database/SQLTokenizer.java۞224۩}
smallsql/database/SQLTokenizer.java۞225۩}
smallsql/database/SQLTokenizer.java۞226۩c |= 0x20;
smallsql/database/SQLTokenizer.java۞227۩while(node != null && node.letter != c) node = node.nextEntry;
smallsql/database/SQLTokenizer.java۞228۩if(node != null){
smallsql/database/SQLTokenizer.java۞229۩value = node.value;
smallsql/database/SQLTokenizer.java۞230۩node = node.nextLetter;
smallsql/database/SQLTokenizer.java۞231۩}else{
smallsql/database/SQLTokenizer.java۞232۩value = 0;
smallsql/database/SQLTokenizer.java۞233۩node = null;
smallsql/database/SQLTokenizer.java۞234۩}
smallsql/database/SQLTokenizer.java۞235۩}else{
smallsql/database/SQLTokenizer.java۞236۩quoteBuffer.append(c);
smallsql/database/SQLTokenizer.java۞237۩}
smallsql/database/SQLTokenizer.java۞238۩wasWhiteSpace = false;
smallsql/database/SQLTokenizer.java۞239۩break;
smallsql/database/SQLTokenizer.java۞240۩}
smallsql/database/SQLTokenizer.java۞241۩}
smallsql/database/SQLTokenizer.java۞242۩if (comment == MULTI_COMMENT) {
smallsql/database/SQLTokenizer.java۞243۩throw SmallSQLException.create(Language.STXADD_COMMENT_OPEN);
smallsql/database/SQLTokenizer.java۞244۩}
smallsql/database/SQLTokenizer.java۞245۩if(!wasWhiteSpace) {
smallsql/database/SQLTokenizer.java۞246۩tokens.add( new SQLToken( value, tokenStart, sql.length) );
smallsql/database/SQLTokenizer.java۞247۩}
smallsql/database/SQLTokenizer.java۞249۩return tokens;
smallsql/database/SQLTokenizer.java۞250۩}
smallsql/database/SQLTokenizer.java۞252۩static private void addKeyWord( String keyword, int value){
smallsql/database/SQLTokenizer.java۞253۩keywords.put( Utils.getInteger( value), keyword );
smallsql/database/SQLTokenizer.java۞255۩char[] letters = keyword.toCharArray();
smallsql/database/SQLTokenizer.java۞256۩if(searchTree == null){
smallsql/database/SQLTokenizer.java۞257۩searchTree = new SearchNode();
smallsql/database/SQLTokenizer.java۞258۩searchTree.letter = (char)(letters[0] | 0x20);
smallsql/database/SQLTokenizer.java۞259۩}
smallsql/database/SQLTokenizer.java۞260۩SearchNode prev = null;
smallsql/database/SQLTokenizer.java۞261۩SearchNode node = searchTree;
smallsql/database/SQLTokenizer.java۞262۩boolean wasNextEntry = true;
smallsql/database/SQLTokenizer.java۞263۩for(int i=0; i<letters.length; i++){
smallsql/database/SQLTokenizer.java۞264۩char c = (char)(letters[i] | 0x20);
smallsql/database/SQLTokenizer.java۞265۩while(node != null && node.letter != c) {
smallsql/database/SQLTokenizer.java۞266۩prev = node;
smallsql/database/SQLTokenizer.java۞267۩node = node.nextEntry;
smallsql/database/SQLTokenizer.java۞268۩wasNextEntry = true;
smallsql/database/SQLTokenizer.java۞269۩}
smallsql/database/SQLTokenizer.java۞270۩if(node == null){
smallsql/database/SQLTokenizer.java۞271۩node = new SearchNode();
smallsql/database/SQLTokenizer.java۞272۩node.letter = c;
smallsql/database/SQLTokenizer.java۞273۩if(wasNextEntry)
smallsql/database/SQLTokenizer.java۞274۩prev.nextEntry = node;
smallsql/database/SQLTokenizer.java۞275۩else prev.nextLetter = node;
smallsql/database/SQLTokenizer.java۞276۩wasNextEntry = false;
smallsql/database/SQLTokenizer.java۞277۩prev = node;
smallsql/database/SQLTokenizer.java۞278۩node = null;
smallsql/database/SQLTokenizer.java۞279۩}else{
smallsql/database/SQLTokenizer.java۞280۩prev = node;
smallsql/database/SQLTokenizer.java۞281۩node = node.nextLetter;
smallsql/database/SQLTokenizer.java۞282۩wasNextEntry = false;
smallsql/database/SQLTokenizer.java۞283۩}
smallsql/database/SQLTokenizer.java۞284۩}
smallsql/database/SQLTokenizer.java۞285۩prev.value = value;
smallsql/database/SQLTokenizer.java۞286۩}
smallsql/database/SQLTokenizer.java۞288۩static final String getKeyWord(int key){
smallsql/database/SQLTokenizer.java۞289۩return (String)keywords.get( Utils.getInteger(key) );
smallsql/database/SQLTokenizer.java۞290۩}
smallsql/database/SQLTokenizer.java۞292۩static final int getSQLDataType(int type){
smallsql/database/SQLTokenizer.java۞294۩switch(type){
smallsql/database/SQLTokenizer.java۞295۩case SQLTokenizer.BIT:
smallsql/database/SQLTokenizer.java۞296۩return Types.BIT;
smallsql/database/SQLTokenizer.java۞297۩case SQLTokenizer.BOOLEAN:
smallsql/database/SQLTokenizer.java۞298۩return Types.BOOLEAN;
smallsql/database/SQLTokenizer.java۞299۩case SQLTokenizer.BINARY:
smallsql/database/SQLTokenizer.java۞300۩return Types.BINARY;
smallsql/database/SQLTokenizer.java۞301۩case SQLTokenizer.VARBINARY:
smallsql/database/SQLTokenizer.java۞302۩return Types.VARBINARY;
smallsql/database/SQLTokenizer.java۞303۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/SQLTokenizer.java۞304۩return Types.LONGVARBINARY;
smallsql/database/SQLTokenizer.java۞305۩case SQLTokenizer.BLOB:
smallsql/database/SQLTokenizer.java۞306۩return Types.BLOB;
smallsql/database/SQLTokenizer.java۞307۩case SQLTokenizer.TINYINT:
smallsql/database/SQLTokenizer.java۞308۩return Types.TINYINT;
smallsql/database/SQLTokenizer.java۞309۩case SQLTokenizer.SMALLINT:
smallsql/database/SQLTokenizer.java۞310۩return Types.SMALLINT;
smallsql/database/SQLTokenizer.java۞311۩case SQLTokenizer.INT:
smallsql/database/SQLTokenizer.java۞312۩return Types.INTEGER;
smallsql/database/SQLTokenizer.java۞313۩case SQLTokenizer.BIGINT:
smallsql/database/SQLTokenizer.java۞314۩return Types.BIGINT;
smallsql/database/SQLTokenizer.java۞315۩case SQLTokenizer.SMALLMONEY:
smallsql/database/SQLTokenizer.java۞316۩case SQLTokenizer.MONEY:
smallsql/database/SQLTokenizer.java۞317۩case SQLTokenizer.DECIMAL:
smallsql/database/SQLTokenizer.java۞318۩return Types.DECIMAL;
smallsql/database/SQLTokenizer.java۞319۩case SQLTokenizer.NUMERIC:
smallsql/database/SQLTokenizer.java۞320۩return Types.NUMERIC;
smallsql/database/SQLTokenizer.java۞321۩case SQLTokenizer.REAL:
smallsql/database/SQLTokenizer.java۞322۩return Types.REAL;
smallsql/database/SQLTokenizer.java۞323۩case SQLTokenizer.FLOAT:
smallsql/database/SQLTokenizer.java۞324۩return Types.FLOAT;
smallsql/database/SQLTokenizer.java۞325۩case SQLTokenizer.DOUBLE:
smallsql/database/SQLTokenizer.java۞326۩return Types.DOUBLE;
smallsql/database/SQLTokenizer.java۞327۩case SQLTokenizer.DATE:
smallsql/database/SQLTokenizer.java۞328۩return Types.DATE;
smallsql/database/SQLTokenizer.java۞329۩case SQLTokenizer.TIME:
smallsql/database/SQLTokenizer.java۞330۩return Types.TIME;
smallsql/database/SQLTokenizer.java۞331۩case SQLTokenizer.TIMESTAMP:
smallsql/database/SQLTokenizer.java۞332۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/SQLTokenizer.java۞333۩return Types.TIMESTAMP;
smallsql/database/SQLTokenizer.java۞334۩case SQLTokenizer.CHAR:
smallsql/database/SQLTokenizer.java۞335۩case SQLTokenizer.NCHAR:
smallsql/database/SQLTokenizer.java۞336۩return Types.CHAR;
smallsql/database/SQLTokenizer.java۞337۩case SQLTokenizer.VARCHAR:
smallsql/database/SQLTokenizer.java۞338۩case SQLTokenizer.NVARCHAR:
smallsql/database/SQLTokenizer.java۞339۩return Types.VARCHAR;
smallsql/database/SQLTokenizer.java۞340۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/SQLTokenizer.java۞341۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/SQLTokenizer.java۞342۩return Types.LONGVARCHAR;
smallsql/database/SQLTokenizer.java۞343۩case SQLTokenizer.CLOB:
smallsql/database/SQLTokenizer.java۞344۩case SQLTokenizer.NCLOB:
smallsql/database/SQLTokenizer.java۞345۩return Types.CLOB;
smallsql/database/SQLTokenizer.java۞346۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/SQLTokenizer.java۞347۩return Types.JAVA_OBJECT;
smallsql/database/SQLTokenizer.java۞348۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/SQLTokenizer.java۞349۩return -11;
smallsql/database/SQLTokenizer.java۞350۩case SQLTokenizer.NULL:
smallsql/database/SQLTokenizer.java۞351۩return Types.NULL;
smallsql/database/SQLTokenizer.java۞352۩default: throw new Error("DataType:"+type);
smallsql/database/SQLTokenizer.java۞353۩}
smallsql/database/SQLTokenizer.java۞354۩}
smallsql/database/SQLTokenizer.java۞356۩static SearchNode searchTree;
smallsql/database/SQLTokenizer.java۞358۩static Hashtable keywords = new Hashtable(337);
smallsql/database/SQLTokenizer.java۞359۩static final int VALUE      = 0;
smallsql/database/SQLTokenizer.java۞360۩static final int STRING     = 3;
smallsql/database/SQLTokenizer.java۞361۩static final int IDENTIFIER  = 4;
smallsql/database/SQLTokenizer.java۞362۩static final int NUMBERVALUE= 5;
smallsql/database/SQLTokenizer.java۞363۩static{
smallsql/database/SQLTokenizer.java۞365۩keywords.put( new Integer(VALUE),       "<expression>" );
smallsql/database/SQLTokenizer.java۞366۩keywords.put( new Integer(IDENTIFIER),   "<identifier>" );
smallsql/database/SQLTokenizer.java۞367۩keywords.put( new Integer(NUMBERVALUE), "<number>" );
smallsql/database/SQLTokenizer.java۞368۩}
smallsql/database/SQLTokenizer.java۞370۩static final int PERCENT        = '%';
smallsql/database/SQLTokenizer.java۞371۩static final int BIT_AND        = '&';
smallsql/database/SQLTokenizer.java۞372۩static final int PARENTHESIS_L  = '(';
smallsql/database/SQLTokenizer.java۞373۩static final int PARENTHESIS_R  = ')';
smallsql/database/SQLTokenizer.java۞374۩static final int ASTERISK       = '*';
smallsql/database/SQLTokenizer.java۞375۩static final int PLUS           = '+';
smallsql/database/SQLTokenizer.java۞376۩static final int COMMA          = ',';
smallsql/database/SQLTokenizer.java۞377۩static final int MINUS          = '-';
smallsql/database/SQLTokenizer.java۞378۩static final int POINT          = '.';
smallsql/database/SQLTokenizer.java۞379۩static final int SLACH          = '/';
smallsql/database/SQLTokenizer.java۞380۩static final int LESSER         = '<';
smallsql/database/SQLTokenizer.java۞381۩static final int EQUALS         = '=';
smallsql/database/SQLTokenizer.java۞382۩static final int GREATER        = '>';
smallsql/database/SQLTokenizer.java۞383۩static final int QUESTION       = '?';
smallsql/database/SQLTokenizer.java۞384۩static final int BIT_XOR        = '^';
smallsql/database/SQLTokenizer.java۞385۩static final int ESCAPE_L       = '{';
smallsql/database/SQLTokenizer.java۞386۩static final int BIT_OR         = '|';
smallsql/database/SQLTokenizer.java۞387۩static final int ESCAPE_R       = '}';
smallsql/database/SQLTokenizer.java۞388۩static final int TILDE          = '~';
smallsql/database/SQLTokenizer.java۞390۩static final int LESSER_EQU     = 100 + LESSER;
smallsql/database/SQLTokenizer.java۞391۩static final int UNEQUALS       = 100 + EQUALS;
smallsql/database/SQLTokenizer.java۞392۩static final int GREATER_EQU    = 100 + GREATER;
smallsql/database/SQLTokenizer.java۞394۩static{
smallsql/database/SQLTokenizer.java۞396۩keywords.put( new Integer(LESSER_EQU),	"<=" );
smallsql/database/SQLTokenizer.java۞397۩keywords.put( new Integer(UNEQUALS),   	"<>" );
smallsql/database/SQLTokenizer.java۞398۩keywords.put( new Integer(GREATER_EQU), ">=" );
smallsql/database/SQLTokenizer.java۞399۩}
smallsql/database/SQLTokenizer.java۞400۩static final int SELECT     = 200;
smallsql/database/SQLTokenizer.java۞401۩static final int DELETE     = 201;
smallsql/database/SQLTokenizer.java۞403۩static final int INTO       = 203;
smallsql/database/SQLTokenizer.java۞404۩static final int UPDATE     = 204;
smallsql/database/SQLTokenizer.java۞405۩static final int CREATE     = 205;
smallsql/database/SQLTokenizer.java۞406۩static final int DROP       = 206;
smallsql/database/SQLTokenizer.java۞407۩static final int ALTER      = 207;
smallsql/database/SQLTokenizer.java۞408۩static final int SET        = 208;
smallsql/database/SQLTokenizer.java۞409۩static final int EXECUTE    = 209;
smallsql/database/SQLTokenizer.java۞410۩static final int FROM       = 210;
smallsql/database/SQLTokenizer.java۞411۩static final int WHERE      = 211;
smallsql/database/SQLTokenizer.java۞412۩static final int GROUP      = 212;
smallsql/database/SQLTokenizer.java۞413۩static final int BY         = 213;
smallsql/database/SQLTokenizer.java۞414۩static final int HAVING     = 214;
smallsql/database/SQLTokenizer.java۞415۩static final int ORDER      = 215;
smallsql/database/SQLTokenizer.java۞416۩static final int ASC        = 216;
smallsql/database/SQLTokenizer.java۞417۩static final int DESC       = 217;
smallsql/database/SQLTokenizer.java۞418۩static final int VALUES     = 218;
smallsql/database/SQLTokenizer.java۞419۩static final int AS         = 219;
smallsql/database/SQLTokenizer.java۞420۩static final int DEFAULT    = 220;
smallsql/database/SQLTokenizer.java۞421۩static final int IDENTITY   = 221;
smallsql/database/SQLTokenizer.java۞422۩static final int INNER      = 222;
smallsql/database/SQLTokenizer.java۞423۩static final int JOIN       = 223;
smallsql/database/SQLTokenizer.java۞424۩static final int ON         = 224;
smallsql/database/SQLTokenizer.java۞425۩static final int OUTER      = 225;
smallsql/database/SQLTokenizer.java۞426۩static final int FULL       = 226;
smallsql/database/SQLTokenizer.java۞427۩static final int CROSS      = 227;
smallsql/database/SQLTokenizer.java۞428۩static final int USE		= 228;
smallsql/database/SQLTokenizer.java۞429۩static final int TOP		= 229;
smallsql/database/SQLTokenizer.java۞430۩static final int ADD		= 230;
smallsql/database/SQLTokenizer.java۞431۩static final int LIMIT      = 231;
smallsql/database/SQLTokenizer.java۞433۩static final int DATABASE   = 235;
smallsql/database/SQLTokenizer.java۞434۩static final int TABLE      = 236;
smallsql/database/SQLTokenizer.java۞435۩static final int VIEW       = 237;
smallsql/database/SQLTokenizer.java۞436۩static final int INDEX      = 238;
smallsql/database/SQLTokenizer.java۞437۩static final int PROCEDURE  = 239;
smallsql/database/SQLTokenizer.java۞439۩static final int TRANSACTION= 240;
smallsql/database/SQLTokenizer.java۞440۩static final int ISOLATION  = 241;
smallsql/database/SQLTokenizer.java۞441۩static final int LEVEL      = 242;
smallsql/database/SQLTokenizer.java۞442۩static final int READ       = 243;
smallsql/database/SQLTokenizer.java۞443۩static final int COMMITTED  = 244;
smallsql/database/SQLTokenizer.java۞444۩static final int UNCOMMITTED= 245;
smallsql/database/SQLTokenizer.java۞445۩static final int REPEATABLE = 246;
smallsql/database/SQLTokenizer.java۞446۩static final int SERIALIZABLE= 247;
smallsql/database/SQLTokenizer.java۞448۩static final int CONSTRAINT = 250;
smallsql/database/SQLTokenizer.java۞449۩static final int PRIMARY 	= 251;
smallsql/database/SQLTokenizer.java۞450۩static final int FOREIGN 	= 252;
smallsql/database/SQLTokenizer.java۞451۩static final int KEY 		= 253;
smallsql/database/SQLTokenizer.java۞452۩static final int UNIQUE 	= 254;
smallsql/database/SQLTokenizer.java۞453۩static final int CLUSTERED  = 255;
smallsql/database/SQLTokenizer.java۞454۩static final int NONCLUSTERED=256;
smallsql/database/SQLTokenizer.java۞455۩static final int REFERENCES = 257;
smallsql/database/SQLTokenizer.java۞457۩static final int UNION 		= 260;
smallsql/database/SQLTokenizer.java۞458۩static final int ALL 		= 261;
smallsql/database/SQLTokenizer.java۞459۩static final int DISTINCT   = 262;
smallsql/database/SQLTokenizer.java۞460۩static final int CASE 		= 263;
smallsql/database/SQLTokenizer.java۞461۩static final int WHEN 		= 264;
smallsql/database/SQLTokenizer.java۞462۩static final int THEN 		= 265;
smallsql/database/SQLTokenizer.java۞463۩static final int ELSE 		= 266;
smallsql/database/SQLTokenizer.java۞464۩static final int END 		= 267;
smallsql/database/SQLTokenizer.java۞465۩static final int SWITCH 	= 268;
smallsql/database/SQLTokenizer.java۞467۩static final String DESC_STR   = "DESC";
smallsql/database/SQLTokenizer.java۞468۩static{
smallsql/database/SQLTokenizer.java۞469۩addKeyWord( "SELECT",   SELECT);
smallsql/database/SQLTokenizer.java۞470۩addKeyWord( "DELETE",   DELETE);
smallsql/database/SQLTokenizer.java۞472۩addKeyWord( "INTO",     INTO);
smallsql/database/SQLTokenizer.java۞473۩addKeyWord( "UPDATE",   UPDATE);
smallsql/database/SQLTokenizer.java۞474۩addKeyWord( "CREATE",   CREATE);
smallsql/database/SQLTokenizer.java۞475۩addKeyWord( "DROP",     DROP);
smallsql/database/SQLTokenizer.java۞476۩addKeyWord( "ALTER",    ALTER);
smallsql/database/SQLTokenizer.java۞477۩addKeyWord( "SET",      SET);
smallsql/database/SQLTokenizer.java۞478۩addKeyWord( "EXEC",     EXECUTE);
smallsql/database/SQLTokenizer.java۞479۩addKeyWord( "EXECUTE",  EXECUTE);
smallsql/database/SQLTokenizer.java۞480۩addKeyWord( "FROM",     FROM);
smallsql/database/SQLTokenizer.java۞481۩addKeyWord( "WHERE",    WHERE);
smallsql/database/SQLTokenizer.java۞482۩addKeyWord( "GROUP",    GROUP);
smallsql/database/SQLTokenizer.java۞483۩addKeyWord( "BY",       BY);
smallsql/database/SQLTokenizer.java۞484۩addKeyWord( "HAVING",   HAVING);
smallsql/database/SQLTokenizer.java۞485۩addKeyWord( "ORDER",    ORDER);
smallsql/database/SQLTokenizer.java۞486۩addKeyWord( "ASC",      ASC);
smallsql/database/SQLTokenizer.java۞487۩addKeyWord( DESC_STR,   DESC);
smallsql/database/SQLTokenizer.java۞488۩addKeyWord( "VALUES",   VALUES);
smallsql/database/SQLTokenizer.java۞489۩addKeyWord( "AS",       AS);
smallsql/database/SQLTokenizer.java۞490۩addKeyWord( "DEFAULT",  DEFAULT);
smallsql/database/SQLTokenizer.java۞491۩addKeyWord( "AUTO_INCREMENT", IDENTITY);
smallsql/database/SQLTokenizer.java۞492۩addKeyWord( "IDENTITY", IDENTITY);
smallsql/database/SQLTokenizer.java۞493۩addKeyWord( "INNER",    INNER);
smallsql/database/SQLTokenizer.java۞494۩addKeyWord( "JOIN",     JOIN);
smallsql/database/SQLTokenizer.java۞495۩addKeyWord( "ON",       ON);
smallsql/database/SQLTokenizer.java۞496۩addKeyWord( "OUTER",    OUTER);
smallsql/database/SQLTokenizer.java۞497۩addKeyWord( "FULL",     FULL);
smallsql/database/SQLTokenizer.java۞498۩addKeyWord( "CROSS",    CROSS);
smallsql/database/SQLTokenizer.java۞499۩addKeyWord( "USE",      USE);
smallsql/database/SQLTokenizer.java۞500۩addKeyWord( "TOP",      TOP);
smallsql/database/SQLTokenizer.java۞501۩addKeyWord( "ADD",      ADD);
smallsql/database/SQLTokenizer.java۞502۩addKeyWord( "LIMIT",    LIMIT);
smallsql/database/SQLTokenizer.java۞504۩addKeyWord( "DATABASE", DATABASE);
smallsql/database/SQLTokenizer.java۞505۩addKeyWord( "TABLE",    TABLE);
smallsql/database/SQLTokenizer.java۞506۩addKeyWord( "VIEW",     VIEW);
smallsql/database/SQLTokenizer.java۞507۩addKeyWord( "INDEX",    INDEX);
smallsql/database/SQLTokenizer.java۞508۩addKeyWord( "PROCEDURE",PROCEDURE);
smallsql/database/SQLTokenizer.java۞510۩addKeyWord( "TRANSACTION",  TRANSACTION);
smallsql/database/SQLTokenizer.java۞511۩addKeyWord( "ISOLATION",    ISOLATION);
smallsql/database/SQLTokenizer.java۞512۩addKeyWord( "LEVEL",        LEVEL);
smallsql/database/SQLTokenizer.java۞513۩addKeyWord( "READ",         READ);
smallsql/database/SQLTokenizer.java۞514۩addKeyWord( "COMMITTED",    COMMITTED);
smallsql/database/SQLTokenizer.java۞515۩addKeyWord( "UNCOMMITTED",  UNCOMMITTED);
smallsql/database/SQLTokenizer.java۞516۩addKeyWord( "REPEATABLE",   REPEATABLE);
smallsql/database/SQLTokenizer.java۞517۩addKeyWord( "SERIALIZABLE", SERIALIZABLE);
smallsql/database/SQLTokenizer.java۞519۩addKeyWord( "CONSTRAINT", 	CONSTRAINT);
smallsql/database/SQLTokenizer.java۞520۩addKeyWord( "PRIMARY",    	PRIMARY);
smallsql/database/SQLTokenizer.java۞521۩addKeyWord( "FOREIGN",     	FOREIGN);
smallsql/database/SQLTokenizer.java۞522۩addKeyWord( "KEY",    		KEY);
smallsql/database/SQLTokenizer.java۞523۩addKeyWord( "UNIQUE",		UNIQUE);
smallsql/database/SQLTokenizer.java۞524۩addKeyWord( "CLUSTERED",  	CLUSTERED);
smallsql/database/SQLTokenizer.java۞525۩addKeyWord( "NONCLUSTERED", NONCLUSTERED);
smallsql/database/SQLTokenizer.java۞526۩addKeyWord( "REFERENCES",   REFERENCES);
smallsql/database/SQLTokenizer.java۞528۩addKeyWord( "UNION", 		UNION);
smallsql/database/SQLTokenizer.java۞529۩addKeyWord( "ALL",   		ALL);
smallsql/database/SQLTokenizer.java۞530۩addKeyWord( "DISTINCT",   	DISTINCT);
smallsql/database/SQLTokenizer.java۞531۩addKeyWord( "CASE",   		CASE);
smallsql/database/SQLTokenizer.java۞532۩addKeyWord( "WHEN",   		WHEN);
smallsql/database/SQLTokenizer.java۞533۩addKeyWord( "THEN",   		THEN);
smallsql/database/SQLTokenizer.java۞534۩addKeyWord( "ELSE",   		ELSE);
smallsql/database/SQLTokenizer.java۞535۩addKeyWord( "END",   		END);
smallsql/database/SQLTokenizer.java۞536۩addKeyWord( "SWITCH", 		SWITCH);
smallsql/database/SQLTokenizer.java۞537۩}
smallsql/database/SQLTokenizer.java۞541۩static final int BIT            = 300;
smallsql/database/SQLTokenizer.java۞542۩static final int BOOLEAN        = 301;
smallsql/database/SQLTokenizer.java۞543۩static final int BINARY         = 310;
smallsql/database/SQLTokenizer.java۞544۩static final int VARBINARY      = 311;
smallsql/database/SQLTokenizer.java۞545۩static final int RAW      		= 312;
smallsql/database/SQLTokenizer.java۞546۩static final int LONGVARBINARY  = 313;
smallsql/database/SQLTokenizer.java۞547۩static final int BLOB           = 316;
smallsql/database/SQLTokenizer.java۞548۩static final int TINYINT        = 321;
smallsql/database/SQLTokenizer.java۞549۩static final int SMALLINT       = 322;
smallsql/database/SQLTokenizer.java۞550۩static final int INT            = 323;
smallsql/database/SQLTokenizer.java۞551۩static final int COUNTER        = 324;
smallsql/database/SQLTokenizer.java۞552۩static final int BIGINT         = 325;
smallsql/database/SQLTokenizer.java۞553۩static final int SMALLMONEY     = 330;
smallsql/database/SQLTokenizer.java۞554۩static final int MONEY          = 331;
smallsql/database/SQLTokenizer.java۞555۩static final int DECIMAL        = 332;
smallsql/database/SQLTokenizer.java۞556۩static final int NUMERIC        = 333;
smallsql/database/SQLTokenizer.java۞557۩static final int REAL           = 336;
smallsql/database/SQLTokenizer.java۞558۩static final int FLOAT          = 337;
smallsql/database/SQLTokenizer.java۞559۩static final int DOUBLE         = 338;
smallsql/database/SQLTokenizer.java۞560۩static final int DATE           = 340;
smallsql/database/SQLTokenizer.java۞561۩static final int TIME           = 341;
smallsql/database/SQLTokenizer.java۞562۩static final int TIMESTAMP      = 342;
smallsql/database/SQLTokenizer.java۞563۩static final int SMALLDATETIME  = 343;
smallsql/database/SQLTokenizer.java۞564۩static final int CHAR           = 350;
smallsql/database/SQLTokenizer.java۞565۩static final int NCHAR          = 352;
smallsql/database/SQLTokenizer.java۞566۩static final int VARCHAR        = 353;
smallsql/database/SQLTokenizer.java۞567۩static final int NVARCHAR       = 355;
smallsql/database/SQLTokenizer.java۞568۩static final int SYSNAME        = 357;
smallsql/database/SQLTokenizer.java۞569۩static final int LONGVARCHAR    = 359;
smallsql/database/SQLTokenizer.java۞570۩static final int LONGNVARCHAR   = 360;
smallsql/database/SQLTokenizer.java۞571۩static final int LONG           = 361;
smallsql/database/SQLTokenizer.java۞572۩static final int CLOB           = 362;
smallsql/database/SQLTokenizer.java۞573۩static final int NCLOB          = 363;
smallsql/database/SQLTokenizer.java۞574۩static final int UNIQUEIDENTIFIER= 370;
smallsql/database/SQLTokenizer.java۞575۩static final int JAVA_OBJECT    = 371;
smallsql/database/SQLTokenizer.java۞577۩static{
smallsql/database/SQLTokenizer.java۞578۩addKeyWord( "BIT",          BIT);
smallsql/database/SQLTokenizer.java۞579۩addKeyWord( "BOOLEAN",      BOOLEAN);
smallsql/database/SQLTokenizer.java۞580۩addKeyWord( "BINARY",       BINARY);
smallsql/database/SQLTokenizer.java۞581۩addKeyWord( "VARBINARY",    VARBINARY);
smallsql/database/SQLTokenizer.java۞582۩addKeyWord( "RAW",          RAW);
smallsql/database/SQLTokenizer.java۞583۩addKeyWord( "IMAGE",        LONGVARBINARY);
smallsql/database/SQLTokenizer.java۞584۩addKeyWord( "LONGVARBINARY",LONGVARBINARY);
smallsql/database/SQLTokenizer.java۞585۩addKeyWord( "BLOB",         BLOB);
smallsql/database/SQLTokenizer.java۞586۩addKeyWord( "BYTE",         TINYINT);
smallsql/database/SQLTokenizer.java۞587۩addKeyWord( "TINYINT",      TINYINT);
smallsql/database/SQLTokenizer.java۞588۩addKeyWord( "SMALLINT",     SMALLINT);
smallsql/database/SQLTokenizer.java۞589۩addKeyWord( "INTEGER",      INT);
smallsql/database/SQLTokenizer.java۞590۩addKeyWord( "INT",          INT);
smallsql/database/SQLTokenizer.java۞591۩addKeyWord( "SERIAL",       COUNTER);
smallsql/database/SQLTokenizer.java۞592۩addKeyWord( "COUNTER",      COUNTER);
smallsql/database/SQLTokenizer.java۞593۩addKeyWord( "BIGINT",       BIGINT);
smallsql/database/SQLTokenizer.java۞594۩addKeyWord( "SMALLMONEY",   SMALLMONEY);
smallsql/database/SQLTokenizer.java۞595۩addKeyWord( "MONEY",        MONEY);
smallsql/database/SQLTokenizer.java۞596۩addKeyWord( "NUMBER",       DECIMAL);
smallsql/database/SQLTokenizer.java۞597۩addKeyWord( "VARNUM",       DECIMAL);
smallsql/database/SQLTokenizer.java۞598۩addKeyWord( "DECIMAL",      DECIMAL);
smallsql/database/SQLTokenizer.java۞599۩addKeyWord( "NUMERIC",      NUMERIC);
smallsql/database/SQLTokenizer.java۞600۩addKeyWord( "REAL",         REAL);
smallsql/database/SQLTokenizer.java۞601۩addKeyWord( "FLOAT",        FLOAT);
smallsql/database/SQLTokenizer.java۞602۩addKeyWord( "DOUBLE",       DOUBLE);
smallsql/database/SQLTokenizer.java۞603۩addKeyWord( "DATE",         DATE);
smallsql/database/SQLTokenizer.java۞604۩addKeyWord( "TIME",         TIME);
smallsql/database/SQLTokenizer.java۞605۩addKeyWord( "DATETIME",     TIMESTAMP);
smallsql/database/SQLTokenizer.java۞606۩addKeyWord( "TIMESTAMP",    TIMESTAMP);
smallsql/database/SQLTokenizer.java۞607۩addKeyWord( "SMALLDATETIME",SMALLDATETIME);
smallsql/database/SQLTokenizer.java۞608۩addKeyWord( "CHARACTER",    CHAR);
smallsql/database/SQLTokenizer.java۞609۩addKeyWord( "CHAR",         CHAR);
smallsql/database/SQLTokenizer.java۞610۩addKeyWord( "NCHAR",        NCHAR);
smallsql/database/SQLTokenizer.java۞611۩addKeyWord( "VARCHAR2",     VARCHAR);
smallsql/database/SQLTokenizer.java۞612۩addKeyWord( "VARCHAR",      VARCHAR);
smallsql/database/SQLTokenizer.java۞613۩addKeyWord( "NVARCHAR2",    NVARCHAR);
smallsql/database/SQLTokenizer.java۞614۩addKeyWord( "NVARCHAR",     NVARCHAR);
smallsql/database/SQLTokenizer.java۞615۩addKeyWord( "SYSNAME",      SYSNAME);
smallsql/database/SQLTokenizer.java۞616۩addKeyWord( "TEXT",         LONGVARCHAR);
smallsql/database/SQLTokenizer.java۞617۩addKeyWord( "LONGVARCHAR",  LONGVARCHAR);
smallsql/database/SQLTokenizer.java۞618۩addKeyWord( "NTEXT",        LONGNVARCHAR);
smallsql/database/SQLTokenizer.java۞619۩addKeyWord( "LONGNVARCHAR", LONGNVARCHAR);
smallsql/database/SQLTokenizer.java۞620۩addKeyWord( "LONG",         LONG);
smallsql/database/SQLTokenizer.java۞621۩addKeyWord( "CLOB",         CLOB);
smallsql/database/SQLTokenizer.java۞622۩addKeyWord( "NCLOB",        NCLOB);
smallsql/database/SQLTokenizer.java۞623۩addKeyWord( "UNIQUEIDENTIFIER",UNIQUEIDENTIFIER);
smallsql/database/SQLTokenizer.java۞624۩addKeyWord( "SQL_VARIANT",  JAVA_OBJECT);
smallsql/database/SQLTokenizer.java۞625۩addKeyWord( "JAVA_OBJECT",  JAVA_OBJECT);
smallsql/database/SQLTokenizer.java۞626۩}
smallsql/database/SQLTokenizer.java۞629۩static final int D      = 400;
smallsql/database/SQLTokenizer.java۞630۩static final int T      = 401;
smallsql/database/SQLTokenizer.java۞631۩static final int TS     = 402;
smallsql/database/SQLTokenizer.java۞632۩static final int FN     = 403;
smallsql/database/SQLTokenizer.java۞633۩static final int CALL   = 404;
smallsql/database/SQLTokenizer.java۞634۩static final int OJ     = 405;
smallsql/database/SQLTokenizer.java۞635۩static{
smallsql/database/SQLTokenizer.java۞636۩addKeyWord( "D",    D);
smallsql/database/SQLTokenizer.java۞637۩addKeyWord( "T",    T);
smallsql/database/SQLTokenizer.java۞638۩addKeyWord( "TS",   TS);
smallsql/database/SQLTokenizer.java۞639۩addKeyWord( "FN",   FN);
smallsql/database/SQLTokenizer.java۞640۩addKeyWord( "CALL", CALL);
smallsql/database/SQLTokenizer.java۞641۩addKeyWord( "OJ", OJ);
smallsql/database/SQLTokenizer.java۞642۩}
smallsql/database/SQLTokenizer.java۞645۩static final int OR     = 500;
smallsql/database/SQLTokenizer.java۞646۩static final int AND    = 501;
smallsql/database/SQLTokenizer.java۞647۩static final int IS     = 502;
smallsql/database/SQLTokenizer.java۞648۩static final int NOT    = 503;
smallsql/database/SQLTokenizer.java۞649۩static final int NULL   = 504;
smallsql/database/SQLTokenizer.java۞650۩static final int TRUE   = 505;
smallsql/database/SQLTokenizer.java۞651۩static final int FALSE  = 506;
smallsql/database/SQLTokenizer.java۞652۩static final int BETWEEN= 507;
smallsql/database/SQLTokenizer.java۞653۩static final int LIKE   = 508;
smallsql/database/SQLTokenizer.java۞654۩static final int IN     = 509;
smallsql/database/SQLTokenizer.java۞655۩static{
smallsql/database/SQLTokenizer.java۞656۩addKeyWord( "OR",       OR);
smallsql/database/SQLTokenizer.java۞657۩addKeyWord( "AND",      AND);
smallsql/database/SQLTokenizer.java۞658۩addKeyWord( "IS",       IS);
smallsql/database/SQLTokenizer.java۞659۩addKeyWord( "NOT",      NOT);
smallsql/database/SQLTokenizer.java۞660۩addKeyWord( "NULL",     NULL);
smallsql/database/SQLTokenizer.java۞661۩addKeyWord( "YES",      TRUE);
smallsql/database/SQLTokenizer.java۞662۩addKeyWord( "TRUE",     TRUE);
smallsql/database/SQLTokenizer.java۞663۩addKeyWord( "NO",    	FALSE);
smallsql/database/SQLTokenizer.java۞664۩addKeyWord( "FALSE",    FALSE);
smallsql/database/SQLTokenizer.java۞665۩addKeyWord( "BETWEEN",  BETWEEN);
smallsql/database/SQLTokenizer.java۞666۩addKeyWord( "LIKE",     LIKE);
smallsql/database/SQLTokenizer.java۞667۩addKeyWord( "IN",       IN);
smallsql/database/SQLTokenizer.java۞668۩}
smallsql/database/SQLTokenizer.java۞672۩static final int ABS        = 1000;
smallsql/database/SQLTokenizer.java۞673۩static final int ACOS       = 1001;
smallsql/database/SQLTokenizer.java۞674۩static final int ASIN       = 1002;
smallsql/database/SQLTokenizer.java۞675۩static final int ATAN       = 1003;
smallsql/database/SQLTokenizer.java۞676۩static final int ATAN2      = 1004;
smallsql/database/SQLTokenizer.java۞677۩static final int CEILING    = 1005;
smallsql/database/SQLTokenizer.java۞678۩static final int COS        = 1006;
smallsql/database/SQLTokenizer.java۞679۩static final int COT        = 1007;
smallsql/database/SQLTokenizer.java۞680۩static final int DEGREES    = 1008;
smallsql/database/SQLTokenizer.java۞681۩static final int EXP        = 1009;
smallsql/database/SQLTokenizer.java۞682۩static final int FLOOR      = 1010;
smallsql/database/SQLTokenizer.java۞683۩static final int LOG        = 1011;
smallsql/database/SQLTokenizer.java۞684۩static final int LOG10      = 1012;
smallsql/database/SQLTokenizer.java۞685۩static final int MOD        = 1013;
smallsql/database/SQLTokenizer.java۞686۩static final int PI         = 1014;
smallsql/database/SQLTokenizer.java۞687۩static final int POWER      = 1015;
smallsql/database/SQLTokenizer.java۞688۩static final int RADIANS    = 1016;
smallsql/database/SQLTokenizer.java۞689۩static final int RAND       = 1017;
smallsql/database/SQLTokenizer.java۞690۩static final int ROUND      = 1018;
smallsql/database/SQLTokenizer.java۞691۩static final int SIGN       = 1019;
smallsql/database/SQLTokenizer.java۞692۩static final int SIN        = 1020;
smallsql/database/SQLTokenizer.java۞693۩static final int SQRT       = 1021;
smallsql/database/SQLTokenizer.java۞694۩static final int TAN        = 1022;
smallsql/database/SQLTokenizer.java۞695۩static final int TRUNCATE   = 1023;
smallsql/database/SQLTokenizer.java۞696۩static{
smallsql/database/SQLTokenizer.java۞697۩addKeyWord( "ABS",      ABS);
smallsql/database/SQLTokenizer.java۞698۩addKeyWord( "ACOS",     ACOS);
smallsql/database/SQLTokenizer.java۞699۩addKeyWord( "ASIN",     ASIN);
smallsql/database/SQLTokenizer.java۞700۩addKeyWord( "ATAN",     ATAN);
smallsql/database/SQLTokenizer.java۞701۩addKeyWord( "ATN2",    	ATAN2);
smallsql/database/SQLTokenizer.java۞702۩addKeyWord( "ATAN2",    ATAN2);
smallsql/database/SQLTokenizer.java۞703۩addKeyWord( "CEILING",  CEILING);
smallsql/database/SQLTokenizer.java۞704۩addKeyWord( "COS",      COS);
smallsql/database/SQLTokenizer.java۞705۩addKeyWord( "COT",      COT);
smallsql/database/SQLTokenizer.java۞706۩addKeyWord( "DEGREES",  DEGREES);
smallsql/database/SQLTokenizer.java۞707۩addKeyWord( "EXP",      EXP);
smallsql/database/SQLTokenizer.java۞708۩addKeyWord( "FLOOR",    FLOOR);
smallsql/database/SQLTokenizer.java۞709۩addKeyWord( "LOG",      LOG);
smallsql/database/SQLTokenizer.java۞710۩addKeyWord( "LOG10",    LOG10);
smallsql/database/SQLTokenizer.java۞711۩addKeyWord( "MOD",      MOD);
smallsql/database/SQLTokenizer.java۞712۩addKeyWord( "PI",       PI);
smallsql/database/SQLTokenizer.java۞713۩addKeyWord( "POWER",    POWER);
smallsql/database/SQLTokenizer.java۞714۩addKeyWord( "RADIANS",  RADIANS);
smallsql/database/SQLTokenizer.java۞715۩addKeyWord( "RAND",     RAND);
smallsql/database/SQLTokenizer.java۞716۩addKeyWord( "ROUND",    ROUND);
smallsql/database/SQLTokenizer.java۞717۩addKeyWord( "SIGN",     SIGN);
smallsql/database/SQLTokenizer.java۞718۩addKeyWord( "SIN",      SIN);
smallsql/database/SQLTokenizer.java۞719۩addKeyWord( "SQRT",     SQRT);
smallsql/database/SQLTokenizer.java۞720۩addKeyWord( "TAN",      TAN);
smallsql/database/SQLTokenizer.java۞721۩addKeyWord( "TRUNCATE", TRUNCATE);
smallsql/database/SQLTokenizer.java۞722۩}
smallsql/database/SQLTokenizer.java۞725۩static final int ASCII      = 1100;
smallsql/database/SQLTokenizer.java۞726۩static final int BITLEN     = 1101;
smallsql/database/SQLTokenizer.java۞727۩static final int CHARLEN    = 1102;
smallsql/database/SQLTokenizer.java۞728۩static final int CHARACTLEN = 1103;
smallsql/database/SQLTokenizer.java۞729۩static final int _CHAR      = 1104;
smallsql/database/SQLTokenizer.java۞730۩static final int CONCAT     = 1105;
smallsql/database/SQLTokenizer.java۞731۩static final int DIFFERENCE = 1106;
smallsql/database/SQLTokenizer.java۞732۩static final int INSERT     = 1107;
smallsql/database/SQLTokenizer.java۞733۩static final int LCASE      = 1108;
smallsql/database/SQLTokenizer.java۞734۩static final int LEFT       = 1109;
smallsql/database/SQLTokenizer.java۞735۩static final int LENGTH     = 1110;
smallsql/database/SQLTokenizer.java۞736۩static final int LOCATE     = 1111;
smallsql/database/SQLTokenizer.java۞737۩static final int LTRIM      = 1112;
smallsql/database/SQLTokenizer.java۞738۩static final int OCTETLEN   = 1113;
smallsql/database/SQLTokenizer.java۞739۩static final int REPEAT     = 1114;
smallsql/database/SQLTokenizer.java۞740۩static final int REPLACE    = 1115;
smallsql/database/SQLTokenizer.java۞741۩static final int RIGHT      = 1116;
smallsql/database/SQLTokenizer.java۞742۩static final int RTRIM      = 1117;
smallsql/database/SQLTokenizer.java۞743۩static final int SOUNDEX    = 1118;
smallsql/database/SQLTokenizer.java۞744۩static final int SPACE      = 1119;
smallsql/database/SQLTokenizer.java۞745۩static final int SUBSTRING  = 1120;
smallsql/database/SQLTokenizer.java۞746۩static final int TRIM       = 1121;
smallsql/database/SQLTokenizer.java۞747۩static final int UCASE      = 1122;
smallsql/database/SQLTokenizer.java۞748۩static{
smallsql/database/SQLTokenizer.java۞749۩addKeyWord( "ASCII",    ASCII);
smallsql/database/SQLTokenizer.java۞750۩addKeyWord( "BIT_LENGTH", BITLEN);
smallsql/database/SQLTokenizer.java۞751۩addKeyWord( "CHAR_LENGTH", CHARLEN);
smallsql/database/SQLTokenizer.java۞752۩addKeyWord( "CHARACTER_LENGTH", CHARACTLEN);
smallsql/database/SQLTokenizer.java۞753۩keywords.put( new Integer(_CHAR), "CHAR" );
smallsql/database/SQLTokenizer.java۞754۩addKeyWord( "CONCAT",   CONCAT);
smallsql/database/SQLTokenizer.java۞755۩addKeyWord( "DIFFERENCE",DIFFERENCE);
smallsql/database/SQLTokenizer.java۞756۩addKeyWord( "STUFF",    INSERT);
smallsql/database/SQLTokenizer.java۞757۩addKeyWord( "INSERT",   INSERT);
smallsql/database/SQLTokenizer.java۞758۩addKeyWord( "LCASE",    LCASE);
smallsql/database/SQLTokenizer.java۞759۩addKeyWord( "LEFT",     LEFT);
smallsql/database/SQLTokenizer.java۞760۩addKeyWord( "DATALENGTH",LENGTH);
smallsql/database/SQLTokenizer.java۞761۩addKeyWord( "LEN",		LENGTH);
smallsql/database/SQLTokenizer.java۞762۩addKeyWord( "LENGTH",   LENGTH);
smallsql/database/SQLTokenizer.java۞763۩addKeyWord( "CHARINDEX",LOCATE);
smallsql/database/SQLTokenizer.java۞764۩addKeyWord( "LOCATE",   LOCATE);
smallsql/database/SQLTokenizer.java۞765۩addKeyWord( "LTRIM",    LTRIM);
smallsql/database/SQLTokenizer.java۞766۩addKeyWord( "OCTET_LENGTH", OCTETLEN);
smallsql/database/SQLTokenizer.java۞767۩addKeyWord( "REPEAT",   REPEAT);
smallsql/database/SQLTokenizer.java۞768۩addKeyWord( "REPLACE",  REPLACE);
smallsql/database/SQLTokenizer.java۞769۩addKeyWord( "RIGHT",    RIGHT);
smallsql/database/SQLTokenizer.java۞770۩addKeyWord( "RTRIM",    RTRIM);
smallsql/database/SQLTokenizer.java۞771۩addKeyWord( "SOUNDEX",  SOUNDEX);
smallsql/database/SQLTokenizer.java۞772۩addKeyWord( "SPACE",    SPACE);
smallsql/database/SQLTokenizer.java۞773۩addKeyWord( "SUBSTRING",SUBSTRING);
smallsql/database/SQLTokenizer.java۞774۩addKeyWord( "TRIM",     TRIM);
smallsql/database/SQLTokenizer.java۞775۩addKeyWord( "UCASE",    UCASE);
smallsql/database/SQLTokenizer.java۞776۩}
smallsql/database/SQLTokenizer.java۞779۩static final int CURDATE    = 1200;
smallsql/database/SQLTokenizer.java۞780۩static final int CURRENTDATE = 1201;
smallsql/database/SQLTokenizer.java۞781۩static final int CURTIME    = 1202;
smallsql/database/SQLTokenizer.java۞782۩static final int DAYNAME    = 1203;
smallsql/database/SQLTokenizer.java۞783۩static final int DAYOFMONTH = 1204;
smallsql/database/SQLTokenizer.java۞784۩static final int DAYOFWEEK  = 1205;
smallsql/database/SQLTokenizer.java۞785۩static final int DAYOFYEAR  = 1206;
smallsql/database/SQLTokenizer.java۞786۩static final int DAY		= 1207;
smallsql/database/SQLTokenizer.java۞787۩static final int HOUR       = 1208;
smallsql/database/SQLTokenizer.java۞788۩static final int MILLISECOND= 1209;
smallsql/database/SQLTokenizer.java۞789۩static final int MINUTE     = 1210;
smallsql/database/SQLTokenizer.java۞790۩static final int MONTH      = 1211;
smallsql/database/SQLTokenizer.java۞791۩static final int MONTHNAME  = 1212;
smallsql/database/SQLTokenizer.java۞792۩static final int NOW        = 1213;
smallsql/database/SQLTokenizer.java۞793۩static final int QUARTER    = 1214;
smallsql/database/SQLTokenizer.java۞794۩static final int SECOND     = 1215;
smallsql/database/SQLTokenizer.java۞795۩static final int TIMESTAMPADD=1216;
smallsql/database/SQLTokenizer.java۞796۩static final int TIMESTAMPDIFF=1217;
smallsql/database/SQLTokenizer.java۞797۩static final int WEEK       = 1218;
smallsql/database/SQLTokenizer.java۞798۩static final int YEAR       = 1219;
smallsql/database/SQLTokenizer.java۞799۩static{
smallsql/database/SQLTokenizer.java۞800۩addKeyWord( "CURDATE",      CURDATE);
smallsql/database/SQLTokenizer.java۞801۩addKeyWord( "CURTIME",      CURTIME);
smallsql/database/SQLTokenizer.java۞802۩addKeyWord( "CURRENT_DATE", CURRENTDATE);
smallsql/database/SQLTokenizer.java۞803۩addKeyWord( "DAYNAME",      DAYNAME);
smallsql/database/SQLTokenizer.java۞804۩addKeyWord( "DAYOFMONTH",   DAYOFMONTH);
smallsql/database/SQLTokenizer.java۞805۩addKeyWord( "DAYOFWEEK",    DAYOFWEEK);
smallsql/database/SQLTokenizer.java۞806۩addKeyWord( "DAYOFYEAR",    DAYOFYEAR);
smallsql/database/SQLTokenizer.java۞807۩addKeyWord( "DAY",    		DAY);
smallsql/database/SQLTokenizer.java۞808۩addKeyWord( "HOUR",         HOUR);
smallsql/database/SQLTokenizer.java۞809۩addKeyWord( "MILLISECOND",  MILLISECOND);
smallsql/database/SQLTokenizer.java۞810۩addKeyWord( "MINUTE",       MINUTE);
smallsql/database/SQLTokenizer.java۞811۩addKeyWord( "MONTH",        MONTH);
smallsql/database/SQLTokenizer.java۞812۩addKeyWord( "MONTHNAME",    MONTHNAME);
smallsql/database/SQLTokenizer.java۞813۩addKeyWord( "GETDATE",      NOW);
smallsql/database/SQLTokenizer.java۞814۩addKeyWord( "NOW",          NOW);
smallsql/database/SQLTokenizer.java۞815۩addKeyWord( "QUARTER",      QUARTER);
smallsql/database/SQLTokenizer.java۞816۩addKeyWord( "SECOND",       SECOND);
smallsql/database/SQLTokenizer.java۞817۩addKeyWord( "DATEADD", 		TIMESTAMPADD);
smallsql/database/SQLTokenizer.java۞818۩addKeyWord( "TIMESTAMPADD", TIMESTAMPADD);
smallsql/database/SQLTokenizer.java۞819۩addKeyWord( "DATEDIFF",		TIMESTAMPDIFF);
smallsql/database/SQLTokenizer.java۞820۩addKeyWord( "TIMESTAMPDIFF",TIMESTAMPDIFF);
smallsql/database/SQLTokenizer.java۞821۩addKeyWord( "WEEK",         WEEK);
smallsql/database/SQLTokenizer.java۞822۩addKeyWord( "YEAR",         YEAR);
smallsql/database/SQLTokenizer.java۞823۩}
smallsql/database/SQLTokenizer.java۞826۩static final int SQL_TSI_FRAC_SECOND= 1250;
smallsql/database/SQLTokenizer.java۞827۩static final int SQL_TSI_SECOND		= 1251;
smallsql/database/SQLTokenizer.java۞828۩static final int SQL_TSI_MINUTE		= 1252;
smallsql/database/SQLTokenizer.java۞829۩static final int SQL_TSI_HOUR		= 1253;
smallsql/database/SQLTokenizer.java۞830۩static final int SQL_TSI_DAY		= 1254;
smallsql/database/SQLTokenizer.java۞831۩static final int SQL_TSI_WEEK		= 1255;
smallsql/database/SQLTokenizer.java۞832۩static final int SQL_TSI_MONTH		= 1256;
smallsql/database/SQLTokenizer.java۞833۩static final int SQL_TSI_QUARTER	= 1257;
smallsql/database/SQLTokenizer.java۞834۩static final int SQL_TSI_YEAR		= 1258;
smallsql/database/SQLTokenizer.java۞835۩static{
smallsql/database/SQLTokenizer.java۞836۩addKeyWord( "MS",					SQL_TSI_FRAC_SECOND);
smallsql/database/SQLTokenizer.java۞837۩addKeyWord( "SQL_TSI_FRAC_SECOND",	SQL_TSI_FRAC_SECOND);
smallsql/database/SQLTokenizer.java۞838۩addKeyWord( "S",					SQL_TSI_SECOND);
smallsql/database/SQLTokenizer.java۞839۩addKeyWord( "SS",					SQL_TSI_SECOND);
smallsql/database/SQLTokenizer.java۞840۩addKeyWord( "SQL_TSI_SECOND",		SQL_TSI_SECOND);
smallsql/database/SQLTokenizer.java۞841۩addKeyWord( "MI",					SQL_TSI_MINUTE);
smallsql/database/SQLTokenizer.java۞842۩addKeyWord( "N",					SQL_TSI_MINUTE);
smallsql/database/SQLTokenizer.java۞843۩addKeyWord( "SQL_TSI_MINUTE",		SQL_TSI_MINUTE);
smallsql/database/SQLTokenizer.java۞844۩addKeyWord( "HH",					SQL_TSI_HOUR);
smallsql/database/SQLTokenizer.java۞845۩addKeyWord( "SQL_TSI_HOUR",			SQL_TSI_HOUR);
smallsql/database/SQLTokenizer.java۞847۩addKeyWord( "DD",					SQL_TSI_DAY);
smallsql/database/SQLTokenizer.java۞848۩addKeyWord( "SQL_TSI_DAY",			SQL_TSI_DAY);
smallsql/database/SQLTokenizer.java۞849۩addKeyWord( "WK",					SQL_TSI_WEEK);
smallsql/database/SQLTokenizer.java۞850۩addKeyWord( "WW",					SQL_TSI_WEEK);
smallsql/database/SQLTokenizer.java۞851۩addKeyWord( "SQL_TSI_WEEK",			SQL_TSI_WEEK);
smallsql/database/SQLTokenizer.java۞852۩addKeyWord( "M",					SQL_TSI_MONTH);
smallsql/database/SQLTokenizer.java۞853۩addKeyWord( "MM",					SQL_TSI_MONTH);
smallsql/database/SQLTokenizer.java۞854۩addKeyWord( "SQL_TSI_MONTH",		SQL_TSI_MONTH);
smallsql/database/SQLTokenizer.java۞855۩addKeyWord( "Q",					SQL_TSI_QUARTER);
smallsql/database/SQLTokenizer.java۞856۩addKeyWord( "QQ",					SQL_TSI_QUARTER);
smallsql/database/SQLTokenizer.java۞857۩addKeyWord( "SQL_TSI_QUARTER",		SQL_TSI_QUARTER);
smallsql/database/SQLTokenizer.java۞858۩addKeyWord( "YY",					SQL_TSI_YEAR);
smallsql/database/SQLTokenizer.java۞859۩addKeyWord( "YYYY",					SQL_TSI_YEAR);
smallsql/database/SQLTokenizer.java۞860۩addKeyWord( "SQL_TSI_YEAR",			SQL_TSI_YEAR);
smallsql/database/SQLTokenizer.java۞861۩}
smallsql/database/SQLTokenizer.java۞865۩static final int IFNULL     = 1301;
smallsql/database/SQLTokenizer.java۞866۩static final int USER       = 1302;
smallsql/database/SQLTokenizer.java۞867۩static final int CONVERT    = 1303;
smallsql/database/SQLTokenizer.java۞868۩static final int CAST    	= 1304;
smallsql/database/SQLTokenizer.java۞869۩static final int IIF    	= 1305;
smallsql/database/SQLTokenizer.java۞870۩static{
smallsql/database/SQLTokenizer.java۞871۩addKeyWord( "ISNULL",      	IFNULL);
smallsql/database/SQLTokenizer.java۞872۩addKeyWord( "IFNULL",       IFNULL);
smallsql/database/SQLTokenizer.java۞873۩addKeyWord( "USER",         USER);
smallsql/database/SQLTokenizer.java۞874۩addKeyWord( "CONVERT",      CONVERT);
smallsql/database/SQLTokenizer.java۞875۩addKeyWord( "CAST",      	CAST);
smallsql/database/SQLTokenizer.java۞876۩addKeyWord( "IIF",      	IIF);
smallsql/database/SQLTokenizer.java۞877۩}
smallsql/database/SQLTokenizer.java۞880۩static final int SQL_BIGINT    		= 1350;
smallsql/database/SQLTokenizer.java۞881۩static final int SQL_BINARY    		= 1351;
smallsql/database/SQLTokenizer.java۞882۩static final int SQL_BIT    		= 1352;
smallsql/database/SQLTokenizer.java۞883۩static final int SQL_CHAR    		= 1353;
smallsql/database/SQLTokenizer.java۞884۩static final int SQL_DATE    		= 1354;
smallsql/database/SQLTokenizer.java۞885۩static final int SQL_DECIMAL    	= 1355;
smallsql/database/SQLTokenizer.java۞886۩static final int SQL_DOUBLE    		= 1356;
smallsql/database/SQLTokenizer.java۞887۩static final int SQL_FLOAT    		= 1357;
smallsql/database/SQLTokenizer.java۞888۩static final int SQL_INTEGER    	= 1358;
smallsql/database/SQLTokenizer.java۞889۩static final int SQL_LONGVARBINARY 	= 1359;
smallsql/database/SQLTokenizer.java۞890۩static final int SQL_LONGVARCHAR 	= 1360;
smallsql/database/SQLTokenizer.java۞891۩static final int SQL_REAL    		= 1361;
smallsql/database/SQLTokenizer.java۞892۩static final int SQL_SMALLINT    	= 1362;
smallsql/database/SQLTokenizer.java۞893۩static final int SQL_TIME    		= 1363;
smallsql/database/SQLTokenizer.java۞894۩static final int SQL_TIMESTAMP    	= 1364;
smallsql/database/SQLTokenizer.java۞895۩static final int SQL_TINYINT    	= 1365;
smallsql/database/SQLTokenizer.java۞896۩static final int SQL_VARBINARY    	= 1366;
smallsql/database/SQLTokenizer.java۞897۩static final int SQL_VARCHAR    	= 1367;
smallsql/database/SQLTokenizer.java۞898۩static{
smallsql/database/SQLTokenizer.java۞899۩addKeyWord( "SQL_BIGINT",		SQL_BIGINT);
smallsql/database/SQLTokenizer.java۞900۩addKeyWord( "SQL_BINARY",		SQL_BINARY);
smallsql/database/SQLTokenizer.java۞901۩addKeyWord( "SQL_BIT",			SQL_BIT);
smallsql/database/SQLTokenizer.java۞902۩addKeyWord( "SQL_CHAR",			SQL_CHAR);
smallsql/database/SQLTokenizer.java۞903۩addKeyWord( "SQL_DATE",			SQL_DATE);
smallsql/database/SQLTokenizer.java۞904۩addKeyWord( "SQL_DECIMAL",		SQL_DECIMAL);
smallsql/database/SQLTokenizer.java۞905۩addKeyWord( "SQL_DOUBLE",		SQL_DOUBLE);
smallsql/database/SQLTokenizer.java۞906۩addKeyWord( "SQL_FLOAT",		SQL_FLOAT);
smallsql/database/SQLTokenizer.java۞907۩addKeyWord( "SQL_INTEGER",		SQL_INTEGER);
smallsql/database/SQLTokenizer.java۞908۩addKeyWord( "SQL_LONGVARBINARY",SQL_LONGVARBINARY);
smallsql/database/SQLTokenizer.java۞909۩addKeyWord( "SQL_LONGVARCHAR",	SQL_LONGVARCHAR);
smallsql/database/SQLTokenizer.java۞910۩addKeyWord( "SQL_REAL",			SQL_REAL);
smallsql/database/SQLTokenizer.java۞911۩addKeyWord( "SQL_SMALLINT",		SQL_SMALLINT);
smallsql/database/SQLTokenizer.java۞912۩addKeyWord( "SQL_TIME",			SQL_TIME);
smallsql/database/SQLTokenizer.java۞913۩addKeyWord( "SQL_TIMESTAMP",	SQL_TIMESTAMP);
smallsql/database/SQLTokenizer.java۞914۩addKeyWord( "SQL_TINYINT",		SQL_TINYINT);
smallsql/database/SQLTokenizer.java۞915۩addKeyWord( "SQL_VARBINARY",	SQL_VARBINARY);
smallsql/database/SQLTokenizer.java۞916۩addKeyWord( "SQL_VARCHAR",		SQL_VARCHAR);
smallsql/database/SQLTokenizer.java۞917۩}
smallsql/database/SQLTokenizer.java۞921۩static final int COUNT		= 1400;
smallsql/database/SQLTokenizer.java۞922۩static final int MIN		= 1401;
smallsql/database/SQLTokenizer.java۞923۩static final int MAX		= 1402;
smallsql/database/SQLTokenizer.java۞924۩static final int SUM		= 1403;
smallsql/database/SQLTokenizer.java۞925۩static final int FIRST		= 1404;
smallsql/database/SQLTokenizer.java۞926۩static final int LAST		= 1405;
smallsql/database/SQLTokenizer.java۞927۩static final int AVG		= 1406;
smallsql/database/SQLTokenizer.java۞928۩static{
smallsql/database/SQLTokenizer.java۞929۩addKeyWord( "COUNT",       	COUNT);
smallsql/database/SQLTokenizer.java۞930۩addKeyWord( "MIN",      	MIN);
smallsql/database/SQLTokenizer.java۞931۩addKeyWord( "MAX",      	MAX);
smallsql/database/SQLTokenizer.java۞932۩addKeyWord( "SUM",         	SUM);
smallsql/database/SQLTokenizer.java۞933۩addKeyWord( "FIRST",        FIRST);
smallsql/database/SQLTokenizer.java۞934۩addKeyWord( "LAST",         LAST);
smallsql/database/SQLTokenizer.java۞935۩addKeyWord( "AVG",          AVG);
smallsql/database/SQLTokenizer.java۞936۩}
smallsql/database/SQLTokenizer.java۞938۩}
smallsql/database/SQLTokenizer.java۞940۩class SearchNode{
smallsql/database/SQLTokenizer.java۞941۩int value;
smallsql/database/SQLTokenizer.java۞942۩char letter;
smallsql/database/SQLTokenizer.java۞943۩SearchNode nextLetter;
smallsql/database/SQLTokenizer.java۞944۩SearchNode nextEntry;
smallsql/database/SQLTokenizer.java۞945۩}
smallsql/database/SSCallableStatement.java۞33۩package smallsql.database;
smallsql/database/SSCallableStatement.java۞35۩import java.sql.*;
smallsql/database/SSCallableStatement.java۞36۩import java.math.*;
smallsql/database/SSCallableStatement.java۞37۩import java.util.Map;
smallsql/database/SSCallableStatement.java۞38۩import java.util.Calendar;
smallsql/database/SSCallableStatement.java۞39۩import java.net.URL;
smallsql/database/SSCallableStatement.java۞40۩import java.io.*;
smallsql/database/SSCallableStatement.java۞41۩import smallsql.database.language.Language;
smallsql/database/SSCallableStatement.java۞43۩public class SSCallableStatement extends SSPreparedStatement implements CallableStatement {
smallsql/database/SSCallableStatement.java۞45۩private boolean wasNull;
smallsql/database/SSCallableStatement.java۞47۩SSCallableStatement( SSConnection con, String sql ) throws SQLException {
smallsql/database/SSCallableStatement.java۞48۩super( con, sql );
smallsql/database/SSCallableStatement.java۞49۩}
smallsql/database/SSCallableStatement.java۞51۩SSCallableStatement( SSConnection con, String sql, int rsType, int rsConcurrency ) throws SQLException {
smallsql/database/SSCallableStatement.java۞52۩super( con, sql, rsType, rsConcurrency );
smallsql/database/SSCallableStatement.java۞53۩}
smallsql/database/SSCallableStatement.java۞55۩private Expression getValue(int i) throws SQLException{
smallsql/database/SSCallableStatement.java۞57۩throw new java.lang.UnsupportedOperationException("Method getValue() not yet implemented.");
smallsql/database/SSCallableStatement.java۞58۩}
smallsql/database/SSCallableStatement.java۞60۩private int findParameter( String parameterName ){
smallsql/database/SSCallableStatement.java۞62۩throw new java.lang.UnsupportedOperationException("Method findParameter() not yet implemented.");
smallsql/database/SSCallableStatement.java۞63۩}
smallsql/database/SSCallableStatement.java۞69۩public void registerOutParameter(int i, int sqlType) throws SQLException {
smallsql/database/SSCallableStatement.java۞71۩throw new java.lang.UnsupportedOperationException("Method registerOutParameter() not yet implemented.");
smallsql/database/SSCallableStatement.java۞72۩}
smallsql/database/SSCallableStatement.java۞73۩public void registerOutParameter(int i, int sqlType, int scale) throws SQLException {
smallsql/database/SSCallableStatement.java۞75۩throw new java.lang.UnsupportedOperationException("Method registerOutParameter() not yet implemented.");
smallsql/database/SSCallableStatement.java۞76۩}
smallsql/database/SSCallableStatement.java۞79۩public boolean wasNull(){
smallsql/database/SSCallableStatement.java۞80۩return wasNull;
smallsql/database/SSCallableStatement.java۞81۩}
smallsql/database/SSCallableStatement.java۞84۩public String getString(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞85۩try{
smallsql/database/SSCallableStatement.java۞86۩String obj = getValue(i).getString();
smallsql/database/SSCallableStatement.java۞87۩wasNull = obj == null;
smallsql/database/SSCallableStatement.java۞88۩return obj;
smallsql/database/SSCallableStatement.java۞89۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞90۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞91۩}
smallsql/database/SSCallableStatement.java۞92۩}
smallsql/database/SSCallableStatement.java۞93۩public boolean getBoolean(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞94۩try{
smallsql/database/SSCallableStatement.java۞95۩Expression expr = getValue(i);
smallsql/database/SSCallableStatement.java۞96۩wasNull = expr.isNull();
smallsql/database/SSCallableStatement.java۞97۩return expr.getBoolean();
smallsql/database/SSCallableStatement.java۞98۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞99۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞100۩}
smallsql/database/SSCallableStatement.java۞101۩}
smallsql/database/SSCallableStatement.java۞102۩public byte getByte(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞103۩return (byte)getInt( i );
smallsql/database/SSCallableStatement.java۞104۩}
smallsql/database/SSCallableStatement.java۞105۩public short getShort(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞106۩return (byte)getInt( i );
smallsql/database/SSCallableStatement.java۞107۩}
smallsql/database/SSCallableStatement.java۞108۩public int getInt(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞109۩try{
smallsql/database/SSCallableStatement.java۞110۩Expression expr = getValue(i);
smallsql/database/SSCallableStatement.java۞111۩wasNull = expr.isNull();
smallsql/database/SSCallableStatement.java۞112۩return expr.getInt();
smallsql/database/SSCallableStatement.java۞113۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞114۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞115۩}
smallsql/database/SSCallableStatement.java۞116۩}
smallsql/database/SSCallableStatement.java۞117۩public long getLong(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞118۩try{
smallsql/database/SSCallableStatement.java۞119۩Expression expr = getValue(i);
smallsql/database/SSCallableStatement.java۞120۩wasNull = expr.isNull();
smallsql/database/SSCallableStatement.java۞121۩return expr.getLong();
smallsql/database/SSCallableStatement.java۞122۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞123۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞124۩}
smallsql/database/SSCallableStatement.java۞125۩}
smallsql/database/SSCallableStatement.java۞126۩public float getFloat(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞127۩try{
smallsql/database/SSCallableStatement.java۞128۩Expression expr = getValue(i);
smallsql/database/SSCallableStatement.java۞129۩wasNull = expr.isNull();
smallsql/database/SSCallableStatement.java۞130۩return expr.getFloat();
smallsql/database/SSCallableStatement.java۞131۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞132۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞133۩}
smallsql/database/SSCallableStatement.java۞134۩}
smallsql/database/SSCallableStatement.java۞135۩public double getDouble(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞136۩try{
smallsql/database/SSCallableStatement.java۞137۩Expression expr = getValue(i);
smallsql/database/SSCallableStatement.java۞138۩wasNull = expr.isNull();
smallsql/database/SSCallableStatement.java۞139۩return expr.getLong();
smallsql/database/SSCallableStatement.java۞140۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞141۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞142۩}
smallsql/database/SSCallableStatement.java۞143۩}
smallsql/database/SSCallableStatement.java۞144۩public BigDecimal getBigDecimal(int i, int scale) throws SQLException {
smallsql/database/SSCallableStatement.java۞145۩try{
smallsql/database/SSCallableStatement.java۞146۩MutableNumeric obj = getValue(i).getNumeric();
smallsql/database/SSCallableStatement.java۞147۩wasNull = obj == null;
smallsql/database/SSCallableStatement.java۞148۩if(wasNull) return null;
smallsql/database/SSCallableStatement.java۞149۩return obj.toBigDecimal(scale);
smallsql/database/SSCallableStatement.java۞150۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞151۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞152۩}
smallsql/database/SSCallableStatement.java۞153۩}
smallsql/database/SSCallableStatement.java۞154۩public byte[] getBytes(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞155۩try{
smallsql/database/SSCallableStatement.java۞156۩byte[] obj = getValue(i).getBytes();
smallsql/database/SSCallableStatement.java۞157۩wasNull = obj == null;
smallsql/database/SSCallableStatement.java۞158۩return obj;
smallsql/database/SSCallableStatement.java۞159۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞160۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞161۩}
smallsql/database/SSCallableStatement.java۞162۩}
smallsql/database/SSCallableStatement.java۞163۩public Date getDate(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞164۩try{
smallsql/database/SSCallableStatement.java۞165۩Expression expr = getValue(i);
smallsql/database/SSCallableStatement.java۞166۩wasNull = expr.isNull();
smallsql/database/SSCallableStatement.java۞167۩if(wasNull) return null;
smallsql/database/SSCallableStatement.java۞168۩return DateTime.getDate( expr.getLong() );
smallsql/database/SSCallableStatement.java۞169۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞170۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞171۩}
smallsql/database/SSCallableStatement.java۞172۩}
smallsql/database/SSCallableStatement.java۞173۩public Time getTime(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞174۩try{
smallsql/database/SSCallableStatement.java۞175۩Expression expr = getValue(i);
smallsql/database/SSCallableStatement.java۞176۩wasNull = expr.isNull();
smallsql/database/SSCallableStatement.java۞177۩if(wasNull) return null;
smallsql/database/SSCallableStatement.java۞178۩return DateTime.getTime( expr.getLong() );
smallsql/database/SSCallableStatement.java۞179۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞180۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞181۩}
smallsql/database/SSCallableStatement.java۞182۩}
smallsql/database/SSCallableStatement.java۞183۩public Timestamp getTimestamp(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞184۩try{
smallsql/database/SSCallableStatement.java۞185۩Expression expr = getValue(i);
smallsql/database/SSCallableStatement.java۞186۩wasNull = expr.isNull();
smallsql/database/SSCallableStatement.java۞187۩if(wasNull) return null;
smallsql/database/SSCallableStatement.java۞188۩return DateTime.getTimestamp( expr.getLong() );
smallsql/database/SSCallableStatement.java۞189۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞190۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞191۩}
smallsql/database/SSCallableStatement.java۞192۩}
smallsql/database/SSCallableStatement.java۞193۩public Object getObject(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞194۩try{
smallsql/database/SSCallableStatement.java۞195۩Object obj = getValue(i).getObject();
smallsql/database/SSCallableStatement.java۞196۩wasNull = obj == null;
smallsql/database/SSCallableStatement.java۞197۩return obj;
smallsql/database/SSCallableStatement.java۞198۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞199۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞200۩}
smallsql/database/SSCallableStatement.java۞201۩}
smallsql/database/SSCallableStatement.java۞202۩public BigDecimal getBigDecimal(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞203۩try{
smallsql/database/SSCallableStatement.java۞204۩MutableNumeric obj = getValue(i).getNumeric();
smallsql/database/SSCallableStatement.java۞205۩wasNull = obj == null;
smallsql/database/SSCallableStatement.java۞206۩if(wasNull) return null;
smallsql/database/SSCallableStatement.java۞207۩return obj.toBigDecimal();
smallsql/database/SSCallableStatement.java۞208۩}catch(Exception e){
smallsql/database/SSCallableStatement.java۞209۩throw SmallSQLException.createFromException( e );
smallsql/database/SSCallableStatement.java۞210۩}
smallsql/database/SSCallableStatement.java۞211۩}
smallsql/database/SSCallableStatement.java۞212۩public Object getObject(int i, Map map) throws SQLException {
smallsql/database/SSCallableStatement.java۞214۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method getObject() not yet implemented.");
smallsql/database/SSCallableStatement.java۞215۩}
smallsql/database/SSCallableStatement.java۞216۩public Ref getRef(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞218۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method getRef() not yet implemented.");
smallsql/database/SSCallableStatement.java۞219۩}
smallsql/database/SSCallableStatement.java۞220۩public Blob getBlob(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞222۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method getBlob() not yet implemented.");
smallsql/database/SSCallableStatement.java۞223۩}
smallsql/database/SSCallableStatement.java۞224۩public Clob getClob(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞226۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method getClob() not yet implemented.");
smallsql/database/SSCallableStatement.java۞227۩}
smallsql/database/SSCallableStatement.java۞228۩public Array getArray(int i) throws SQLException {
smallsql/database/SSCallableStatement.java۞230۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method getArray() not yet implemented.");
smallsql/database/SSCallableStatement.java۞231۩}
smallsql/database/SSCallableStatement.java۞232۩public Date getDate(int i, Calendar cal) throws SQLException {
smallsql/database/SSCallableStatement.java۞234۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method getDate() not yet implemented.");
smallsql/database/SSCallableStatement.java۞235۩}
smallsql/database/SSCallableStatement.java۞236۩public Time getTime(int i, Calendar cal) throws SQLException {
smallsql/database/SSCallableStatement.java۞238۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method getTime() not yet implemented.");
smallsql/database/SSCallableStatement.java۞239۩}
smallsql/database/SSCallableStatement.java۞240۩public Timestamp getTimestamp(int i, Calendar cal) throws SQLException {
smallsql/database/SSCallableStatement.java۞242۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method getTimestamp() not yet implemented.");
smallsql/database/SSCallableStatement.java۞243۩}
smallsql/database/SSCallableStatement.java۞244۩public void registerOutParameter(int i, int sqlType, String typeName) throws SQLException {
smallsql/database/SSCallableStatement.java۞246۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method registerOutParameter() not yet implemented.");
smallsql/database/SSCallableStatement.java۞247۩}
smallsql/database/SSCallableStatement.java۞248۩public void registerOutParameter(String parameterName, int sqlType) throws SQLException {
smallsql/database/SSCallableStatement.java۞249۩registerOutParameter( findParameter( parameterName ), sqlType );
smallsql/database/SSCallableStatement.java۞250۩}
smallsql/database/SSCallableStatement.java۞251۩public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {
smallsql/database/SSCallableStatement.java۞252۩registerOutParameter( findParameter( parameterName ), sqlType, scale );
smallsql/database/SSCallableStatement.java۞253۩}
smallsql/database/SSCallableStatement.java۞254۩public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {
smallsql/database/SSCallableStatement.java۞255۩registerOutParameter( findParameter( parameterName ), sqlType, typeName );
smallsql/database/SSCallableStatement.java۞256۩}
smallsql/database/SSCallableStatement.java۞257۩public URL getURL(int parameterIndex) throws SQLException {
smallsql/database/SSCallableStatement.java۞259۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Method getURL() not yet implemented.");
smallsql/database/SSCallableStatement.java۞260۩}
smallsql/database/SSCallableStatement.java۞261۩public void setURL(String parameterName, URL x) throws SQLException {
smallsql/database/SSCallableStatement.java۞262۩setURL( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞263۩}
smallsql/database/SSCallableStatement.java۞264۩public void setNull(String parameterName, int sqlType) throws SQLException {
smallsql/database/SSCallableStatement.java۞265۩setNull( findParameter( parameterName ), sqlType );
smallsql/database/SSCallableStatement.java۞266۩}
smallsql/database/SSCallableStatement.java۞267۩public void setBoolean(String parameterName, boolean x) throws SQLException {
smallsql/database/SSCallableStatement.java۞268۩setBoolean( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞269۩}
smallsql/database/SSCallableStatement.java۞270۩public void setByte(String parameterName, byte x) throws SQLException {
smallsql/database/SSCallableStatement.java۞271۩setByte( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞272۩}
smallsql/database/SSCallableStatement.java۞273۩public void setShort(String parameterName, short x) throws SQLException {
smallsql/database/SSCallableStatement.java۞274۩setShort( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞275۩}
smallsql/database/SSCallableStatement.java۞276۩public void setInt(String parameterName, int x) throws SQLException {
smallsql/database/SSCallableStatement.java۞277۩setInt( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞278۩}
smallsql/database/SSCallableStatement.java۞279۩public void setLong(String parameterName, long x) throws SQLException {
smallsql/database/SSCallableStatement.java۞280۩setLong( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞281۩}
smallsql/database/SSCallableStatement.java۞282۩public void setFloat(String parameterName, float x) throws SQLException {
smallsql/database/SSCallableStatement.java۞283۩setFloat( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞284۩}
smallsql/database/SSCallableStatement.java۞285۩public void setDouble(String parameterName, double x) throws SQLException {
smallsql/database/SSCallableStatement.java۞286۩setDouble( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞287۩}
smallsql/database/SSCallableStatement.java۞288۩public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {
smallsql/database/SSCallableStatement.java۞289۩setBigDecimal( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞290۩}
smallsql/database/SSCallableStatement.java۞291۩public void setString(String parameterName, String x) throws SQLException {
smallsql/database/SSCallableStatement.java۞292۩setString( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞293۩}
smallsql/database/SSCallableStatement.java۞294۩public void setBytes(String parameterName, byte[] x) throws SQLException {
smallsql/database/SSCallableStatement.java۞295۩setBytes( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞296۩}
smallsql/database/SSCallableStatement.java۞297۩public void setDate(String parameterName, Date x) throws SQLException {
smallsql/database/SSCallableStatement.java۞298۩setDate( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞299۩}
smallsql/database/SSCallableStatement.java۞300۩public void setTime(String parameterName, Time x) throws SQLException {
smallsql/database/SSCallableStatement.java۞301۩setTime( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞302۩}
smallsql/database/SSCallableStatement.java۞303۩public void setTimestamp(String parameterName, Timestamp x) throws SQLException {
smallsql/database/SSCallableStatement.java۞304۩setTimestamp( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞305۩}
smallsql/database/SSCallableStatement.java۞306۩public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {
smallsql/database/SSCallableStatement.java۞307۩setAsciiStream( findParameter( parameterName ), x, length );
smallsql/database/SSCallableStatement.java۞308۩}
smallsql/database/SSCallableStatement.java۞309۩public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {
smallsql/database/SSCallableStatement.java۞310۩setBinaryStream( findParameter( parameterName ), x, length );
smallsql/database/SSCallableStatement.java۞311۩}
smallsql/database/SSCallableStatement.java۞312۩public void setObject(String parameterName, Object x, int sqlType, int scale) throws SQLException {
smallsql/database/SSCallableStatement.java۞313۩setObject( findParameter( parameterName ), x, sqlType, scale );
smallsql/database/SSCallableStatement.java۞314۩}
smallsql/database/SSCallableStatement.java۞315۩public void setObject(String parameterName, Object x, int sqlType) throws SQLException {
smallsql/database/SSCallableStatement.java۞316۩setObject( findParameter( parameterName ), x, sqlType );
smallsql/database/SSCallableStatement.java۞317۩}
smallsql/database/SSCallableStatement.java۞318۩public void setObject(String parameterName, Object x) throws SQLException {
smallsql/database/SSCallableStatement.java۞319۩setObject( findParameter( parameterName ), x );
smallsql/database/SSCallableStatement.java۞320۩}
smallsql/database/SSCallableStatement.java۞321۩public void setCharacterStream(String parameterName, Reader x, int length) throws SQLException {
smallsql/database/SSCallableStatement.java۞322۩setCharacterStream( findParameter( parameterName ), x, length );
smallsql/database/SSCallableStatement.java۞323۩}
smallsql/database/SSCallableStatement.java۞324۩public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {
smallsql/database/SSCallableStatement.java۞325۩setDate( findParameter( parameterName ), x, cal );
smallsql/database/SSCallableStatement.java۞326۩}
smallsql/database/SSCallableStatement.java۞327۩public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {
smallsql/database/SSCallableStatement.java۞328۩setTime( findParameter( parameterName ), x, cal );
smallsql/database/SSCallableStatement.java۞329۩}
smallsql/database/SSCallableStatement.java۞330۩public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {
smallsql/database/SSCallableStatement.java۞331۩setTimestamp( findParameter( parameterName ), x, cal );
smallsql/database/SSCallableStatement.java۞332۩}
smallsql/database/SSCallableStatement.java۞333۩public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {
smallsql/database/SSCallableStatement.java۞334۩setNull( findParameter( parameterName ), sqlType, typeName );
smallsql/database/SSCallableStatement.java۞335۩}
smallsql/database/SSCallableStatement.java۞336۩public String getString(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞337۩return getString( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞338۩}
smallsql/database/SSCallableStatement.java۞339۩public boolean getBoolean(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞340۩return getBoolean( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞341۩}
smallsql/database/SSCallableStatement.java۞342۩public byte getByte(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞343۩return getByte( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞344۩}
smallsql/database/SSCallableStatement.java۞345۩public short getShort(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞346۩return getShort( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞347۩}
smallsql/database/SSCallableStatement.java۞348۩public int getInt(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞349۩return getInt( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞350۩}
smallsql/database/SSCallableStatement.java۞351۩public long getLong(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞352۩return getLong( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞353۩}
smallsql/database/SSCallableStatement.java۞354۩public float getFloat(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞355۩return getFloat( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞356۩}
smallsql/database/SSCallableStatement.java۞357۩public double getDouble(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞358۩return getDouble( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞359۩}
smallsql/database/SSCallableStatement.java۞360۩public byte[] getBytes(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞361۩return getBytes( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞362۩}
smallsql/database/SSCallableStatement.java۞363۩public Date getDate(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞364۩return getDate( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞365۩}
smallsql/database/SSCallableStatement.java۞366۩public Time getTime(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞367۩return getTime( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞368۩}
smallsql/database/SSCallableStatement.java۞369۩public Timestamp getTimestamp(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞370۩return getTimestamp( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞371۩}
smallsql/database/SSCallableStatement.java۞372۩public Object getObject(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞373۩return getObject( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞374۩}
smallsql/database/SSCallableStatement.java۞375۩public BigDecimal getBigDecimal(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞376۩return getBigDecimal( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞377۩}
smallsql/database/SSCallableStatement.java۞378۩public Object getObject(String parameterName, Map map) throws SQLException {
smallsql/database/SSCallableStatement.java۞379۩return getObject( findParameter( parameterName ), map );
smallsql/database/SSCallableStatement.java۞380۩}
smallsql/database/SSCallableStatement.java۞381۩public Ref getRef(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞382۩return getRef( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞383۩}
smallsql/database/SSCallableStatement.java۞384۩public Blob getBlob(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞385۩return getBlob( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞386۩}
smallsql/database/SSCallableStatement.java۞387۩public Clob getClob(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞388۩return getClob( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞389۩}
smallsql/database/SSCallableStatement.java۞390۩public Array getArray(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞391۩return getArray( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞392۩}
smallsql/database/SSCallableStatement.java۞393۩public Date getDate(String parameterName, Calendar cal) throws SQLException {
smallsql/database/SSCallableStatement.java۞394۩return getDate( findParameter( parameterName ), cal );
smallsql/database/SSCallableStatement.java۞395۩}
smallsql/database/SSCallableStatement.java۞396۩public Time getTime(String parameterName, Calendar cal) throws SQLException {
smallsql/database/SSCallableStatement.java۞397۩return getTime( findParameter( parameterName ), cal );
smallsql/database/SSCallableStatement.java۞398۩}
smallsql/database/SSCallableStatement.java۞399۩public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {
smallsql/database/SSCallableStatement.java۞400۩return getTimestamp( findParameter( parameterName ), cal );
smallsql/database/SSCallableStatement.java۞401۩}
smallsql/database/SSCallableStatement.java۞402۩public URL getURL(String parameterName) throws SQLException {
smallsql/database/SSCallableStatement.java۞403۩return getURL( findParameter( parameterName ) );
smallsql/database/SSCallableStatement.java۞404۩}
smallsql/database/SSCallableStatement.java۞405۩}
smallsql/database/SSConnection.java۞33۩package smallsql.database;
smallsql/database/SSConnection.java۞35۩import java.nio.channels.FileChannel;
smallsql/database/SSConnection.java۞36۩import java.sql.CallableStatement;
smallsql/database/SSConnection.java۞37۩import java.sql.Connection;
smallsql/database/SSConnection.java۞38۩import java.sql.DatabaseMetaData;
smallsql/database/SSConnection.java۞39۩import java.sql.PreparedStatement;
smallsql/database/SSConnection.java۞40۩import java.sql.SQLException;
smallsql/database/SSConnection.java۞41۩import java.sql.SQLWarning;
smallsql/database/SSConnection.java۞42۩import java.sql.Savepoint;
smallsql/database/SSConnection.java۞43۩import java.sql.Statement;
smallsql/database/SSConnection.java۞44۩import java.util.ArrayList;
smallsql/database/SSConnection.java۞45۩import java.util.List;
smallsql/database/SSConnection.java۞46۩import java.util.Map;
smallsql/database/SSConnection.java۞47۩import java.util.Properties;
smallsql/database/SSConnection.java۞48۩import smallsql.database.language.Language;
smallsql/database/SSConnection.java۞50۩public class SSConnection implements Connection {
smallsql/database/SSConnection.java۞52۩private final boolean readonly;
smallsql/database/SSConnection.java۞53۩private Database database;
smallsql/database/SSConnection.java۞54۩private boolean autoCommit = true;
smallsql/database/SSConnection.java۞55۩int isolationLevel = TRANSACTION_READ_COMMITTED;
smallsql/database/SSConnection.java۞56۩private List commitPages = new ArrayList();
smallsql/database/SSConnection.java۞58۩private long transactionTime;
smallsql/database/SSConnection.java۞59۩private final SSDatabaseMetaData metadata;
smallsql/database/SSConnection.java۞60۩private int holdability;
smallsql/database/SSConnection.java۞61۩final Logger log;
smallsql/database/SSConnection.java۞63۩SSConnection( Properties props ) throws SQLException{
smallsql/database/SSConnection.java۞64۩SmallSQLException.setLanguage(props.get("locale"));
smallsql/database/SSConnection.java۞65۩log = new Logger();
smallsql/database/SSConnection.java۞66۩String name = props.getProperty("dbpath");
smallsql/database/SSConnection.java۞67۩readonly = "true".equals(props.getProperty("readonly"));
smallsql/database/SSConnection.java۞68۩boolean create = "true".equals(props.getProperty("create"));
smallsql/database/SSConnection.java۞69۩database = Database.getDatabase(name, this, create);
smallsql/database/SSConnection.java۞70۩metadata = new SSDatabaseMetaData(this);
smallsql/database/SSConnection.java۞71۩}
smallsql/database/SSConnection.java۞77۩SSConnection( SSConnection con ){
smallsql/database/SSConnection.java۞78۩readonly = con.readonly;
smallsql/database/SSConnection.java۞79۩database = con.database;
smallsql/database/SSConnection.java۞80۩metadata = con.metadata;
smallsql/database/SSConnection.java۞81۩log      = con.log;
smallsql/database/SSConnection.java۞82۩}
smallsql/database/SSConnection.java۞88۩Database getDatabase(boolean returnNull) throws SQLException{
smallsql/database/SSConnection.java۞89۩testClosedConnection();
smallsql/database/SSConnection.java۞90۩if(!returnNull && database == null) throw SmallSQLException.create(Language.DB_NOTCONNECTED);
smallsql/database/SSConnection.java۞91۩return database;
smallsql/database/SSConnection.java۞92۩}
smallsql/database/SSConnection.java۞99۩Object getMonitor(){
smallsql/database/SSConnection.java۞100۩return this;
smallsql/database/SSConnection.java۞101۩}
smallsql/database/SSConnection.java۞103۩public Statement createStatement() throws SQLException {
smallsql/database/SSConnection.java۞104۩return new SSStatement(this);
smallsql/database/SSConnection.java۞105۩}
smallsql/database/SSConnection.java۞106۩public PreparedStatement prepareStatement(String sql) throws SQLException {
smallsql/database/SSConnection.java۞107۩return new SSPreparedStatement( this, sql);
smallsql/database/SSConnection.java۞108۩}
smallsql/database/SSConnection.java۞109۩public CallableStatement prepareCall(String sql) throws SQLException {
smallsql/database/SSConnection.java۞110۩return new SSCallableStatement( this, sql);
smallsql/database/SSConnection.java۞111۩}
smallsql/database/SSConnection.java۞114۩public String nativeSQL(String sql){
smallsql/database/SSConnection.java۞115۩return sql;
smallsql/database/SSConnection.java۞116۩}
smallsql/database/SSConnection.java۞119۩public void setAutoCommit(boolean autoCommit) throws SQLException {
smallsql/database/SSConnection.java۞120۩if(log.isLogging()) log.println("AutoCommit:"+autoCommit);
smallsql/database/SSConnection.java۞121۩if(this.autoCommit != autoCommit){
smallsql/database/SSConnection.java۞122۩commit();
smallsql/database/SSConnection.java۞123۩this.autoCommit = autoCommit;
smallsql/database/SSConnection.java۞124۩}
smallsql/database/SSConnection.java۞125۩}
smallsql/database/SSConnection.java۞128۩public boolean getAutoCommit(){
smallsql/database/SSConnection.java۞129۩return autoCommit;
smallsql/database/SSConnection.java۞130۩}
smallsql/database/SSConnection.java۞136۩void add(TransactionStep storePage) throws SQLException{
smallsql/database/SSConnection.java۞137۩testClosedConnection();
smallsql/database/SSConnection.java۞138۩synchronized(getMonitor()){
smallsql/database/SSConnection.java۞139۩commitPages.add(storePage);
smallsql/database/SSConnection.java۞140۩}
smallsql/database/SSConnection.java۞141۩}
smallsql/database/SSConnection.java۞144۩public void commit() throws SQLException {
smallsql/database/SSConnection.java۞145۩log.println("Commit");
smallsql/database/SSConnection.java۞146۩testClosedConnection();
smallsql/database/SSConnection.java۞147۩synchronized(getMonitor()){
smallsql/database/SSConnection.java۞148۩try{
smallsql/database/SSConnection.java۞149۩int count = commitPages.size();
smallsql/database/SSConnection.java۞150۩for(int i=0; i<count; i++){
smallsql/database/SSConnection.java۞151۩TransactionStep page = (TransactionStep)commitPages.get(i);
smallsql/database/SSConnection.java۞152۩page.commit();
smallsql/database/SSConnection.java۞153۩}
smallsql/database/SSConnection.java۞154۩for(int i=0; i<count; i++){
smallsql/database/SSConnection.java۞155۩TransactionStep page = (TransactionStep)commitPages.get(i);
smallsql/database/SSConnection.java۞156۩page.freeLock();
smallsql/database/SSConnection.java۞157۩}
smallsql/database/SSConnection.java۞158۩commitPages.clear();
smallsql/database/SSConnection.java۞159۩transactionTime = System.currentTimeMillis();
smallsql/database/SSConnection.java۞160۩}catch(Throwable e){
smallsql/database/SSConnection.java۞161۩rollback();
smallsql/database/SSConnection.java۞162۩throw SmallSQLException.createFromException(e);
smallsql/database/SSConnection.java۞163۩}
smallsql/database/SSConnection.java۞164۩}
smallsql/database/SSConnection.java۞165۩}
smallsql/database/SSConnection.java۞171۩void rollbackFile(FileChannel raFile) throws SQLException{
smallsql/database/SSConnection.java۞172۩testClosedConnection();
smallsql/database/SSConnection.java۞174۩synchronized(getMonitor()){
smallsql/database/SSConnection.java۞175۩for(int i = commitPages.size() - 1; i >= 0; i--){
smallsql/database/SSConnection.java۞176۩TransactionStep page = (TransactionStep)commitPages.get(i);
smallsql/database/SSConnection.java۞177۩if(page.raFile == raFile){
smallsql/database/SSConnection.java۞178۩page.rollback();
smallsql/database/SSConnection.java۞179۩page.freeLock();
smallsql/database/SSConnection.java۞180۩}
smallsql/database/SSConnection.java۞181۩}
smallsql/database/SSConnection.java۞182۩}
smallsql/database/SSConnection.java۞183۩}
smallsql/database/SSConnection.java۞186۩void rollback(int savepoint) throws SQLException{
smallsql/database/SSConnection.java۞187۩testClosedConnection();
smallsql/database/SSConnection.java۞188۩synchronized(getMonitor()){
smallsql/database/SSConnection.java۞189۩for(int i = commitPages.size() - 1; i >= savepoint; i--){
smallsql/database/SSConnection.java۞190۩TransactionStep page = (TransactionStep)commitPages.remove(i);
smallsql/database/SSConnection.java۞191۩page.rollback();
smallsql/database/SSConnection.java۞192۩page.freeLock();
smallsql/database/SSConnection.java۞193۩}
smallsql/database/SSConnection.java۞194۩}
smallsql/database/SSConnection.java۞195۩}
smallsql/database/SSConnection.java۞198۩public void rollback() throws SQLException {
smallsql/database/SSConnection.java۞199۩log.println("Rollback");
smallsql/database/SSConnection.java۞200۩testClosedConnection();
smallsql/database/SSConnection.java۞201۩synchronized(getMonitor()){
smallsql/database/SSConnection.java۞202۩int count = commitPages.size();
smallsql/database/SSConnection.java۞203۩for(int i=0; i<count; i++){
smallsql/database/SSConnection.java۞204۩TransactionStep page = (TransactionStep)commitPages.get(i);
smallsql/database/SSConnection.java۞205۩page.rollback();
smallsql/database/SSConnection.java۞206۩page.freeLock();
smallsql/database/SSConnection.java۞207۩}
smallsql/database/SSConnection.java۞208۩commitPages.clear();
smallsql/database/SSConnection.java۞209۩transactionTime = System.currentTimeMillis();
smallsql/database/SSConnection.java۞210۩}
smallsql/database/SSConnection.java۞211۩}
smallsql/database/SSConnection.java۞214۩public void close() throws SQLException {
smallsql/database/SSConnection.java۞215۩rollback();
smallsql/database/SSConnection.java۞216۩database = null;
smallsql/database/SSConnection.java۞217۩commitPages = null;
smallsql/database/SSConnection.java۞218۩Database.closeConnection(this);
smallsql/database/SSConnection.java۞219۩}
smallsql/database/SSConnection.java۞227۩final void testClosedConnection() throws SQLException{
smallsql/database/SSConnection.java۞228۩if(isClosed()) throw SmallSQLException.create(Language.CONNECTION_CLOSED);
smallsql/database/SSConnection.java۞229۩}
smallsql/database/SSConnection.java۞231۩public boolean isClosed(){
smallsql/database/SSConnection.java۞232۩return (commitPages == null);
smallsql/database/SSConnection.java۞233۩}
smallsql/database/SSConnection.java۞236۩public DatabaseMetaData getMetaData(){
smallsql/database/SSConnection.java۞237۩return metadata;
smallsql/database/SSConnection.java۞238۩}
smallsql/database/SSConnection.java۞241۩public void setReadOnly(boolean readOnly){
smallsql/database/SSConnection.java۞243۩}
smallsql/database/SSConnection.java۞246۩public boolean isReadOnly(){
smallsql/database/SSConnection.java۞247۩return readonly;
smallsql/database/SSConnection.java۞248۩}
smallsql/database/SSConnection.java۞251۩public void setCatalog(String catalog) throws SQLException {
smallsql/database/SSConnection.java۞252۩testClosedConnection();
smallsql/database/SSConnection.java۞253۩database = Database.getDatabase(catalog, this, false);
smallsql/database/SSConnection.java۞254۩}
smallsql/database/SSConnection.java۞257۩public String getCatalog(){
smallsql/database/SSConnection.java۞258۩if(database == null)
smallsql/database/SSConnection.java۞259۩return "";
smallsql/database/SSConnection.java۞260۩return database.getName();
smallsql/database/SSConnection.java۞261۩}
smallsql/database/SSConnection.java۞264۩public void setTransactionIsolation(int level) throws SQLException {
smallsql/database/SSConnection.java۞265۩if(!metadata.supportsTransactionIsolationLevel(level)) {
smallsql/database/SSConnection.java۞266۩throw SmallSQLException.create(Language.ISOLATION_UNKNOWN, String.valueOf(level));
smallsql/database/SSConnection.java۞267۩}
smallsql/database/SSConnection.java۞268۩isolationLevel = level;
smallsql/database/SSConnection.java۞269۩}
smallsql/database/SSConnection.java۞272۩public int getTransactionIsolation(){
smallsql/database/SSConnection.java۞273۩return isolationLevel;
smallsql/database/SSConnection.java۞274۩}
smallsql/database/SSConnection.java۞277۩public SQLWarning getWarnings(){
smallsql/database/SSConnection.java۞278۩return null;
smallsql/database/SSConnection.java۞279۩}
smallsql/database/SSConnection.java۞282۩public void clearWarnings(){
smallsql/database/SSConnection.java۞284۩}
smallsql/database/SSConnection.java۞287۩public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
smallsql/database/SSConnection.java۞288۩return new SSStatement( this, resultSetType, resultSetConcurrency);
smallsql/database/SSConnection.java۞289۩}
smallsql/database/SSConnection.java۞292۩public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
smallsql/database/SSConnection.java۞293۩return new SSPreparedStatement( this, sql, resultSetType, resultSetConcurrency);
smallsql/database/SSConnection.java۞294۩}
smallsql/database/SSConnection.java۞297۩public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
smallsql/database/SSConnection.java۞298۩return new SSCallableStatement( this, sql, resultSetType, resultSetConcurrency);
smallsql/database/SSConnection.java۞299۩}
smallsql/database/SSConnection.java۞302۩public Map getTypeMap(){
smallsql/database/SSConnection.java۞303۩return null;
smallsql/database/SSConnection.java۞304۩}
smallsql/database/SSConnection.java۞307۩public void setTypeMap(Map map){
smallsql/database/SSConnection.java۞309۩}
smallsql/database/SSConnection.java۞312۩public void setHoldability(int holdability){
smallsql/database/SSConnection.java۞313۩this.holdability = holdability;
smallsql/database/SSConnection.java۞314۩}
smallsql/database/SSConnection.java۞317۩public int getHoldability(){
smallsql/database/SSConnection.java۞318۩return holdability;
smallsql/database/SSConnection.java۞319۩}
smallsql/database/SSConnection.java۞322۩int getSavepoint() throws SQLException{
smallsql/database/SSConnection.java۞323۩testClosedConnection();
smallsql/database/SSConnection.java۞324۩return commitPages.size();
smallsql/database/SSConnection.java۞325۩}
smallsql/database/SSConnection.java۞328۩public Savepoint setSavepoint() throws SQLException {
smallsql/database/SSConnection.java۞329۩return new SSSavepoint(getSavepoint(), null, transactionTime);
smallsql/database/SSConnection.java۞330۩}
smallsql/database/SSConnection.java۞333۩public Savepoint setSavepoint(String name) throws SQLException {
smallsql/database/SSConnection.java۞334۩return new SSSavepoint(getSavepoint(), name, transactionTime);
smallsql/database/SSConnection.java۞335۩}
smallsql/database/SSConnection.java۞338۩public void rollback(Savepoint savepoint) throws SQLException {
smallsql/database/SSConnection.java۞339۩if(savepoint instanceof SSSavepoint){
smallsql/database/SSConnection.java۞340۩if(((SSSavepoint)savepoint).transactionTime != transactionTime){
smallsql/database/SSConnection.java۞341۩throw SmallSQLException.create(Language.SAVEPT_INVALID_TRANS);
smallsql/database/SSConnection.java۞342۩}
smallsql/database/SSConnection.java۞343۩rollback( savepoint.getSavepointId() );
smallsql/database/SSConnection.java۞344۩return;
smallsql/database/SSConnection.java۞345۩}
smallsql/database/SSConnection.java۞346۩throw SmallSQLException.create(Language.SAVEPT_INVALID_DRIVER, savepoint);
smallsql/database/SSConnection.java۞347۩}
smallsql/database/SSConnection.java۞350۩public void releaseSavepoint(Savepoint savepoint) throws SQLException {
smallsql/database/SSConnection.java۞351۩if(savepoint instanceof SSSavepoint){
smallsql/database/SSConnection.java۞352۩((SSSavepoint)savepoint).transactionTime = 0;
smallsql/database/SSConnection.java۞353۩return;
smallsql/database/SSConnection.java۞354۩}
smallsql/database/SSConnection.java۞355۩throw SmallSQLException.create(Language.SAVEPT_INVALID_DRIVER, new Object[] { savepoint });
smallsql/database/SSConnection.java۞356۩}
smallsql/database/SSConnection.java۞359۩public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
smallsql/database/SSConnection.java۞361۩return new SSStatement( this, resultSetType, resultSetConcurrency);
smallsql/database/SSConnection.java۞362۩}
smallsql/database/SSConnection.java۞363۩public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
smallsql/database/SSConnection.java۞365۩return new SSPreparedStatement( this, sql);
smallsql/database/SSConnection.java۞366۩}
smallsql/database/SSConnection.java۞367۩public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
smallsql/database/SSConnection.java۞369۩return new SSCallableStatement( this, sql, resultSetType, resultSetConcurrency);
smallsql/database/SSConnection.java۞370۩}
smallsql/database/SSConnection.java۞373۩public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
smallsql/database/SSConnection.java۞374۩SSPreparedStatement pr = new SSPreparedStatement( this, sql);
smallsql/database/SSConnection.java۞375۩pr.setNeedGeneratedKeys(autoGeneratedKeys);
smallsql/database/SSConnection.java۞376۩return pr;
smallsql/database/SSConnection.java۞377۩}
smallsql/database/SSConnection.java۞380۩public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
smallsql/database/SSConnection.java۞381۩SSPreparedStatement pr = new SSPreparedStatement( this, sql);
smallsql/database/SSConnection.java۞382۩pr.setNeedGeneratedKeys(columnIndexes);
smallsql/database/SSConnection.java۞383۩return pr;
smallsql/database/SSConnection.java۞384۩}
smallsql/database/SSConnection.java۞387۩public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
smallsql/database/SSConnection.java۞388۩SSPreparedStatement pr = new SSPreparedStatement( this, sql);
smallsql/database/SSConnection.java۞389۩pr.setNeedGeneratedKeys(columnNames);
smallsql/database/SSConnection.java۞390۩return pr;
smallsql/database/SSConnection.java۞391۩}
smallsql/database/SSConnection.java۞392۩}
smallsql/database/SSDatabaseMetaData.java۞33۩package smallsql.database;
smallsql/database/SSDatabaseMetaData.java۞35۩import java.sql.*;
smallsql/database/SSDatabaseMetaData.java۞36۩import java.util.ArrayList;
smallsql/database/SSDatabaseMetaData.java۞39۩final class SSDatabaseMetaData implements DatabaseMetaData {
smallsql/database/SSDatabaseMetaData.java۞40۩final private SSConnection con;
smallsql/database/SSDatabaseMetaData.java۞41۩final private SSStatement st;
smallsql/database/SSDatabaseMetaData.java۞47۩SSDatabaseMetaData(SSConnection con) throws SQLException{
smallsql/database/SSDatabaseMetaData.java۞48۩this.con = con;
smallsql/database/SSDatabaseMetaData.java۞49۩st = new SSStatement(con);
smallsql/database/SSDatabaseMetaData.java۞50۩}
smallsql/database/SSDatabaseMetaData.java۞52۩public boolean allProceduresAreCallable() {
smallsql/database/SSDatabaseMetaData.java۞53۩return true;
smallsql/database/SSDatabaseMetaData.java۞54۩}
smallsql/database/SSDatabaseMetaData.java۞57۩public boolean allTablesAreSelectable() {
smallsql/database/SSDatabaseMetaData.java۞58۩return true;
smallsql/database/SSDatabaseMetaData.java۞59۩}
smallsql/database/SSDatabaseMetaData.java۞62۩public String getURL() throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞63۩Database database = con.getDatabase(true);
smallsql/database/SSDatabaseMetaData.java۞64۩if(database == null)
smallsql/database/SSDatabaseMetaData.java۞65۩return SSDriver.URL_PREFIX;
smallsql/database/SSDatabaseMetaData.java۞66۩return SSDriver.URL_PREFIX + ':' + database.getName();
smallsql/database/SSDatabaseMetaData.java۞67۩}
smallsql/database/SSDatabaseMetaData.java۞70۩public String getUserName() {
smallsql/database/SSDatabaseMetaData.java۞71۩return "";
smallsql/database/SSDatabaseMetaData.java۞72۩}
smallsql/database/SSDatabaseMetaData.java۞75۩public boolean isReadOnly() {
smallsql/database/SSDatabaseMetaData.java۞76۩return false;
smallsql/database/SSDatabaseMetaData.java۞77۩}
smallsql/database/SSDatabaseMetaData.java۞80۩public boolean nullsAreSortedHigh() {
smallsql/database/SSDatabaseMetaData.java۞81۩return false;
smallsql/database/SSDatabaseMetaData.java۞82۩}
smallsql/database/SSDatabaseMetaData.java۞85۩public boolean nullsAreSortedLow() {
smallsql/database/SSDatabaseMetaData.java۞86۩return true;
smallsql/database/SSDatabaseMetaData.java۞87۩}
smallsql/database/SSDatabaseMetaData.java۞90۩public boolean nullsAreSortedAtStart() {
smallsql/database/SSDatabaseMetaData.java۞91۩return false;
smallsql/database/SSDatabaseMetaData.java۞92۩}
smallsql/database/SSDatabaseMetaData.java۞95۩public boolean nullsAreSortedAtEnd() {
smallsql/database/SSDatabaseMetaData.java۞96۩return false;
smallsql/database/SSDatabaseMetaData.java۞97۩}
smallsql/database/SSDatabaseMetaData.java۞100۩public String getDatabaseProductName() {
smallsql/database/SSDatabaseMetaData.java۞101۩return "SmallSQL Database";
smallsql/database/SSDatabaseMetaData.java۞102۩}
smallsql/database/SSDatabaseMetaData.java۞105۩public String getDatabaseProductVersion() {
smallsql/database/SSDatabaseMetaData.java۞106۩return getDriverVersion();
smallsql/database/SSDatabaseMetaData.java۞107۩}
smallsql/database/SSDatabaseMetaData.java۞110۩public String getDriverName(){
smallsql/database/SSDatabaseMetaData.java۞111۩return "SmallSQL Driver";
smallsql/database/SSDatabaseMetaData.java۞112۩}
smallsql/database/SSDatabaseMetaData.java۞115۩public String getDriverVersion() {
smallsql/database/SSDatabaseMetaData.java۞116۩return getDriverMajorVersion() + "." + SSDriver.drv.getMinorVersion();
smallsql/database/SSDatabaseMetaData.java۞117۩}
smallsql/database/SSDatabaseMetaData.java۞120۩public int getDriverMajorVersion() {
smallsql/database/SSDatabaseMetaData.java۞121۩return SSDriver.drv.getMajorVersion();
smallsql/database/SSDatabaseMetaData.java۞122۩}
smallsql/database/SSDatabaseMetaData.java۞125۩public int getDriverMinorVersion() {
smallsql/database/SSDatabaseMetaData.java۞126۩return SSDriver.drv.getMinorVersion();
smallsql/database/SSDatabaseMetaData.java۞127۩}
smallsql/database/SSDatabaseMetaData.java۞130۩public boolean usesLocalFiles() {
smallsql/database/SSDatabaseMetaData.java۞131۩return false;
smallsql/database/SSDatabaseMetaData.java۞132۩}
smallsql/database/SSDatabaseMetaData.java۞135۩public boolean usesLocalFilePerTable() {
smallsql/database/SSDatabaseMetaData.java۞136۩return false;
smallsql/database/SSDatabaseMetaData.java۞137۩}
smallsql/database/SSDatabaseMetaData.java۞140۩public boolean supportsMixedCaseIdentifiers() {
smallsql/database/SSDatabaseMetaData.java۞141۩return true;
smallsql/database/SSDatabaseMetaData.java۞142۩}
smallsql/database/SSDatabaseMetaData.java۞145۩public boolean storesUpperCaseIdentifiers() {
smallsql/database/SSDatabaseMetaData.java۞146۩return false;
smallsql/database/SSDatabaseMetaData.java۞147۩}
smallsql/database/SSDatabaseMetaData.java۞150۩public boolean storesLowerCaseIdentifiers() {
smallsql/database/SSDatabaseMetaData.java۞151۩return false;
smallsql/database/SSDatabaseMetaData.java۞152۩}
smallsql/database/SSDatabaseMetaData.java۞155۩public boolean storesMixedCaseIdentifiers() {
smallsql/database/SSDatabaseMetaData.java۞156۩return true;
smallsql/database/SSDatabaseMetaData.java۞157۩}
smallsql/database/SSDatabaseMetaData.java۞160۩public boolean supportsMixedCaseQuotedIdentifiers() {
smallsql/database/SSDatabaseMetaData.java۞161۩return true;
smallsql/database/SSDatabaseMetaData.java۞162۩}
smallsql/database/SSDatabaseMetaData.java۞165۩public boolean storesUpperCaseQuotedIdentifiers() {
smallsql/database/SSDatabaseMetaData.java۞166۩return false;
smallsql/database/SSDatabaseMetaData.java۞167۩}
smallsql/database/SSDatabaseMetaData.java۞170۩public boolean storesLowerCaseQuotedIdentifiers() {
smallsql/database/SSDatabaseMetaData.java۞171۩return false;
smallsql/database/SSDatabaseMetaData.java۞172۩}
smallsql/database/SSDatabaseMetaData.java۞175۩public boolean storesMixedCaseQuotedIdentifiers() {
smallsql/database/SSDatabaseMetaData.java۞176۩return true;
smallsql/database/SSDatabaseMetaData.java۞177۩}
smallsql/database/SSDatabaseMetaData.java۞180۩public String getIdentifierQuoteString() {
smallsql/database/SSDatabaseMetaData.java۞181۩return "\"";
smallsql/database/SSDatabaseMetaData.java۞182۩}
smallsql/database/SSDatabaseMetaData.java۞185۩public String getSQLKeywords() {
smallsql/database/SSDatabaseMetaData.java۞186۩return "database,use";
smallsql/database/SSDatabaseMetaData.java۞187۩}
smallsql/database/SSDatabaseMetaData.java۞190۩private String getFunctions(int from, int to){
smallsql/database/SSDatabaseMetaData.java۞191۩StringBuffer buf = new StringBuffer();
smallsql/database/SSDatabaseMetaData.java۞192۩for(int i=from; i<=to; i++){
smallsql/database/SSDatabaseMetaData.java۞193۩if(i != from) buf.append(',');
smallsql/database/SSDatabaseMetaData.java۞194۩buf.append( SQLTokenizer.getKeyWord(i) );
smallsql/database/SSDatabaseMetaData.java۞195۩}
smallsql/database/SSDatabaseMetaData.java۞196۩return buf.toString();
smallsql/database/SSDatabaseMetaData.java۞197۩}
smallsql/database/SSDatabaseMetaData.java۞200۩public String getNumericFunctions() {
smallsql/database/SSDatabaseMetaData.java۞201۩return getFunctions(SQLTokenizer.ABS, SQLTokenizer.TRUNCATE);
smallsql/database/SSDatabaseMetaData.java۞202۩}
smallsql/database/SSDatabaseMetaData.java۞205۩public String getStringFunctions() {
smallsql/database/SSDatabaseMetaData.java۞206۩return getFunctions(SQLTokenizer.ASCII, SQLTokenizer.UCASE);
smallsql/database/SSDatabaseMetaData.java۞207۩}
smallsql/database/SSDatabaseMetaData.java۞210۩public String getSystemFunctions() {
smallsql/database/SSDatabaseMetaData.java۞211۩return getFunctions(SQLTokenizer.IFNULL, SQLTokenizer.IIF);
smallsql/database/SSDatabaseMetaData.java۞212۩}
smallsql/database/SSDatabaseMetaData.java۞215۩public String getTimeDateFunctions() {
smallsql/database/SSDatabaseMetaData.java۞216۩return getFunctions(SQLTokenizer.CURDATE, SQLTokenizer.YEAR);
smallsql/database/SSDatabaseMetaData.java۞217۩}
smallsql/database/SSDatabaseMetaData.java۞220۩public String getSearchStringEscape() {
smallsql/database/SSDatabaseMetaData.java۞221۩return "\\";
smallsql/database/SSDatabaseMetaData.java۞222۩}
smallsql/database/SSDatabaseMetaData.java۞225۩public String getExtraNameCharacters() {
smallsql/database/SSDatabaseMetaData.java۞226۩return "#$ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ";
smallsql/database/SSDatabaseMetaData.java۞227۩}
smallsql/database/SSDatabaseMetaData.java۞230۩public boolean supportsAlterTableWithAddColumn() {
smallsql/database/SSDatabaseMetaData.java۞232۩throw new java.lang.UnsupportedOperationException("Method supportsAlterTableWithAddColumn() not yet implemented.");
smallsql/database/SSDatabaseMetaData.java۞233۩}
smallsql/database/SSDatabaseMetaData.java۞234۩public boolean supportsAlterTableWithDropColumn() {
smallsql/database/SSDatabaseMetaData.java۞236۩throw new java.lang.UnsupportedOperationException("Method supportsAlterTableWithDropColumn() not yet implemented.");
smallsql/database/SSDatabaseMetaData.java۞237۩}
smallsql/database/SSDatabaseMetaData.java۞240۩public boolean supportsColumnAliasing() {
smallsql/database/SSDatabaseMetaData.java۞241۩return true;
smallsql/database/SSDatabaseMetaData.java۞242۩}
smallsql/database/SSDatabaseMetaData.java۞245۩public boolean nullPlusNonNullIsNull() {
smallsql/database/SSDatabaseMetaData.java۞246۩return true;
smallsql/database/SSDatabaseMetaData.java۞247۩}
smallsql/database/SSDatabaseMetaData.java۞250۩public boolean supportsConvert() {
smallsql/database/SSDatabaseMetaData.java۞251۩return true;
smallsql/database/SSDatabaseMetaData.java۞252۩}
smallsql/database/SSDatabaseMetaData.java۞255۩public boolean supportsConvert(int fromType, int toType) {
smallsql/database/SSDatabaseMetaData.java۞256۩return true;
smallsql/database/SSDatabaseMetaData.java۞257۩}
smallsql/database/SSDatabaseMetaData.java۞260۩public boolean supportsTableCorrelationNames() {
smallsql/database/SSDatabaseMetaData.java۞261۩return true;
smallsql/database/SSDatabaseMetaData.java۞262۩}
smallsql/database/SSDatabaseMetaData.java۞265۩public boolean supportsDifferentTableCorrelationNames() {
smallsql/database/SSDatabaseMetaData.java۞266۩return true;
smallsql/database/SSDatabaseMetaData.java۞267۩}
smallsql/database/SSDatabaseMetaData.java۞270۩public boolean supportsExpressionsInOrderBy() {
smallsql/database/SSDatabaseMetaData.java۞271۩return true;
smallsql/database/SSDatabaseMetaData.java۞272۩}
smallsql/database/SSDatabaseMetaData.java۞275۩public boolean supportsOrderByUnrelated() {
smallsql/database/SSDatabaseMetaData.java۞276۩return true;
smallsql/database/SSDatabaseMetaData.java۞277۩}
smallsql/database/SSDatabaseMetaData.java۞280۩public boolean supportsGroupBy() {
smallsql/database/SSDatabaseMetaData.java۞281۩return true;
smallsql/database/SSDatabaseMetaData.java۞282۩}
smallsql/database/SSDatabaseMetaData.java۞285۩public boolean supportsGroupByUnrelated() {
smallsql/database/SSDatabaseMetaData.java۞286۩return true;
smallsql/database/SSDatabaseMetaData.java۞287۩}
smallsql/database/SSDatabaseMetaData.java۞290۩public boolean supportsGroupByBeyondSelect() {
smallsql/database/SSDatabaseMetaData.java۞291۩return true;
smallsql/database/SSDatabaseMetaData.java۞292۩}
smallsql/database/SSDatabaseMetaData.java۞295۩public boolean supportsLikeEscapeClause() {
smallsql/database/SSDatabaseMetaData.java۞296۩return true;
smallsql/database/SSDatabaseMetaData.java۞297۩}
smallsql/database/SSDatabaseMetaData.java۞300۩public boolean supportsMultipleResultSets() {
smallsql/database/SSDatabaseMetaData.java۞301۩return true;
smallsql/database/SSDatabaseMetaData.java۞302۩}
smallsql/database/SSDatabaseMetaData.java۞305۩public boolean supportsMultipleTransactions() {
smallsql/database/SSDatabaseMetaData.java۞306۩return true;
smallsql/database/SSDatabaseMetaData.java۞307۩}
smallsql/database/SSDatabaseMetaData.java۞310۩public boolean supportsNonNullableColumns() {
smallsql/database/SSDatabaseMetaData.java۞311۩return true;
smallsql/database/SSDatabaseMetaData.java۞312۩}
smallsql/database/SSDatabaseMetaData.java۞315۩public boolean supportsMinimumSQLGrammar() {
smallsql/database/SSDatabaseMetaData.java۞316۩return true;
smallsql/database/SSDatabaseMetaData.java۞317۩}
smallsql/database/SSDatabaseMetaData.java۞320۩public boolean supportsCoreSQLGrammar() {
smallsql/database/SSDatabaseMetaData.java۞321۩return true;
smallsql/database/SSDatabaseMetaData.java۞322۩}
smallsql/database/SSDatabaseMetaData.java۞325۩public boolean supportsExtendedSQLGrammar() {
smallsql/database/SSDatabaseMetaData.java۞326۩return true;
smallsql/database/SSDatabaseMetaData.java۞327۩}
smallsql/database/SSDatabaseMetaData.java۞330۩public boolean supportsANSI92EntryLevelSQL() {
smallsql/database/SSDatabaseMetaData.java۞331۩return true;
smallsql/database/SSDatabaseMetaData.java۞332۩}
smallsql/database/SSDatabaseMetaData.java۞335۩public boolean supportsANSI92IntermediateSQL() {
smallsql/database/SSDatabaseMetaData.java۞336۩return true;
smallsql/database/SSDatabaseMetaData.java۞337۩}
smallsql/database/SSDatabaseMetaData.java۞340۩public boolean supportsANSI92FullSQL() {
smallsql/database/SSDatabaseMetaData.java۞341۩return true;
smallsql/database/SSDatabaseMetaData.java۞342۩}
smallsql/database/SSDatabaseMetaData.java۞345۩public boolean supportsIntegrityEnhancementFacility() {
smallsql/database/SSDatabaseMetaData.java۞346۩return true;
smallsql/database/SSDatabaseMetaData.java۞347۩}
smallsql/database/SSDatabaseMetaData.java۞350۩public boolean supportsOuterJoins() {
smallsql/database/SSDatabaseMetaData.java۞351۩return true;
smallsql/database/SSDatabaseMetaData.java۞352۩}
smallsql/database/SSDatabaseMetaData.java۞355۩public boolean supportsFullOuterJoins() {
smallsql/database/SSDatabaseMetaData.java۞356۩return true;
smallsql/database/SSDatabaseMetaData.java۞357۩}
smallsql/database/SSDatabaseMetaData.java۞360۩public boolean supportsLimitedOuterJoins() {
smallsql/database/SSDatabaseMetaData.java۞361۩return true;
smallsql/database/SSDatabaseMetaData.java۞362۩}
smallsql/database/SSDatabaseMetaData.java۞365۩public String getSchemaTerm() {
smallsql/database/SSDatabaseMetaData.java۞366۩return "owner";
smallsql/database/SSDatabaseMetaData.java۞367۩}
smallsql/database/SSDatabaseMetaData.java۞370۩public String getProcedureTerm() {
smallsql/database/SSDatabaseMetaData.java۞371۩return "procedure";
smallsql/database/SSDatabaseMetaData.java۞372۩}
smallsql/database/SSDatabaseMetaData.java۞375۩public String getCatalogTerm() {
smallsql/database/SSDatabaseMetaData.java۞376۩return "database";
smallsql/database/SSDatabaseMetaData.java۞377۩}
smallsql/database/SSDatabaseMetaData.java۞380۩public boolean isCatalogAtStart() {
smallsql/database/SSDatabaseMetaData.java۞381۩return true;
smallsql/database/SSDatabaseMetaData.java۞382۩}
smallsql/database/SSDatabaseMetaData.java۞385۩public String getCatalogSeparator() {
smallsql/database/SSDatabaseMetaData.java۞386۩return ".";
smallsql/database/SSDatabaseMetaData.java۞387۩}
smallsql/database/SSDatabaseMetaData.java۞390۩public boolean supportsSchemasInDataManipulation() {
smallsql/database/SSDatabaseMetaData.java۞391۩return false;
smallsql/database/SSDatabaseMetaData.java۞392۩}
smallsql/database/SSDatabaseMetaData.java۞395۩public boolean supportsSchemasInProcedureCalls() {
smallsql/database/SSDatabaseMetaData.java۞396۩return false;
smallsql/database/SSDatabaseMetaData.java۞397۩}
smallsql/database/SSDatabaseMetaData.java۞400۩public boolean supportsSchemasInTableDefinitions() {
smallsql/database/SSDatabaseMetaData.java۞401۩return false;
smallsql/database/SSDatabaseMetaData.java۞402۩}
smallsql/database/SSDatabaseMetaData.java۞405۩public boolean supportsSchemasInIndexDefinitions() {
smallsql/database/SSDatabaseMetaData.java۞406۩return false;
smallsql/database/SSDatabaseMetaData.java۞407۩}
smallsql/database/SSDatabaseMetaData.java۞410۩public boolean supportsSchemasInPrivilegeDefinitions() {
smallsql/database/SSDatabaseMetaData.java۞411۩return false;
smallsql/database/SSDatabaseMetaData.java۞412۩}
smallsql/database/SSDatabaseMetaData.java۞415۩public boolean supportsCatalogsInDataManipulation() {
smallsql/database/SSDatabaseMetaData.java۞416۩return true;
smallsql/database/SSDatabaseMetaData.java۞417۩}
smallsql/database/SSDatabaseMetaData.java۞420۩public boolean supportsCatalogsInProcedureCalls() {
smallsql/database/SSDatabaseMetaData.java۞421۩return true;
smallsql/database/SSDatabaseMetaData.java۞422۩}
smallsql/database/SSDatabaseMetaData.java۞425۩public boolean supportsCatalogsInTableDefinitions() {
smallsql/database/SSDatabaseMetaData.java۞426۩return true;
smallsql/database/SSDatabaseMetaData.java۞427۩}
smallsql/database/SSDatabaseMetaData.java۞430۩public boolean supportsCatalogsInIndexDefinitions() {
smallsql/database/SSDatabaseMetaData.java۞431۩return true;
smallsql/database/SSDatabaseMetaData.java۞432۩}
smallsql/database/SSDatabaseMetaData.java۞435۩public boolean supportsCatalogsInPrivilegeDefinitions() {
smallsql/database/SSDatabaseMetaData.java۞436۩return true;
smallsql/database/SSDatabaseMetaData.java۞437۩}
smallsql/database/SSDatabaseMetaData.java۞440۩public boolean supportsPositionedDelete() {
smallsql/database/SSDatabaseMetaData.java۞441۩return true;
smallsql/database/SSDatabaseMetaData.java۞442۩}
smallsql/database/SSDatabaseMetaData.java۞445۩public boolean supportsPositionedUpdate() {
smallsql/database/SSDatabaseMetaData.java۞446۩return true;
smallsql/database/SSDatabaseMetaData.java۞447۩}
smallsql/database/SSDatabaseMetaData.java۞450۩public boolean supportsSelectForUpdate() {
smallsql/database/SSDatabaseMetaData.java۞451۩return true;
smallsql/database/SSDatabaseMetaData.java۞452۩}
smallsql/database/SSDatabaseMetaData.java۞455۩public boolean supportsStoredProcedures() {
smallsql/database/SSDatabaseMetaData.java۞456۩return false;
smallsql/database/SSDatabaseMetaData.java۞457۩}
smallsql/database/SSDatabaseMetaData.java۞460۩public boolean supportsSubqueriesInComparisons() {
smallsql/database/SSDatabaseMetaData.java۞461۩return true;
smallsql/database/SSDatabaseMetaData.java۞462۩}
smallsql/database/SSDatabaseMetaData.java۞465۩public boolean supportsSubqueriesInExists() {
smallsql/database/SSDatabaseMetaData.java۞466۩return true;
smallsql/database/SSDatabaseMetaData.java۞467۩}
smallsql/database/SSDatabaseMetaData.java۞470۩public boolean supportsSubqueriesInIns() {
smallsql/database/SSDatabaseMetaData.java۞471۩return true;
smallsql/database/SSDatabaseMetaData.java۞472۩}
smallsql/database/SSDatabaseMetaData.java۞475۩public boolean supportsSubqueriesInQuantifieds() {
smallsql/database/SSDatabaseMetaData.java۞476۩return true;
smallsql/database/SSDatabaseMetaData.java۞477۩}
smallsql/database/SSDatabaseMetaData.java۞480۩public boolean supportsCorrelatedSubqueries() {
smallsql/database/SSDatabaseMetaData.java۞481۩return true;
smallsql/database/SSDatabaseMetaData.java۞482۩}
smallsql/database/SSDatabaseMetaData.java۞485۩public boolean supportsUnion() {
smallsql/database/SSDatabaseMetaData.java۞486۩return true;
smallsql/database/SSDatabaseMetaData.java۞487۩}
smallsql/database/SSDatabaseMetaData.java۞490۩public boolean supportsUnionAll() {
smallsql/database/SSDatabaseMetaData.java۞491۩return true;
smallsql/database/SSDatabaseMetaData.java۞492۩}
smallsql/database/SSDatabaseMetaData.java۞495۩public boolean supportsOpenCursorsAcrossCommit() {
smallsql/database/SSDatabaseMetaData.java۞496۩return true;
smallsql/database/SSDatabaseMetaData.java۞497۩}
smallsql/database/SSDatabaseMetaData.java۞500۩public boolean supportsOpenCursorsAcrossRollback() {
smallsql/database/SSDatabaseMetaData.java۞501۩return true;
smallsql/database/SSDatabaseMetaData.java۞502۩}
smallsql/database/SSDatabaseMetaData.java۞505۩public boolean supportsOpenStatementsAcrossCommit() {
smallsql/database/SSDatabaseMetaData.java۞506۩return true;
smallsql/database/SSDatabaseMetaData.java۞507۩}
smallsql/database/SSDatabaseMetaData.java۞510۩public boolean supportsOpenStatementsAcrossRollback() {
smallsql/database/SSDatabaseMetaData.java۞511۩return true;
smallsql/database/SSDatabaseMetaData.java۞512۩}
smallsql/database/SSDatabaseMetaData.java۞515۩public int getMaxBinaryLiteralLength() {
smallsql/database/SSDatabaseMetaData.java۞516۩return 0;
smallsql/database/SSDatabaseMetaData.java۞517۩}
smallsql/database/SSDatabaseMetaData.java۞520۩public int getMaxCharLiteralLength() {
smallsql/database/SSDatabaseMetaData.java۞521۩return 0;
smallsql/database/SSDatabaseMetaData.java۞522۩}
smallsql/database/SSDatabaseMetaData.java۞525۩public int getMaxColumnNameLength() {
smallsql/database/SSDatabaseMetaData.java۞526۩return 255;
smallsql/database/SSDatabaseMetaData.java۞527۩}
smallsql/database/SSDatabaseMetaData.java۞530۩public int getMaxColumnsInGroupBy() {
smallsql/database/SSDatabaseMetaData.java۞531۩return 0;
smallsql/database/SSDatabaseMetaData.java۞532۩}
smallsql/database/SSDatabaseMetaData.java۞535۩public int getMaxColumnsInIndex() {
smallsql/database/SSDatabaseMetaData.java۞536۩return 0;
smallsql/database/SSDatabaseMetaData.java۞537۩}
smallsql/database/SSDatabaseMetaData.java۞540۩public int getMaxColumnsInOrderBy() {
smallsql/database/SSDatabaseMetaData.java۞541۩return 0;
smallsql/database/SSDatabaseMetaData.java۞542۩}
smallsql/database/SSDatabaseMetaData.java۞545۩public int getMaxColumnsInSelect() {
smallsql/database/SSDatabaseMetaData.java۞546۩return 0;
smallsql/database/SSDatabaseMetaData.java۞547۩}
smallsql/database/SSDatabaseMetaData.java۞550۩public int getMaxColumnsInTable() {
smallsql/database/SSDatabaseMetaData.java۞551۩return 0;
smallsql/database/SSDatabaseMetaData.java۞552۩}
smallsql/database/SSDatabaseMetaData.java۞555۩public int getMaxConnections() {
smallsql/database/SSDatabaseMetaData.java۞556۩return 0;
smallsql/database/SSDatabaseMetaData.java۞557۩}
smallsql/database/SSDatabaseMetaData.java۞560۩public int getMaxCursorNameLength() {
smallsql/database/SSDatabaseMetaData.java۞561۩return 0;
smallsql/database/SSDatabaseMetaData.java۞562۩}
smallsql/database/SSDatabaseMetaData.java۞565۩public int getMaxIndexLength() {
smallsql/database/SSDatabaseMetaData.java۞566۩return 0;
smallsql/database/SSDatabaseMetaData.java۞567۩}
smallsql/database/SSDatabaseMetaData.java۞570۩public int getMaxSchemaNameLength() {
smallsql/database/SSDatabaseMetaData.java۞571۩return 255;
smallsql/database/SSDatabaseMetaData.java۞572۩}
smallsql/database/SSDatabaseMetaData.java۞575۩public int getMaxProcedureNameLength() {
smallsql/database/SSDatabaseMetaData.java۞576۩return 255;
smallsql/database/SSDatabaseMetaData.java۞577۩}
smallsql/database/SSDatabaseMetaData.java۞580۩public int getMaxCatalogNameLength() {
smallsql/database/SSDatabaseMetaData.java۞581۩return 255;
smallsql/database/SSDatabaseMetaData.java۞582۩}
smallsql/database/SSDatabaseMetaData.java۞585۩public int getMaxRowSize() {
smallsql/database/SSDatabaseMetaData.java۞586۩return 0;
smallsql/database/SSDatabaseMetaData.java۞587۩}
smallsql/database/SSDatabaseMetaData.java۞590۩public boolean doesMaxRowSizeIncludeBlobs() {
smallsql/database/SSDatabaseMetaData.java۞591۩return false;
smallsql/database/SSDatabaseMetaData.java۞592۩}
smallsql/database/SSDatabaseMetaData.java۞595۩public int getMaxStatementLength() {
smallsql/database/SSDatabaseMetaData.java۞596۩return 0;
smallsql/database/SSDatabaseMetaData.java۞597۩}
smallsql/database/SSDatabaseMetaData.java۞600۩public int getMaxStatements() {
smallsql/database/SSDatabaseMetaData.java۞601۩return 0;
smallsql/database/SSDatabaseMetaData.java۞602۩}
smallsql/database/SSDatabaseMetaData.java۞605۩public int getMaxTableNameLength() {
smallsql/database/SSDatabaseMetaData.java۞606۩return 255;
smallsql/database/SSDatabaseMetaData.java۞607۩}
smallsql/database/SSDatabaseMetaData.java۞610۩public int getMaxTablesInSelect() {
smallsql/database/SSDatabaseMetaData.java۞611۩return 0;
smallsql/database/SSDatabaseMetaData.java۞612۩}
smallsql/database/SSDatabaseMetaData.java۞615۩public int getMaxUserNameLength() {
smallsql/database/SSDatabaseMetaData.java۞616۩return 0;
smallsql/database/SSDatabaseMetaData.java۞617۩}
smallsql/database/SSDatabaseMetaData.java۞620۩public int getDefaultTransactionIsolation() {
smallsql/database/SSDatabaseMetaData.java۞621۩return Connection.TRANSACTION_READ_COMMITTED;
smallsql/database/SSDatabaseMetaData.java۞622۩}
smallsql/database/SSDatabaseMetaData.java۞625۩public boolean supportsTransactions() {
smallsql/database/SSDatabaseMetaData.java۞626۩return true;
smallsql/database/SSDatabaseMetaData.java۞627۩}
smallsql/database/SSDatabaseMetaData.java۞630۩public boolean supportsTransactionIsolationLevel(int level) {
smallsql/database/SSDatabaseMetaData.java۞631۩switch(level){
smallsql/database/SSDatabaseMetaData.java۞632۩case Connection.TRANSACTION_NONE:
smallsql/database/SSDatabaseMetaData.java۞633۩case Connection.TRANSACTION_READ_UNCOMMITTED:
smallsql/database/SSDatabaseMetaData.java۞634۩case Connection.TRANSACTION_READ_COMMITTED:
smallsql/database/SSDatabaseMetaData.java۞635۩case Connection.TRANSACTION_REPEATABLE_READ:
smallsql/database/SSDatabaseMetaData.java۞636۩case Connection.TRANSACTION_SERIALIZABLE:
smallsql/database/SSDatabaseMetaData.java۞637۩return true;
smallsql/database/SSDatabaseMetaData.java۞638۩}
smallsql/database/SSDatabaseMetaData.java۞639۩return false;
smallsql/database/SSDatabaseMetaData.java۞640۩}
smallsql/database/SSDatabaseMetaData.java۞643۩public boolean supportsDataDefinitionAndDataManipulationTransactions() {
smallsql/database/SSDatabaseMetaData.java۞644۩return true;
smallsql/database/SSDatabaseMetaData.java۞645۩}
smallsql/database/SSDatabaseMetaData.java۞648۩public boolean supportsDataManipulationTransactionsOnly() {
smallsql/database/SSDatabaseMetaData.java۞649۩return false;
smallsql/database/SSDatabaseMetaData.java۞650۩}
smallsql/database/SSDatabaseMetaData.java۞653۩public boolean dataDefinitionCausesTransactionCommit() {
smallsql/database/SSDatabaseMetaData.java۞654۩return false;
smallsql/database/SSDatabaseMetaData.java۞655۩}
smallsql/database/SSDatabaseMetaData.java۞658۩public boolean dataDefinitionIgnoredInTransactions() {
smallsql/database/SSDatabaseMetaData.java۞659۩return false;
smallsql/database/SSDatabaseMetaData.java۞660۩}
smallsql/database/SSDatabaseMetaData.java۞663۩public ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞664۩String[] colNames = {"PROCEDURE_CAT", "PROCEDURE_SCHEM", "PROCEDURE_NAME", "", "", "", "REMARKS", "PROCEDURE_TYPE"};
smallsql/database/SSDatabaseMetaData.java۞665۩Object[][] data   = new Object[0][];
smallsql/database/SSDatabaseMetaData.java۞666۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞667۩}
smallsql/database/SSDatabaseMetaData.java۞670۩public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞671۩String[] colNames = {"PROCEDURE_CAT", "PROCEDURE_SCHEM", "PROCEDURE_NAME", "COLUMN_NAME", "COLUMN_TYPE", "DATA_TYPE", "TYPE_NAME", "PRECISION", "LENGTH", "SCALE", "RADIX", "NULLABLE", "REMARKS" };
smallsql/database/SSDatabaseMetaData.java۞672۩Object[][] data   = new Object[0][];
smallsql/database/SSDatabaseMetaData.java۞673۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞674۩}
smallsql/database/SSDatabaseMetaData.java۞677۩public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞678۩String[] colNames = {"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","TABLE_TYPE","REMARKS","TYPE_CAT","TYPE_SCHEM","TYPE_NAME","SELF_REFERENCING_COL_NAME","REF_GENERATION"};
smallsql/database/SSDatabaseMetaData.java۞679۩Database database;
smallsql/database/SSDatabaseMetaData.java۞680۩if(catalog == null){
smallsql/database/SSDatabaseMetaData.java۞681۩database = con.getDatabase(true);
smallsql/database/SSDatabaseMetaData.java۞682۩if(database != null)
smallsql/database/SSDatabaseMetaData.java۞683۩catalog = database.getName();
smallsql/database/SSDatabaseMetaData.java۞684۩}else{
smallsql/database/SSDatabaseMetaData.java۞685۩database = Database.getDatabase(catalog, con, false);
smallsql/database/SSDatabaseMetaData.java۞686۩}
smallsql/database/SSDatabaseMetaData.java۞687۩ArrayList rows = new ArrayList();
smallsql/database/SSDatabaseMetaData.java۞688۩boolean isTypeTable = types == null;
smallsql/database/SSDatabaseMetaData.java۞689۩boolean isTypeView = types == null;
smallsql/database/SSDatabaseMetaData.java۞690۩for(int i=0; types != null && i<types.length; i++){
smallsql/database/SSDatabaseMetaData.java۞691۩if("TABLE".equalsIgnoreCase(types[i])) isTypeTable = true;
smallsql/database/SSDatabaseMetaData.java۞692۩if("VIEW" .equalsIgnoreCase(types[i])) isTypeView  = true;
smallsql/database/SSDatabaseMetaData.java۞693۩}
smallsql/database/SSDatabaseMetaData.java۞695۩if(database != null){
smallsql/database/SSDatabaseMetaData.java۞696۩Strings tables = database.getTables(tableNamePattern);
smallsql/database/SSDatabaseMetaData.java۞697۩for(int i=0; i<tables.size(); i++){
smallsql/database/SSDatabaseMetaData.java۞698۩String table = tables.get(i);
smallsql/database/SSDatabaseMetaData.java۞699۩Object[] row = new Object[10];
smallsql/database/SSDatabaseMetaData.java۞700۩row[0] = catalog;
smallsql/database/SSDatabaseMetaData.java۞701۩row[2] = table;
smallsql/database/SSDatabaseMetaData.java۞702۩try{
smallsql/database/SSDatabaseMetaData.java۞703۩if(database.getTableView( con, table) instanceof View){
smallsql/database/SSDatabaseMetaData.java۞704۩if(isTypeView){
smallsql/database/SSDatabaseMetaData.java۞705۩row[3] = "VIEW";
smallsql/database/SSDatabaseMetaData.java۞706۩rows.add(row);
smallsql/database/SSDatabaseMetaData.java۞707۩}
smallsql/database/SSDatabaseMetaData.java۞708۩}else{
smallsql/database/SSDatabaseMetaData.java۞709۩if(isTypeTable){
smallsql/database/SSDatabaseMetaData.java۞710۩row[3] = "TABLE";
smallsql/database/SSDatabaseMetaData.java۞711۩rows.add(row);
smallsql/database/SSDatabaseMetaData.java۞712۩}
smallsql/database/SSDatabaseMetaData.java۞713۩}
smallsql/database/SSDatabaseMetaData.java۞714۩}catch(Exception e){
smallsql/database/SSDatabaseMetaData.java۞716۩}
smallsql/database/SSDatabaseMetaData.java۞717۩}
smallsql/database/SSDatabaseMetaData.java۞718۩}
smallsql/database/SSDatabaseMetaData.java۞719۩Object[][] data = new Object[rows.size()][];
smallsql/database/SSDatabaseMetaData.java۞720۩rows.toArray(data);
smallsql/database/SSDatabaseMetaData.java۞721۩CommandSelect cmdSelect = Utils.createMemoryCommandSelect( con, colNames, data);
smallsql/database/SSDatabaseMetaData.java۞722۩Expressions order = new Expressions();
smallsql/database/SSDatabaseMetaData.java۞723۩order.add( new ExpressionName("TABLE_TYPE") );
smallsql/database/SSDatabaseMetaData.java۞724۩order.add( new ExpressionName("TABLE_NAME") );
smallsql/database/SSDatabaseMetaData.java۞725۩cmdSelect.setOrder( order );
smallsql/database/SSDatabaseMetaData.java۞726۩return new SSResultSet( st, cmdSelect);
smallsql/database/SSDatabaseMetaData.java۞727۩}
smallsql/database/SSDatabaseMetaData.java۞730۩public ResultSet getSchemas() throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞731۩String[] colNames = {"TABLE_SCHEM"};
smallsql/database/SSDatabaseMetaData.java۞732۩Object[][] data   = new Object[0][];
smallsql/database/SSDatabaseMetaData.java۞733۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞734۩}
smallsql/database/SSDatabaseMetaData.java۞737۩public ResultSet getCatalogs() throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞738۩String[] colNames = {"TABLE_CAT"};
smallsql/database/SSDatabaseMetaData.java۞739۩Object[][] data   = Database.getCatalogs(con.getDatabase(true));
smallsql/database/SSDatabaseMetaData.java۞740۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞741۩}
smallsql/database/SSDatabaseMetaData.java۞744۩public ResultSet getTableTypes() throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞745۩String[] colNames = {"TABLE_TYPE"};
smallsql/database/SSDatabaseMetaData.java۞746۩Object[][] data   = {{"SYSTEM TABLE"}, {"TABLE"}, {"VIEW"}};
smallsql/database/SSDatabaseMetaData.java۞747۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞748۩}
smallsql/database/SSDatabaseMetaData.java۞751۩public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞752۩try {
smallsql/database/SSDatabaseMetaData.java۞753۩String[] colNames = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE", "TYPE_NAME", "COLUMN_SIZE", "BUFFER_LENGTH", "DECIMAL_DIGITS", "NUM_PREC_RADIX", "NULLABLE", "REMARKS", "COLUMN_DEF", "SQL_DATA_TYPE", "SQL_DATETIME_SUB", "CHAR_OCTET_LENGTH", "ORDINAL_POSITION", "IS_NULLABLE"};
smallsql/database/SSDatabaseMetaData.java۞754۩Object[][] data   = con.getDatabase(false).getColumns(con, tableNamePattern, columnNamePattern);
smallsql/database/SSDatabaseMetaData.java۞755۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞756۩} catch (Exception e) {
smallsql/database/SSDatabaseMetaData.java۞757۩throw SmallSQLException.createFromException(e);
smallsql/database/SSDatabaseMetaData.java۞758۩}
smallsql/database/SSDatabaseMetaData.java۞759۩}
smallsql/database/SSDatabaseMetaData.java۞762۩public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞763۩String[] colNames = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "COLUMN_NAME", "GRANTOR", "GRANTEE", "PRIVILEGE", "IS_GRANTABLE"};
smallsql/database/SSDatabaseMetaData.java۞765۩throw new java.lang.UnsupportedOperationException("Method getColumnPrivileges() not yet implemented.");
smallsql/database/SSDatabaseMetaData.java۞766۩}
smallsql/database/SSDatabaseMetaData.java۞769۩public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞770۩String[] colNames = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "GRANTOR", "GRANTEE", "PRIVILEGE", "IS_GRANTABLE"};
smallsql/database/SSDatabaseMetaData.java۞772۩throw new java.lang.UnsupportedOperationException("Method getTablePrivileges() not yet implemented.");
smallsql/database/SSDatabaseMetaData.java۞773۩}
smallsql/database/SSDatabaseMetaData.java۞776۩public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞777۩try {
smallsql/database/SSDatabaseMetaData.java۞778۩String[] colNames = {"SCOPE", "COLUMN_NAME", "DATA_TYPE", "TYPE_NAME", "COLUMN_SIZE", "BUFFER_LENGTH", "DECIMAL_DIGITS", "PSEUDO_COLUMN"};
smallsql/database/SSDatabaseMetaData.java۞779۩Object[][] data   = con.getDatabase(false).getBestRowIdentifier(con, table);
smallsql/database/SSDatabaseMetaData.java۞780۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞781۩} catch (Exception e) {
smallsql/database/SSDatabaseMetaData.java۞782۩throw SmallSQLException.createFromException(e);
smallsql/database/SSDatabaseMetaData.java۞783۩}
smallsql/database/SSDatabaseMetaData.java۞784۩}
smallsql/database/SSDatabaseMetaData.java۞787۩public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞788۩try {
smallsql/database/SSDatabaseMetaData.java۞789۩String[] colNames = {"SCOPE", "COLUMN_NAME", "DATA_TYPE", "TYPE_NAME", "COLUMN_SIZE", "BUFFER_LENGTH", "DECIMAL_DIGITS", "PSEUDO_COLUMN"};
smallsql/database/SSDatabaseMetaData.java۞790۩Object[][] data   = new Object[0][0];
smallsql/database/SSDatabaseMetaData.java۞791۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞792۩} catch (Exception e) {
smallsql/database/SSDatabaseMetaData.java۞793۩throw SmallSQLException.createFromException(e);
smallsql/database/SSDatabaseMetaData.java۞794۩}
smallsql/database/SSDatabaseMetaData.java۞795۩}
smallsql/database/SSDatabaseMetaData.java۞798۩public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞799۩try {
smallsql/database/SSDatabaseMetaData.java۞800۩String[] colNames = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "COLUMN_NAME", "KEY_SEQ", "PK_NAME"};
smallsql/database/SSDatabaseMetaData.java۞801۩Object[][] data   = con.getDatabase(false).getPrimaryKeys(con, table);
smallsql/database/SSDatabaseMetaData.java۞802۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞803۩} catch (Exception e) {
smallsql/database/SSDatabaseMetaData.java۞804۩throw SmallSQLException.createFromException(e);
smallsql/database/SSDatabaseMetaData.java۞805۩}
smallsql/database/SSDatabaseMetaData.java۞806۩}
smallsql/database/SSDatabaseMetaData.java۞809۩public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞810۩return getCrossReference( null, null, null, null, null, table );
smallsql/database/SSDatabaseMetaData.java۞811۩}
smallsql/database/SSDatabaseMetaData.java۞814۩public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞815۩return getCrossReference( null, null, table, null, null, null );
smallsql/database/SSDatabaseMetaData.java۞816۩}
smallsql/database/SSDatabaseMetaData.java۞819۩public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞820۩try {
smallsql/database/SSDatabaseMetaData.java۞821۩String[] colNames = {"PKTABLE_CAT", "PKTABLE_SCHEM", "PKTABLE_NAME", "PKCOLUMN_NAME", "FKTABLE_CAT", "FKTABLE_SCHEM", "FKTABLE_NAME", "FKCOLUMN_NAME", "KEY_SEQ", "UPDATE_RULE", "DELETE_RULE", "FK_NAME", "PK_NAME", "DEFERRABILITY"};
smallsql/database/SSDatabaseMetaData.java۞822۩Object[][] data   = con.getDatabase(false).getReferenceKeys(con, primaryTable, foreignTable);
smallsql/database/SSDatabaseMetaData.java۞823۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞824۩} catch (Exception e) {
smallsql/database/SSDatabaseMetaData.java۞825۩throw SmallSQLException.createFromException(e);
smallsql/database/SSDatabaseMetaData.java۞826۩}
smallsql/database/SSDatabaseMetaData.java۞827۩}
smallsql/database/SSDatabaseMetaData.java۞830۩public ResultSet getTypeInfo() throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞831۩String[] colNames = {		"TYPE_NAME", 				"DATA_TYPE", 																	"PRECISION", 	"LITERAL_PREFIX", "LITERAL_SUFFIX", 		"CREATE_PARAMS", "NULLABLE", 	 "CASE_SENSITIVE", "SEARCHABLE", "UNSIGNED_ATTRIBUTE", "FIXED_PREC_SCALE", "AUTO_INCREMENT", "LOCAL_TYPE_NAME", "MINIMUM_SCALE", "MAXIMUM_SCALE", "SQL_DATA_TYPE", "SQL_DATETIME_SUB", "NUM_PREC_RADIX"};
smallsql/database/SSDatabaseMetaData.java۞832۩Object[][] data   = {
smallsql/database/SSDatabaseMetaData.java۞833۩{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      	"'",  "'",  null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null},
smallsql/database/SSDatabaseMetaData.java۞834۩{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞835۩{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞836۩{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞837۩{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞838۩{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   	  Utils.getInteger(65535),	    "0x", null, "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞839۩{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   	 	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   	  	  Utils.getInteger(65535),	    "0x", null, "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞840۩{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞841۩{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞842۩{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         	  Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞843۩{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞844۩{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null},
smallsql/database/SSDatabaseMetaData.java۞845۩{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null},
smallsql/database/SSDatabaseMetaData.java۞846۩{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞847۩{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞848۩{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞849۩{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞850۩{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞851۩{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        	  Utils.getInteger(7),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞852۩{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞853۩{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞854۩{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞855۩{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BOOLEAN) ),         Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞856۩{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   	 	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), 	  		  Utils.getInteger(10),	    	"'",  "'",  null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞857۩{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   	 	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), 	  		  Utils.getInteger(8),	    	"'",  "'",  null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞858۩{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),   	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIMESTAMP) ), 	  Utils.getInteger(23),	    	"'",  "'",  null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(3), Utils.getInteger(3), null, null, null},
smallsql/database/SSDatabaseMetaData.java۞859۩{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),	    	"'",  "'",  null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞860۩{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),	    null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞861۩{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   		 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   		  Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞862۩{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     		 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     		  Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞863۩{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     		 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     	  Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null},
smallsql/database/SSDatabaseMetaData.java۞864۩};
smallsql/database/SSDatabaseMetaData.java۞866۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞867۩}
smallsql/database/SSDatabaseMetaData.java۞870۩public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞871۩try {
smallsql/database/SSDatabaseMetaData.java۞872۩String[] colNames = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "NON_UNIQUE", "INDEX_QUALIFIER", "INDEX_NAME", "TYPE", "ORDINAL_POSITION", "COLUMN_NAME", "ASC_OR_DESC", "CARDINALITY", "PAGES", "FILTER_CONDITION"};
smallsql/database/SSDatabaseMetaData.java۞873۩Object[][] data   = con.getDatabase(false).getIndexInfo(con, table, unique);
smallsql/database/SSDatabaseMetaData.java۞874۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞875۩} catch (Exception e) {
smallsql/database/SSDatabaseMetaData.java۞876۩throw SmallSQLException.createFromException(e);
smallsql/database/SSDatabaseMetaData.java۞877۩}
smallsql/database/SSDatabaseMetaData.java۞878۩}
smallsql/database/SSDatabaseMetaData.java۞881۩public boolean supportsResultSetType(int type) {
smallsql/database/SSDatabaseMetaData.java۞882۩switch(type){
smallsql/database/SSDatabaseMetaData.java۞883۩case ResultSet.TYPE_FORWARD_ONLY:
smallsql/database/SSDatabaseMetaData.java۞884۩case ResultSet.TYPE_SCROLL_INSENSITIVE:
smallsql/database/SSDatabaseMetaData.java۞885۩case ResultSet.TYPE_SCROLL_SENSITIVE:
smallsql/database/SSDatabaseMetaData.java۞886۩return true;
smallsql/database/SSDatabaseMetaData.java۞887۩}
smallsql/database/SSDatabaseMetaData.java۞888۩return false;
smallsql/database/SSDatabaseMetaData.java۞889۩}
smallsql/database/SSDatabaseMetaData.java۞892۩public boolean supportsResultSetConcurrency(int type, int concurrency) {
smallsql/database/SSDatabaseMetaData.java۞893۩if(type >= ResultSet.TYPE_FORWARD_ONLY && type <= ResultSet.TYPE_SCROLL_SENSITIVE &&
smallsql/database/SSDatabaseMetaData.java۞894۩concurrency >= ResultSet.CONCUR_READ_ONLY && concurrency <= ResultSet.CONCUR_UPDATABLE)
smallsql/database/SSDatabaseMetaData.java۞895۩return true;
smallsql/database/SSDatabaseMetaData.java۞896۩return false;
smallsql/database/SSDatabaseMetaData.java۞897۩}
smallsql/database/SSDatabaseMetaData.java۞900۩public boolean ownUpdatesAreVisible(int type) {
smallsql/database/SSDatabaseMetaData.java۞901۩return supportsResultSetType(type);
smallsql/database/SSDatabaseMetaData.java۞902۩}
smallsql/database/SSDatabaseMetaData.java۞905۩public boolean ownDeletesAreVisible(int type) {
smallsql/database/SSDatabaseMetaData.java۞906۩return supportsResultSetType(type);
smallsql/database/SSDatabaseMetaData.java۞907۩}
smallsql/database/SSDatabaseMetaData.java۞910۩public boolean ownInsertsAreVisible(int type) {
smallsql/database/SSDatabaseMetaData.java۞911۩return supportsResultSetType(type);
smallsql/database/SSDatabaseMetaData.java۞912۩}
smallsql/database/SSDatabaseMetaData.java۞915۩public boolean othersUpdatesAreVisible(int type) {
smallsql/database/SSDatabaseMetaData.java۞916۩return supportsResultSetType(type);
smallsql/database/SSDatabaseMetaData.java۞917۩}
smallsql/database/SSDatabaseMetaData.java۞920۩public boolean othersDeletesAreVisible(int type) {
smallsql/database/SSDatabaseMetaData.java۞921۩return supportsResultSetType(type);
smallsql/database/SSDatabaseMetaData.java۞922۩}
smallsql/database/SSDatabaseMetaData.java۞925۩public boolean othersInsertsAreVisible(int type) {
smallsql/database/SSDatabaseMetaData.java۞926۩return supportsResultSetType(type);
smallsql/database/SSDatabaseMetaData.java۞927۩}
smallsql/database/SSDatabaseMetaData.java۞930۩public boolean updatesAreDetected(int type) {
smallsql/database/SSDatabaseMetaData.java۞931۩return false;
smallsql/database/SSDatabaseMetaData.java۞932۩}
smallsql/database/SSDatabaseMetaData.java۞935۩public boolean deletesAreDetected(int type) {
smallsql/database/SSDatabaseMetaData.java۞936۩return supportsResultSetType(type);
smallsql/database/SSDatabaseMetaData.java۞937۩}
smallsql/database/SSDatabaseMetaData.java۞940۩public boolean insertsAreDetected(int type) {
smallsql/database/SSDatabaseMetaData.java۞941۩return supportsResultSetType(type);
smallsql/database/SSDatabaseMetaData.java۞942۩}
smallsql/database/SSDatabaseMetaData.java۞945۩public boolean supportsBatchUpdates() {
smallsql/database/SSDatabaseMetaData.java۞946۩return true;
smallsql/database/SSDatabaseMetaData.java۞947۩}
smallsql/database/SSDatabaseMetaData.java۞950۩public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞951۩String[] colNames = {"TYPE_CAT", "TYPE_SCHEM", "TYPE_NAME", "CLASS_NAME", "DATA_TYPE", "REMARKS"};
smallsql/database/SSDatabaseMetaData.java۞952۩Object[][] data   = new Object[0][];
smallsql/database/SSDatabaseMetaData.java۞953۩return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
smallsql/database/SSDatabaseMetaData.java۞954۩}
smallsql/database/SSDatabaseMetaData.java۞957۩public Connection getConnection() {
smallsql/database/SSDatabaseMetaData.java۞958۩return con;
smallsql/database/SSDatabaseMetaData.java۞959۩}
smallsql/database/SSDatabaseMetaData.java۞962۩public boolean supportsSavepoints() {
smallsql/database/SSDatabaseMetaData.java۞963۩return false;
smallsql/database/SSDatabaseMetaData.java۞964۩}
smallsql/database/SSDatabaseMetaData.java۞967۩public boolean supportsNamedParameters() {
smallsql/database/SSDatabaseMetaData.java۞968۩return true;
smallsql/database/SSDatabaseMetaData.java۞969۩}
smallsql/database/SSDatabaseMetaData.java۞972۩public boolean supportsMultipleOpenResults() {
smallsql/database/SSDatabaseMetaData.java۞973۩return true;
smallsql/database/SSDatabaseMetaData.java۞974۩}
smallsql/database/SSDatabaseMetaData.java۞977۩public boolean supportsGetGeneratedKeys() {
smallsql/database/SSDatabaseMetaData.java۞978۩return true;
smallsql/database/SSDatabaseMetaData.java۞979۩}
smallsql/database/SSDatabaseMetaData.java۞982۩public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞984۩throw new java.lang.UnsupportedOperationException("Method getSuperTypes() not yet implemented.");
smallsql/database/SSDatabaseMetaData.java۞985۩}
smallsql/database/SSDatabaseMetaData.java۞986۩public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞988۩throw new java.lang.UnsupportedOperationException("Method getSuperTables() not yet implemented.");
smallsql/database/SSDatabaseMetaData.java۞989۩}
smallsql/database/SSDatabaseMetaData.java۞990۩public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException {
smallsql/database/SSDatabaseMetaData.java۞992۩throw new java.lang.UnsupportedOperationException("Method getAttributes() not yet implemented.");
smallsql/database/SSDatabaseMetaData.java۞993۩}
smallsql/database/SSDatabaseMetaData.java۞996۩public boolean supportsResultSetHoldability(int holdability) {
smallsql/database/SSDatabaseMetaData.java۞997۩return true;
smallsql/database/SSDatabaseMetaData.java۞998۩}
smallsql/database/SSDatabaseMetaData.java۞1001۩public int getResultSetHoldability() {
smallsql/database/SSDatabaseMetaData.java۞1002۩return ResultSet.HOLD_CURSORS_OVER_COMMIT;
smallsql/database/SSDatabaseMetaData.java۞1003۩}
smallsql/database/SSDatabaseMetaData.java۞1006۩public int getDatabaseMajorVersion() {
smallsql/database/SSDatabaseMetaData.java۞1007۩return getDriverMajorVersion();
smallsql/database/SSDatabaseMetaData.java۞1008۩}
smallsql/database/SSDatabaseMetaData.java۞1011۩public int getDatabaseMinorVersion() {
smallsql/database/SSDatabaseMetaData.java۞1012۩return getDriverMinorVersion();
smallsql/database/SSDatabaseMetaData.java۞1013۩}
smallsql/database/SSDatabaseMetaData.java۞1016۩public int getJDBCMajorVersion() {
smallsql/database/SSDatabaseMetaData.java۞1017۩return 3;
smallsql/database/SSDatabaseMetaData.java۞1018۩}
smallsql/database/SSDatabaseMetaData.java۞1021۩public int getJDBCMinorVersion() {
smallsql/database/SSDatabaseMetaData.java۞1022۩return 0;
smallsql/database/SSDatabaseMetaData.java۞1023۩}
smallsql/database/SSDatabaseMetaData.java۞1026۩public int getSQLStateType() {
smallsql/database/SSDatabaseMetaData.java۞1027۩return sqlStateSQL99;
smallsql/database/SSDatabaseMetaData.java۞1028۩}
smallsql/database/SSDatabaseMetaData.java۞1031۩public boolean locatorsUpdateCopy() {
smallsql/database/SSDatabaseMetaData.java۞1032۩return false;
smallsql/database/SSDatabaseMetaData.java۞1033۩}
smallsql/database/SSDatabaseMetaData.java۞1036۩public boolean supportsStatementPooling() {
smallsql/database/SSDatabaseMetaData.java۞1037۩return false;
smallsql/database/SSDatabaseMetaData.java۞1038۩}
smallsql/database/SSDatabaseMetaData.java۞1039۩}
smallsql/database/SSDriver.java۞33۩package smallsql.database;
smallsql/database/SSDriver.java۞35۩import java.sql.*;
smallsql/database/SSDriver.java۞36۩import java.util.Properties;
smallsql/database/SSDriver.java۞37۩import java.util.StringTokenizer;
smallsql/database/SSDriver.java۞39۩import smallsql.database.language.Language;
smallsql/database/SSDriver.java۞41۩public class SSDriver implements Driver {
smallsql/database/SSDriver.java۞43۩static final String URL_PREFIX = "jdbc:smallsql";
smallsql/database/SSDriver.java۞45۩static SSDriver drv;
smallsql/database/SSDriver.java۞46۩static {
smallsql/database/SSDriver.java۞47۩try{
smallsql/database/SSDriver.java۞48۩drv = new SSDriver();
smallsql/database/SSDriver.java۞49۩java.sql.DriverManager.registerDriver(drv);
smallsql/database/SSDriver.java۞52۩}catch(Throwable e){
smallsql/database/SSDriver.java۞53۩e.printStackTrace();
smallsql/database/SSDriver.java۞54۩}
smallsql/database/SSDriver.java۞55۩}
smallsql/database/SSDriver.java۞58۩public Connection connect(String url, Properties info) throws SQLException{
smallsql/database/SSDriver.java۞59۩if(!acceptsURL(url)){
smallsql/database/SSDriver.java۞60۩return null;
smallsql/database/SSDriver.java۞61۩}
smallsql/database/SSDriver.java۞62۩return new SSConnection(parse(url, info));
smallsql/database/SSDriver.java۞63۩}
smallsql/database/SSDriver.java۞75۩private Properties parse(String url, Properties info) throws SQLException {
smallsql/database/SSDriver.java۞76۩Properties props = (Properties)info.clone();
smallsql/database/SSDriver.java۞77۩if(!acceptsURL(url)){
smallsql/database/SSDriver.java۞78۩return props;
smallsql/database/SSDriver.java۞79۩}
smallsql/database/SSDriver.java۞80۩int idx1 = url.indexOf(':', 5);
smallsql/database/SSDriver.java۞81۩int idx2 = url.indexOf('?');
smallsql/database/SSDriver.java۞82۩if(idx1 > 0){
smallsql/database/SSDriver.java۞83۩String dbPath = (idx2 > 0) ? url.substring(idx1 + 1, idx2) : url.substring(idx1 + 1);
smallsql/database/SSDriver.java۞84۩props.setProperty("dbpath", dbPath);
smallsql/database/SSDriver.java۞85۩}
smallsql/database/SSDriver.java۞86۩if(idx2 > 0){
smallsql/database/SSDriver.java۞87۩String propsString = url.substring(idx2 + 1).replace('&', ';');
smallsql/database/SSDriver.java۞88۩StringTokenizer tok = new StringTokenizer(propsString, ";");
smallsql/database/SSDriver.java۞89۩while(tok.hasMoreTokens()){
smallsql/database/SSDriver.java۞90۩String keyValue = tok.nextToken().trim();
smallsql/database/SSDriver.java۞91۩if(keyValue.length() > 0){
smallsql/database/SSDriver.java۞92۩idx1 = keyValue.indexOf('=');
smallsql/database/SSDriver.java۞93۩if(idx1 > 0){
smallsql/database/SSDriver.java۞94۩String key = keyValue.substring(0, idx1).toLowerCase().trim();
smallsql/database/SSDriver.java۞95۩String value = keyValue.substring(idx1 + 1).trim();
smallsql/database/SSDriver.java۞96۩props.put(key, value);
smallsql/database/SSDriver.java۞97۩}else{
smallsql/database/SSDriver.java۞98۩throw SmallSQLException.create(Language.CUSTOM_MESSAGE, "Missing equal in property:" + keyValue);
smallsql/database/SSDriver.java۞99۩}
smallsql/database/SSDriver.java۞100۩}
smallsql/database/SSDriver.java۞101۩}
smallsql/database/SSDriver.java۞102۩}
smallsql/database/SSDriver.java۞103۩return props;
smallsql/database/SSDriver.java۞104۩}
smallsql/database/SSDriver.java۞107۩public boolean acceptsURL(String url){
smallsql/database/SSDriver.java۞108۩return url.startsWith(URL_PREFIX);
smallsql/database/SSDriver.java۞109۩}
smallsql/database/SSDriver.java۞112۩public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
smallsql/database/SSDriver.java۞113۩throws SQLException {
smallsql/database/SSDriver.java۞114۩Properties props = parse(url, info);
smallsql/database/SSDriver.java۞115۩DriverPropertyInfo[] driverInfos = new DriverPropertyInfo[1];
smallsql/database/SSDriver.java۞116۩driverInfos[0] = new DriverPropertyInfo("dbpath", props.getProperty("dbpath"));
smallsql/database/SSDriver.java۞117۩return driverInfos;
smallsql/database/SSDriver.java۞118۩}
smallsql/database/SSDriver.java۞121۩public int getMajorVersion() {
smallsql/database/SSDriver.java۞122۩return 0;
smallsql/database/SSDriver.java۞123۩}
smallsql/database/SSDriver.java۞126۩public int getMinorVersion() {
smallsql/database/SSDriver.java۞127۩return 21;
smallsql/database/SSDriver.java۞128۩}
smallsql/database/SSDriver.java۞131۩public boolean jdbcCompliant() {
smallsql/database/SSDriver.java۞132۩return true;
smallsql/database/SSDriver.java۞133۩}
smallsql/database/SSDriver.java۞134۩}
smallsql/database/SSPreparedStatement.java۞33۩package smallsql.database;
smallsql/database/SSPreparedStatement.java۞35۩import java.sql.*;
smallsql/database/SSPreparedStatement.java۞36۩import java.math.*;
smallsql/database/SSPreparedStatement.java۞37۩import java.io.*;
smallsql/database/SSPreparedStatement.java۞38۩import java.util.ArrayList;
smallsql/database/SSPreparedStatement.java۞39۩import java.util.Calendar;
smallsql/database/SSPreparedStatement.java۞40۩import java.net.URL;
smallsql/database/SSPreparedStatement.java۞43۩class SSPreparedStatement extends SSStatement implements PreparedStatement {
smallsql/database/SSPreparedStatement.java۞45۩private ArrayList batches;
smallsql/database/SSPreparedStatement.java۞46۩private final int top;
smallsql/database/SSPreparedStatement.java۞48۩SSPreparedStatement( SSConnection con, String sql ) throws SQLException {
smallsql/database/SSPreparedStatement.java۞49۩this( con, sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY );
smallsql/database/SSPreparedStatement.java۞50۩}
smallsql/database/SSPreparedStatement.java۞52۩SSPreparedStatement( SSConnection con, String sql, int rsType, int rsConcurrency ) throws SQLException {
smallsql/database/SSPreparedStatement.java۞53۩super( con, rsType, rsConcurrency );
smallsql/database/SSPreparedStatement.java۞54۩con.log.println(sql);
smallsql/database/SSPreparedStatement.java۞55۩SQLParser parser = new SQLParser();
smallsql/database/SSPreparedStatement.java۞56۩cmd = parser.parse( con, sql );
smallsql/database/SSPreparedStatement.java۞57۩top = cmd.getMaxRows();
smallsql/database/SSPreparedStatement.java۞58۩}
smallsql/database/SSPreparedStatement.java۞60۩public ResultSet executeQuery() throws SQLException {
smallsql/database/SSPreparedStatement.java۞61۩executeImp();
smallsql/database/SSPreparedStatement.java۞62۩return cmd.getQueryResult();
smallsql/database/SSPreparedStatement.java۞63۩}
smallsql/database/SSPreparedStatement.java۞65۩public int executeUpdate() throws SQLException {
smallsql/database/SSPreparedStatement.java۞66۩executeImp();
smallsql/database/SSPreparedStatement.java۞67۩return cmd.getUpdateCount();
smallsql/database/SSPreparedStatement.java۞68۩}
smallsql/database/SSPreparedStatement.java۞70۩final private void executeImp() throws SQLException {
smallsql/database/SSPreparedStatement.java۞71۩checkStatement();
smallsql/database/SSPreparedStatement.java۞72۩cmd.verifyParams();
smallsql/database/SSPreparedStatement.java۞73۩if(getMaxRows() != 0 && (top == -1 || top > getMaxRows()))
smallsql/database/SSPreparedStatement.java۞74۩cmd.setMaxRows(getMaxRows());
smallsql/database/SSPreparedStatement.java۞75۩cmd.execute( con, this);
smallsql/database/SSPreparedStatement.java۞76۩}
smallsql/database/SSPreparedStatement.java۞78۩public void setNull(int parameterIndex, int sqlType) throws SQLException {
smallsql/database/SSPreparedStatement.java۞79۩checkStatement();
smallsql/database/SSPreparedStatement.java۞80۩cmd.setParamValue( parameterIndex, null, SQLTokenizer.NULL);
smallsql/database/SSPreparedStatement.java۞81۩}
smallsql/database/SSPreparedStatement.java۞84۩public void setBoolean(int parameterIndex, boolean x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞85۩checkStatement();
smallsql/database/SSPreparedStatement.java۞86۩cmd.setParamValue( parameterIndex, x ? Boolean.TRUE : Boolean.FALSE, SQLTokenizer.BOOLEAN);
smallsql/database/SSPreparedStatement.java۞87۩}
smallsql/database/SSPreparedStatement.java۞90۩public void setByte(int parameterIndex, byte x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞91۩checkStatement();
smallsql/database/SSPreparedStatement.java۞92۩cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.TINYINT);
smallsql/database/SSPreparedStatement.java۞93۩}
smallsql/database/SSPreparedStatement.java۞96۩public void setShort(int parameterIndex, short x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞97۩checkStatement();
smallsql/database/SSPreparedStatement.java۞98۩cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.SMALLINT);
smallsql/database/SSPreparedStatement.java۞99۩}
smallsql/database/SSPreparedStatement.java۞102۩public void setInt(int parameterIndex, int x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞103۩checkStatement();
smallsql/database/SSPreparedStatement.java۞104۩cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.INT);
smallsql/database/SSPreparedStatement.java۞105۩}
smallsql/database/SSPreparedStatement.java۞108۩public void setLong(int parameterIndex, long x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞109۩checkStatement();
smallsql/database/SSPreparedStatement.java۞110۩cmd.setParamValue( parameterIndex, new Long(x), SQLTokenizer.BIGINT);
smallsql/database/SSPreparedStatement.java۞111۩}
smallsql/database/SSPreparedStatement.java۞114۩public void setFloat(int parameterIndex, float x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞115۩checkStatement();
smallsql/database/SSPreparedStatement.java۞116۩cmd.setParamValue( parameterIndex, new Float(x), SQLTokenizer.REAL);
smallsql/database/SSPreparedStatement.java۞117۩}
smallsql/database/SSPreparedStatement.java۞120۩public void setDouble(int parameterIndex, double x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞121۩checkStatement();
smallsql/database/SSPreparedStatement.java۞122۩cmd.setParamValue( parameterIndex, new Double(x), SQLTokenizer.DOUBLE);
smallsql/database/SSPreparedStatement.java۞123۩}
smallsql/database/SSPreparedStatement.java۞126۩public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞127۩checkStatement();
smallsql/database/SSPreparedStatement.java۞128۩cmd.setParamValue( parameterIndex, x, SQLTokenizer.DECIMAL);
smallsql/database/SSPreparedStatement.java۞129۩}
smallsql/database/SSPreparedStatement.java۞132۩public void setString(int parameterIndex, String x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞133۩checkStatement();
smallsql/database/SSPreparedStatement.java۞134۩cmd.setParamValue( parameterIndex, x, SQLTokenizer.VARCHAR);
smallsql/database/SSPreparedStatement.java۞135۩}
smallsql/database/SSPreparedStatement.java۞138۩public void setBytes(int parameterIndex, byte[] x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞139۩checkStatement();
smallsql/database/SSPreparedStatement.java۞140۩cmd.setParamValue( parameterIndex, x, SQLTokenizer.BINARY);
smallsql/database/SSPreparedStatement.java۞141۩}
smallsql/database/SSPreparedStatement.java۞144۩public void setDate(int parameterIndex, Date x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞145۩checkStatement();
smallsql/database/SSPreparedStatement.java۞146۩cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.DATE);
smallsql/database/SSPreparedStatement.java۞147۩}
smallsql/database/SSPreparedStatement.java۞150۩public void setTime(int parameterIndex, Time x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞151۩checkStatement();
smallsql/database/SSPreparedStatement.java۞152۩cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIME);
smallsql/database/SSPreparedStatement.java۞153۩}
smallsql/database/SSPreparedStatement.java۞156۩public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞157۩checkStatement();
smallsql/database/SSPreparedStatement.java۞158۩cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIMESTAMP);
smallsql/database/SSPreparedStatement.java۞159۩}
smallsql/database/SSPreparedStatement.java۞162۩public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
smallsql/database/SSPreparedStatement.java۞163۩checkStatement();
smallsql/database/SSPreparedStatement.java۞164۩cmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARCHAR, length);
smallsql/database/SSPreparedStatement.java۞165۩}
smallsql/database/SSPreparedStatement.java۞168۩public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
smallsql/database/SSPreparedStatement.java۞169۩checkStatement();
smallsql/database/SSPreparedStatement.java۞171۩throw new java.lang.UnsupportedOperationException("Method setUnicodeStream() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞172۩}
smallsql/database/SSPreparedStatement.java۞175۩public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
smallsql/database/SSPreparedStatement.java۞176۩checkStatement();
smallsql/database/SSPreparedStatement.java۞177۩cmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARBINARY, length);
smallsql/database/SSPreparedStatement.java۞178۩}
smallsql/database/SSPreparedStatement.java۞181۩public void clearParameters() throws SQLException {
smallsql/database/SSPreparedStatement.java۞182۩checkStatement();
smallsql/database/SSPreparedStatement.java۞183۩cmd.clearParams();
smallsql/database/SSPreparedStatement.java۞184۩}
smallsql/database/SSPreparedStatement.java۞187۩public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
smallsql/database/SSPreparedStatement.java۞188۩checkStatement();
smallsql/database/SSPreparedStatement.java۞190۩cmd.setParamValue( parameterIndex, x, -1);
smallsql/database/SSPreparedStatement.java۞191۩}
smallsql/database/SSPreparedStatement.java۞194۩public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
smallsql/database/SSPreparedStatement.java۞195۩checkStatement();
smallsql/database/SSPreparedStatement.java۞196۩cmd.setParamValue( parameterIndex, x, -1);
smallsql/database/SSPreparedStatement.java۞197۩}
smallsql/database/SSPreparedStatement.java۞200۩public void setObject(int parameterIndex, Object x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞201۩checkStatement();
smallsql/database/SSPreparedStatement.java۞202۩cmd.setParamValue( parameterIndex, x, -1);
smallsql/database/SSPreparedStatement.java۞203۩}
smallsql/database/SSPreparedStatement.java۞206۩public boolean execute() throws SQLException {
smallsql/database/SSPreparedStatement.java۞207۩executeImp();
smallsql/database/SSPreparedStatement.java۞208۩return cmd.getResultSet() != null;
smallsql/database/SSPreparedStatement.java۞209۩}
smallsql/database/SSPreparedStatement.java۞212۩public void addBatch() throws SQLException {
smallsql/database/SSPreparedStatement.java۞213۩checkStatement();
smallsql/database/SSPreparedStatement.java۞214۩try{
smallsql/database/SSPreparedStatement.java۞215۩final Expressions params = cmd.params;
smallsql/database/SSPreparedStatement.java۞216۩final int size = params.size();
smallsql/database/SSPreparedStatement.java۞217۩ExpressionValue[] values = new ExpressionValue[size];
smallsql/database/SSPreparedStatement.java۞218۩for(int i=0; i<size; i++){
smallsql/database/SSPreparedStatement.java۞219۩values[i] = (ExpressionValue)params.get(i).clone();
smallsql/database/SSPreparedStatement.java۞220۩}
smallsql/database/SSPreparedStatement.java۞221۩if(batches == null) batches = new ArrayList();
smallsql/database/SSPreparedStatement.java۞222۩batches.add(values);
smallsql/database/SSPreparedStatement.java۞223۩}catch(Exception e){
smallsql/database/SSPreparedStatement.java۞224۩throw SmallSQLException.createFromException(e);
smallsql/database/SSPreparedStatement.java۞225۩}
smallsql/database/SSPreparedStatement.java۞226۩}
smallsql/database/SSPreparedStatement.java۞229۩public void clearBatch() throws SQLException {
smallsql/database/SSPreparedStatement.java۞230۩checkStatement();
smallsql/database/SSPreparedStatement.java۞231۩if(batches != null) batches.clear();
smallsql/database/SSPreparedStatement.java۞232۩}
smallsql/database/SSPreparedStatement.java۞235۩public int[] executeBatch() throws BatchUpdateException {
smallsql/database/SSPreparedStatement.java۞236۩if(batches == null || batches.size() == 0) return new int[0];
smallsql/database/SSPreparedStatement.java۞237۩int[] result = new int[batches.size()];
smallsql/database/SSPreparedStatement.java۞238۩BatchUpdateException failed = null;
smallsql/database/SSPreparedStatement.java۞239۩for(int b=0; b<batches.size(); b++){
smallsql/database/SSPreparedStatement.java۞240۩try{
smallsql/database/SSPreparedStatement.java۞241۩checkStatement();
smallsql/database/SSPreparedStatement.java۞242۩ExpressionValue[] values = (ExpressionValue[])batches.get(b);
smallsql/database/SSPreparedStatement.java۞243۩for(int i=0; i<values.length; i++){
smallsql/database/SSPreparedStatement.java۞244۩((ExpressionValue)cmd.params.get(i)).set( values[i] );
smallsql/database/SSPreparedStatement.java۞245۩}
smallsql/database/SSPreparedStatement.java۞246۩result[b] = executeUpdate();
smallsql/database/SSPreparedStatement.java۞247۩} catch (SQLException ex) {
smallsql/database/SSPreparedStatement.java۞248۩result[b] = EXECUTE_FAILED;
smallsql/database/SSPreparedStatement.java۞249۩if(failed == null){
smallsql/database/SSPreparedStatement.java۞250۩failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);
smallsql/database/SSPreparedStatement.java۞251۩failed.initCause(ex);
smallsql/database/SSPreparedStatement.java۞252۩}
smallsql/database/SSPreparedStatement.java۞253۩failed.setNextException(ex);
smallsql/database/SSPreparedStatement.java۞254۩}
smallsql/database/SSPreparedStatement.java۞255۩}
smallsql/database/SSPreparedStatement.java۞256۩batches.clear();
smallsql/database/SSPreparedStatement.java۞257۩if(failed != null)
smallsql/database/SSPreparedStatement.java۞258۩throw failed;
smallsql/database/SSPreparedStatement.java۞259۩return result;
smallsql/database/SSPreparedStatement.java۞260۩}
smallsql/database/SSPreparedStatement.java۞263۩public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
smallsql/database/SSPreparedStatement.java۞264۩checkStatement();
smallsql/database/SSPreparedStatement.java۞266۩throw new java.lang.UnsupportedOperationException("Method setCharacterStream() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞267۩}
smallsql/database/SSPreparedStatement.java۞270۩public void setRef(int i, Ref x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞271۩checkStatement();
smallsql/database/SSPreparedStatement.java۞273۩throw new java.lang.UnsupportedOperationException("Method setRef() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞274۩}
smallsql/database/SSPreparedStatement.java۞275۩public void setBlob(int i, Blob x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞276۩checkStatement();
smallsql/database/SSPreparedStatement.java۞278۩throw new java.lang.UnsupportedOperationException("Method setBlob() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞279۩}
smallsql/database/SSPreparedStatement.java۞280۩public void setClob(int i, Clob x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞281۩checkStatement();
smallsql/database/SSPreparedStatement.java۞283۩throw new java.lang.UnsupportedOperationException("Method setClob() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞284۩}
smallsql/database/SSPreparedStatement.java۞285۩public void setArray(int i, Array x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞286۩checkStatement();
smallsql/database/SSPreparedStatement.java۞288۩throw new java.lang.UnsupportedOperationException("Method setArray() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞289۩}
smallsql/database/SSPreparedStatement.java۞292۩public ResultSetMetaData getMetaData() throws SQLException {
smallsql/database/SSPreparedStatement.java۞293۩checkStatement();
smallsql/database/SSPreparedStatement.java۞294۩if(cmd instanceof CommandSelect){
smallsql/database/SSPreparedStatement.java۞295۩try{
smallsql/database/SSPreparedStatement.java۞296۩((CommandSelect)cmd).compile(con);
smallsql/database/SSPreparedStatement.java۞297۩SSResultSetMetaData metaData = new SSResultSetMetaData();
smallsql/database/SSPreparedStatement.java۞298۩metaData.columns = cmd.columnExpressions;
smallsql/database/SSPreparedStatement.java۞299۩return metaData;
smallsql/database/SSPreparedStatement.java۞300۩}catch(Exception e){
smallsql/database/SSPreparedStatement.java۞301۩throw SmallSQLException.createFromException(e);
smallsql/database/SSPreparedStatement.java۞302۩}
smallsql/database/SSPreparedStatement.java۞303۩}
smallsql/database/SSPreparedStatement.java۞304۩return null;
smallsql/database/SSPreparedStatement.java۞305۩}
smallsql/database/SSPreparedStatement.java۞308۩public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
smallsql/database/SSPreparedStatement.java۞309۩checkStatement();
smallsql/database/SSPreparedStatement.java۞311۩throw new java.lang.UnsupportedOperationException("Method setDate() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞312۩}
smallsql/database/SSPreparedStatement.java۞313۩public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
smallsql/database/SSPreparedStatement.java۞314۩checkStatement();
smallsql/database/SSPreparedStatement.java۞316۩throw new java.lang.UnsupportedOperationException("Method setTime() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞317۩}
smallsql/database/SSPreparedStatement.java۞318۩public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
smallsql/database/SSPreparedStatement.java۞319۩checkStatement();
smallsql/database/SSPreparedStatement.java۞321۩throw new java.lang.UnsupportedOperationException("Method setTimestamp() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞322۩}
smallsql/database/SSPreparedStatement.java۞323۩public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
smallsql/database/SSPreparedStatement.java۞324۩checkStatement();
smallsql/database/SSPreparedStatement.java۞326۩throw new java.lang.UnsupportedOperationException("Method setNull() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞327۩}
smallsql/database/SSPreparedStatement.java۞328۩public void setURL(int parameterIndex, URL x) throws SQLException {
smallsql/database/SSPreparedStatement.java۞329۩checkStatement();
smallsql/database/SSPreparedStatement.java۞331۩throw new java.lang.UnsupportedOperationException("Method setURL() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞332۩}
smallsql/database/SSPreparedStatement.java۞333۩public ParameterMetaData getParameterMetaData() throws SQLException {
smallsql/database/SSPreparedStatement.java۞334۩checkStatement();
smallsql/database/SSPreparedStatement.java۞336۩throw new java.lang.UnsupportedOperationException("Method getParameterMetaData() not yet implemented.");
smallsql/database/SSPreparedStatement.java۞337۩}
smallsql/database/SSPreparedStatement.java۞338۩}
smallsql/database/SSResultSet.java۞33۩package smallsql.database;
smallsql/database/SSResultSet.java۞35۩import java.sql.*;
smallsql/database/SSResultSet.java۞36۩import java.math.*;
smallsql/database/SSResultSet.java۞37۩import java.io.ByteArrayInputStream;
smallsql/database/SSResultSet.java۞38۩import java.io.InputStream;
smallsql/database/SSResultSet.java۞39۩import java.io.Reader;
smallsql/database/SSResultSet.java۞40۩import java.util.Map;
smallsql/database/SSResultSet.java۞41۩import java.util.Calendar;
smallsql/database/SSResultSet.java۞42۩import java.net.URL;
smallsql/database/SSResultSet.java۞43۩import smallsql.database.language.Language;
smallsql/database/SSResultSet.java۞45۩public class SSResultSet implements ResultSet {
smallsql/database/SSResultSet.java۞47۩SSResultSetMetaData metaData = new SSResultSetMetaData();
smallsql/database/SSResultSet.java۞48۩private CommandSelect cmd;
smallsql/database/SSResultSet.java۞49۩private boolean wasNull;
smallsql/database/SSResultSet.java۞50۩SSStatement st;
smallsql/database/SSResultSet.java۞51۩private boolean isUpdatable;
smallsql/database/SSResultSet.java۞52۩private boolean isInsertRow;
smallsql/database/SSResultSet.java۞53۩private ExpressionValue[] values;
smallsql/database/SSResultSet.java۞54۩private int fetchDirection;
smallsql/database/SSResultSet.java۞55۩private int fetchSize;
smallsql/database/SSResultSet.java۞57۩SSResultSet( SSStatement st, CommandSelect cmd ){
smallsql/database/SSResultSet.java۞58۩this.st = st;
smallsql/database/SSResultSet.java۞59۩metaData.columns = cmd.columnExpressions;
smallsql/database/SSResultSet.java۞60۩this.cmd = cmd;
smallsql/database/SSResultSet.java۞61۩isUpdatable = st != null && st.rsConcurrency == CONCUR_UPDATABLE && !cmd.isGroupResult();
smallsql/database/SSResultSet.java۞62۩}
smallsql/database/SSResultSet.java۞70۩public void close(){
smallsql/database/SSResultSet.java۞71۩st.con.log.println("ResultSet.close");
smallsql/database/SSResultSet.java۞72۩cmd = null;
smallsql/database/SSResultSet.java۞73۩}
smallsql/database/SSResultSet.java۞76۩public boolean wasNull(){
smallsql/database/SSResultSet.java۞77۩return wasNull;
smallsql/database/SSResultSet.java۞78۩}
smallsql/database/SSResultSet.java۞81۩public String getString(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞82۩try{
smallsql/database/SSResultSet.java۞83۩Object obj = getObject(columnIndex);
smallsql/database/SSResultSet.java۞85۩if(obj instanceof String || obj == null){
smallsql/database/SSResultSet.java۞86۩return (String)obj;
smallsql/database/SSResultSet.java۞87۩}
smallsql/database/SSResultSet.java۞88۩if(obj instanceof byte[]){
smallsql/database/SSResultSet.java۞90۩return "0x" + Utils.bytes2hex( (byte[])obj );
smallsql/database/SSResultSet.java۞91۩}
smallsql/database/SSResultSet.java۞93۩return getValue(columnIndex).getString();
smallsql/database/SSResultSet.java۞94۩}catch(Exception e){
smallsql/database/SSResultSet.java۞95۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞96۩}
smallsql/database/SSResultSet.java۞97۩}
smallsql/database/SSResultSet.java۞98۩public boolean getBoolean(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞99۩try{
smallsql/database/SSResultSet.java۞100۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞101۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞102۩return expr.getBoolean();
smallsql/database/SSResultSet.java۞103۩}catch(Exception e){
smallsql/database/SSResultSet.java۞104۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞105۩}
smallsql/database/SSResultSet.java۞106۩}
smallsql/database/SSResultSet.java۞107۩public byte getByte(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞108۩return (byte)getInt( columnIndex );
smallsql/database/SSResultSet.java۞109۩}
smallsql/database/SSResultSet.java۞110۩public short getShort(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞111۩return (short)getInt( columnIndex );
smallsql/database/SSResultSet.java۞112۩}
smallsql/database/SSResultSet.java۞113۩public int getInt(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞114۩try{
smallsql/database/SSResultSet.java۞115۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞116۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞117۩return expr.getInt();
smallsql/database/SSResultSet.java۞118۩}catch(Exception e){
smallsql/database/SSResultSet.java۞119۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞120۩}
smallsql/database/SSResultSet.java۞121۩}
smallsql/database/SSResultSet.java۞122۩public long getLong(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞123۩try{
smallsql/database/SSResultSet.java۞124۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞125۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞126۩return expr.getLong();
smallsql/database/SSResultSet.java۞127۩}catch(Exception e){
smallsql/database/SSResultSet.java۞128۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞129۩}
smallsql/database/SSResultSet.java۞130۩}
smallsql/database/SSResultSet.java۞131۩public float getFloat(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞132۩try{
smallsql/database/SSResultSet.java۞133۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞134۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞135۩return expr.getFloat();
smallsql/database/SSResultSet.java۞136۩}catch(Exception e){
smallsql/database/SSResultSet.java۞137۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞138۩}
smallsql/database/SSResultSet.java۞139۩}
smallsql/database/SSResultSet.java۞140۩public double getDouble(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞141۩try{
smallsql/database/SSResultSet.java۞142۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞143۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞144۩return expr.getDouble();
smallsql/database/SSResultSet.java۞145۩}catch(Exception e){
smallsql/database/SSResultSet.java۞146۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞147۩}
smallsql/database/SSResultSet.java۞148۩}
smallsql/database/SSResultSet.java۞149۩public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
smallsql/database/SSResultSet.java۞150۩try{
smallsql/database/SSResultSet.java۞151۩MutableNumeric obj = getValue(columnIndex).getNumeric();
smallsql/database/SSResultSet.java۞152۩wasNull = obj == null;
smallsql/database/SSResultSet.java۞153۩if(wasNull) return null;
smallsql/database/SSResultSet.java۞154۩return obj.toBigDecimal(scale);
smallsql/database/SSResultSet.java۞155۩}catch(Exception e){
smallsql/database/SSResultSet.java۞156۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞157۩}
smallsql/database/SSResultSet.java۞158۩}
smallsql/database/SSResultSet.java۞159۩public byte[] getBytes(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞160۩try{
smallsql/database/SSResultSet.java۞161۩byte[] obj = getValue(columnIndex).getBytes();
smallsql/database/SSResultSet.java۞162۩wasNull = obj == null;
smallsql/database/SSResultSet.java۞163۩return obj;
smallsql/database/SSResultSet.java۞164۩}catch(Exception e){
smallsql/database/SSResultSet.java۞165۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞166۩}
smallsql/database/SSResultSet.java۞167۩}
smallsql/database/SSResultSet.java۞168۩public Date getDate(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞169۩try{
smallsql/database/SSResultSet.java۞170۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞171۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞172۩if(wasNull) return null;
smallsql/database/SSResultSet.java۞173۩return DateTime.getDate( expr.getLong() );
smallsql/database/SSResultSet.java۞174۩}catch(Exception e){
smallsql/database/SSResultSet.java۞175۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞176۩}
smallsql/database/SSResultSet.java۞177۩}
smallsql/database/SSResultSet.java۞180۩public Time getTime(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞181۩try{
smallsql/database/SSResultSet.java۞182۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞183۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞184۩if(wasNull) return null;
smallsql/database/SSResultSet.java۞185۩return DateTime.getTime( expr.getLong() );
smallsql/database/SSResultSet.java۞186۩}catch(Exception e){
smallsql/database/SSResultSet.java۞187۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞188۩}
smallsql/database/SSResultSet.java۞189۩}
smallsql/database/SSResultSet.java۞190۩public Timestamp getTimestamp(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞191۩try{
smallsql/database/SSResultSet.java۞192۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞193۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞194۩if(wasNull) return null;
smallsql/database/SSResultSet.java۞195۩return DateTime.getTimestamp( expr.getLong() );
smallsql/database/SSResultSet.java۞196۩}catch(Exception e){
smallsql/database/SSResultSet.java۞197۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞198۩}
smallsql/database/SSResultSet.java۞199۩}
smallsql/database/SSResultSet.java۞202۩public InputStream getAsciiStream(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞204۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "getAsciiStream");
smallsql/database/SSResultSet.java۞205۩}
smallsql/database/SSResultSet.java۞208۩public InputStream getUnicodeStream(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞210۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "getUnicodeStream");
smallsql/database/SSResultSet.java۞211۩}
smallsql/database/SSResultSet.java۞214۩public InputStream getBinaryStream(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞215۩return new ByteArrayInputStream(getBytes(columnIndex));
smallsql/database/SSResultSet.java۞216۩}
smallsql/database/SSResultSet.java۞219۩public String getString(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞220۩return getString( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞221۩}
smallsql/database/SSResultSet.java۞222۩public boolean getBoolean(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞223۩return getBoolean( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞224۩}
smallsql/database/SSResultSet.java۞225۩public byte getByte(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞226۩return getByte( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞227۩}
smallsql/database/SSResultSet.java۞228۩public short getShort(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞229۩return getShort( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞230۩}
smallsql/database/SSResultSet.java۞231۩public int getInt(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞232۩return getInt( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞233۩}
smallsql/database/SSResultSet.java۞234۩public long getLong(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞235۩return getLong( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞236۩}
smallsql/database/SSResultSet.java۞237۩public float getFloat(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞238۩return getFloat( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞239۩}
smallsql/database/SSResultSet.java۞240۩public double getDouble(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞241۩return getDouble( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞242۩}
smallsql/database/SSResultSet.java۞243۩public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
smallsql/database/SSResultSet.java۞244۩return getBigDecimal( findColumn( columnName ), scale );
smallsql/database/SSResultSet.java۞245۩}
smallsql/database/SSResultSet.java۞246۩public byte[] getBytes(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞247۩return getBytes( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞248۩}
smallsql/database/SSResultSet.java۞249۩public Date getDate(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞250۩return getDate( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞251۩}
smallsql/database/SSResultSet.java۞252۩public Time getTime(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞253۩return getTime( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞254۩}
smallsql/database/SSResultSet.java۞255۩public Timestamp getTimestamp(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞256۩return getTimestamp( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞257۩}
smallsql/database/SSResultSet.java۞258۩public InputStream getAsciiStream(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞259۩return getAsciiStream( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞260۩}
smallsql/database/SSResultSet.java۞261۩public InputStream getUnicodeStream(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞262۩return getUnicodeStream( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞263۩}
smallsql/database/SSResultSet.java۞264۩public InputStream getBinaryStream(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞265۩return getBinaryStream( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞266۩}
smallsql/database/SSResultSet.java۞269۩public SQLWarning getWarnings(){
smallsql/database/SSResultSet.java۞270۩return null;
smallsql/database/SSResultSet.java۞271۩}
smallsql/database/SSResultSet.java۞274۩public void clearWarnings(){
smallsql/database/SSResultSet.java۞276۩}
smallsql/database/SSResultSet.java۞279۩public String getCursorName(){
smallsql/database/SSResultSet.java۞280۩return null;
smallsql/database/SSResultSet.java۞281۩}
smallsql/database/SSResultSet.java۞284۩public ResultSetMetaData getMetaData(){
smallsql/database/SSResultSet.java۞285۩return metaData;
smallsql/database/SSResultSet.java۞286۩}
smallsql/database/SSResultSet.java۞289۩public Object getObject(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞290۩try{
smallsql/database/SSResultSet.java۞291۩Object obj = getValue(columnIndex).getApiObject();
smallsql/database/SSResultSet.java۞292۩wasNull = obj == null;
smallsql/database/SSResultSet.java۞293۩return obj;
smallsql/database/SSResultSet.java۞294۩}catch(Exception e){
smallsql/database/SSResultSet.java۞295۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞296۩}
smallsql/database/SSResultSet.java۞297۩}
smallsql/database/SSResultSet.java۞298۩public Object getObject(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞299۩return getObject( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞300۩}
smallsql/database/SSResultSet.java۞303۩public int findColumn(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞304۩return getCmd().findColumn(columnName) + 1;
smallsql/database/SSResultSet.java۞305۩}
smallsql/database/SSResultSet.java۞308۩public Reader getCharacterStream(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞310۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "getCharacterStream");
smallsql/database/SSResultSet.java۞311۩}
smallsql/database/SSResultSet.java۞314۩public Reader getCharacterStream(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞315۩return getCharacterStream( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞316۩}
smallsql/database/SSResultSet.java۞319۩public BigDecimal getBigDecimal(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞320۩try{
smallsql/database/SSResultSet.java۞321۩MutableNumeric obj = getValue(columnIndex).getNumeric();
smallsql/database/SSResultSet.java۞322۩wasNull = obj == null;
smallsql/database/SSResultSet.java۞323۩if(wasNull) return null;
smallsql/database/SSResultSet.java۞324۩return obj.toBigDecimal();
smallsql/database/SSResultSet.java۞325۩}catch(Exception e){
smallsql/database/SSResultSet.java۞326۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞327۩}
smallsql/database/SSResultSet.java۞328۩}
smallsql/database/SSResultSet.java۞329۩public BigDecimal getBigDecimal(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞330۩return getBigDecimal( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞331۩}
smallsql/database/SSResultSet.java۞332۩public boolean isBeforeFirst() throws SQLException {
smallsql/database/SSResultSet.java۞333۩return getCmd().isBeforeFirst();
smallsql/database/SSResultSet.java۞334۩}
smallsql/database/SSResultSet.java۞337۩public boolean isAfterLast() throws SQLException {
smallsql/database/SSResultSet.java۞338۩try{
smallsql/database/SSResultSet.java۞339۩return getCmd().isAfterLast();
smallsql/database/SSResultSet.java۞340۩}catch(Exception e){
smallsql/database/SSResultSet.java۞341۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞342۩}
smallsql/database/SSResultSet.java۞343۩}
smallsql/database/SSResultSet.java۞346۩public boolean isFirst() throws SQLException {
smallsql/database/SSResultSet.java۞347۩return getCmd().isFirst();
smallsql/database/SSResultSet.java۞348۩}
smallsql/database/SSResultSet.java۞351۩public boolean isLast() throws SQLException {
smallsql/database/SSResultSet.java۞352۩try{
smallsql/database/SSResultSet.java۞353۩return getCmd().isLast();
smallsql/database/SSResultSet.java۞354۩}catch(Exception e){
smallsql/database/SSResultSet.java۞355۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞356۩}
smallsql/database/SSResultSet.java۞357۩}
smallsql/database/SSResultSet.java۞360۩public void beforeFirst() throws SQLException {
smallsql/database/SSResultSet.java۞361۩try{
smallsql/database/SSResultSet.java۞362۩moveToCurrentRow();
smallsql/database/SSResultSet.java۞363۩getCmd().beforeFirst();
smallsql/database/SSResultSet.java۞364۩}catch(Exception e){
smallsql/database/SSResultSet.java۞365۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞366۩}
smallsql/database/SSResultSet.java۞367۩}
smallsql/database/SSResultSet.java۞370۩public boolean first() throws SQLException {
smallsql/database/SSResultSet.java۞371۩try{
smallsql/database/SSResultSet.java۞372۩if(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/SSResultSet.java۞373۩moveToCurrentRow();
smallsql/database/SSResultSet.java۞374۩return getCmd().first();
smallsql/database/SSResultSet.java۞375۩}catch(Exception e){
smallsql/database/SSResultSet.java۞376۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞377۩}
smallsql/database/SSResultSet.java۞378۩}
smallsql/database/SSResultSet.java۞381۩public boolean previous() throws SQLException {
smallsql/database/SSResultSet.java۞382۩try{
smallsql/database/SSResultSet.java۞383۩moveToCurrentRow();
smallsql/database/SSResultSet.java۞384۩return getCmd().previous();
smallsql/database/SSResultSet.java۞385۩}catch(Exception e){
smallsql/database/SSResultSet.java۞386۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞387۩}
smallsql/database/SSResultSet.java۞388۩}
smallsql/database/SSResultSet.java۞391۩public boolean next() throws SQLException {
smallsql/database/SSResultSet.java۞392۩try{
smallsql/database/SSResultSet.java۞393۩moveToCurrentRow();
smallsql/database/SSResultSet.java۞394۩return getCmd().next();
smallsql/database/SSResultSet.java۞395۩}catch(Exception e){
smallsql/database/SSResultSet.java۞396۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞397۩}
smallsql/database/SSResultSet.java۞398۩}
smallsql/database/SSResultSet.java۞401۩public boolean last() throws SQLException {
smallsql/database/SSResultSet.java۞402۩try{
smallsql/database/SSResultSet.java۞403۩moveToCurrentRow();
smallsql/database/SSResultSet.java۞404۩return getCmd().last();
smallsql/database/SSResultSet.java۞405۩}catch(Exception e){
smallsql/database/SSResultSet.java۞406۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞407۩}
smallsql/database/SSResultSet.java۞408۩}
smallsql/database/SSResultSet.java۞411۩public void afterLast() throws SQLException {
smallsql/database/SSResultSet.java۞412۩try{
smallsql/database/SSResultSet.java۞413۩if(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);
smallsql/database/SSResultSet.java۞414۩moveToCurrentRow();
smallsql/database/SSResultSet.java۞415۩getCmd().afterLast();
smallsql/database/SSResultSet.java۞416۩}catch(Exception e){
smallsql/database/SSResultSet.java۞417۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞418۩}
smallsql/database/SSResultSet.java۞419۩}
smallsql/database/SSResultSet.java۞422۩public boolean absolute(int row) throws SQLException {
smallsql/database/SSResultSet.java۞423۩try{
smallsql/database/SSResultSet.java۞424۩moveToCurrentRow();
smallsql/database/SSResultSet.java۞425۩return getCmd().absolute(row);
smallsql/database/SSResultSet.java۞426۩}catch(Exception e){
smallsql/database/SSResultSet.java۞427۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞428۩}
smallsql/database/SSResultSet.java۞429۩}
smallsql/database/SSResultSet.java۞432۩public boolean relative(int rows) throws SQLException {
smallsql/database/SSResultSet.java۞433۩try{
smallsql/database/SSResultSet.java۞434۩moveToCurrentRow();
smallsql/database/SSResultSet.java۞435۩return getCmd().relative(rows);
smallsql/database/SSResultSet.java۞436۩}catch(Exception e){
smallsql/database/SSResultSet.java۞437۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞438۩}
smallsql/database/SSResultSet.java۞439۩}
smallsql/database/SSResultSet.java۞442۩public int getRow() throws SQLException {
smallsql/database/SSResultSet.java۞443۩try{
smallsql/database/SSResultSet.java۞444۩return getCmd().getRow();
smallsql/database/SSResultSet.java۞445۩}catch(Exception e){
smallsql/database/SSResultSet.java۞446۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞447۩}
smallsql/database/SSResultSet.java۞448۩}
smallsql/database/SSResultSet.java۞451۩public void setFetchDirection(int direction){
smallsql/database/SSResultSet.java۞452۩fetchDirection = direction;
smallsql/database/SSResultSet.java۞453۩}
smallsql/database/SSResultSet.java۞456۩public int getFetchDirection(){
smallsql/database/SSResultSet.java۞457۩return fetchDirection;
smallsql/database/SSResultSet.java۞458۩}
smallsql/database/SSResultSet.java۞461۩public void setFetchSize(int rows){
smallsql/database/SSResultSet.java۞462۩fetchSize = rows;
smallsql/database/SSResultSet.java۞463۩}
smallsql/database/SSResultSet.java۞466۩public int getFetchSize(){
smallsql/database/SSResultSet.java۞467۩return fetchSize;
smallsql/database/SSResultSet.java۞468۩}
smallsql/database/SSResultSet.java۞471۩public int getType() throws SQLException {
smallsql/database/SSResultSet.java۞472۩return getCmd().from.isScrollable() ? ResultSet.TYPE_SCROLL_SENSITIVE : ResultSet.TYPE_FORWARD_ONLY;
smallsql/database/SSResultSet.java۞473۩}
smallsql/database/SSResultSet.java۞476۩public int getConcurrency(){
smallsql/database/SSResultSet.java۞477۩return isUpdatable ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY;
smallsql/database/SSResultSet.java۞478۩}
smallsql/database/SSResultSet.java۞481۩public boolean rowUpdated(){
smallsql/database/SSResultSet.java۞482۩return false;
smallsql/database/SSResultSet.java۞483۩}
smallsql/database/SSResultSet.java۞486۩public boolean rowInserted() throws SQLException {
smallsql/database/SSResultSet.java۞487۩return getCmd().from.rowInserted();
smallsql/database/SSResultSet.java۞488۩}
smallsql/database/SSResultSet.java۞491۩public boolean rowDeleted() throws SQLException {
smallsql/database/SSResultSet.java۞492۩return getCmd().from.rowDeleted();
smallsql/database/SSResultSet.java۞493۩}
smallsql/database/SSResultSet.java۞496۩public void updateNull(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞497۩updateValue( columnIndex, null, SQLTokenizer.NULL);
smallsql/database/SSResultSet.java۞498۩}
smallsql/database/SSResultSet.java۞499۩public void updateBoolean(int columnIndex, boolean x) throws SQLException {
smallsql/database/SSResultSet.java۞500۩updateValue( columnIndex, x ? Boolean.TRUE : Boolean.FALSE, SQLTokenizer.BOOLEAN);
smallsql/database/SSResultSet.java۞501۩}
smallsql/database/SSResultSet.java۞502۩public void updateByte(int columnIndex, byte x) throws SQLException {
smallsql/database/SSResultSet.java۞503۩updateValue( columnIndex, Utils.getShort(x), SQLTokenizer.TINYINT);
smallsql/database/SSResultSet.java۞504۩}
smallsql/database/SSResultSet.java۞505۩public void updateShort(int columnIndex, short x) throws SQLException {
smallsql/database/SSResultSet.java۞506۩updateValue( columnIndex, Utils.getShort(x), SQLTokenizer.SMALLINT);
smallsql/database/SSResultSet.java۞507۩}
smallsql/database/SSResultSet.java۞508۩public void updateInt(int columnIndex, int x) throws SQLException {
smallsql/database/SSResultSet.java۞509۩updateValue( columnIndex, Utils.getInteger(x), SQLTokenizer.INT);
smallsql/database/SSResultSet.java۞510۩}
smallsql/database/SSResultSet.java۞511۩public void updateLong(int columnIndex, long x) throws SQLException {
smallsql/database/SSResultSet.java۞512۩updateValue( columnIndex, new Long(x), SQLTokenizer.BIGINT);
smallsql/database/SSResultSet.java۞513۩}
smallsql/database/SSResultSet.java۞514۩public void updateFloat(int columnIndex, float x) throws SQLException {
smallsql/database/SSResultSet.java۞515۩updateValue( columnIndex, new Float(x), SQLTokenizer.REAL);
smallsql/database/SSResultSet.java۞516۩}
smallsql/database/SSResultSet.java۞517۩public void updateDouble(int columnIndex, double x) throws SQLException {
smallsql/database/SSResultSet.java۞518۩updateValue( columnIndex, new Double(x), SQLTokenizer.DOUBLE);
smallsql/database/SSResultSet.java۞519۩}
smallsql/database/SSResultSet.java۞520۩public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException {
smallsql/database/SSResultSet.java۞521۩updateValue( columnIndex, x, SQLTokenizer.DECIMAL);
smallsql/database/SSResultSet.java۞522۩}
smallsql/database/SSResultSet.java۞523۩public void updateString(int columnIndex, String x) throws SQLException {
smallsql/database/SSResultSet.java۞524۩updateValue( columnIndex, x, SQLTokenizer.VARCHAR);
smallsql/database/SSResultSet.java۞525۩}
smallsql/database/SSResultSet.java۞526۩public void updateBytes(int columnIndex, byte[] x) throws SQLException {
smallsql/database/SSResultSet.java۞527۩updateValue( columnIndex, x, SQLTokenizer.VARBINARY);
smallsql/database/SSResultSet.java۞528۩}
smallsql/database/SSResultSet.java۞529۩public void updateDate(int columnIndex, Date x) throws SQLException {
smallsql/database/SSResultSet.java۞530۩updateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.DATE);
smallsql/database/SSResultSet.java۞531۩}
smallsql/database/SSResultSet.java۞532۩public void updateTime(int columnIndex, Time x) throws SQLException {
smallsql/database/SSResultSet.java۞533۩updateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.TIME);
smallsql/database/SSResultSet.java۞534۩}
smallsql/database/SSResultSet.java۞535۩public void updateTimestamp(int columnIndex, Timestamp x) throws SQLException {
smallsql/database/SSResultSet.java۞536۩updateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.TIMESTAMP);
smallsql/database/SSResultSet.java۞537۩}
smallsql/database/SSResultSet.java۞538۩public void updateAsciiStream(int columnIndex, InputStream x, int length) throws SQLException {
smallsql/database/SSResultSet.java۞539۩updateValue( columnIndex, x, SQLTokenizer.LONGVARCHAR, length);
smallsql/database/SSResultSet.java۞540۩}
smallsql/database/SSResultSet.java۞541۩public void updateBinaryStream(int columnIndex, InputStream x, int length) throws SQLException {
smallsql/database/SSResultSet.java۞542۩updateValue( columnIndex, x, SQLTokenizer.LONGVARBINARY, length);
smallsql/database/SSResultSet.java۞543۩}
smallsql/database/SSResultSet.java۞546۩public void updateCharacterStream(int columnIndex, Reader x, int length) throws SQLException {
smallsql/database/SSResultSet.java۞548۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Reader object");
smallsql/database/SSResultSet.java۞549۩}
smallsql/database/SSResultSet.java۞552۩public void updateObject(int columnIndex, Object x, int scale) throws SQLException {
smallsql/database/SSResultSet.java۞554۩updateValue( columnIndex, x, -1);
smallsql/database/SSResultSet.java۞555۩}
smallsql/database/SSResultSet.java۞558۩public void updateObject(int columnIndex, Object x) throws SQLException {
smallsql/database/SSResultSet.java۞559۩updateValue( columnIndex, x, -1);
smallsql/database/SSResultSet.java۞560۩}
smallsql/database/SSResultSet.java۞561۩public void updateNull(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞562۩updateNull( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞563۩}
smallsql/database/SSResultSet.java۞564۩public void updateBoolean(String columnName, boolean x) throws SQLException {
smallsql/database/SSResultSet.java۞565۩updateBoolean( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞566۩}
smallsql/database/SSResultSet.java۞567۩public void updateByte(String columnName, byte x) throws SQLException {
smallsql/database/SSResultSet.java۞568۩updateByte( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞569۩}
smallsql/database/SSResultSet.java۞570۩public void updateShort(String columnName, short x) throws SQLException {
smallsql/database/SSResultSet.java۞571۩updateShort( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞572۩}
smallsql/database/SSResultSet.java۞573۩public void updateInt(String columnName, int x) throws SQLException {
smallsql/database/SSResultSet.java۞574۩updateInt( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞575۩}
smallsql/database/SSResultSet.java۞576۩public void updateLong(String columnName, long x) throws SQLException {
smallsql/database/SSResultSet.java۞577۩updateLong( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞578۩}
smallsql/database/SSResultSet.java۞579۩public void updateFloat(String columnName, float x) throws SQLException {
smallsql/database/SSResultSet.java۞580۩updateFloat( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞581۩}
smallsql/database/SSResultSet.java۞582۩public void updateDouble(String columnName, double x) throws SQLException {
smallsql/database/SSResultSet.java۞583۩updateDouble( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞584۩}
smallsql/database/SSResultSet.java۞585۩public void updateBigDecimal(String columnName, BigDecimal x) throws SQLException {
smallsql/database/SSResultSet.java۞586۩updateBigDecimal( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞587۩}
smallsql/database/SSResultSet.java۞588۩public void updateString(String columnName, String x) throws SQLException {
smallsql/database/SSResultSet.java۞589۩updateString( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞590۩}
smallsql/database/SSResultSet.java۞591۩public void updateBytes(String columnName, byte[] x) throws SQLException {
smallsql/database/SSResultSet.java۞592۩updateBytes( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞593۩}
smallsql/database/SSResultSet.java۞594۩public void updateDate(String columnName, Date x) throws SQLException {
smallsql/database/SSResultSet.java۞595۩updateDate( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞596۩}
smallsql/database/SSResultSet.java۞597۩public void updateTime(String columnName, Time x) throws SQLException {
smallsql/database/SSResultSet.java۞598۩updateTime( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞599۩}
smallsql/database/SSResultSet.java۞600۩public void updateTimestamp(String columnName, Timestamp x) throws SQLException {
smallsql/database/SSResultSet.java۞601۩updateTimestamp( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞602۩}
smallsql/database/SSResultSet.java۞603۩public void updateAsciiStream(String columnName, InputStream x, int length) throws SQLException {
smallsql/database/SSResultSet.java۞604۩updateAsciiStream( findColumn( columnName ), x, length );
smallsql/database/SSResultSet.java۞605۩}
smallsql/database/SSResultSet.java۞606۩public void updateBinaryStream(String columnName, InputStream x, int length) throws SQLException {
smallsql/database/SSResultSet.java۞607۩updateBinaryStream( findColumn( columnName ), x, length );
smallsql/database/SSResultSet.java۞608۩}
smallsql/database/SSResultSet.java۞609۩public void updateCharacterStream(String columnName, Reader x, int length) throws SQLException {
smallsql/database/SSResultSet.java۞610۩updateCharacterStream( findColumn( columnName ), x, length );
smallsql/database/SSResultSet.java۞611۩}
smallsql/database/SSResultSet.java۞612۩public void updateObject(String columnName, Object x, int scale) throws SQLException {
smallsql/database/SSResultSet.java۞613۩updateObject( findColumn( columnName ), x, scale );
smallsql/database/SSResultSet.java۞614۩}
smallsql/database/SSResultSet.java۞615۩public void updateObject(String columnName, Object x) throws SQLException {
smallsql/database/SSResultSet.java۞616۩updateObject( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞617۩}
smallsql/database/SSResultSet.java۞619۩public void insertRow() throws SQLException {
smallsql/database/SSResultSet.java۞620۩st.con.log.println("insertRow()");
smallsql/database/SSResultSet.java۞621۩if(!isInsertRow){
smallsql/database/SSResultSet.java۞622۩throw SmallSQLException.create(Language.RSET_NOT_INSERT_ROW);
smallsql/database/SSResultSet.java۞623۩}
smallsql/database/SSResultSet.java۞624۩getCmd().insertRow( st.con, values);
smallsql/database/SSResultSet.java۞625۩clearRowBuffer();
smallsql/database/SSResultSet.java۞626۩}
smallsql/database/SSResultSet.java۞633۩private void testNotInsertRow() throws SQLException{
smallsql/database/SSResultSet.java۞634۩if(isInsertRow){
smallsql/database/SSResultSet.java۞635۩throw SmallSQLException.create(Language.RSET_ON_INSERT_ROW);
smallsql/database/SSResultSet.java۞636۩}
smallsql/database/SSResultSet.java۞637۩}
smallsql/database/SSResultSet.java۞639۩public void updateRow() throws SQLException {
smallsql/database/SSResultSet.java۞640۩try {
smallsql/database/SSResultSet.java۞641۩if(values == null){
smallsql/database/SSResultSet.java۞643۩return;
smallsql/database/SSResultSet.java۞644۩}
smallsql/database/SSResultSet.java۞645۩st.con.log.println("updateRow()");
smallsql/database/SSResultSet.java۞646۩testNotInsertRow();
smallsql/database/SSResultSet.java۞647۩final CommandSelect command = getCmd();
smallsql/database/SSResultSet.java۞648۩command.updateRow( st.con, values);
smallsql/database/SSResultSet.java۞649۩command.relative(0);
smallsql/database/SSResultSet.java۞650۩clearRowBuffer();
smallsql/database/SSResultSet.java۞651۩} catch (Exception e) {
smallsql/database/SSResultSet.java۞652۩throw SmallSQLException.createFromException(e);
smallsql/database/SSResultSet.java۞653۩}
smallsql/database/SSResultSet.java۞654۩}
smallsql/database/SSResultSet.java۞657۩public void deleteRow() throws SQLException {
smallsql/database/SSResultSet.java۞658۩st.con.log.println("deleteRow()");
smallsql/database/SSResultSet.java۞659۩testNotInsertRow();
smallsql/database/SSResultSet.java۞660۩getCmd().deleteRow(st.con);
smallsql/database/SSResultSet.java۞661۩clearRowBuffer();
smallsql/database/SSResultSet.java۞662۩}
smallsql/database/SSResultSet.java۞663۩public void refreshRow() throws SQLException {
smallsql/database/SSResultSet.java۞664۩testNotInsertRow();
smallsql/database/SSResultSet.java۞665۩relative(0);
smallsql/database/SSResultSet.java۞666۩}
smallsql/database/SSResultSet.java۞669۩public void cancelRowUpdates() throws SQLException{
smallsql/database/SSResultSet.java۞670۩testNotInsertRow();
smallsql/database/SSResultSet.java۞671۩clearRowBuffer();
smallsql/database/SSResultSet.java۞672۩}
smallsql/database/SSResultSet.java۞678۩private void clearRowBuffer(){
smallsql/database/SSResultSet.java۞679۩if(values != null){
smallsql/database/SSResultSet.java۞680۩for(int i=values.length-1; i>=0; i--){
smallsql/database/SSResultSet.java۞681۩values[i].clear();
smallsql/database/SSResultSet.java۞682۩}
smallsql/database/SSResultSet.java۞683۩}
smallsql/database/SSResultSet.java۞684۩}
smallsql/database/SSResultSet.java۞687۩public void moveToInsertRow() throws SQLException {
smallsql/database/SSResultSet.java۞688۩if(isUpdatable){
smallsql/database/SSResultSet.java۞689۩isInsertRow = true;
smallsql/database/SSResultSet.java۞690۩clearRowBuffer();
smallsql/database/SSResultSet.java۞691۩}else{
smallsql/database/SSResultSet.java۞692۩throw SmallSQLException.create(Language.RSET_READONLY);
smallsql/database/SSResultSet.java۞693۩}
smallsql/database/SSResultSet.java۞694۩}
smallsql/database/SSResultSet.java۞697۩public void moveToCurrentRow() throws SQLException{
smallsql/database/SSResultSet.java۞698۩isInsertRow = false;
smallsql/database/SSResultSet.java۞699۩clearRowBuffer();
smallsql/database/SSResultSet.java۞700۩if(values == null){
smallsql/database/SSResultSet.java۞702۩getUpdateValue(1);
smallsql/database/SSResultSet.java۞703۩}
smallsql/database/SSResultSet.java۞704۩}
smallsql/database/SSResultSet.java۞707۩public Statement getStatement() {
smallsql/database/SSResultSet.java۞708۩return st;
smallsql/database/SSResultSet.java۞709۩}
smallsql/database/SSResultSet.java۞712۩public Object getObject(int i, Map map) throws SQLException {
smallsql/database/SSResultSet.java۞713۩return getObject( i );
smallsql/database/SSResultSet.java۞714۩}
smallsql/database/SSResultSet.java۞717۩public Ref getRef(int i) throws SQLException {
smallsql/database/SSResultSet.java۞719۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Ref object");
smallsql/database/SSResultSet.java۞720۩}
smallsql/database/SSResultSet.java۞723۩public Blob getBlob(int i) throws SQLException {
smallsql/database/SSResultSet.java۞725۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Blob object");
smallsql/database/SSResultSet.java۞726۩}
smallsql/database/SSResultSet.java۞729۩public Clob getClob(int i) throws SQLException {
smallsql/database/SSResultSet.java۞731۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Clob object");
smallsql/database/SSResultSet.java۞732۩}
smallsql/database/SSResultSet.java۞735۩public Array getArray(int i) throws SQLException {
smallsql/database/SSResultSet.java۞737۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Array");
smallsql/database/SSResultSet.java۞738۩}
smallsql/database/SSResultSet.java۞741۩public Object getObject(String columnName, Map map) throws SQLException {
smallsql/database/SSResultSet.java۞742۩return getObject( columnName );
smallsql/database/SSResultSet.java۞743۩}
smallsql/database/SSResultSet.java۞744۩public Ref getRef(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞745۩return getRef( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞746۩}
smallsql/database/SSResultSet.java۞747۩public Blob getBlob(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞748۩return getBlob( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞749۩}
smallsql/database/SSResultSet.java۞750۩public Clob getClob(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞751۩return getClob( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞752۩}
smallsql/database/SSResultSet.java۞753۩public Array getArray(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞754۩return getArray( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞755۩}
smallsql/database/SSResultSet.java۞758۩public Date getDate(int columnIndex, Calendar cal) throws SQLException {
smallsql/database/SSResultSet.java۞759۩try{
smallsql/database/SSResultSet.java۞760۩if(cal == null){
smallsql/database/SSResultSet.java۞761۩return getDate(columnIndex);
smallsql/database/SSResultSet.java۞762۩}
smallsql/database/SSResultSet.java۞763۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞764۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞765۩if(wasNull) return null;
smallsql/database/SSResultSet.java۞766۩return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));
smallsql/database/SSResultSet.java۞767۩}catch(Exception e){
smallsql/database/SSResultSet.java۞768۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞769۩}
smallsql/database/SSResultSet.java۞770۩}
smallsql/database/SSResultSet.java۞773۩public Date getDate(String columnName, Calendar cal) throws SQLException {
smallsql/database/SSResultSet.java۞774۩return getDate( findColumn( columnName ), cal );
smallsql/database/SSResultSet.java۞775۩}
smallsql/database/SSResultSet.java۞778۩public Time getTime(int columnIndex, Calendar cal) throws SQLException {
smallsql/database/SSResultSet.java۞779۩try{
smallsql/database/SSResultSet.java۞780۩if(cal == null){
smallsql/database/SSResultSet.java۞781۩return getTime(columnIndex);
smallsql/database/SSResultSet.java۞782۩}
smallsql/database/SSResultSet.java۞783۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞784۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞785۩if(wasNull) return null;
smallsql/database/SSResultSet.java۞786۩return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));
smallsql/database/SSResultSet.java۞787۩}catch(Exception e){
smallsql/database/SSResultSet.java۞788۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞789۩}
smallsql/database/SSResultSet.java۞790۩}
smallsql/database/SSResultSet.java۞793۩public Time getTime(String columnName, Calendar cal) throws SQLException {
smallsql/database/SSResultSet.java۞794۩return getTime( findColumn( columnName ), cal );
smallsql/database/SSResultSet.java۞795۩}
smallsql/database/SSResultSet.java۞798۩public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {
smallsql/database/SSResultSet.java۞799۩try{
smallsql/database/SSResultSet.java۞800۩if(cal == null){
smallsql/database/SSResultSet.java۞801۩return getTimestamp(columnIndex);
smallsql/database/SSResultSet.java۞802۩}
smallsql/database/SSResultSet.java۞803۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞804۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞805۩if(wasNull) return null;
smallsql/database/SSResultSet.java۞806۩return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));
smallsql/database/SSResultSet.java۞807۩}catch(Exception e){
smallsql/database/SSResultSet.java۞808۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞809۩}
smallsql/database/SSResultSet.java۞810۩}
smallsql/database/SSResultSet.java۞813۩public Timestamp getTimestamp(String columnName, Calendar cal) throws SQLException {
smallsql/database/SSResultSet.java۞814۩return getTimestamp( findColumn( columnName ), cal );
smallsql/database/SSResultSet.java۞815۩}
smallsql/database/SSResultSet.java۞818۩public URL getURL(int columnIndex) throws SQLException {
smallsql/database/SSResultSet.java۞819۩try{
smallsql/database/SSResultSet.java۞820۩Expression expr = getValue(columnIndex);
smallsql/database/SSResultSet.java۞821۩wasNull = expr.isNull();
smallsql/database/SSResultSet.java۞822۩if(wasNull) return null;
smallsql/database/SSResultSet.java۞823۩return new URL( expr.getString() );
smallsql/database/SSResultSet.java۞824۩}catch(Exception e){
smallsql/database/SSResultSet.java۞825۩throw SmallSQLException.createFromException( e );
smallsql/database/SSResultSet.java۞826۩}
smallsql/database/SSResultSet.java۞827۩}
smallsql/database/SSResultSet.java۞830۩public URL getURL(String columnName) throws SQLException {
smallsql/database/SSResultSet.java۞831۩return getURL( findColumn( columnName ) );
smallsql/database/SSResultSet.java۞832۩}
smallsql/database/SSResultSet.java۞835۩public void updateRef(int columnIndex, Ref x) throws SQLException {
smallsql/database/SSResultSet.java۞837۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Ref");
smallsql/database/SSResultSet.java۞838۩}
smallsql/database/SSResultSet.java۞841۩public void updateRef(String columnName, Ref x) throws SQLException {
smallsql/database/SSResultSet.java۞842۩updateRef( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞843۩}
smallsql/database/SSResultSet.java۞846۩public void updateBlob(int columnIndex, Blob x) throws SQLException {
smallsql/database/SSResultSet.java۞848۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Blob");
smallsql/database/SSResultSet.java۞849۩}
smallsql/database/SSResultSet.java۞852۩public void updateBlob(String columnName, Blob x) throws SQLException {
smallsql/database/SSResultSet.java۞853۩updateBlob( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞854۩}
smallsql/database/SSResultSet.java۞857۩public void updateClob(int columnIndex, Clob x) throws SQLException {
smallsql/database/SSResultSet.java۞859۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Clob");
smallsql/database/SSResultSet.java۞860۩}
smallsql/database/SSResultSet.java۞863۩public void updateClob(String columnName, Clob x) throws SQLException {
smallsql/database/SSResultSet.java۞864۩updateClob( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞865۩}
smallsql/database/SSResultSet.java۞868۩public void updateArray(int columnIndex, Array x) throws SQLException {
smallsql/database/SSResultSet.java۞870۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "Array");
smallsql/database/SSResultSet.java۞871۩}
smallsql/database/SSResultSet.java۞874۩public void updateArray(String columnName, Array x) throws SQLException {
smallsql/database/SSResultSet.java۞875۩updateArray( findColumn( columnName ), x );
smallsql/database/SSResultSet.java۞876۩}
smallsql/database/SSResultSet.java۞888۩final private Expression getValue(int columnIndex) throws SQLException{
smallsql/database/SSResultSet.java۞889۩if(values != null){
smallsql/database/SSResultSet.java۞890۩ExpressionValue value = values[ metaData.getColumnIdx( columnIndex ) ];
smallsql/database/SSResultSet.java۞891۩if(!value.isEmpty() || isInsertRow){
smallsql/database/SSResultSet.java۞892۩return value;
smallsql/database/SSResultSet.java۞893۩}
smallsql/database/SSResultSet.java۞894۩}
smallsql/database/SSResultSet.java۞895۩return metaData.getColumnExpression(columnIndex);
smallsql/database/SSResultSet.java۞896۩}
smallsql/database/SSResultSet.java۞899۩final private ExpressionValue getUpdateValue(int columnIndex) throws SQLException{
smallsql/database/SSResultSet.java۞900۩if(values == null){
smallsql/database/SSResultSet.java۞901۩int count = metaData.getColumnCount();
smallsql/database/SSResultSet.java۞902۩values = new ExpressionValue[count];
smallsql/database/SSResultSet.java۞903۩while(count-- > 0){
smallsql/database/SSResultSet.java۞904۩values[count] = new ExpressionValue();
smallsql/database/SSResultSet.java۞905۩}
smallsql/database/SSResultSet.java۞906۩}
smallsql/database/SSResultSet.java۞907۩return values[ metaData.getColumnIdx( columnIndex ) ];
smallsql/database/SSResultSet.java۞908۩}
smallsql/database/SSResultSet.java۞911۩final private void updateValue(int columnIndex, Object x, int dataType) throws SQLException{
smallsql/database/SSResultSet.java۞912۩getUpdateValue( columnIndex ).set( x, dataType );
smallsql/database/SSResultSet.java۞913۩if(st.con.log.isLogging()){
smallsql/database/SSResultSet.java۞915۩st.con.log.println("parameter '"+metaData.getColumnName(columnIndex)+"' = "+x+"; type="+dataType);
smallsql/database/SSResultSet.java۞916۩}
smallsql/database/SSResultSet.java۞917۩}
smallsql/database/SSResultSet.java۞920۩final private void updateValue(int columnIndex, Object x, int dataType, int length) throws SQLException{
smallsql/database/SSResultSet.java۞921۩getUpdateValue( columnIndex ).set( x, dataType, length );
smallsql/database/SSResultSet.java۞922۩if(st.con.log.isLogging()){
smallsql/database/SSResultSet.java۞923۩st.con.log.println("parameter '"+metaData.getColumnName(columnIndex)+"' = "+x+"; type="+dataType+"; length="+length);
smallsql/database/SSResultSet.java۞924۩}
smallsql/database/SSResultSet.java۞925۩}
smallsql/database/SSResultSet.java۞928۩final private CommandSelect getCmd() throws SQLException {
smallsql/database/SSResultSet.java۞929۩if(cmd == null){
smallsql/database/SSResultSet.java۞930۩throw SmallSQLException.create(Language.RSET_CLOSED);
smallsql/database/SSResultSet.java۞931۩}
smallsql/database/SSResultSet.java۞932۩st.con.testClosedConnection();
smallsql/database/SSResultSet.java۞933۩return cmd;
smallsql/database/SSResultSet.java۞934۩}
smallsql/database/SSResultSet.java۞935۩}
smallsql/database/SSResultSetMetaData.java۞33۩package smallsql.database;
smallsql/database/SSResultSetMetaData.java۞35۩import java.sql.*;
smallsql/database/SSResultSetMetaData.java۞37۩import smallsql.database.language.Language;
smallsql/database/SSResultSetMetaData.java۞40۩public class SSResultSetMetaData implements ResultSetMetaData {
smallsql/database/SSResultSetMetaData.java۞42۩Expressions columns;
smallsql/database/SSResultSetMetaData.java۞44۩public int getColumnCount() throws SQLException {
smallsql/database/SSResultSetMetaData.java۞45۩return columns.size();
smallsql/database/SSResultSetMetaData.java۞46۩}
smallsql/database/SSResultSetMetaData.java۞49۩public boolean isAutoIncrement(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞50۩return getColumnExpression( column ).isAutoIncrement();
smallsql/database/SSResultSetMetaData.java۞51۩}
smallsql/database/SSResultSetMetaData.java۞54۩public boolean isCaseSensitive(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞55۩return getColumnExpression( column ).isCaseSensitive();
smallsql/database/SSResultSetMetaData.java۞56۩}
smallsql/database/SSResultSetMetaData.java۞59۩public boolean isSearchable(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞60۩int type = getColumnExpression( column ).getType();
smallsql/database/SSResultSetMetaData.java۞61۩return type == Expression.NAME || type == Expression.FUNCTION;
smallsql/database/SSResultSetMetaData.java۞62۩}
smallsql/database/SSResultSetMetaData.java۞65۩public boolean isCurrency(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞66۩switch(getColumnExpression( column ).getDataType()){
smallsql/database/SSResultSetMetaData.java۞67۩case SQLTokenizer.MONEY:
smallsql/database/SSResultSetMetaData.java۞68۩case SQLTokenizer.SMALLMONEY:
smallsql/database/SSResultSetMetaData.java۞69۩return true;
smallsql/database/SSResultSetMetaData.java۞70۩}
smallsql/database/SSResultSetMetaData.java۞71۩return false;
smallsql/database/SSResultSetMetaData.java۞72۩}
smallsql/database/SSResultSetMetaData.java۞75۩public int isNullable(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞76۩return getColumnExpression( column ).isNullable() ? columnNullable : columnNoNulls;
smallsql/database/SSResultSetMetaData.java۞77۩}
smallsql/database/SSResultSetMetaData.java۞80۩public boolean isSigned(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞81۩return isSignedDataType(getColumnExpression( column ).getDataType());
smallsql/database/SSResultSetMetaData.java۞82۩}
smallsql/database/SSResultSetMetaData.java۞85۩static boolean isSignedDataType(int dataType) {
smallsql/database/SSResultSetMetaData.java۞86۩switch(dataType){
smallsql/database/SSResultSetMetaData.java۞87۩case SQLTokenizer.SMALLINT:
smallsql/database/SSResultSetMetaData.java۞88۩case SQLTokenizer.INT:
smallsql/database/SSResultSetMetaData.java۞89۩case SQLTokenizer.BIGINT:
smallsql/database/SSResultSetMetaData.java۞90۩case SQLTokenizer.SMALLMONEY:
smallsql/database/SSResultSetMetaData.java۞91۩case SQLTokenizer.MONEY:
smallsql/database/SSResultSetMetaData.java۞92۩case SQLTokenizer.DECIMAL:
smallsql/database/SSResultSetMetaData.java۞93۩case SQLTokenizer.NUMERIC:
smallsql/database/SSResultSetMetaData.java۞94۩case SQLTokenizer.REAL:
smallsql/database/SSResultSetMetaData.java۞95۩case SQLTokenizer.FLOAT:
smallsql/database/SSResultSetMetaData.java۞96۩case SQLTokenizer.DOUBLE:
smallsql/database/SSResultSetMetaData.java۞97۩return true;
smallsql/database/SSResultSetMetaData.java۞98۩}
smallsql/database/SSResultSetMetaData.java۞99۩return false;
smallsql/database/SSResultSetMetaData.java۞100۩}
smallsql/database/SSResultSetMetaData.java۞103۩static boolean isNumberDataType(int dataType) {
smallsql/database/SSResultSetMetaData.java۞104۩return isSignedDataType(dataType) || dataType == SQLTokenizer.TINYINT;
smallsql/database/SSResultSetMetaData.java۞105۩}
smallsql/database/SSResultSetMetaData.java۞108۩static boolean isBinaryDataType(int dataType) {
smallsql/database/SSResultSetMetaData.java۞109۩switch(dataType){
smallsql/database/SSResultSetMetaData.java۞110۩case SQLTokenizer.BINARY:
smallsql/database/SSResultSetMetaData.java۞111۩case SQLTokenizer.VARBINARY:
smallsql/database/SSResultSetMetaData.java۞112۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/SSResultSetMetaData.java۞113۩case SQLTokenizer.BLOB:
smallsql/database/SSResultSetMetaData.java۞114۩return true;
smallsql/database/SSResultSetMetaData.java۞115۩}
smallsql/database/SSResultSetMetaData.java۞116۩return false;
smallsql/database/SSResultSetMetaData.java۞117۩}
smallsql/database/SSResultSetMetaData.java۞120۩static int getDisplaySize(int dataType, int precision, int scale){
smallsql/database/SSResultSetMetaData.java۞121۩switch(dataType){
smallsql/database/SSResultSetMetaData.java۞122۩case SQLTokenizer.BIT:
smallsql/database/SSResultSetMetaData.java۞123۩return 1;
smallsql/database/SSResultSetMetaData.java۞124۩case SQLTokenizer.BOOLEAN:
smallsql/database/SSResultSetMetaData.java۞125۩return 5;
smallsql/database/SSResultSetMetaData.java۞126۩case SQLTokenizer.TINYINT:
smallsql/database/SSResultSetMetaData.java۞127۩return 3;
smallsql/database/SSResultSetMetaData.java۞128۩case SQLTokenizer.SMALLINT:
smallsql/database/SSResultSetMetaData.java۞129۩return 6;
smallsql/database/SSResultSetMetaData.java۞130۩case SQLTokenizer.INT:
smallsql/database/SSResultSetMetaData.java۞131۩return 10;
smallsql/database/SSResultSetMetaData.java۞132۩case SQLTokenizer.BIGINT:
smallsql/database/SSResultSetMetaData.java۞133۩case SQLTokenizer.MONEY:
smallsql/database/SSResultSetMetaData.java۞134۩return 19;
smallsql/database/SSResultSetMetaData.java۞135۩case SQLTokenizer.REAL:
smallsql/database/SSResultSetMetaData.java۞136۩return 13;
smallsql/database/SSResultSetMetaData.java۞137۩case SQLTokenizer.FLOAT:
smallsql/database/SSResultSetMetaData.java۞138۩case SQLTokenizer.DOUBLE:
smallsql/database/SSResultSetMetaData.java۞139۩return 17;
smallsql/database/SSResultSetMetaData.java۞140۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/SSResultSetMetaData.java۞141۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/SSResultSetMetaData.java۞142۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/SSResultSetMetaData.java۞143۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/SSResultSetMetaData.java۞144۩case SQLTokenizer.BLOB:
smallsql/database/SSResultSetMetaData.java۞145۩case SQLTokenizer.CLOB:
smallsql/database/SSResultSetMetaData.java۞146۩case SQLTokenizer.NCLOB:
smallsql/database/SSResultSetMetaData.java۞147۩return Integer.MAX_VALUE;
smallsql/database/SSResultSetMetaData.java۞148۩case SQLTokenizer.NUMERIC:
smallsql/database/SSResultSetMetaData.java۞149۩return precision + (scale>0 ? 2 : 1);
smallsql/database/SSResultSetMetaData.java۞150۩case SQLTokenizer.VARBINARY:
smallsql/database/SSResultSetMetaData.java۞151۩case SQLTokenizer.BINARY:
smallsql/database/SSResultSetMetaData.java۞152۩return 2 + precision*2;
smallsql/database/SSResultSetMetaData.java۞153۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/SSResultSetMetaData.java۞154۩return 21;
smallsql/database/SSResultSetMetaData.java۞155۩default:
smallsql/database/SSResultSetMetaData.java۞156۩return precision;
smallsql/database/SSResultSetMetaData.java۞157۩}
smallsql/database/SSResultSetMetaData.java۞158۩}
smallsql/database/SSResultSetMetaData.java۞161۩static int getDataTypePrecision(int dataType, int defaultValue){
smallsql/database/SSResultSetMetaData.java۞162۩switch(dataType){
smallsql/database/SSResultSetMetaData.java۞163۩case SQLTokenizer.NULL:
smallsql/database/SSResultSetMetaData.java۞164۩return 0;
smallsql/database/SSResultSetMetaData.java۞165۩case SQLTokenizer.BIT:
smallsql/database/SSResultSetMetaData.java۞166۩case SQLTokenizer.BOOLEAN:
smallsql/database/SSResultSetMetaData.java۞167۩return 1;
smallsql/database/SSResultSetMetaData.java۞168۩case SQLTokenizer.TINYINT:
smallsql/database/SSResultSetMetaData.java۞169۩return 3;
smallsql/database/SSResultSetMetaData.java۞170۩case SQLTokenizer.SMALLINT:
smallsql/database/SSResultSetMetaData.java۞171۩return 5;
smallsql/database/SSResultSetMetaData.java۞172۩case SQLTokenizer.INT:
smallsql/database/SSResultSetMetaData.java۞173۩case SQLTokenizer.SMALLMONEY:
smallsql/database/SSResultSetMetaData.java۞174۩return 10;
smallsql/database/SSResultSetMetaData.java۞175۩case SQLTokenizer.BIGINT:
smallsql/database/SSResultSetMetaData.java۞176۩case SQLTokenizer.MONEY:
smallsql/database/SSResultSetMetaData.java۞177۩return 19;
smallsql/database/SSResultSetMetaData.java۞178۩case SQLTokenizer.REAL:
smallsql/database/SSResultSetMetaData.java۞179۩return 7;
smallsql/database/SSResultSetMetaData.java۞180۩case SQLTokenizer.FLOAT:
smallsql/database/SSResultSetMetaData.java۞181۩case SQLTokenizer.DOUBLE:
smallsql/database/SSResultSetMetaData.java۞182۩return 15;
smallsql/database/SSResultSetMetaData.java۞183۩case SQLTokenizer.CHAR:
smallsql/database/SSResultSetMetaData.java۞184۩case SQLTokenizer.NCHAR:
smallsql/database/SSResultSetMetaData.java۞185۩case SQLTokenizer.VARCHAR:
smallsql/database/SSResultSetMetaData.java۞186۩case SQLTokenizer.NVARCHAR:
smallsql/database/SSResultSetMetaData.java۞187۩case SQLTokenizer.BINARY:
smallsql/database/SSResultSetMetaData.java۞188۩case SQLTokenizer.VARBINARY:
smallsql/database/SSResultSetMetaData.java۞189۩if(defaultValue == -1)
smallsql/database/SSResultSetMetaData.java۞190۩return 0xFFFF;
smallsql/database/SSResultSetMetaData.java۞191۩return defaultValue;
smallsql/database/SSResultSetMetaData.java۞192۩case SQLTokenizer.NUMERIC:
smallsql/database/SSResultSetMetaData.java۞193۩case SQLTokenizer.DECIMAL:
smallsql/database/SSResultSetMetaData.java۞194۩if(defaultValue == -1)
smallsql/database/SSResultSetMetaData.java۞195۩return 38;
smallsql/database/SSResultSetMetaData.java۞196۩return defaultValue;
smallsql/database/SSResultSetMetaData.java۞197۩case SQLTokenizer.TIMESTAMP:
smallsql/database/SSResultSetMetaData.java۞198۩return 23;
smallsql/database/SSResultSetMetaData.java۞199۩case SQLTokenizer.TIME:
smallsql/database/SSResultSetMetaData.java۞200۩return 8;
smallsql/database/SSResultSetMetaData.java۞201۩case SQLTokenizer.DATE:
smallsql/database/SSResultSetMetaData.java۞202۩return 10;
smallsql/database/SSResultSetMetaData.java۞203۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/SSResultSetMetaData.java۞204۩return 16;
smallsql/database/SSResultSetMetaData.java۞205۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/SSResultSetMetaData.java۞206۩return 36;
smallsql/database/SSResultSetMetaData.java۞207۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/SSResultSetMetaData.java۞208۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/SSResultSetMetaData.java۞209۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/SSResultSetMetaData.java۞210۩return Integer.MAX_VALUE;
smallsql/database/SSResultSetMetaData.java۞211۩}
smallsql/database/SSResultSetMetaData.java۞212۩if(defaultValue == -1)
smallsql/database/SSResultSetMetaData.java۞213۩throw new Error("Precision:"+SQLTokenizer.getKeyWord(dataType));
smallsql/database/SSResultSetMetaData.java۞214۩return defaultValue;
smallsql/database/SSResultSetMetaData.java۞215۩}
smallsql/database/SSResultSetMetaData.java۞218۩public int getColumnDisplaySize(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞219۩return getColumnExpression( column ).getDisplaySize();
smallsql/database/SSResultSetMetaData.java۞220۩}
smallsql/database/SSResultSetMetaData.java۞221۩public String getColumnLabel(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞222۩return getColumnExpression( column ).getAlias();
smallsql/database/SSResultSetMetaData.java۞223۩}
smallsql/database/SSResultSetMetaData.java۞224۩public String getColumnName(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞225۩return getColumnExpression( column ).getAlias();
smallsql/database/SSResultSetMetaData.java۞226۩}
smallsql/database/SSResultSetMetaData.java۞227۩public String getSchemaName(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞228۩return null;
smallsql/database/SSResultSetMetaData.java۞229۩}
smallsql/database/SSResultSetMetaData.java۞230۩public int getPrecision(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞231۩return getColumnExpression( column ).getPrecision();
smallsql/database/SSResultSetMetaData.java۞232۩}
smallsql/database/SSResultSetMetaData.java۞233۩public int getScale(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞234۩return getColumnExpression( column ).getScale();
smallsql/database/SSResultSetMetaData.java۞235۩}
smallsql/database/SSResultSetMetaData.java۞236۩public String getTableName(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞237۩return getColumnExpression( column ).getTableName();
smallsql/database/SSResultSetMetaData.java۞238۩}
smallsql/database/SSResultSetMetaData.java۞239۩public String getCatalogName(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞240۩return null;
smallsql/database/SSResultSetMetaData.java۞241۩}
smallsql/database/SSResultSetMetaData.java۞242۩public int getColumnType(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞243۩return SQLTokenizer.getSQLDataType(getColumnExpression( column ).getDataType() );
smallsql/database/SSResultSetMetaData.java۞244۩}
smallsql/database/SSResultSetMetaData.java۞245۩public String getColumnTypeName(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞246۩return SQLTokenizer.getKeyWord( getColumnExpression( column ).getDataType() );
smallsql/database/SSResultSetMetaData.java۞247۩}
smallsql/database/SSResultSetMetaData.java۞248۩public boolean isReadOnly(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞249۩return !getColumnExpression( column ).isDefinitelyWritable();
smallsql/database/SSResultSetMetaData.java۞250۩}
smallsql/database/SSResultSetMetaData.java۞251۩public boolean isWritable(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞252۩return getColumnExpression( column ).isDefinitelyWritable();
smallsql/database/SSResultSetMetaData.java۞253۩}
smallsql/database/SSResultSetMetaData.java۞254۩public boolean isDefinitelyWritable(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞255۩return getColumnExpression( column ).isDefinitelyWritable();
smallsql/database/SSResultSetMetaData.java۞256۩}
smallsql/database/SSResultSetMetaData.java۞257۩public String getColumnClassName(int column) throws SQLException {
smallsql/database/SSResultSetMetaData.java۞258۩switch(getColumnType(column)){
smallsql/database/SSResultSetMetaData.java۞259۩case Types.TINYINT:
smallsql/database/SSResultSetMetaData.java۞260۩case Types.SMALLINT:
smallsql/database/SSResultSetMetaData.java۞261۩case Types.INTEGER:
smallsql/database/SSResultSetMetaData.java۞262۩return "java.lang.Integer";
smallsql/database/SSResultSetMetaData.java۞263۩case Types.BIT:
smallsql/database/SSResultSetMetaData.java۞264۩case Types.BOOLEAN:
smallsql/database/SSResultSetMetaData.java۞265۩return "java.lang.Boolean";
smallsql/database/SSResultSetMetaData.java۞266۩case Types.BINARY:
smallsql/database/SSResultSetMetaData.java۞267۩case Types.VARBINARY:
smallsql/database/SSResultSetMetaData.java۞268۩case Types.LONGVARBINARY:
smallsql/database/SSResultSetMetaData.java۞269۩return "[B";
smallsql/database/SSResultSetMetaData.java۞270۩case Types.BLOB:
smallsql/database/SSResultSetMetaData.java۞271۩return "java.sql.Blob";
smallsql/database/SSResultSetMetaData.java۞272۩case Types.BIGINT:
smallsql/database/SSResultSetMetaData.java۞273۩return "java.lang.Long";
smallsql/database/SSResultSetMetaData.java۞274۩case Types.DECIMAL:
smallsql/database/SSResultSetMetaData.java۞275۩case Types.NUMERIC:
smallsql/database/SSResultSetMetaData.java۞276۩return "java.math.BigDecimal";
smallsql/database/SSResultSetMetaData.java۞277۩case Types.REAL:
smallsql/database/SSResultSetMetaData.java۞278۩return "java.lang.Float";
smallsql/database/SSResultSetMetaData.java۞279۩case Types.FLOAT:
smallsql/database/SSResultSetMetaData.java۞280۩case Types.DOUBLE:
smallsql/database/SSResultSetMetaData.java۞281۩return "java.lang.Double";
smallsql/database/SSResultSetMetaData.java۞282۩case Types.DATE:
smallsql/database/SSResultSetMetaData.java۞283۩return "java.sql.Date";
smallsql/database/SSResultSetMetaData.java۞284۩case Types.TIME:
smallsql/database/SSResultSetMetaData.java۞285۩return "java.sql.Time";
smallsql/database/SSResultSetMetaData.java۞286۩case Types.TIMESTAMP:
smallsql/database/SSResultSetMetaData.java۞287۩return "java.sql.Timestamp";
smallsql/database/SSResultSetMetaData.java۞288۩case Types.CHAR:
smallsql/database/SSResultSetMetaData.java۞289۩case Types.VARCHAR:
smallsql/database/SSResultSetMetaData.java۞290۩case Types.LONGVARCHAR:
smallsql/database/SSResultSetMetaData.java۞291۩case -11:
smallsql/database/SSResultSetMetaData.java۞292۩return "java.lang.String";
smallsql/database/SSResultSetMetaData.java۞293۩case Types.CLOB:
smallsql/database/SSResultSetMetaData.java۞294۩return "java.sql.Clob";
smallsql/database/SSResultSetMetaData.java۞295۩default: return "java.lang.Object";
smallsql/database/SSResultSetMetaData.java۞296۩}
smallsql/database/SSResultSetMetaData.java۞297۩}
smallsql/database/SSResultSetMetaData.java۞305۩final int getColumnIdx( int column ) throws SQLException{
smallsql/database/SSResultSetMetaData.java۞306۩if(column < 1 || column > columns.size())
smallsql/database/SSResultSetMetaData.java۞307۩throw SmallSQLException.create( Language.COL_IDX_OUT_RANGE, String.valueOf(column));
smallsql/database/SSResultSetMetaData.java۞308۩return column-1;
smallsql/database/SSResultSetMetaData.java۞309۩}
smallsql/database/SSResultSetMetaData.java۞311۩final Expression getColumnExpression( int column ) throws SQLException{
smallsql/database/SSResultSetMetaData.java۞312۩return columns.get( getColumnIdx( column ) );
smallsql/database/SSResultSetMetaData.java۞313۩}
smallsql/database/SSResultSetMetaData.java۞316۩}
smallsql/database/SSSavepoint.java۞34۩package smallsql.database;
smallsql/database/SSSavepoint.java۞36۩import java.sql.*;
smallsql/database/SSSavepoint.java۞41۩class SSSavepoint implements Savepoint {
smallsql/database/SSSavepoint.java۞43۩private final int id;
smallsql/database/SSSavepoint.java۞44۩private final String name;
smallsql/database/SSSavepoint.java۞45۩long transactionTime;
smallsql/database/SSSavepoint.java۞48۩SSSavepoint(int id, String name, long transactionTime){
smallsql/database/SSSavepoint.java۞49۩this.id = id;
smallsql/database/SSSavepoint.java۞50۩this.name = name;
smallsql/database/SSSavepoint.java۞51۩this.transactionTime = transactionTime;
smallsql/database/SSSavepoint.java۞52۩}
smallsql/database/SSSavepoint.java۞55۩public int getSavepointId(){
smallsql/database/SSSavepoint.java۞56۩return id;
smallsql/database/SSSavepoint.java۞57۩}
smallsql/database/SSSavepoint.java۞60۩public String getSavepointName(){
smallsql/database/SSSavepoint.java۞61۩return name;
smallsql/database/SSSavepoint.java۞62۩}
smallsql/database/SSSavepoint.java۞64۩}
smallsql/database/SSStatement.java۞33۩package smallsql.database;
smallsql/database/SSStatement.java۞35۩import java.sql.*;
smallsql/database/SSStatement.java۞36۩import java.util.ArrayList;
smallsql/database/SSStatement.java۞37۩import smallsql.database.language.Language;
smallsql/database/SSStatement.java۞39۩class SSStatement implements Statement{
smallsql/database/SSStatement.java۞41۩final SSConnection con;
smallsql/database/SSStatement.java۞43۩Command cmd;
smallsql/database/SSStatement.java۞45۩private boolean isClosed;
smallsql/database/SSStatement.java۞47۩int rsType;
smallsql/database/SSStatement.java۞49۩int rsConcurrency;
smallsql/database/SSStatement.java۞51۩private int fetchDirection;
smallsql/database/SSStatement.java۞53۩private int fetchSize;
smallsql/database/SSStatement.java۞55۩private int queryTimeout;
smallsql/database/SSStatement.java۞57۩private int maxRows;
smallsql/database/SSStatement.java۞59۩private int maxFieldSize;
smallsql/database/SSStatement.java۞61۩private ArrayList batches;
smallsql/database/SSStatement.java۞63۩private boolean needGeneratedKeys;
smallsql/database/SSStatement.java۞65۩private ResultSet generatedKeys;
smallsql/database/SSStatement.java۞67۩private int[] generatedKeyIndexes;
smallsql/database/SSStatement.java۞69۩private String[] generatedKeyNames;
smallsql/database/SSStatement.java۞72۩SSStatement(SSConnection con) throws SQLException{
smallsql/database/SSStatement.java۞73۩this(con, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
smallsql/database/SSStatement.java۞74۩}
smallsql/database/SSStatement.java۞77۩SSStatement(SSConnection con, int rsType, int rsConcurrency) throws SQLException{
smallsql/database/SSStatement.java۞78۩this.con = con;
smallsql/database/SSStatement.java۞79۩this.rsType = rsType;
smallsql/database/SSStatement.java۞80۩this.rsConcurrency = rsConcurrency;
smallsql/database/SSStatement.java۞81۩con.testClosedConnection();
smallsql/database/SSStatement.java۞82۩}
smallsql/database/SSStatement.java۞85۩final public ResultSet executeQuery(String sql) throws SQLException{
smallsql/database/SSStatement.java۞86۩executeImpl(sql);
smallsql/database/SSStatement.java۞87۩return cmd.getQueryResult();
smallsql/database/SSStatement.java۞88۩}
smallsql/database/SSStatement.java۞91۩final public int executeUpdate(String sql) throws SQLException{
smallsql/database/SSStatement.java۞92۩executeImpl(sql);
smallsql/database/SSStatement.java۞93۩return cmd.getUpdateCount();
smallsql/database/SSStatement.java۞94۩}
smallsql/database/SSStatement.java۞97۩final public boolean execute(String sql) throws SQLException{
smallsql/database/SSStatement.java۞98۩executeImpl(sql);
smallsql/database/SSStatement.java۞99۩return cmd.getResultSet() != null;
smallsql/database/SSStatement.java۞100۩}
smallsql/database/SSStatement.java۞103۩final private void executeImpl(String sql) throws SQLException{
smallsql/database/SSStatement.java۞104۩checkStatement();
smallsql/database/SSStatement.java۞105۩generatedKeys = null;
smallsql/database/SSStatement.java۞106۩try{
smallsql/database/SSStatement.java۞107۩con.log.println(sql);
smallsql/database/SSStatement.java۞108۩SQLParser parser = new SQLParser();
smallsql/database/SSStatement.java۞109۩cmd = parser.parse(con, sql);
smallsql/database/SSStatement.java۞110۩if(maxRows != 0 && (cmd.getMaxRows() == -1 || cmd.getMaxRows() > maxRows))
smallsql/database/SSStatement.java۞111۩cmd.setMaxRows(maxRows);
smallsql/database/SSStatement.java۞112۩cmd.execute(con, this);
smallsql/database/SSStatement.java۞113۩}catch(Exception e){
smallsql/database/SSStatement.java۞114۩throw SmallSQLException.createFromException(e);
smallsql/database/SSStatement.java۞115۩}
smallsql/database/SSStatement.java۞116۩needGeneratedKeys = false;
smallsql/database/SSStatement.java۞117۩generatedKeyIndexes = null;
smallsql/database/SSStatement.java۞118۩generatedKeyNames = null;
smallsql/database/SSStatement.java۞119۩}
smallsql/database/SSStatement.java۞122۩final public void close(){
smallsql/database/SSStatement.java۞123۩con.log.println("Statement.close");
smallsql/database/SSStatement.java۞124۩isClosed = true;
smallsql/database/SSStatement.java۞125۩cmd = null;
smallsql/database/SSStatement.java۞127۩}
smallsql/database/SSStatement.java۞130۩final public int getMaxFieldSize(){
smallsql/database/SSStatement.java۞131۩return maxFieldSize;
smallsql/database/SSStatement.java۞132۩}
smallsql/database/SSStatement.java۞135۩final public void setMaxFieldSize(int max){
smallsql/database/SSStatement.java۞136۩maxFieldSize = max;
smallsql/database/SSStatement.java۞137۩}
smallsql/database/SSStatement.java۞140۩final public int getMaxRows(){
smallsql/database/SSStatement.java۞141۩return maxRows;
smallsql/database/SSStatement.java۞142۩}
smallsql/database/SSStatement.java۞145۩final public void setMaxRows(int max) throws SQLException{
smallsql/database/SSStatement.java۞146۩if(max < 0)
smallsql/database/SSStatement.java۞147۩throw SmallSQLException.create(Language.ROWS_WRONG_MAX, String.valueOf(max));
smallsql/database/SSStatement.java۞148۩maxRows = max;
smallsql/database/SSStatement.java۞149۩}
smallsql/database/SSStatement.java۞152۩final public void setEscapeProcessing(boolean enable) throws SQLException{
smallsql/database/SSStatement.java۞153۩checkStatement();
smallsql/database/SSStatement.java۞155۩}
smallsql/database/SSStatement.java۞158۩final public int getQueryTimeout() throws SQLException{
smallsql/database/SSStatement.java۞159۩checkStatement();
smallsql/database/SSStatement.java۞160۩return queryTimeout;
smallsql/database/SSStatement.java۞161۩}
smallsql/database/SSStatement.java۞164۩final public void setQueryTimeout(int seconds) throws SQLException{
smallsql/database/SSStatement.java۞165۩checkStatement();
smallsql/database/SSStatement.java۞166۩queryTimeout = seconds;
smallsql/database/SSStatement.java۞167۩}
smallsql/database/SSStatement.java۞170۩final public void cancel() throws SQLException{
smallsql/database/SSStatement.java۞171۩checkStatement();
smallsql/database/SSStatement.java۞173۩}
smallsql/database/SSStatement.java۞176۩final public SQLWarning getWarnings(){
smallsql/database/SSStatement.java۞177۩return null;
smallsql/database/SSStatement.java۞178۩}
smallsql/database/SSStatement.java۞181۩final public void clearWarnings(){
smallsql/database/SSStatement.java۞183۩}
smallsql/database/SSStatement.java۞186۩final public void setCursorName(String name) throws SQLException{
smallsql/database/SSStatement.java۞188۩throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, "setCursorName");
smallsql/database/SSStatement.java۞189۩}
smallsql/database/SSStatement.java۞192۩final public ResultSet getResultSet() throws SQLException{
smallsql/database/SSStatement.java۞193۩checkStatement();
smallsql/database/SSStatement.java۞194۩return cmd.getResultSet();
smallsql/database/SSStatement.java۞195۩}
smallsql/database/SSStatement.java۞198۩final public int getUpdateCount() throws SQLException{
smallsql/database/SSStatement.java۞199۩checkStatement();
smallsql/database/SSStatement.java۞200۩return cmd.getUpdateCount();
smallsql/database/SSStatement.java۞201۩}
smallsql/database/SSStatement.java۞204۩final public boolean getMoreResults() throws SQLException{
smallsql/database/SSStatement.java۞205۩checkStatement();
smallsql/database/SSStatement.java۞206۩return getMoreResults(CLOSE_CURRENT_RESULT);
smallsql/database/SSStatement.java۞207۩}
smallsql/database/SSStatement.java۞210۩final public void setFetchDirection(int direction) throws SQLException{
smallsql/database/SSStatement.java۞211۩checkStatement();
smallsql/database/SSStatement.java۞212۩fetchDirection = direction;
smallsql/database/SSStatement.java۞213۩}
smallsql/database/SSStatement.java۞216۩final public int getFetchDirection() throws SQLException{
smallsql/database/SSStatement.java۞217۩checkStatement();
smallsql/database/SSStatement.java۞218۩return fetchDirection;
smallsql/database/SSStatement.java۞219۩}
smallsql/database/SSStatement.java۞222۩final public void setFetchSize(int rows) throws SQLException{
smallsql/database/SSStatement.java۞223۩checkStatement();
smallsql/database/SSStatement.java۞224۩fetchSize = rows;
smallsql/database/SSStatement.java۞225۩}
smallsql/database/SSStatement.java۞228۩final public int getFetchSize() throws SQLException{
smallsql/database/SSStatement.java۞229۩checkStatement();
smallsql/database/SSStatement.java۞230۩return fetchSize;
smallsql/database/SSStatement.java۞231۩}
smallsql/database/SSStatement.java۞234۩final public int getResultSetConcurrency() throws SQLException{
smallsql/database/SSStatement.java۞235۩checkStatement();
smallsql/database/SSStatement.java۞236۩return rsConcurrency;
smallsql/database/SSStatement.java۞237۩}
smallsql/database/SSStatement.java۞240۩final public int getResultSetType() throws SQLException{
smallsql/database/SSStatement.java۞241۩checkStatement();
smallsql/database/SSStatement.java۞242۩return rsType;
smallsql/database/SSStatement.java۞243۩}
smallsql/database/SSStatement.java۞246۩final public void addBatch(String sql){
smallsql/database/SSStatement.java۞247۩if(batches == null)
smallsql/database/SSStatement.java۞248۩batches = new ArrayList();
smallsql/database/SSStatement.java۞249۩batches.add(sql);
smallsql/database/SSStatement.java۞250۩}
smallsql/database/SSStatement.java۞253۩public void clearBatch() throws SQLException{
smallsql/database/SSStatement.java۞254۩checkStatement();
smallsql/database/SSStatement.java۞255۩if(batches == null)
smallsql/database/SSStatement.java۞256۩return;
smallsql/database/SSStatement.java۞257۩batches.clear();
smallsql/database/SSStatement.java۞258۩}
smallsql/database/SSStatement.java۞261۩public int[] executeBatch() throws BatchUpdateException{
smallsql/database/SSStatement.java۞262۩if(batches == null)
smallsql/database/SSStatement.java۞263۩return new int[0];
smallsql/database/SSStatement.java۞264۩final int[] result = new int[batches.size()];
smallsql/database/SSStatement.java۞265۩BatchUpdateException failed = null;
smallsql/database/SSStatement.java۞266۩for(int i = 0; i < result.length; i++){
smallsql/database/SSStatement.java۞267۩try{
smallsql/database/SSStatement.java۞268۩result[i] = executeUpdate((String)batches.get(i));
smallsql/database/SSStatement.java۞269۩}catch(SQLException ex){
smallsql/database/SSStatement.java۞270۩result[i] = EXECUTE_FAILED;
smallsql/database/SSStatement.java۞271۩if(failed == null){
smallsql/database/SSStatement.java۞272۩failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);
smallsql/database/SSStatement.java۞273۩failed.initCause(ex);
smallsql/database/SSStatement.java۞274۩}
smallsql/database/SSStatement.java۞275۩failed.setNextException(ex);
smallsql/database/SSStatement.java۞276۩}
smallsql/database/SSStatement.java۞277۩}
smallsql/database/SSStatement.java۞278۩batches.clear();
smallsql/database/SSStatement.java۞279۩if(failed != null)
smallsql/database/SSStatement.java۞280۩throw failed;
smallsql/database/SSStatement.java۞281۩return result;
smallsql/database/SSStatement.java۞282۩}
smallsql/database/SSStatement.java۞285۩final public Connection getConnection(){
smallsql/database/SSStatement.java۞286۩return con;
smallsql/database/SSStatement.java۞287۩}
smallsql/database/SSStatement.java۞290۩final public boolean getMoreResults(int current) throws SQLException{
smallsql/database/SSStatement.java۞291۩switch(current){
smallsql/database/SSStatement.java۞292۩case CLOSE_ALL_RESULTS:
smallsql/database/SSStatement.java۞294۩case CLOSE_CURRENT_RESULT:
smallsql/database/SSStatement.java۞295۩ResultSet rs = cmd.getResultSet();
smallsql/database/SSStatement.java۞296۩cmd.rs = null;
smallsql/database/SSStatement.java۞297۩if(rs != null)
smallsql/database/SSStatement.java۞298۩rs.close();
smallsql/database/SSStatement.java۞299۩break;
smallsql/database/SSStatement.java۞300۩case KEEP_CURRENT_RESULT:
smallsql/database/SSStatement.java۞301۩break;
smallsql/database/SSStatement.java۞302۩default:
smallsql/database/SSStatement.java۞303۩throw SmallSQLException.create(Language.FLAGVALUE_INVALID, String.valueOf(current));
smallsql/database/SSStatement.java۞304۩}
smallsql/database/SSStatement.java۞305۩return cmd.getMoreResults();
smallsql/database/SSStatement.java۞306۩}
smallsql/database/SSStatement.java۞309۩final void setNeedGeneratedKeys(int autoGeneratedKeys) throws SQLException{
smallsql/database/SSStatement.java۞310۩switch(autoGeneratedKeys){
smallsql/database/SSStatement.java۞311۩case NO_GENERATED_KEYS:
smallsql/database/SSStatement.java۞312۩break;
smallsql/database/SSStatement.java۞313۩case RETURN_GENERATED_KEYS:
smallsql/database/SSStatement.java۞314۩needGeneratedKeys = true;
smallsql/database/SSStatement.java۞315۩break;
smallsql/database/SSStatement.java۞316۩default:
smallsql/database/SSStatement.java۞317۩throw SmallSQLException.create(Language.ARGUMENT_INVALID, String.valueOf(autoGeneratedKeys));
smallsql/database/SSStatement.java۞318۩}
smallsql/database/SSStatement.java۞319۩}
smallsql/database/SSStatement.java۞322۩final void setNeedGeneratedKeys(int[] columnIndexes) throws SQLException{
smallsql/database/SSStatement.java۞323۩needGeneratedKeys = columnIndexes != null;
smallsql/database/SSStatement.java۞324۩generatedKeyIndexes = columnIndexes;
smallsql/database/SSStatement.java۞325۩}
smallsql/database/SSStatement.java۞328۩final void setNeedGeneratedKeys(String[] columnNames) throws SQLException{
smallsql/database/SSStatement.java۞329۩needGeneratedKeys = columnNames != null;
smallsql/database/SSStatement.java۞330۩generatedKeyNames = columnNames;
smallsql/database/SSStatement.java۞331۩}
smallsql/database/SSStatement.java۞334۩final boolean needGeneratedKeys(){
smallsql/database/SSStatement.java۞335۩return needGeneratedKeys;
smallsql/database/SSStatement.java۞336۩}
smallsql/database/SSStatement.java۞339۩final int[] getGeneratedKeyIndexes(){
smallsql/database/SSStatement.java۞340۩return generatedKeyIndexes;
smallsql/database/SSStatement.java۞341۩}
smallsql/database/SSStatement.java۞344۩final String[] getGeneratedKeyNames(){
smallsql/database/SSStatement.java۞345۩return generatedKeyNames;
smallsql/database/SSStatement.java۞346۩}
smallsql/database/SSStatement.java۞354۩final void setGeneratedKeys(ResultSet rs){
smallsql/database/SSStatement.java۞355۩generatedKeys = rs;
smallsql/database/SSStatement.java۞356۩}
smallsql/database/SSStatement.java۞359۩final public ResultSet getGeneratedKeys() throws SQLException{
smallsql/database/SSStatement.java۞360۩if(generatedKeys == null)
smallsql/database/SSStatement.java۞361۩throw SmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);
smallsql/database/SSStatement.java۞362۩return generatedKeys;
smallsql/database/SSStatement.java۞363۩}
smallsql/database/SSStatement.java۞366۩final public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException{
smallsql/database/SSStatement.java۞367۩setNeedGeneratedKeys(autoGeneratedKeys);
smallsql/database/SSStatement.java۞368۩return executeUpdate(sql);
smallsql/database/SSStatement.java۞369۩}
smallsql/database/SSStatement.java۞372۩final public int executeUpdate(String sql, int[] columnIndexes) throws SQLException{
smallsql/database/SSStatement.java۞373۩setNeedGeneratedKeys(columnIndexes);
smallsql/database/SSStatement.java۞374۩return executeUpdate(sql);
smallsql/database/SSStatement.java۞375۩}
smallsql/database/SSStatement.java۞378۩final public int executeUpdate(String sql, String[] columnNames) throws SQLException{
smallsql/database/SSStatement.java۞379۩setNeedGeneratedKeys(columnNames);
smallsql/database/SSStatement.java۞380۩return executeUpdate(sql);
smallsql/database/SSStatement.java۞381۩}
smallsql/database/SSStatement.java۞384۩final public boolean execute(String sql, int autoGeneratedKeys) throws SQLException{
smallsql/database/SSStatement.java۞385۩setNeedGeneratedKeys(autoGeneratedKeys);
smallsql/database/SSStatement.java۞386۩return execute(sql);
smallsql/database/SSStatement.java۞387۩}
smallsql/database/SSStatement.java۞390۩final public boolean execute(String sql, int[] columnIndexes) throws SQLException{
smallsql/database/SSStatement.java۞391۩setNeedGeneratedKeys(columnIndexes);
smallsql/database/SSStatement.java۞392۩return execute(sql);
smallsql/database/SSStatement.java۞393۩}
smallsql/database/SSStatement.java۞396۩final public boolean execute(String sql, String[] columnNames) throws SQLException{
smallsql/database/SSStatement.java۞397۩setNeedGeneratedKeys(columnNames);
smallsql/database/SSStatement.java۞398۩return execute(sql);
smallsql/database/SSStatement.java۞399۩}
smallsql/database/SSStatement.java۞402۩final public int getResultSetHoldability() throws SQLException{
smallsql/database/SSStatement.java۞404۩throw new java.lang.UnsupportedOperationException("Method getResultSetHoldability() not yet implemented.");
smallsql/database/SSStatement.java۞405۩}
smallsql/database/SSStatement.java۞408۩void checkStatement() throws SQLException{
smallsql/database/SSStatement.java۞409۩if(isClosed){
smallsql/database/SSStatement.java۞410۩throw SmallSQLException.create(Language.STMT_IS_CLOSED);
smallsql/database/SSStatement.java۞411۩}
smallsql/database/SSStatement.java۞412۩}
smallsql/database/SSStatement.java۞413۩}
smallsql/database/Scrollable.java۞34۩package smallsql.database;
smallsql/database/Scrollable.java۞36۩import smallsql.database.language.Language;
smallsql/database/Scrollable.java۞42۩class Scrollable extends RowSource {
smallsql/database/Scrollable.java۞45۩private final RowSource rowSource;
smallsql/database/Scrollable.java۞48۩private int rowIdx;
smallsql/database/Scrollable.java۞51۩private final LongList rowList = new LongList();
smallsql/database/Scrollable.java۞57۩Scrollable(RowSource rowSource){
smallsql/database/Scrollable.java۞58۩this.rowSource = rowSource;
smallsql/database/Scrollable.java۞59۩}
smallsql/database/Scrollable.java۞62۩final boolean isScrollable(){
smallsql/database/Scrollable.java۞63۩return true;
smallsql/database/Scrollable.java۞64۩}
smallsql/database/Scrollable.java۞67۩void beforeFirst() throws Exception {
smallsql/database/Scrollable.java۞68۩rowIdx = -1;
smallsql/database/Scrollable.java۞69۩rowSource.beforeFirst();
smallsql/database/Scrollable.java۞70۩}
smallsql/database/Scrollable.java۞73۩boolean isBeforeFirst(){
smallsql/database/Scrollable.java۞74۩return rowIdx == -1 || rowList.size() == 0;
smallsql/database/Scrollable.java۞75۩}
smallsql/database/Scrollable.java۞78۩boolean isFirst(){
smallsql/database/Scrollable.java۞79۩return rowIdx == 0 && rowList.size()>0;
smallsql/database/Scrollable.java۞80۩}
smallsql/database/Scrollable.java۞83۩boolean first() throws Exception {
smallsql/database/Scrollable.java۞84۩rowIdx = -1;
smallsql/database/Scrollable.java۞85۩return next();
smallsql/database/Scrollable.java۞86۩}
smallsql/database/Scrollable.java۞89۩boolean previous() throws Exception{
smallsql/database/Scrollable.java۞90۩if(rowIdx > -1){
smallsql/database/Scrollable.java۞91۩rowIdx--;
smallsql/database/Scrollable.java۞92۩if(rowIdx > -1 && rowIdx < rowList.size()){
smallsql/database/Scrollable.java۞93۩rowSource.setRowPosition( rowList.get(rowIdx) );
smallsql/database/Scrollable.java۞94۩return true;
smallsql/database/Scrollable.java۞95۩}
smallsql/database/Scrollable.java۞96۩}
smallsql/database/Scrollable.java۞97۩rowSource.beforeFirst();
smallsql/database/Scrollable.java۞98۩return false;
smallsql/database/Scrollable.java۞99۩}
smallsql/database/Scrollable.java۞102۩boolean next() throws Exception {
smallsql/database/Scrollable.java۞103۩if(++rowIdx < rowList.size()){
smallsql/database/Scrollable.java۞104۩rowSource.setRowPosition( rowList.get(rowIdx) );
smallsql/database/Scrollable.java۞105۩return true;
smallsql/database/Scrollable.java۞106۩}
smallsql/database/Scrollable.java۞107۩final boolean result = rowSource.next();
smallsql/database/Scrollable.java۞108۩if(result){
smallsql/database/Scrollable.java۞109۩rowList.add( rowSource.getRowPosition());
smallsql/database/Scrollable.java۞110۩return true;
smallsql/database/Scrollable.java۞111۩}
smallsql/database/Scrollable.java۞112۩rowIdx = rowList.size();
smallsql/database/Scrollable.java۞113۩return false;
smallsql/database/Scrollable.java۞114۩}
smallsql/database/Scrollable.java۞117۩boolean last() throws Exception{
smallsql/database/Scrollable.java۞118۩afterLast();
smallsql/database/Scrollable.java۞119۩return previous();
smallsql/database/Scrollable.java۞120۩}
smallsql/database/Scrollable.java۞123۩boolean isLast() throws Exception{
smallsql/database/Scrollable.java۞124۩if(rowIdx+1 != rowList.size()){
smallsql/database/Scrollable.java۞127۩return false;
smallsql/database/Scrollable.java۞128۩}
smallsql/database/Scrollable.java۞129۩boolean isNext = next();
smallsql/database/Scrollable.java۞130۩previous();
smallsql/database/Scrollable.java۞131۩return !isNext && (rowIdx+1 == rowList.size() && rowList.size()>0);
smallsql/database/Scrollable.java۞132۩}
smallsql/database/Scrollable.java۞134۩boolean isAfterLast() throws Exception{
smallsql/database/Scrollable.java۞135۩if(rowIdx >= rowList.size()) return true;
smallsql/database/Scrollable.java۞136۩if(isBeforeFirst() && rowList.size() == 0){
smallsql/database/Scrollable.java۞137۩next();
smallsql/database/Scrollable.java۞138۩previous();
smallsql/database/Scrollable.java۞139۩if(rowList.size() == 0) return true;
smallsql/database/Scrollable.java۞140۩}
smallsql/database/Scrollable.java۞141۩return false;
smallsql/database/Scrollable.java۞142۩}
smallsql/database/Scrollable.java۞145۩void afterLast() throws Exception {
smallsql/database/Scrollable.java۞146۩if(rowIdx+1 < rowList.size()){
smallsql/database/Scrollable.java۞147۩rowIdx = rowList.size()-1;
smallsql/database/Scrollable.java۞148۩rowSource.setRowPosition( rowList.get(rowIdx) );
smallsql/database/Scrollable.java۞149۩}
smallsql/database/Scrollable.java۞150۩while(next()){}
smallsql/database/Scrollable.java۞151۩}
smallsql/database/Scrollable.java۞154۩boolean absolute(int row) throws Exception{
smallsql/database/Scrollable.java۞155۩if(row == 0)
smallsql/database/Scrollable.java۞156۩throw SmallSQLException.create(Language.ROW_0_ABSOLUTE);
smallsql/database/Scrollable.java۞157۩if(row < 0){
smallsql/database/Scrollable.java۞158۩afterLast();
smallsql/database/Scrollable.java۞159۩rowIdx = rowList.size() + row;
smallsql/database/Scrollable.java۞160۩if(rowIdx < 0){
smallsql/database/Scrollable.java۞161۩beforeFirst();
smallsql/database/Scrollable.java۞162۩return false;
smallsql/database/Scrollable.java۞163۩}else{
smallsql/database/Scrollable.java۞164۩rowSource.setRowPosition( rowList.get(rowIdx) );
smallsql/database/Scrollable.java۞165۩return true;
smallsql/database/Scrollable.java۞166۩}
smallsql/database/Scrollable.java۞167۩}
smallsql/database/Scrollable.java۞168۩if(row <= rowList.size()){
smallsql/database/Scrollable.java۞169۩rowIdx = row-1;
smallsql/database/Scrollable.java۞170۩rowSource.setRowPosition( rowList.get(rowIdx) );
smallsql/database/Scrollable.java۞171۩return true;
smallsql/database/Scrollable.java۞172۩}
smallsql/database/Scrollable.java۞174۩rowIdx = rowList.size()-1;
smallsql/database/Scrollable.java۞175۩if(rowIdx >= 0)
smallsql/database/Scrollable.java۞176۩rowSource.setRowPosition( rowList.get(rowIdx) );
smallsql/database/Scrollable.java۞177۩boolean result;
smallsql/database/Scrollable.java۞178۩while((result = next()) && row-1 > rowIdx){}
smallsql/database/Scrollable.java۞179۩return result;
smallsql/database/Scrollable.java۞180۩}
smallsql/database/Scrollable.java۞183۩boolean relative(int rows) throws Exception{
smallsql/database/Scrollable.java۞184۩int newRow = rows + rowIdx + 1;
smallsql/database/Scrollable.java۞185۩if(newRow <= 0){
smallsql/database/Scrollable.java۞186۩beforeFirst();
smallsql/database/Scrollable.java۞187۩return false;
smallsql/database/Scrollable.java۞188۩}else{
smallsql/database/Scrollable.java۞189۩return absolute(newRow);
smallsql/database/Scrollable.java۞190۩}
smallsql/database/Scrollable.java۞191۩}
smallsql/database/Scrollable.java۞194۩int getRow() throws Exception {
smallsql/database/Scrollable.java۞195۩if(rowIdx >= rowList.size()) return 0;
smallsql/database/Scrollable.java۞196۩return rowIdx + 1;
smallsql/database/Scrollable.java۞197۩}
smallsql/database/Scrollable.java۞200۩long getRowPosition() {
smallsql/database/Scrollable.java۞201۩return rowIdx;
smallsql/database/Scrollable.java۞202۩}
smallsql/database/Scrollable.java۞205۩void setRowPosition(long rowPosition) throws Exception {
smallsql/database/Scrollable.java۞206۩rowIdx = (int)rowPosition;
smallsql/database/Scrollable.java۞207۩}
smallsql/database/Scrollable.java۞210۩final boolean rowInserted(){
smallsql/database/Scrollable.java۞211۩return rowSource.rowInserted();
smallsql/database/Scrollable.java۞212۩}
smallsql/database/Scrollable.java۞215۩final boolean rowDeleted(){
smallsql/database/Scrollable.java۞216۩return rowSource.rowDeleted();
smallsql/database/Scrollable.java۞217۩}
smallsql/database/Scrollable.java۞220۩void nullRow() {
smallsql/database/Scrollable.java۞221۩rowSource.nullRow();
smallsql/database/Scrollable.java۞222۩rowIdx = -1;
smallsql/database/Scrollable.java۞223۩}
smallsql/database/Scrollable.java۞226۩void noRow() {
smallsql/database/Scrollable.java۞227۩rowSource.noRow();
smallsql/database/Scrollable.java۞228۩rowIdx = -1;
smallsql/database/Scrollable.java۞229۩}
smallsql/database/Scrollable.java۞232۩void execute() throws Exception{
smallsql/database/Scrollable.java۞233۩rowSource.execute();
smallsql/database/Scrollable.java۞234۩rowList.clear();
smallsql/database/Scrollable.java۞235۩rowIdx = -1;
smallsql/database/Scrollable.java۞236۩}
smallsql/database/Scrollable.java۞242۩boolean isExpressionsFromThisRowSource(Expressions columns){
smallsql/database/Scrollable.java۞243۩return rowSource.isExpressionsFromThisRowSource(columns);
smallsql/database/Scrollable.java۞244۩}
smallsql/database/Scrollable.java۞245۩}
smallsql/database/SmallSQLException.java۞33۩package smallsql.database;
smallsql/database/SmallSQLException.java۞35۩import java.io.PrintStream;
smallsql/database/SmallSQLException.java۞36۩import java.io.PrintWriter;
smallsql/database/SmallSQLException.java۞37۩import java.sql.DriverManager;
smallsql/database/SmallSQLException.java۞38۩import java.sql.SQLException;
smallsql/database/SmallSQLException.java۞39۩import java.text.MessageFormat;
smallsql/database/SmallSQLException.java۞41۩import smallsql.database.language.Language;
smallsql/database/SmallSQLException.java۞47۩class SmallSQLException extends SQLException {
smallsql/database/SmallSQLException.java۞48۩private static final long serialVersionUID = -1683756623665114L;
smallsql/database/SmallSQLException.java۞49۩private boolean isInit;
smallsql/database/SmallSQLException.java۞50۩private static Language language;
smallsql/database/SmallSQLException.java۞58۩private SmallSQLException(String message, String vendorCode) {
smallsql/database/SmallSQLException.java۞59۩super("[SmallSQL]" + message, vendorCode, 0);
smallsql/database/SmallSQLException.java۞60۩init();
smallsql/database/SmallSQLException.java۞61۩}
smallsql/database/SmallSQLException.java۞71۩private SmallSQLException(Throwable throwable, String message, String vendorCode) {
smallsql/database/SmallSQLException.java۞72۩super("[SmallSQL]" + message, vendorCode, 0);
smallsql/database/SmallSQLException.java۞73۩this.initCause(throwable);
smallsql/database/SmallSQLException.java۞74۩init();
smallsql/database/SmallSQLException.java۞75۩}
smallsql/database/SmallSQLException.java۞77۩private void init(){
smallsql/database/SmallSQLException.java۞78۩this.isInit = true;
smallsql/database/SmallSQLException.java۞79۩PrintWriter pw = DriverManager.getLogWriter();
smallsql/database/SmallSQLException.java۞80۩if(pw != null) this.printStackTrace(pw);
smallsql/database/SmallSQLException.java۞81۩}
smallsql/database/SmallSQLException.java۞93۩static void setLanguage(Object localeObj) throws SQLException {
smallsql/database/SmallSQLException.java۞95۩if (language != null && localeObj == null) return;
smallsql/database/SmallSQLException.java۞97۩if (localeObj == null) {
smallsql/database/SmallSQLException.java۞98۩language = Language.getDefaultLanguage();
smallsql/database/SmallSQLException.java۞99۩}
smallsql/database/SmallSQLException.java۞100۩else {
smallsql/database/SmallSQLException.java۞101۩language = Language.getLanguage(localeObj.toString());
smallsql/database/SmallSQLException.java۞102۩}
smallsql/database/SmallSQLException.java۞103۩}
smallsql/database/SmallSQLException.java۞105۩public void printStackTrace(){
smallsql/database/SmallSQLException.java۞106۩if(!isInit) return;
smallsql/database/SmallSQLException.java۞107۩super.printStackTrace();
smallsql/database/SmallSQLException.java۞108۩}
smallsql/database/SmallSQLException.java۞110۩public void printStackTrace(PrintStream ps){
smallsql/database/SmallSQLException.java۞111۩if(!isInit) return;
smallsql/database/SmallSQLException.java۞112۩super.printStackTrace(ps);
smallsql/database/SmallSQLException.java۞113۩}
smallsql/database/SmallSQLException.java۞115۩public void printStackTrace(PrintWriter pw){
smallsql/database/SmallSQLException.java۞116۩if(!isInit) return;
smallsql/database/SmallSQLException.java۞117۩super.printStackTrace(pw);
smallsql/database/SmallSQLException.java۞118۩}
smallsql/database/SmallSQLException.java۞124۩static SQLException create( String messageCode ) {
smallsql/database/SmallSQLException.java۞125۩assert (messageCode != null): "Fill parameters";
smallsql/database/SmallSQLException.java۞127۩String message = translateMsg(messageCode, null);
smallsql/database/SmallSQLException.java۞128۩String sqlState = language.getSqlState(messageCode);
smallsql/database/SmallSQLException.java۞129۩return new SmallSQLException(message, sqlState);
smallsql/database/SmallSQLException.java۞130۩}
smallsql/database/SmallSQLException.java۞144۩static SQLException create( String messageCode, Object param0 ) {
smallsql/database/SmallSQLException.java۞145۩String message = translateMsg(messageCode, new Object[] { param0 });
smallsql/database/SmallSQLException.java۞146۩String sqlState = language.getSqlState(messageCode);
smallsql/database/SmallSQLException.java۞147۩return new SmallSQLException(message, sqlState);
smallsql/database/SmallSQLException.java۞148۩}
smallsql/database/SmallSQLException.java۞150۩static SQLException create( String messageCode, Object[] params ) {
smallsql/database/SmallSQLException.java۞151۩String message = translateMsg(messageCode, params);
smallsql/database/SmallSQLException.java۞152۩String sqlState = language.getSqlState(messageCode);
smallsql/database/SmallSQLException.java۞153۩return new SmallSQLException(message, sqlState);
smallsql/database/SmallSQLException.java۞154۩}
smallsql/database/SmallSQLException.java۞156۩static SQLException createFromException( Throwable e ){
smallsql/database/SmallSQLException.java۞157۩if(e instanceof SQLException) {
smallsql/database/SmallSQLException.java۞158۩return (SQLException)e;
smallsql/database/SmallSQLException.java۞159۩}
smallsql/database/SmallSQLException.java۞160۩else {
smallsql/database/SmallSQLException.java۞161۩String message = stripMsg(e);
smallsql/database/SmallSQLException.java۞162۩String sqlState = language.getSqlState(Language.CUSTOM_MESSAGE);
smallsql/database/SmallSQLException.java۞163۩return new SmallSQLException(e, message, sqlState);
smallsql/database/SmallSQLException.java۞164۩}
smallsql/database/SmallSQLException.java۞165۩}
smallsql/database/SmallSQLException.java۞179۩static SQLException createFromException( String messageCode, Object param0,
smallsql/database/SmallSQLException.java۞180۩Throwable e )
smallsql/database/SmallSQLException.java۞181۩{
smallsql/database/SmallSQLException.java۞182۩String message = translateMsg(messageCode, new Object[] { param0 });
smallsql/database/SmallSQLException.java۞183۩String sqlState = language.getSqlState(messageCode);
smallsql/database/SmallSQLException.java۞184۩return new SmallSQLException(e, message, sqlState);
smallsql/database/SmallSQLException.java۞185۩}
smallsql/database/SmallSQLException.java۞205۩static String translateMsg(String messageCode, Object[] params) {
smallsql/database/SmallSQLException.java۞206۩assert ( messageCode != null && params != null ): "Fill parameters. msgCode=" + messageCode + " params=" + params;
smallsql/database/SmallSQLException.java۞208۩String localized = language.getMessage(messageCode);
smallsql/database/SmallSQLException.java۞209۩return MessageFormat.format(localized, params);
smallsql/database/SmallSQLException.java۞210۩}
smallsql/database/SmallSQLException.java۞215۩private static String stripMsg(Throwable throwable) {
smallsql/database/SmallSQLException.java۞216۩String msg = throwable.getMessage();
smallsql/database/SmallSQLException.java۞217۩if(msg == null || msg.length() < 30){
smallsql/database/SmallSQLException.java۞218۩String msg2 = throwable.getClass().getName();
smallsql/database/SmallSQLException.java۞219۩msg2 = msg2.substring(msg2.lastIndexOf('.')+1);
smallsql/database/SmallSQLException.java۞220۩if(msg != null)
smallsql/database/SmallSQLException.java۞221۩msg2 = msg2 + ':' + msg;
smallsql/database/SmallSQLException.java۞222۩return msg2;
smallsql/database/SmallSQLException.java۞223۩}
smallsql/database/SmallSQLException.java۞225۩return throwable.getMessage();
smallsql/database/SmallSQLException.java۞226۩}
smallsql/database/SmallSQLException.java۞227۩}
smallsql/database/SortedResult.java۞33۩package smallsql.database;
smallsql/database/SortedResult.java۞35۩import smallsql.database.language.Language;
smallsql/database/SortedResult.java۞42۩final class SortedResult extends RowSource {
smallsql/database/SortedResult.java۞44۩final private Expressions orderBy;
smallsql/database/SortedResult.java۞48۩final private RowSource rowSource;
smallsql/database/SortedResult.java۞52۩private IndexScrollStatus scrollStatus;
smallsql/database/SortedResult.java۞56۩private int row;
smallsql/database/SortedResult.java۞60۩private final LongList insertedRows = new LongList();
smallsql/database/SortedResult.java۞61۩private boolean useSetRowPosition;
smallsql/database/SortedResult.java۞65۩private int sortedRowCount;
smallsql/database/SortedResult.java۞70۩private long lastRowOffset;
smallsql/database/SortedResult.java۞73۩SortedResult(RowSource rowSource, Expressions orderBy){
smallsql/database/SortedResult.java۞74۩this.rowSource = rowSource;
smallsql/database/SortedResult.java۞75۩this.orderBy = orderBy;
smallsql/database/SortedResult.java۞76۩}
smallsql/database/SortedResult.java۞79۩final boolean isScrollable(){
smallsql/database/SortedResult.java۞80۩return true;
smallsql/database/SortedResult.java۞81۩}
smallsql/database/SortedResult.java۞84۩final void execute() throws Exception{
smallsql/database/SortedResult.java۞85۩rowSource.execute();
smallsql/database/SortedResult.java۞86۩Index index = new Index(false);
smallsql/database/SortedResult.java۞87۩lastRowOffset = -1;
smallsql/database/SortedResult.java۞88۩while(rowSource.next()){
smallsql/database/SortedResult.java۞89۩lastRowOffset = rowSource.getRowPosition();
smallsql/database/SortedResult.java۞90۩index.addValues( lastRowOffset, orderBy);
smallsql/database/SortedResult.java۞91۩sortedRowCount++;
smallsql/database/SortedResult.java۞92۩}
smallsql/database/SortedResult.java۞93۩scrollStatus = index.createScrollStatus(orderBy);
smallsql/database/SortedResult.java۞94۩useSetRowPosition = false;
smallsql/database/SortedResult.java۞95۩}
smallsql/database/SortedResult.java۞98۩final boolean isBeforeFirst(){
smallsql/database/SortedResult.java۞99۩return row == 0;
smallsql/database/SortedResult.java۞100۩}
smallsql/database/SortedResult.java۞103۩final boolean isFirst(){
smallsql/database/SortedResult.java۞104۩return row == 1;
smallsql/database/SortedResult.java۞105۩}
smallsql/database/SortedResult.java۞108۩void beforeFirst() throws Exception {
smallsql/database/SortedResult.java۞109۩scrollStatus.reset();
smallsql/database/SortedResult.java۞110۩row = 0;
smallsql/database/SortedResult.java۞111۩useSetRowPosition = false;
smallsql/database/SortedResult.java۞112۩}
smallsql/database/SortedResult.java۞115۩boolean first() throws Exception {
smallsql/database/SortedResult.java۞116۩beforeFirst();
smallsql/database/SortedResult.java۞117۩return next();
smallsql/database/SortedResult.java۞118۩}
smallsql/database/SortedResult.java۞121۩boolean previous() throws Exception{
smallsql/database/SortedResult.java۞122۩if(useSetRowPosition) throw SmallSQLException.create(Language.ORDERBY_INTERNAL);
smallsql/database/SortedResult.java۞123۩if(currentInsertedRow() == 0){
smallsql/database/SortedResult.java۞124۩scrollStatus.afterLast();
smallsql/database/SortedResult.java۞125۩}
smallsql/database/SortedResult.java۞126۩row--;
smallsql/database/SortedResult.java۞127۩if(currentInsertedRow() >= 0){
smallsql/database/SortedResult.java۞128۩rowSource.setRowPosition( insertedRows.get( currentInsertedRow() ) );
smallsql/database/SortedResult.java۞129۩return true;
smallsql/database/SortedResult.java۞130۩}
smallsql/database/SortedResult.java۞131۩long rowPosition = scrollStatus.getRowOffset(false);
smallsql/database/SortedResult.java۞132۩if(rowPosition >= 0){
smallsql/database/SortedResult.java۞133۩rowSource.setRowPosition( rowPosition );
smallsql/database/SortedResult.java۞134۩return true;
smallsql/database/SortedResult.java۞135۩}else{
smallsql/database/SortedResult.java۞136۩rowSource.noRow();
smallsql/database/SortedResult.java۞137۩row = 0;
smallsql/database/SortedResult.java۞138۩return false;
smallsql/database/SortedResult.java۞139۩}
smallsql/database/SortedResult.java۞140۩}
smallsql/database/SortedResult.java۞143۩boolean next() throws Exception {
smallsql/database/SortedResult.java۞144۩if(useSetRowPosition) throw SmallSQLException.create(Language.ORDERBY_INTERNAL);
smallsql/database/SortedResult.java۞145۩if(currentInsertedRow() < 0){
smallsql/database/SortedResult.java۞146۩long rowPosition = scrollStatus.getRowOffset(true);
smallsql/database/SortedResult.java۞147۩if(rowPosition >= 0){
smallsql/database/SortedResult.java۞148۩row++;
smallsql/database/SortedResult.java۞149۩rowSource.setRowPosition( rowPosition );
smallsql/database/SortedResult.java۞150۩return true;
smallsql/database/SortedResult.java۞151۩}
smallsql/database/SortedResult.java۞152۩}
smallsql/database/SortedResult.java۞153۩if(currentInsertedRow() < insertedRows.size()-1){
smallsql/database/SortedResult.java۞154۩row++;
smallsql/database/SortedResult.java۞155۩rowSource.setRowPosition( insertedRows.get( currentInsertedRow() ) );
smallsql/database/SortedResult.java۞156۩return true;
smallsql/database/SortedResult.java۞157۩}
smallsql/database/SortedResult.java۞158۩if(lastRowOffset >= 0){
smallsql/database/SortedResult.java۞159۩rowSource.setRowPosition( lastRowOffset );
smallsql/database/SortedResult.java۞160۩}else{
smallsql/database/SortedResult.java۞161۩rowSource.beforeFirst();
smallsql/database/SortedResult.java۞162۩}
smallsql/database/SortedResult.java۞163۩if(rowSource.next()){
smallsql/database/SortedResult.java۞164۩row++;
smallsql/database/SortedResult.java۞165۩lastRowOffset = rowSource.getRowPosition();
smallsql/database/SortedResult.java۞166۩insertedRows.add( lastRowOffset );
smallsql/database/SortedResult.java۞167۩return true;
smallsql/database/SortedResult.java۞168۩}
smallsql/database/SortedResult.java۞169۩rowSource.noRow();
smallsql/database/SortedResult.java۞170۩row = (getRowCount() > 0) ? getRowCount() + 1 : 0;
smallsql/database/SortedResult.java۞171۩return false;
smallsql/database/SortedResult.java۞172۩}
smallsql/database/SortedResult.java۞175۩boolean last() throws Exception{
smallsql/database/SortedResult.java۞176۩afterLast();
smallsql/database/SortedResult.java۞177۩return previous();
smallsql/database/SortedResult.java۞178۩}
smallsql/database/SortedResult.java۞181۩final boolean isLast() throws Exception{
smallsql/database/SortedResult.java۞182۩if(row == 0){
smallsql/database/SortedResult.java۞183۩return false;
smallsql/database/SortedResult.java۞184۩}
smallsql/database/SortedResult.java۞185۩if(row > getRowCount()){
smallsql/database/SortedResult.java۞186۩return false;
smallsql/database/SortedResult.java۞187۩}
smallsql/database/SortedResult.java۞188۩boolean isNext = next();
smallsql/database/SortedResult.java۞189۩previous();
smallsql/database/SortedResult.java۞190۩return !isNext;
smallsql/database/SortedResult.java۞191۩}
smallsql/database/SortedResult.java۞194۩final boolean isAfterLast(){
smallsql/database/SortedResult.java۞195۩int rowCount = getRowCount();
smallsql/database/SortedResult.java۞196۩return row > rowCount || rowCount == 0;
smallsql/database/SortedResult.java۞197۩}
smallsql/database/SortedResult.java۞200۩void afterLast() throws Exception{
smallsql/database/SortedResult.java۞201۩useSetRowPosition = false;
smallsql/database/SortedResult.java۞202۩if(sortedRowCount > 0){
smallsql/database/SortedResult.java۞203۩scrollStatus.afterLast();
smallsql/database/SortedResult.java۞204۩scrollStatus.getRowOffset(false);
smallsql/database/SortedResult.java۞205۩}else{
smallsql/database/SortedResult.java۞206۩rowSource.beforeFirst();
smallsql/database/SortedResult.java۞207۩}
smallsql/database/SortedResult.java۞208۩row = sortedRowCount;
smallsql/database/SortedResult.java۞209۩while(next()){
smallsql/database/SortedResult.java۞211۩}
smallsql/database/SortedResult.java۞212۩}
smallsql/database/SortedResult.java۞215۩boolean absolute(int newRow) throws Exception{
smallsql/database/SortedResult.java۞216۩if(newRow == 0) throw SmallSQLException.create(Language.ROW_0_ABSOLUTE);
smallsql/database/SortedResult.java۞217۩if(newRow > 0){
smallsql/database/SortedResult.java۞218۩beforeFirst();
smallsql/database/SortedResult.java۞219۩while(newRow-- > 0){
smallsql/database/SortedResult.java۞220۩if(!next()){
smallsql/database/SortedResult.java۞221۩return false;
smallsql/database/SortedResult.java۞222۩}
smallsql/database/SortedResult.java۞223۩}
smallsql/database/SortedResult.java۞224۩}else{
smallsql/database/SortedResult.java۞225۩afterLast();
smallsql/database/SortedResult.java۞226۩while(newRow++ < 0){
smallsql/database/SortedResult.java۞227۩if(!previous()){
smallsql/database/SortedResult.java۞228۩return false;
smallsql/database/SortedResult.java۞229۩}
smallsql/database/SortedResult.java۞230۩}
smallsql/database/SortedResult.java۞231۩}
smallsql/database/SortedResult.java۞232۩return true;
smallsql/database/SortedResult.java۞233۩}
smallsql/database/SortedResult.java۞236۩boolean relative(int rows) throws Exception{
smallsql/database/SortedResult.java۞237۩if(rows == 0) return (row != 0);
smallsql/database/SortedResult.java۞238۩if(rows > 0){
smallsql/database/SortedResult.java۞239۩while(rows-- > 0){
smallsql/database/SortedResult.java۞240۩if(!next()){
smallsql/database/SortedResult.java۞241۩return false;
smallsql/database/SortedResult.java۞242۩}
smallsql/database/SortedResult.java۞243۩}
smallsql/database/SortedResult.java۞244۩}else{
smallsql/database/SortedResult.java۞245۩while(rows++ < 0){
smallsql/database/SortedResult.java۞246۩if(!previous()){
smallsql/database/SortedResult.java۞247۩return false;
smallsql/database/SortedResult.java۞248۩}
smallsql/database/SortedResult.java۞249۩}
smallsql/database/SortedResult.java۞250۩}
smallsql/database/SortedResult.java۞251۩return true;
smallsql/database/SortedResult.java۞252۩}
smallsql/database/SortedResult.java۞255۩int getRow(){
smallsql/database/SortedResult.java۞256۩return row > getRowCount() ? 0 : row;
smallsql/database/SortedResult.java۞257۩}
smallsql/database/SortedResult.java۞260۩final long getRowPosition(){
smallsql/database/SortedResult.java۞261۩return rowSource.getRowPosition();
smallsql/database/SortedResult.java۞262۩}
smallsql/database/SortedResult.java۞265۩final void setRowPosition(long rowPosition) throws Exception{
smallsql/database/SortedResult.java۞266۩rowSource.setRowPosition(rowPosition);
smallsql/database/SortedResult.java۞267۩useSetRowPosition = true;
smallsql/database/SortedResult.java۞268۩}
smallsql/database/SortedResult.java۞271۩final boolean rowInserted(){
smallsql/database/SortedResult.java۞272۩return rowSource.rowInserted();
smallsql/database/SortedResult.java۞273۩}
smallsql/database/SortedResult.java۞276۩final boolean rowDeleted(){
smallsql/database/SortedResult.java۞277۩return rowSource.rowDeleted();
smallsql/database/SortedResult.java۞278۩}
smallsql/database/SortedResult.java۞281۩void nullRow() {
smallsql/database/SortedResult.java۞282۩rowSource.nullRow();
smallsql/database/SortedResult.java۞283۩row = 0;
smallsql/database/SortedResult.java۞285۩}
smallsql/database/SortedResult.java۞288۩void noRow() {
smallsql/database/SortedResult.java۞289۩rowSource.noRow();
smallsql/database/SortedResult.java۞290۩row = 0;
smallsql/database/SortedResult.java۞291۩}
smallsql/database/SortedResult.java۞297۩boolean isExpressionsFromThisRowSource(Expressions columns){
smallsql/database/SortedResult.java۞298۩return rowSource.isExpressionsFromThisRowSource(columns);
smallsql/database/SortedResult.java۞299۩}
smallsql/database/SortedResult.java۞305۩private final int getRowCount(){
smallsql/database/SortedResult.java۞306۩return sortedRowCount + insertedRows.size();
smallsql/database/SortedResult.java۞307۩}
smallsql/database/SortedResult.java۞313۩private final int currentInsertedRow(){
smallsql/database/SortedResult.java۞314۩return row - sortedRowCount - 1;
smallsql/database/SortedResult.java۞315۩}
smallsql/database/SortedResult.java۞317۩}
smallsql/database/Store.java۞33۩package smallsql.database;
smallsql/database/Store.java۞35۩import java.sql.*;
smallsql/database/Store.java۞40۩abstract class Store {
smallsql/database/Store.java۞42۩static final Store NULL = new StoreNull();
smallsql/database/Store.java۞43۩static final Store NOROW= new StoreNoCurrentRow();
smallsql/database/Store.java۞45۩abstract boolean isNull(int offset) throws Exception;
smallsql/database/Store.java۞47۩abstract boolean getBoolean( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞49۩abstract byte[] getBytes( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞51۩abstract double getDouble( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞53۩abstract float getFloat( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞55۩abstract int getInt( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞57۩abstract long getLong( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞59۩abstract long getMoney( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞61۩abstract MutableNumeric getNumeric( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞63۩abstract Object getObject( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞65۩abstract String getString( int offset, int dataType) throws Exception;
smallsql/database/Store.java۞73۩boolean isValidPage(){
smallsql/database/Store.java۞74۩return false;
smallsql/database/Store.java۞75۩}
smallsql/database/Store.java۞77۩abstract void scanObjectOffsets( int[] offsets, int dataTypes[] );
smallsql/database/Store.java۞79۩abstract int getUsedSize();
smallsql/database/Store.java۞81۩abstract long getNextPagePos();
smallsql/database/Store.java۞83۩abstract void deleteRow(SSConnection con) throws SQLException;
smallsql/database/Store.java۞84۩}
smallsql/database/StoreImpl.java۞33۩package smallsql.database;
smallsql/database/StoreImpl.java۞35۩import java.io.*;
smallsql/database/StoreImpl.java۞36۩import java.nio.ByteBuffer;
smallsql/database/StoreImpl.java۞37۩import java.nio.channels.FileChannel;
smallsql/database/StoreImpl.java۞38۩import java.sql.SQLException;
smallsql/database/StoreImpl.java۞39۩import smallsql.database.language.Language;
smallsql/database/StoreImpl.java۞41۩public class StoreImpl extends Store {
smallsql/database/StoreImpl.java۞43۩private static final int DEFAULT_PAGE_SIZE = 8192;
smallsql/database/StoreImpl.java۞44۩private static final int PAGE_MAGIC = 0x12DD13DE;
smallsql/database/StoreImpl.java۞54۩private static final int PAGE_CONTROL_SIZE = 28;
smallsql/database/StoreImpl.java۞55۩private static final byte[] page_control = new byte[PAGE_CONTROL_SIZE];
smallsql/database/StoreImpl.java۞56۩private static final ByteBuffer pageControlBuffer = ByteBuffer.wrap(page_control);
smallsql/database/StoreImpl.java۞57۩private int status;
smallsql/database/StoreImpl.java۞58۩private static final int NORMAL = 0;
smallsql/database/StoreImpl.java۞59۩private static final int DELETED = 1;
smallsql/database/StoreImpl.java۞67۩private static final int UPDATE_POINTER = 2;
smallsql/database/StoreImpl.java۞68۩private static final int UPDATED_PAGE = 3;
smallsql/database/StoreImpl.java۞70۩final private Table table;
smallsql/database/StoreImpl.java۞72۩private byte[] page;
smallsql/database/StoreImpl.java۞74۩private boolean sharedPageData;
smallsql/database/StoreImpl.java۞75۩private StorePage storePage;
smallsql/database/StoreImpl.java۞76۩private long filePos;
smallsql/database/StoreImpl.java۞77۩private int sizeUsed;
smallsql/database/StoreImpl.java۞78۩private int sizePhysical;
smallsql/database/StoreImpl.java۞79۩private int nextPageOffset;
smallsql/database/StoreImpl.java۞80۩private long filePosUpdated;
smallsql/database/StoreImpl.java۞81۩private int type;
smallsql/database/StoreImpl.java۞83۩private StoreImpl updatePointer;
smallsql/database/StoreImpl.java۞85۩private StoreImpl( Table table, StorePage storePage, int type, long filePos ){
smallsql/database/StoreImpl.java۞86۩this.table     = table;
smallsql/database/StoreImpl.java۞87۩this.storePage    = storePage;
smallsql/database/StoreImpl.java۞88۩this.filePos   = filePos;
smallsql/database/StoreImpl.java۞89۩this.type      = type;
smallsql/database/StoreImpl.java۞90۩}
smallsql/database/StoreImpl.java۞101۩static StoreImpl createStore( Table table, StorePage storePage, int type, long filePos ) throws SQLException{
smallsql/database/StoreImpl.java۞102۩try {
smallsql/database/StoreImpl.java۞103۩StoreImpl store = new StoreImpl(table, storePage, type, filePos);
smallsql/database/StoreImpl.java۞104۩switch(type){
smallsql/database/StoreImpl.java۞105۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞107۩store.page = new byte[(int)filePos + PAGE_CONTROL_SIZE];
smallsql/database/StoreImpl.java۞108۩store.filePos = -1;
smallsql/database/StoreImpl.java۞109۩break;
smallsql/database/StoreImpl.java۞110۩case SQLTokenizer.INSERT:
smallsql/database/StoreImpl.java۞111۩case SQLTokenizer.CREATE:
smallsql/database/StoreImpl.java۞112۩store.page = new byte[DEFAULT_PAGE_SIZE];
smallsql/database/StoreImpl.java۞113۩break;
smallsql/database/StoreImpl.java۞114۩case SQLTokenizer.SELECT:
smallsql/database/StoreImpl.java۞115۩case SQLTokenizer.UPDATE:
smallsql/database/StoreImpl.java۞116۩case SQLTokenizer.DELETE:
smallsql/database/StoreImpl.java۞117۩if(storePage.page == null){
smallsql/database/StoreImpl.java۞118۩FileChannel raFile = storePage.raFile;
smallsql/database/StoreImpl.java۞119۩synchronized(raFile){
smallsql/database/StoreImpl.java۞120۩if(filePos >= raFile.size() - PAGE_CONTROL_SIZE){
smallsql/database/StoreImpl.java۞121۩return null;
smallsql/database/StoreImpl.java۞122۩}
smallsql/database/StoreImpl.java۞123۩raFile.position(filePos);
smallsql/database/StoreImpl.java۞124۩synchronized(page_control){
smallsql/database/StoreImpl.java۞125۩pageControlBuffer.position(0);
smallsql/database/StoreImpl.java۞126۩raFile.read(pageControlBuffer);
smallsql/database/StoreImpl.java۞127۩store.page = page_control;
smallsql/database/StoreImpl.java۞128۩store.readPageHeader();
smallsql/database/StoreImpl.java۞129۩}
smallsql/database/StoreImpl.java۞130۩store.page = new byte[store.sizeUsed];
smallsql/database/StoreImpl.java۞131۩raFile.position(filePos);
smallsql/database/StoreImpl.java۞132۩ByteBuffer buffer = ByteBuffer.wrap(store.page);
smallsql/database/StoreImpl.java۞133۩raFile.read(buffer);
smallsql/database/StoreImpl.java۞134۩}
smallsql/database/StoreImpl.java۞135۩}else{
smallsql/database/StoreImpl.java۞136۩store.page = storePage.page;
smallsql/database/StoreImpl.java۞137۩store.sharedPageData = true;
smallsql/database/StoreImpl.java۞138۩store.readPageHeader();
smallsql/database/StoreImpl.java۞139۩}
smallsql/database/StoreImpl.java۞140۩store = store.loadUpdatedStore();
smallsql/database/StoreImpl.java۞141۩break;
smallsql/database/StoreImpl.java۞142۩default: throw new Error();
smallsql/database/StoreImpl.java۞143۩}
smallsql/database/StoreImpl.java۞144۩store.offset = PAGE_CONTROL_SIZE;
smallsql/database/StoreImpl.java۞145۩return store;
smallsql/database/StoreImpl.java۞146۩} catch (Throwable th) {
smallsql/database/StoreImpl.java۞147۩throw SmallSQLException.createFromException(th);
smallsql/database/StoreImpl.java۞148۩}
smallsql/database/StoreImpl.java۞149۩}
smallsql/database/StoreImpl.java۞155۩static StoreImpl recreateStore( Table table, StorePage storePage, int type) throws Exception{
smallsql/database/StoreImpl.java۞156۩StoreImpl store = new StoreImpl(table, storePage, type, -1);
smallsql/database/StoreImpl.java۞157۩store.page = storePage.page;
smallsql/database/StoreImpl.java۞158۩store.sharedPageData = true;
smallsql/database/StoreImpl.java۞159۩store.readPageHeader();
smallsql/database/StoreImpl.java۞160۩store = store.loadUpdatedStore();
smallsql/database/StoreImpl.java۞161۩store.offset = PAGE_CONTROL_SIZE;
smallsql/database/StoreImpl.java۞162۩return store;
smallsql/database/StoreImpl.java۞163۩}
smallsql/database/StoreImpl.java۞166۩private final void readPageHeader() throws SQLException{
smallsql/database/StoreImpl.java۞167۩if(readInt() != PAGE_MAGIC){
smallsql/database/StoreImpl.java۞168۩throw SmallSQLException.create(Language.TABLE_CORRUPT_PAGE, new Object[] { new Long(filePos) });
smallsql/database/StoreImpl.java۞169۩}
smallsql/database/StoreImpl.java۞170۩status = readInt();
smallsql/database/StoreImpl.java۞171۩sizeUsed  = readInt();
smallsql/database/StoreImpl.java۞172۩sizePhysical = readInt();
smallsql/database/StoreImpl.java۞173۩nextPageOffset = readInt();
smallsql/database/StoreImpl.java۞174۩filePosUpdated = readLong();
smallsql/database/StoreImpl.java۞175۩}
smallsql/database/StoreImpl.java۞183۩final private StoreImpl loadUpdatedStore() throws Exception{
smallsql/database/StoreImpl.java۞184۩if(status != UPDATE_POINTER) return this;
smallsql/database/StoreImpl.java۞185۩StoreImpl storeTemp = table.getStore( ((TableStorePage)storePage).con, filePosUpdated, type);
smallsql/database/StoreImpl.java۞186۩storeTemp.updatePointer = this;
smallsql/database/StoreImpl.java۞187۩return storeTemp;
smallsql/database/StoreImpl.java۞188۩}
smallsql/database/StoreImpl.java۞191۩private void resizePage(int minNewSize){
smallsql/database/StoreImpl.java۞192۩int newSize = Math.max(minNewSize, page.length*2);
smallsql/database/StoreImpl.java۞193۩byte[] newPage = new byte[newSize];
smallsql/database/StoreImpl.java۞194۩System.arraycopy( page, 0, newPage, 0, page.length);
smallsql/database/StoreImpl.java۞195۩page = newPage;
smallsql/database/StoreImpl.java۞196۩}
smallsql/database/StoreImpl.java۞199۩@Override
smallsql/database/StoreImpl.java۞200۩boolean isValidPage(){
smallsql/database/StoreImpl.java۞201۩return status == NORMAL || (status == UPDATED_PAGE && updatePointer != null);
smallsql/database/StoreImpl.java۞202۩}
smallsql/database/StoreImpl.java۞204۩@Override
smallsql/database/StoreImpl.java۞205۩int getUsedSize(){
smallsql/database/StoreImpl.java۞206۩return sizeUsed;
smallsql/database/StoreImpl.java۞207۩}
smallsql/database/StoreImpl.java۞209۩@Override
smallsql/database/StoreImpl.java۞210۩long getNextPagePos(){
smallsql/database/StoreImpl.java۞211۩if(updatePointer != null) return updatePointer.getNextPagePos();
smallsql/database/StoreImpl.java۞212۩if(nextPageOffset <= 0){
smallsql/database/StoreImpl.java۞213۩nextPageOffset = sizePhysical;
smallsql/database/StoreImpl.java۞214۩}
smallsql/database/StoreImpl.java۞215۩return filePos + nextPageOffset;
smallsql/database/StoreImpl.java۞216۩}
smallsql/database/StoreImpl.java۞225۩long writeFinsh(SSConnection con) throws SQLException{
smallsql/database/StoreImpl.java۞226۩switch(type){
smallsql/database/StoreImpl.java۞227۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞228۩case SQLTokenizer.INSERT:
smallsql/database/StoreImpl.java۞229۩case SQLTokenizer.CREATE:
smallsql/database/StoreImpl.java۞230۩sizeUsed = sizePhysical = offset;
smallsql/database/StoreImpl.java۞231۩break;
smallsql/database/StoreImpl.java۞232۩case SQLTokenizer.UPDATE:
smallsql/database/StoreImpl.java۞233۩if(status != UPDATE_POINTER) {
smallsql/database/StoreImpl.java۞234۩sizeUsed = offset;
smallsql/database/StoreImpl.java۞235۩break;
smallsql/database/StoreImpl.java۞236۩}
smallsql/database/StoreImpl.java۞237۩case SQLTokenizer.DELETE:
smallsql/database/StoreImpl.java۞238۩sizeUsed = PAGE_CONTROL_SIZE;
smallsql/database/StoreImpl.java۞239۩break;
smallsql/database/StoreImpl.java۞241۩default: throw new Error(""+type);
smallsql/database/StoreImpl.java۞242۩}
smallsql/database/StoreImpl.java۞243۩offset = 0;
smallsql/database/StoreImpl.java۞244۩writeInt( PAGE_MAGIC );
smallsql/database/StoreImpl.java۞245۩writeInt( status);
smallsql/database/StoreImpl.java۞246۩writeInt( sizeUsed );
smallsql/database/StoreImpl.java۞247۩writeInt( sizePhysical );
smallsql/database/StoreImpl.java۞248۩writeInt( 0 );
smallsql/database/StoreImpl.java۞249۩writeLong( filePosUpdated );
smallsql/database/StoreImpl.java۞250۩storePage.setPageData( page, sizeUsed );
smallsql/database/StoreImpl.java۞251۩if(con == null){
smallsql/database/StoreImpl.java۞254۩return storePage.commit();
smallsql/database/StoreImpl.java۞255۩}else{
smallsql/database/StoreImpl.java۞256۩return 0;
smallsql/database/StoreImpl.java۞257۩}
smallsql/database/StoreImpl.java۞258۩}
smallsql/database/StoreImpl.java۞267۩final void createWriteLock() throws SQLException{
smallsql/database/StoreImpl.java۞268۩TableStorePage storePageWrite = table.requestWriteLock( ((TableStorePage)storePage).con, (TableStorePage)storePage );
smallsql/database/StoreImpl.java۞269۩if(storePageWrite == null)
smallsql/database/StoreImpl.java۞270۩throw SmallSQLException.create(Language.ROW_LOCKED);
smallsql/database/StoreImpl.java۞271۩storePage = storePageWrite;
smallsql/database/StoreImpl.java۞272۩}
smallsql/database/StoreImpl.java۞278۩void updateFinsh(SSConnection con, StoreImpl newData) throws SQLException{
smallsql/database/StoreImpl.java۞279۩type = SQLTokenizer.UPDATE;
smallsql/database/StoreImpl.java۞281۩if(newData.offset <= sizePhysical || filePos == -1){
smallsql/database/StoreImpl.java۞283۩page = newData.page;
smallsql/database/StoreImpl.java۞284۩offset = newData.offset;
smallsql/database/StoreImpl.java۞285۩if(sizePhysical < offset) sizePhysical = offset;
smallsql/database/StoreImpl.java۞286۩writeFinsh(con);
smallsql/database/StoreImpl.java۞287۩}else{
smallsql/database/StoreImpl.java۞289۩newData.status = UPDATED_PAGE;
smallsql/database/StoreImpl.java۞290۩if(updatePointer == null){
smallsql/database/StoreImpl.java۞292۩((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;
smallsql/database/StoreImpl.java۞293۩filePosUpdated = newData.writeFinsh(null);
smallsql/database/StoreImpl.java۞294۩status = UPDATE_POINTER;
smallsql/database/StoreImpl.java۞295۩}else{
smallsql/database/StoreImpl.java۞297۩((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;
smallsql/database/StoreImpl.java۞298۩updatePointer.filePosUpdated = newData.writeFinsh(null);
smallsql/database/StoreImpl.java۞299۩updatePointer.status = UPDATE_POINTER;
smallsql/database/StoreImpl.java۞300۩updatePointer.type = SQLTokenizer.UPDATE;
smallsql/database/StoreImpl.java۞301۩updatePointer.createWriteLock();
smallsql/database/StoreImpl.java۞302۩if(updatePointer.sharedPageData){
smallsql/database/StoreImpl.java۞303۩updatePointer.page = new byte[PAGE_CONTROL_SIZE];
smallsql/database/StoreImpl.java۞304۩}
smallsql/database/StoreImpl.java۞305۩updatePointer.writeFinsh(con);
smallsql/database/StoreImpl.java۞306۩status = DELETED;
smallsql/database/StoreImpl.java۞307۩if(sharedPageData){
smallsql/database/StoreImpl.java۞308۩page = new byte[PAGE_CONTROL_SIZE];
smallsql/database/StoreImpl.java۞309۩}
smallsql/database/StoreImpl.java۞310۩}
smallsql/database/StoreImpl.java۞311۩writeFinsh(con);
smallsql/database/StoreImpl.java۞312۩}
smallsql/database/StoreImpl.java۞313۩}
smallsql/database/StoreImpl.java۞320۩private int offset;
smallsql/database/StoreImpl.java۞323۩int getCurrentOffsetInPage(){
smallsql/database/StoreImpl.java۞324۩return offset;
smallsql/database/StoreImpl.java۞325۩}
smallsql/database/StoreImpl.java۞328۩void setCurrentOffsetInPage(int newOffset){
smallsql/database/StoreImpl.java۞329۩this.offset = newOffset;
smallsql/database/StoreImpl.java۞330۩}
smallsql/database/StoreImpl.java۞333۩void writeByte( int value ){
smallsql/database/StoreImpl.java۞334۩int newSize = offset + 1;
smallsql/database/StoreImpl.java۞335۩if(newSize > page.length) resizePage(newSize);
smallsql/database/StoreImpl.java۞337۩page[ offset++ ] = (byte)(value);
smallsql/database/StoreImpl.java۞338۩}
smallsql/database/StoreImpl.java۞340۩int readByte(){
smallsql/database/StoreImpl.java۞341۩return page[ offset++ ];
smallsql/database/StoreImpl.java۞342۩}
smallsql/database/StoreImpl.java۞344۩int readUnsignedByte(){
smallsql/database/StoreImpl.java۞345۩return page[ offset++ ] & 0xFF;
smallsql/database/StoreImpl.java۞346۩}
smallsql/database/StoreImpl.java۞348۩void writeBoolean( boolean value ){
smallsql/database/StoreImpl.java۞349۩int newSize = offset + 1;
smallsql/database/StoreImpl.java۞350۩if(newSize > page.length) resizePage(newSize);
smallsql/database/StoreImpl.java۞352۩page[ offset++ ] = (byte)(value ? 1 : 0);
smallsql/database/StoreImpl.java۞353۩}
smallsql/database/StoreImpl.java۞355۩boolean readBoolean(){
smallsql/database/StoreImpl.java۞356۩return page[ offset++ ] != 0;
smallsql/database/StoreImpl.java۞357۩}
smallsql/database/StoreImpl.java۞359۩void writeShort( int value ){
smallsql/database/StoreImpl.java۞360۩int newSize = offset + 2;
smallsql/database/StoreImpl.java۞361۩if(newSize > page.length) resizePage(newSize);
smallsql/database/StoreImpl.java۞363۩page[ offset++ ] = (byte)(value >> 8);
smallsql/database/StoreImpl.java۞364۩page[ offset++ ] = (byte)(value);
smallsql/database/StoreImpl.java۞365۩}
smallsql/database/StoreImpl.java۞367۩int readShort(){
smallsql/database/StoreImpl.java۞368۩return (page[ offset++ ] << 8) | (page[ offset++ ] & 0xFF);
smallsql/database/StoreImpl.java۞369۩}
smallsql/database/StoreImpl.java۞371۩void writeInt( int value ){
smallsql/database/StoreImpl.java۞372۩int newSize = offset + 4;
smallsql/database/StoreImpl.java۞373۩if(newSize > page.length) resizePage(newSize);
smallsql/database/StoreImpl.java۞375۩page[ offset++ ] = (byte)(value >> 24);
smallsql/database/StoreImpl.java۞376۩page[ offset++ ] = (byte)(value >> 16);
smallsql/database/StoreImpl.java۞377۩page[ offset++ ] = (byte)(value >> 8);
smallsql/database/StoreImpl.java۞378۩page[ offset++ ] = (byte)(value);
smallsql/database/StoreImpl.java۞379۩}
smallsql/database/StoreImpl.java۞381۩int readInt(){
smallsql/database/StoreImpl.java۞382۩return  ((page[ offset++ ]) << 24) |
smallsql/database/StoreImpl.java۞383۩((page[ offset++ ] & 0xFF) << 16) |
smallsql/database/StoreImpl.java۞384۩((page[ offset++ ] & 0xFF) << 8) |
smallsql/database/StoreImpl.java۞385۩((page[ offset++ ] & 0xFF));
smallsql/database/StoreImpl.java۞386۩}
smallsql/database/StoreImpl.java۞388۩void writeLong( long value ){
smallsql/database/StoreImpl.java۞389۩int newSize = offset + 8;
smallsql/database/StoreImpl.java۞390۩if(newSize > page.length) resizePage(newSize);
smallsql/database/StoreImpl.java۞392۩page[ offset++ ] = (byte)(value >> 56);
smallsql/database/StoreImpl.java۞393۩page[ offset++ ] = (byte)(value >> 48);
smallsql/database/StoreImpl.java۞394۩page[ offset++ ] = (byte)(value >> 40);
smallsql/database/StoreImpl.java۞395۩page[ offset++ ] = (byte)(value >> 32);
smallsql/database/StoreImpl.java۞396۩page[ offset++ ] = (byte)(value >> 24);
smallsql/database/StoreImpl.java۞397۩page[ offset++ ] = (byte)(value >> 16);
smallsql/database/StoreImpl.java۞398۩page[ offset++ ] = (byte)(value >> 8);
smallsql/database/StoreImpl.java۞399۩page[ offset++ ] = (byte)(value);
smallsql/database/StoreImpl.java۞400۩}
smallsql/database/StoreImpl.java۞402۩long readLong(){
smallsql/database/StoreImpl.java۞404۩return  ((long)(page[ offset++ ]) << 56) |
smallsql/database/StoreImpl.java۞405۩((long)(page[ offset++ ] & 0xFF) << 48) |
smallsql/database/StoreImpl.java۞406۩((long)(page[ offset++ ] & 0xFF) << 40) |
smallsql/database/StoreImpl.java۞407۩((long)(page[ offset++ ] & 0xFF) << 32) |
smallsql/database/StoreImpl.java۞408۩((long)(page[ offset++ ] & 0xFF) << 24) |
smallsql/database/StoreImpl.java۞409۩((page[ offset++ ] & 0xFF) << 16) |
smallsql/database/StoreImpl.java۞410۩((page[ offset++ ] & 0xFF) << 8) |
smallsql/database/StoreImpl.java۞411۩((page[ offset++ ] & 0xFF));
smallsql/database/StoreImpl.java۞412۩}
smallsql/database/StoreImpl.java۞414۩void writeDouble(double value){
smallsql/database/StoreImpl.java۞415۩writeLong( Double.doubleToLongBits(value) );
smallsql/database/StoreImpl.java۞416۩}
smallsql/database/StoreImpl.java۞418۩double readDouble(){
smallsql/database/StoreImpl.java۞419۩return Double.longBitsToDouble( readLong() );
smallsql/database/StoreImpl.java۞420۩}
smallsql/database/StoreImpl.java۞422۩void writeFloat(float value){
smallsql/database/StoreImpl.java۞423۩writeInt( Float.floatToIntBits(value) );
smallsql/database/StoreImpl.java۞424۩}
smallsql/database/StoreImpl.java۞426۩float readFloat(){
smallsql/database/StoreImpl.java۞427۩return Float.intBitsToFloat( readInt() );
smallsql/database/StoreImpl.java۞428۩}
smallsql/database/StoreImpl.java۞430۩void writeNumeric( MutableNumeric num){
smallsql/database/StoreImpl.java۞431۩writeByte( num.getInternalValue().length );
smallsql/database/StoreImpl.java۞432۩writeByte( num.getScale() );
smallsql/database/StoreImpl.java۞433۩writeByte( num.getSignum() );
smallsql/database/StoreImpl.java۞434۩for(int i=0; i<num.getInternalValue().length; i++){
smallsql/database/StoreImpl.java۞435۩writeInt( num.getInternalValue()[i] );
smallsql/database/StoreImpl.java۞436۩}
smallsql/database/StoreImpl.java۞437۩}
smallsql/database/StoreImpl.java۞439۩MutableNumeric readNumeric(){
smallsql/database/StoreImpl.java۞440۩int[] value = new int[ readByte() ];
smallsql/database/StoreImpl.java۞441۩int scale   = readByte();
smallsql/database/StoreImpl.java۞442۩int signum  = readByte();
smallsql/database/StoreImpl.java۞443۩for(int i=0; i<value.length; i++){
smallsql/database/StoreImpl.java۞444۩value[i] = readInt();
smallsql/database/StoreImpl.java۞445۩}
smallsql/database/StoreImpl.java۞446۩return new MutableNumeric( signum, value, scale );
smallsql/database/StoreImpl.java۞447۩}
smallsql/database/StoreImpl.java۞449۩void writeTimestamp( long ts){
smallsql/database/StoreImpl.java۞450۩writeLong( ts );
smallsql/database/StoreImpl.java۞451۩}
smallsql/database/StoreImpl.java۞453۩long readTimestamp(){
smallsql/database/StoreImpl.java۞454۩return readLong();
smallsql/database/StoreImpl.java۞455۩}
smallsql/database/StoreImpl.java۞457۩void writeTime( long time){
smallsql/database/StoreImpl.java۞458۩writeInt( (int)((time / 1000) % 86400) );
smallsql/database/StoreImpl.java۞459۩}
smallsql/database/StoreImpl.java۞461۩long readTime(){
smallsql/database/StoreImpl.java۞462۩return readInt() * 1000L;
smallsql/database/StoreImpl.java۞463۩}
smallsql/database/StoreImpl.java۞465۩void writeDate( long date){
smallsql/database/StoreImpl.java۞466۩writeInt( (int)(date / 86400000));
smallsql/database/StoreImpl.java۞467۩}
smallsql/database/StoreImpl.java۞469۩long readDate(){
smallsql/database/StoreImpl.java۞470۩return readInt() * 86400000L;
smallsql/database/StoreImpl.java۞471۩}
smallsql/database/StoreImpl.java۞473۩void writeSmallDateTime( long datetime){
smallsql/database/StoreImpl.java۞474۩writeInt( (int)(datetime / 60000));
smallsql/database/StoreImpl.java۞475۩}
smallsql/database/StoreImpl.java۞477۩long readSmallDateTime(){
smallsql/database/StoreImpl.java۞478۩return readInt() * 60000L;
smallsql/database/StoreImpl.java۞479۩}
smallsql/database/StoreImpl.java۞481۩void writeString( String strDaten ) throws SQLException{
smallsql/database/StoreImpl.java۞482۩writeString( strDaten, Short.MAX_VALUE, true );
smallsql/database/StoreImpl.java۞483۩}
smallsql/database/StoreImpl.java۞485۩void writeString( String strDaten, int lengthColumn, boolean varchar ) throws SQLException{
smallsql/database/StoreImpl.java۞486۩char[] daten = strDaten.toCharArray();
smallsql/database/StoreImpl.java۞487۩int length = daten.length;
smallsql/database/StoreImpl.java۞489۩if(lengthColumn < length){
smallsql/database/StoreImpl.java۞490۩throw SmallSQLException.create(Language.VALUE_STR_TOOLARGE);
smallsql/database/StoreImpl.java۞491۩}
smallsql/database/StoreImpl.java۞492۩if(varchar) lengthColumn = length;
smallsql/database/StoreImpl.java۞493۩int newSize = offset + 2 + 2*lengthColumn;
smallsql/database/StoreImpl.java۞494۩if(newSize > page.length) resizePage(newSize);
smallsql/database/StoreImpl.java۞496۩writeShort( lengthColumn );
smallsql/database/StoreImpl.java۞497۩writeChars( daten );
smallsql/database/StoreImpl.java۞498۩for(int i=length; i<lengthColumn; i++){
smallsql/database/StoreImpl.java۞499۩page[ offset++ ] = ' ';
smallsql/database/StoreImpl.java۞500۩page[ offset++ ] = 0;
smallsql/database/StoreImpl.java۞501۩}
smallsql/database/StoreImpl.java۞502۩}
smallsql/database/StoreImpl.java۞504۩String readString(){
smallsql/database/StoreImpl.java۞505۩int length = readShort() & 0xFFFF;
smallsql/database/StoreImpl.java۞506۩return new String( readChars(length) );
smallsql/database/StoreImpl.java۞507۩}
smallsql/database/StoreImpl.java۞509۩void writeBytes(byte[] daten){
smallsql/database/StoreImpl.java۞510۩int newSize = offset + daten.length;
smallsql/database/StoreImpl.java۞511۩if(newSize > page.length) resizePage(newSize );
smallsql/database/StoreImpl.java۞512۩System.arraycopy( daten, 0, page, offset, daten.length);
smallsql/database/StoreImpl.java۞513۩offset += daten.length;
smallsql/database/StoreImpl.java۞514۩}
smallsql/database/StoreImpl.java۞516۩void writeBytes(byte[] daten, int off, int length){
smallsql/database/StoreImpl.java۞517۩int newSize = offset + length;
smallsql/database/StoreImpl.java۞518۩if(newSize > page.length) resizePage(newSize );
smallsql/database/StoreImpl.java۞519۩System.arraycopy( daten, off, page, offset, length);
smallsql/database/StoreImpl.java۞520۩offset += length;
smallsql/database/StoreImpl.java۞521۩}
smallsql/database/StoreImpl.java۞523۩byte[] readBytes(int length){
smallsql/database/StoreImpl.java۞524۩byte[] daten = new byte[length];
smallsql/database/StoreImpl.java۞525۩System.arraycopy( page, offset, daten, 0, length);
smallsql/database/StoreImpl.java۞526۩offset += length;
smallsql/database/StoreImpl.java۞527۩return daten;
smallsql/database/StoreImpl.java۞528۩}
smallsql/database/StoreImpl.java۞530۩void writeBinary( byte[] daten, int lengthColumn, boolean varBinary ) throws SQLException{
smallsql/database/StoreImpl.java۞531۩int length = daten.length;
smallsql/database/StoreImpl.java۞533۩if(lengthColumn < length){
smallsql/database/StoreImpl.java۞534۩Object params = new Object[] { new Integer(length), new Integer(lengthColumn) };
smallsql/database/StoreImpl.java۞535۩throw SmallSQLException.create(Language.VALUE_BIN_TOOLARGE, params);
smallsql/database/StoreImpl.java۞536۩}
smallsql/database/StoreImpl.java۞537۩if(varBinary) lengthColumn = length;
smallsql/database/StoreImpl.java۞538۩int newSize = offset + 2 + lengthColumn;
smallsql/database/StoreImpl.java۞539۩if(newSize > page.length) resizePage(newSize);
smallsql/database/StoreImpl.java۞541۩page[ offset++ ] = (byte)(lengthColumn >> 8);
smallsql/database/StoreImpl.java۞542۩page[ offset++ ] = (byte)(lengthColumn);
smallsql/database/StoreImpl.java۞543۩writeBytes( daten );
smallsql/database/StoreImpl.java۞544۩if(!varBinary){
smallsql/database/StoreImpl.java۞545۩for(int i=length; i<lengthColumn; i++){
smallsql/database/StoreImpl.java۞546۩page[ offset++ ] = 0;
smallsql/database/StoreImpl.java۞547۩}
smallsql/database/StoreImpl.java۞548۩}
smallsql/database/StoreImpl.java۞549۩}
smallsql/database/StoreImpl.java۞551۩byte[] readBinary(){
smallsql/database/StoreImpl.java۞552۩int length = readShort() & 0xFFFF;
smallsql/database/StoreImpl.java۞553۩return readBytes(length);
smallsql/database/StoreImpl.java۞554۩}
smallsql/database/StoreImpl.java۞556۩void writeLongBinary( byte[] daten ) throws Exception{
smallsql/database/StoreImpl.java۞557۩StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, daten.length + 4, SQLTokenizer.LONGVARBINARY);
smallsql/database/StoreImpl.java۞558۩store.writeInt( daten.length );
smallsql/database/StoreImpl.java۞559۩store.writeBytes( daten );
smallsql/database/StoreImpl.java۞560۩writeLong( store.writeFinsh(null) );
smallsql/database/StoreImpl.java۞561۩}
smallsql/database/StoreImpl.java۞563۩byte[] readLongBinary() throws Exception{
smallsql/database/StoreImpl.java۞564۩long lobFilePos = readLong();
smallsql/database/StoreImpl.java۞565۩StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );
smallsql/database/StoreImpl.java۞566۩return store.readBytes( store.readInt() );
smallsql/database/StoreImpl.java۞567۩}
smallsql/database/StoreImpl.java۞569۩void writeChars(char[] daten){
smallsql/database/StoreImpl.java۞570۩int length = daten.length;
smallsql/database/StoreImpl.java۞571۩int newSize = offset + 2*length;
smallsql/database/StoreImpl.java۞572۩if(newSize > page.length) resizePage(newSize );
smallsql/database/StoreImpl.java۞573۩for(int i=0; i<length; i++){
smallsql/database/StoreImpl.java۞574۩char c = daten[i];
smallsql/database/StoreImpl.java۞575۩page[ offset++ ] = (byte)(c);
smallsql/database/StoreImpl.java۞576۩page[ offset++ ] = (byte)(c >> 8);
smallsql/database/StoreImpl.java۞577۩}
smallsql/database/StoreImpl.java۞578۩}
smallsql/database/StoreImpl.java۞580۩char[] readChars(int length){
smallsql/database/StoreImpl.java۞581۩char[] daten = new char[length];
smallsql/database/StoreImpl.java۞582۩for(int i=0; i<length; i++){
smallsql/database/StoreImpl.java۞583۩daten[i] = (char)((page[ offset++ ] & 0xFF) | (page[ offset++ ] << 8));
smallsql/database/StoreImpl.java۞584۩}
smallsql/database/StoreImpl.java۞585۩return daten;
smallsql/database/StoreImpl.java۞586۩}
smallsql/database/StoreImpl.java۞588۩void writeLongString(String daten) throws Exception{
smallsql/database/StoreImpl.java۞589۩char[] chars = daten.toCharArray();
smallsql/database/StoreImpl.java۞590۩StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, chars.length * 2L + 4, SQLTokenizer.LONGVARBINARY);
smallsql/database/StoreImpl.java۞591۩store.writeInt( chars.length );
smallsql/database/StoreImpl.java۞592۩store.writeChars( chars );
smallsql/database/StoreImpl.java۞593۩writeLong( store.writeFinsh(null) );
smallsql/database/StoreImpl.java۞594۩}
smallsql/database/StoreImpl.java۞596۩String readLongString() throws Exception{
smallsql/database/StoreImpl.java۞597۩long lobFilePos = readLong();
smallsql/database/StoreImpl.java۞598۩StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );
smallsql/database/StoreImpl.java۞599۩if(store == null) throw SmallSQLException.create(Language.LOB_DELETED);
smallsql/database/StoreImpl.java۞600۩return new String(store.readChars( store.readInt() ) );
smallsql/database/StoreImpl.java۞601۩}
smallsql/database/StoreImpl.java۞604۩void writeColumn(Column column ) throws Exception{
smallsql/database/StoreImpl.java۞605۩int newSize = offset + 25;
smallsql/database/StoreImpl.java۞606۩if(newSize > page.length) resizePage(newSize);
smallsql/database/StoreImpl.java۞608۩writeByte   ( column.getFlag() );
smallsql/database/StoreImpl.java۞609۩writeString ( column.getName() );
smallsql/database/StoreImpl.java۞610۩writeShort  ( column.getDataType() );
smallsql/database/StoreImpl.java۞611۩writeInt    ( column.getPrecision() );
smallsql/database/StoreImpl.java۞612۩writeByte   ( column.getScale() );
smallsql/database/StoreImpl.java۞613۩offset += column.initAutoIncrement(storePage.raFile, filePos+offset);
smallsql/database/StoreImpl.java۞614۩String def = column.getDefaultDefinition();
smallsql/database/StoreImpl.java۞615۩writeBoolean( def == null );
smallsql/database/StoreImpl.java۞616۩if(def != null)
smallsql/database/StoreImpl.java۞617۩writeString ( column.getDefaultDefinition() );
smallsql/database/StoreImpl.java۞618۩}
smallsql/database/StoreImpl.java۞628۩Column readColumn(int tableFormatVersion) throws Exception{
smallsql/database/StoreImpl.java۞629۩Column column = new Column();
smallsql/database/StoreImpl.java۞630۩column.setFlag( readByte() );
smallsql/database/StoreImpl.java۞631۩column.setName( readString() );
smallsql/database/StoreImpl.java۞632۩column.setDataType( readShort() );
smallsql/database/StoreImpl.java۞633۩int precision;
smallsql/database/StoreImpl.java۞634۩if(tableFormatVersion == TableView.TABLE_VIEW_OLD_VERSION)
smallsql/database/StoreImpl.java۞635۩precision = readByte();
smallsql/database/StoreImpl.java۞636۩else
smallsql/database/StoreImpl.java۞637۩precision = readInt();
smallsql/database/StoreImpl.java۞638۩column.setPrecision( precision );
smallsql/database/StoreImpl.java۞639۩column.setScale( readByte() );
smallsql/database/StoreImpl.java۞640۩offset += column.initAutoIncrement(storePage.raFile, filePos+offset);
smallsql/database/StoreImpl.java۞641۩if(!readBoolean()){
smallsql/database/StoreImpl.java۞642۩String def = readString();
smallsql/database/StoreImpl.java۞643۩column.setDefaultValue( new SQLParser().parseExpression(def), def);
smallsql/database/StoreImpl.java۞644۩}
smallsql/database/StoreImpl.java۞645۩return column;
smallsql/database/StoreImpl.java۞646۩}
smallsql/database/StoreImpl.java۞649۩void copyValueFrom( StoreImpl store, int valueOffset, int length){
smallsql/database/StoreImpl.java۞650۩System.arraycopy( store.page, valueOffset, this.page, this.offset, length);
smallsql/database/StoreImpl.java۞651۩this.offset += length;
smallsql/database/StoreImpl.java۞652۩}
smallsql/database/StoreImpl.java۞663۩void writeExpression( Expression expr, Column column) throws Exception{
smallsql/database/StoreImpl.java۞664۩boolean isNull = expr.isNull();
smallsql/database/StoreImpl.java۞665۩if(isNull && !column.isNullable()){
smallsql/database/StoreImpl.java۞666۩throw SmallSQLException.create(Language.VALUE_NULL_INVALID, column.getName());
smallsql/database/StoreImpl.java۞667۩}
smallsql/database/StoreImpl.java۞668۩int dataType = column.getDataType();
smallsql/database/StoreImpl.java۞669۩if(isNull){
smallsql/database/StoreImpl.java۞670۩writeBoolean(true);
smallsql/database/StoreImpl.java۞671۩switch(dataType){
smallsql/database/StoreImpl.java۞672۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞673۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞674۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞675۩offset++;
smallsql/database/StoreImpl.java۞676۩break;
smallsql/database/StoreImpl.java۞677۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞678۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞679۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞680۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞681۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞682۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞683۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞684۩offset += 2;
smallsql/database/StoreImpl.java۞685۩break;
smallsql/database/StoreImpl.java۞686۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞687۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞688۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞689۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞690۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞691۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞692۩offset += 4;
smallsql/database/StoreImpl.java۞693۩break;
smallsql/database/StoreImpl.java۞694۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞695۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞696۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞697۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞698۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞699۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞700۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞701۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞702۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞703۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞704۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞705۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞706۩offset += 8;
smallsql/database/StoreImpl.java۞707۩break;
smallsql/database/StoreImpl.java۞708۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/StoreImpl.java۞709۩offset += 16;
smallsql/database/StoreImpl.java۞710۩break;
smallsql/database/StoreImpl.java۞711۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞712۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞713۩offset += 3;
smallsql/database/StoreImpl.java۞714۩break;
smallsql/database/StoreImpl.java۞715۩default: throw new Error();
smallsql/database/StoreImpl.java۞716۩}
smallsql/database/StoreImpl.java۞717۩return;
smallsql/database/StoreImpl.java۞718۩}
smallsql/database/StoreImpl.java۞719۩writeBoolean(false);
smallsql/database/StoreImpl.java۞720۩column.setNewAutoIncrementValue(expr);
smallsql/database/StoreImpl.java۞721۩switch(dataType){
smallsql/database/StoreImpl.java۞722۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞723۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞724۩writeBoolean( expr.getBoolean() );
smallsql/database/StoreImpl.java۞725۩break;
smallsql/database/StoreImpl.java۞726۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞727۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞728۩writeBinary( expr.getBytes(), column.getPrecision(), dataType != SQLTokenizer.BINARY );
smallsql/database/StoreImpl.java۞729۩break;
smallsql/database/StoreImpl.java۞730۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞731۩writeByte( expr.getInt() );
smallsql/database/StoreImpl.java۞732۩break;
smallsql/database/StoreImpl.java۞733۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞734۩writeShort( expr.getInt() );
smallsql/database/StoreImpl.java۞735۩break;
smallsql/database/StoreImpl.java۞736۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞737۩writeInt( expr.getInt() );
smallsql/database/StoreImpl.java۞738۩break;
smallsql/database/StoreImpl.java۞739۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞740۩writeLong( expr.getLong() );
smallsql/database/StoreImpl.java۞741۩break;
smallsql/database/StoreImpl.java۞742۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞743۩writeFloat( expr.getFloat() );
smallsql/database/StoreImpl.java۞744۩break;
smallsql/database/StoreImpl.java۞745۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞746۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞747۩writeDouble( expr.getDouble() );
smallsql/database/StoreImpl.java۞748۩break;
smallsql/database/StoreImpl.java۞749۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞750۩writeLong( expr.getMoney() );
smallsql/database/StoreImpl.java۞751۩break;
smallsql/database/StoreImpl.java۞752۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞753۩writeInt( (int)expr.getMoney() );
smallsql/database/StoreImpl.java۞754۩break;
smallsql/database/StoreImpl.java۞755۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞756۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞757۩MutableNumeric numeric = expr.getNumeric();
smallsql/database/StoreImpl.java۞758۩numeric.setScale( column.getScale() );
smallsql/database/StoreImpl.java۞759۩writeNumeric( numeric );
smallsql/database/StoreImpl.java۞760۩break;
smallsql/database/StoreImpl.java۞761۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞762۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞763۩writeString( expr.getString(), column.getDisplaySize(), false );
smallsql/database/StoreImpl.java۞764۩break;
smallsql/database/StoreImpl.java۞765۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞766۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞767۩writeString( expr.getString(), column.getDisplaySize(), true );
smallsql/database/StoreImpl.java۞768۩break;
smallsql/database/StoreImpl.java۞769۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞770۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞771۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞772۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞773۩writeLongString( expr.getString() );
smallsql/database/StoreImpl.java۞774۩break;
smallsql/database/StoreImpl.java۞775۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞777۩ByteArrayOutputStream baos = new ByteArrayOutputStream();
smallsql/database/StoreImpl.java۞778۩ObjectOutputStream oos = new ObjectOutputStream(baos);
smallsql/database/StoreImpl.java۞779۩oos.writeObject( expr.getObject() );
smallsql/database/StoreImpl.java۞780۩writeLongBinary( baos.toByteArray() );
smallsql/database/StoreImpl.java۞781۩break;
smallsql/database/StoreImpl.java۞782۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞783۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞784۩writeLongBinary( expr.getBytes() );
smallsql/database/StoreImpl.java۞785۩break;
smallsql/database/StoreImpl.java۞786۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞787۩writeTimestamp( expr.getLong() );
smallsql/database/StoreImpl.java۞788۩break;
smallsql/database/StoreImpl.java۞789۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞790۩writeTime( expr.getLong() );
smallsql/database/StoreImpl.java۞791۩break;
smallsql/database/StoreImpl.java۞792۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞793۩writeDate( expr.getLong() );
smallsql/database/StoreImpl.java۞794۩break;
smallsql/database/StoreImpl.java۞795۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞796۩writeSmallDateTime( expr.getLong() );
smallsql/database/StoreImpl.java۞797۩break;
smallsql/database/StoreImpl.java۞798۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/StoreImpl.java۞799۩switch(expr.getDataType()){
smallsql/database/StoreImpl.java۞800۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/StoreImpl.java۞801۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞802۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞803۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞804۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞805۩byte[] bytes = expr.getBytes();
smallsql/database/StoreImpl.java۞806۩if(bytes.length != 16) throw SmallSQLException.create(Language.BYTEARR_INVALID_SIZE, String.valueOf(bytes.length));
smallsql/database/StoreImpl.java۞807۩writeBytes( bytes );
smallsql/database/StoreImpl.java۞808۩default:
smallsql/database/StoreImpl.java۞809۩writeBytes( Utils.unique2bytes(expr.getString()) );
smallsql/database/StoreImpl.java۞810۩}
smallsql/database/StoreImpl.java۞811۩break;
smallsql/database/StoreImpl.java۞812۩default: throw new Error(String.valueOf(column.getDataType()));
smallsql/database/StoreImpl.java۞813۩}
smallsql/database/StoreImpl.java۞814۩}
smallsql/database/StoreImpl.java۞816۩@Override
smallsql/database/StoreImpl.java۞817۩boolean isNull(int valueOffset){
smallsql/database/StoreImpl.java۞818۩return page[ valueOffset ] != 0;
smallsql/database/StoreImpl.java۞819۩}
smallsql/database/StoreImpl.java۞825۩@Override
smallsql/database/StoreImpl.java۞826۩boolean getBoolean(int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞827۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞828۩if(readBoolean()) return false;
smallsql/database/StoreImpl.java۞829۩switch(dataType){
smallsql/database/StoreImpl.java۞830۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞831۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞832۩return readBoolean();
smallsql/database/StoreImpl.java۞833۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞834۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞835۩return Utils.bytes2int( readBinary() ) != 0;
smallsql/database/StoreImpl.java۞836۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞837۩return readUnsignedByte() != 0;
smallsql/database/StoreImpl.java۞838۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞839۩return readShort() != 0;
smallsql/database/StoreImpl.java۞840۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞841۩return readInt() != 0;
smallsql/database/StoreImpl.java۞842۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞843۩return readLong() != 0;
smallsql/database/StoreImpl.java۞844۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞845۩return readFloat() != 0;
smallsql/database/StoreImpl.java۞846۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞847۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞848۩return readDouble() != 0;
smallsql/database/StoreImpl.java۞849۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞850۩return readLong() != 0;
smallsql/database/StoreImpl.java۞851۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞852۩return readInt() != 0;
smallsql/database/StoreImpl.java۞853۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞854۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞855۩return readNumeric().getSignum() != 0;
smallsql/database/StoreImpl.java۞856۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞857۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞858۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞859۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞860۩return Utils.string2boolean( readString() );
smallsql/database/StoreImpl.java۞861۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞862۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞863۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞864۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞865۩return Utils.string2boolean( readLongString() );
smallsql/database/StoreImpl.java۞866۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞867۩ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());
smallsql/database/StoreImpl.java۞868۩ObjectInputStream ois = new ObjectInputStream(bais);
smallsql/database/StoreImpl.java۞869۩return Utils.string2boolean( ois.readObject().toString() );
smallsql/database/StoreImpl.java۞870۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞871۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞872۩return Utils.bytes2int( readLongBinary() ) != 0;
smallsql/database/StoreImpl.java۞873۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞874۩return readTimestamp() != 0;
smallsql/database/StoreImpl.java۞875۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞876۩return readTime() != 0;
smallsql/database/StoreImpl.java۞877۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞878۩return readDate() != 0;
smallsql/database/StoreImpl.java۞879۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞880۩return readSmallDateTime() != 0;
smallsql/database/StoreImpl.java۞881۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/StoreImpl.java۞882۩return false;
smallsql/database/StoreImpl.java۞883۩default:
smallsql/database/StoreImpl.java۞884۩throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), "BOOLEAN" });
smallsql/database/StoreImpl.java۞885۩}
smallsql/database/StoreImpl.java۞886۩}
smallsql/database/StoreImpl.java۞892۩@Override
smallsql/database/StoreImpl.java۞893۩int getInt(int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞894۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞895۩if(readBoolean()) return 0;
smallsql/database/StoreImpl.java۞896۩switch(dataType){
smallsql/database/StoreImpl.java۞897۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞898۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞899۩return readBoolean() ? 1 : 0;
smallsql/database/StoreImpl.java۞900۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞901۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞902۩return Utils.bytes2int( readBinary() );
smallsql/database/StoreImpl.java۞903۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞904۩return readUnsignedByte();
smallsql/database/StoreImpl.java۞905۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞906۩return readShort();
smallsql/database/StoreImpl.java۞907۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞908۩return readInt();
smallsql/database/StoreImpl.java۞909۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞910۩return (int)readLong();
smallsql/database/StoreImpl.java۞911۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞912۩return (int)readFloat();
smallsql/database/StoreImpl.java۞913۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞914۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞915۩return (int)readDouble();
smallsql/database/StoreImpl.java۞916۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞917۩long longValue = readLong() / 10000;
smallsql/database/StoreImpl.java۞918۩return Utils.money2int(longValue);
smallsql/database/StoreImpl.java۞919۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞920۩return readInt() / 10000;
smallsql/database/StoreImpl.java۞921۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞922۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞923۩return readNumeric().intValue();
smallsql/database/StoreImpl.java۞924۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞925۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞926۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞927۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞928۩return Integer.parseInt( readString() );
smallsql/database/StoreImpl.java۞929۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞930۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞931۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞932۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞933۩return Integer.parseInt( readLongString() );
smallsql/database/StoreImpl.java۞934۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞935۩ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());
smallsql/database/StoreImpl.java۞936۩ObjectInputStream ois = new ObjectInputStream(bais);
smallsql/database/StoreImpl.java۞937۩return ExpressionValue.getInt(ois.readObject().toString(), SQLTokenizer.VARCHAR);
smallsql/database/StoreImpl.java۞938۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞939۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞940۩return Utils.bytes2int( readLongBinary() );
smallsql/database/StoreImpl.java۞941۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞942۩return (int)readTimestamp();
smallsql/database/StoreImpl.java۞943۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞944۩return (int)readTime();
smallsql/database/StoreImpl.java۞945۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞946۩return (int)readDate();
smallsql/database/StoreImpl.java۞947۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞948۩return (int)readSmallDateTime();
smallsql/database/StoreImpl.java۞949۩default:
smallsql/database/StoreImpl.java۞950۩throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), "INT" });
smallsql/database/StoreImpl.java۞951۩}
smallsql/database/StoreImpl.java۞952۩}
smallsql/database/StoreImpl.java۞958۩@Override
smallsql/database/StoreImpl.java۞959۩long getLong(int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞960۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞961۩if(readBoolean()) return 0;
smallsql/database/StoreImpl.java۞962۩switch(dataType){
smallsql/database/StoreImpl.java۞963۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞964۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞965۩return readBoolean() ? 1 : 0;
smallsql/database/StoreImpl.java۞966۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞967۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞968۩return Utils.bytes2long( readBinary() );
smallsql/database/StoreImpl.java۞969۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞970۩return readUnsignedByte();
smallsql/database/StoreImpl.java۞971۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞972۩return readShort();
smallsql/database/StoreImpl.java۞973۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞974۩return readInt();
smallsql/database/StoreImpl.java۞975۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞976۩return readLong();
smallsql/database/StoreImpl.java۞977۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞978۩return (long)readFloat();
smallsql/database/StoreImpl.java۞979۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞980۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞981۩return (long)readDouble();
smallsql/database/StoreImpl.java۞982۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞983۩return readLong() / 10000;
smallsql/database/StoreImpl.java۞984۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞985۩return readInt() / 10000;
smallsql/database/StoreImpl.java۞986۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞987۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞988۩return readNumeric().longValue();
smallsql/database/StoreImpl.java۞989۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞990۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞991۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞992۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞993۩return Long.parseLong( readString() );
smallsql/database/StoreImpl.java۞994۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞995۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞996۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞997۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞998۩return Long.parseLong( readLongString() );
smallsql/database/StoreImpl.java۞999۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞1000۩ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());
smallsql/database/StoreImpl.java۞1001۩ObjectInputStream ois = new ObjectInputStream(bais);
smallsql/database/StoreImpl.java۞1002۩return ExpressionValue.getLong( ois.readObject().toString(), SQLTokenizer.VARCHAR );
smallsql/database/StoreImpl.java۞1003۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞1004۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞1005۩return Utils.bytes2long( readLongBinary() );
smallsql/database/StoreImpl.java۞1006۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞1007۩return readTimestamp();
smallsql/database/StoreImpl.java۞1008۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞1009۩return readTime();
smallsql/database/StoreImpl.java۞1010۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞1011۩return readDate();
smallsql/database/StoreImpl.java۞1012۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞1013۩return readSmallDateTime();
smallsql/database/StoreImpl.java۞1014۩default:
smallsql/database/StoreImpl.java۞1015۩throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), "BIGINT" });
smallsql/database/StoreImpl.java۞1016۩}
smallsql/database/StoreImpl.java۞1017۩}
smallsql/database/StoreImpl.java۞1023۩@Override
smallsql/database/StoreImpl.java۞1024۩float getFloat(int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞1025۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞1026۩if(readBoolean()) return 0;
smallsql/database/StoreImpl.java۞1027۩switch(dataType){
smallsql/database/StoreImpl.java۞1028۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞1029۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞1030۩return readBoolean() ? 1 : 0;
smallsql/database/StoreImpl.java۞1031۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞1032۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞1033۩return Utils.bytes2float( readBinary() );
smallsql/database/StoreImpl.java۞1034۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞1035۩return readUnsignedByte();
smallsql/database/StoreImpl.java۞1036۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞1037۩return readShort();
smallsql/database/StoreImpl.java۞1038۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞1039۩return readInt();
smallsql/database/StoreImpl.java۞1040۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞1041۩return readLong();
smallsql/database/StoreImpl.java۞1042۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞1043۩return readFloat();
smallsql/database/StoreImpl.java۞1044۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞1045۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞1046۩return (float)readDouble();
smallsql/database/StoreImpl.java۞1047۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞1048۩return readLong() / (float)10000.0;
smallsql/database/StoreImpl.java۞1049۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞1050۩return readInt() / (float)10000.0;
smallsql/database/StoreImpl.java۞1051۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞1052۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞1053۩return readNumeric().floatValue();
smallsql/database/StoreImpl.java۞1054۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞1055۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞1056۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞1057۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞1058۩return Float.parseFloat( readString() );
smallsql/database/StoreImpl.java۞1059۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞1060۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞1061۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞1062۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞1063۩return Float.parseFloat( readLongString() );
smallsql/database/StoreImpl.java۞1064۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞1065۩ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());
smallsql/database/StoreImpl.java۞1066۩ObjectInputStream ois = new ObjectInputStream(bais);
smallsql/database/StoreImpl.java۞1067۩return Float.parseFloat( ois.readObject().toString() );
smallsql/database/StoreImpl.java۞1068۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞1069۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞1070۩return Utils.bytes2float( readLongBinary() );
smallsql/database/StoreImpl.java۞1071۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞1072۩return readTimestamp();
smallsql/database/StoreImpl.java۞1073۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞1074۩return readTime();
smallsql/database/StoreImpl.java۞1075۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞1076۩return readDate();
smallsql/database/StoreImpl.java۞1077۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞1078۩return readSmallDateTime();
smallsql/database/StoreImpl.java۞1079۩default:
smallsql/database/StoreImpl.java۞1080۩throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), "REAL" });
smallsql/database/StoreImpl.java۞1081۩}
smallsql/database/StoreImpl.java۞1082۩}
smallsql/database/StoreImpl.java۞1088۩@Override
smallsql/database/StoreImpl.java۞1089۩double getDouble(int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞1090۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞1091۩if(readBoolean()) return 0;
smallsql/database/StoreImpl.java۞1092۩switch(dataType){
smallsql/database/StoreImpl.java۞1093۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞1094۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞1095۩return readBoolean() ? 1 : 0;
smallsql/database/StoreImpl.java۞1096۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞1097۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞1098۩return Utils.bytes2double( readBinary() );
smallsql/database/StoreImpl.java۞1099۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞1100۩return readUnsignedByte();
smallsql/database/StoreImpl.java۞1101۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞1102۩return readShort();
smallsql/database/StoreImpl.java۞1103۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞1104۩return readInt();
smallsql/database/StoreImpl.java۞1105۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞1106۩return readLong();
smallsql/database/StoreImpl.java۞1107۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞1108۩return readFloat();
smallsql/database/StoreImpl.java۞1109۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞1110۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞1111۩return readDouble();
smallsql/database/StoreImpl.java۞1112۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞1113۩return readLong() / 10000.0;
smallsql/database/StoreImpl.java۞1114۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞1115۩return readInt() / 10000.0;
smallsql/database/StoreImpl.java۞1116۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞1117۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞1118۩return readNumeric().doubleValue();
smallsql/database/StoreImpl.java۞1119۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞1120۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞1121۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞1122۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞1123۩return Double.parseDouble( readString() );
smallsql/database/StoreImpl.java۞1124۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞1125۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞1126۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞1127۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞1128۩return Double.parseDouble( readLongString() );
smallsql/database/StoreImpl.java۞1129۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞1130۩ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());
smallsql/database/StoreImpl.java۞1131۩ObjectInputStream ois = new ObjectInputStream(bais);
smallsql/database/StoreImpl.java۞1132۩return Double.parseDouble( ois.readObject().toString() );
smallsql/database/StoreImpl.java۞1133۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞1134۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞1135۩return Utils.bytes2double( readLongBinary() );
smallsql/database/StoreImpl.java۞1136۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞1137۩return readTimestamp();
smallsql/database/StoreImpl.java۞1138۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞1139۩return readTime();
smallsql/database/StoreImpl.java۞1140۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞1141۩return readDate();
smallsql/database/StoreImpl.java۞1142۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞1143۩return readSmallDateTime();
smallsql/database/StoreImpl.java۞1144۩default:
smallsql/database/StoreImpl.java۞1145۩throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), "NUMERIC" });
smallsql/database/StoreImpl.java۞1146۩}
smallsql/database/StoreImpl.java۞1147۩}
smallsql/database/StoreImpl.java۞1150۩@Override
smallsql/database/StoreImpl.java۞1151۩long getMoney( int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞1152۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞1153۩if(readBoolean()) return 0;
smallsql/database/StoreImpl.java۞1154۩switch(dataType){
smallsql/database/StoreImpl.java۞1155۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞1156۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞1157۩return readBoolean() ? 10000 : 0;
smallsql/database/StoreImpl.java۞1158۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞1159۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞1160۩return (long)(Utils.bytes2double( readBinary() ) * 10000L);
smallsql/database/StoreImpl.java۞1161۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞1162۩return readUnsignedByte() * 10000L;
smallsql/database/StoreImpl.java۞1163۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞1164۩return readShort() * 10000L;
smallsql/database/StoreImpl.java۞1165۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞1166۩return readInt() * 10000L;
smallsql/database/StoreImpl.java۞1167۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞1168۩return readLong() * 10000L;
smallsql/database/StoreImpl.java۞1169۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞1170۩return (long)(readFloat() * 10000L);
smallsql/database/StoreImpl.java۞1171۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞1172۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞1173۩return (long)(readDouble() * 10000L);
smallsql/database/StoreImpl.java۞1174۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞1175۩return readLong();
smallsql/database/StoreImpl.java۞1176۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞1177۩return readInt();
smallsql/database/StoreImpl.java۞1178۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞1179۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞1180۩return (long)(readNumeric().doubleValue() * 10000L);
smallsql/database/StoreImpl.java۞1181۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞1182۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞1183۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞1184۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞1185۩return Money.parseMoney( readString() );
smallsql/database/StoreImpl.java۞1186۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞1187۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞1188۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞1189۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞1190۩return Money.parseMoney( readLongString() );
smallsql/database/StoreImpl.java۞1191۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞1192۩ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());
smallsql/database/StoreImpl.java۞1193۩ObjectInputStream ois = new ObjectInputStream(bais);
smallsql/database/StoreImpl.java۞1194۩return Money.parseMoney( ois.readObject().toString() );
smallsql/database/StoreImpl.java۞1195۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞1196۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞1197۩return (long)(Utils.bytes2double( readLongBinary() ) * 10000L);
smallsql/database/StoreImpl.java۞1198۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞1199۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞1200۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞1201۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞1202۩throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), "MONEY" });
smallsql/database/StoreImpl.java۞1203۩default: throw new Error();
smallsql/database/StoreImpl.java۞1204۩}
smallsql/database/StoreImpl.java۞1205۩}
smallsql/database/StoreImpl.java۞1211۩@Override
smallsql/database/StoreImpl.java۞1212۩MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞1213۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞1214۩if(readBoolean()) return null;
smallsql/database/StoreImpl.java۞1215۩switch(dataType){
smallsql/database/StoreImpl.java۞1216۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞1217۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞1218۩return readBoolean() ? new MutableNumeric(1) : new MutableNumeric(0);
smallsql/database/StoreImpl.java۞1219۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞1220۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞1221۩return new MutableNumeric(Utils.bytes2double( readBinary() ));
smallsql/database/StoreImpl.java۞1222۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞1223۩return new MutableNumeric(readUnsignedByte());
smallsql/database/StoreImpl.java۞1224۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞1225۩return new MutableNumeric(readShort());
smallsql/database/StoreImpl.java۞1226۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞1227۩return new MutableNumeric(readInt());
smallsql/database/StoreImpl.java۞1228۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞1229۩return new MutableNumeric(readLong());
smallsql/database/StoreImpl.java۞1230۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞1231۩return new MutableNumeric(readFloat());
smallsql/database/StoreImpl.java۞1232۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞1233۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞1234۩return new MutableNumeric(readDouble());
smallsql/database/StoreImpl.java۞1235۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞1236۩return new MutableNumeric( readLong(), 4);
smallsql/database/StoreImpl.java۞1237۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞1238۩return new MutableNumeric( readInt(), 4);
smallsql/database/StoreImpl.java۞1239۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞1240۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞1241۩return readNumeric();
smallsql/database/StoreImpl.java۞1242۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞1243۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞1244۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞1245۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞1246۩return new MutableNumeric( readString() );
smallsql/database/StoreImpl.java۞1247۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞1248۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞1249۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞1250۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞1251۩return new MutableNumeric( readLongString() );
smallsql/database/StoreImpl.java۞1252۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞1253۩ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());
smallsql/database/StoreImpl.java۞1254۩ObjectInputStream ois = new ObjectInputStream(bais);
smallsql/database/StoreImpl.java۞1255۩return new MutableNumeric( ois.readObject().toString() );
smallsql/database/StoreImpl.java۞1256۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞1257۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞1258۩return new MutableNumeric( Utils.bytes2double( readLongBinary() ) );
smallsql/database/StoreImpl.java۞1259۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞1260۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞1261۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞1262۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞1263۩throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), "NUMERIC" });
smallsql/database/StoreImpl.java۞1265۩default: throw new Error();
smallsql/database/StoreImpl.java۞1266۩}
smallsql/database/StoreImpl.java۞1267۩}
smallsql/database/StoreImpl.java۞1273۩@Override
smallsql/database/StoreImpl.java۞1274۩Object getObject(int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞1275۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞1276۩if(readBoolean()) return null;
smallsql/database/StoreImpl.java۞1277۩switch(dataType){
smallsql/database/StoreImpl.java۞1278۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞1279۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞1280۩return readBoolean() ? Boolean.TRUE : Boolean.FALSE;
smallsql/database/StoreImpl.java۞1281۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞1282۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞1283۩return readBinary();
smallsql/database/StoreImpl.java۞1284۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞1285۩return Utils.getInteger( readUnsignedByte() );
smallsql/database/StoreImpl.java۞1286۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞1287۩return Utils.getInteger( readShort() );
smallsql/database/StoreImpl.java۞1288۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞1289۩return Utils.getInteger(readInt());
smallsql/database/StoreImpl.java۞1290۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞1291۩return new Long(readLong());
smallsql/database/StoreImpl.java۞1292۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞1293۩return new Float( readFloat() );
smallsql/database/StoreImpl.java۞1294۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞1295۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞1296۩return new Double( readDouble() );
smallsql/database/StoreImpl.java۞1297۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞1298۩return Money.createFromUnscaledValue(readLong());
smallsql/database/StoreImpl.java۞1299۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞1300۩return Money.createFromUnscaledValue(readInt());
smallsql/database/StoreImpl.java۞1301۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞1302۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞1303۩return readNumeric();
smallsql/database/StoreImpl.java۞1304۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞1305۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞1306۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞1307۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞1308۩return readString();
smallsql/database/StoreImpl.java۞1309۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞1310۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞1311۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞1312۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞1313۩return readLongString();
smallsql/database/StoreImpl.java۞1314۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞1315۩ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());
smallsql/database/StoreImpl.java۞1316۩ObjectInputStream ois = new ObjectInputStream(bais);
smallsql/database/StoreImpl.java۞1317۩return ois.readObject();
smallsql/database/StoreImpl.java۞1318۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞1319۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞1320۩return readLongBinary();
smallsql/database/StoreImpl.java۞1321۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞1322۩return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP );
smallsql/database/StoreImpl.java۞1323۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞1324۩return new DateTime( readTime(), SQLTokenizer.TIME );
smallsql/database/StoreImpl.java۞1325۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞1326۩return new DateTime( readDate(), SQLTokenizer.DATE );
smallsql/database/StoreImpl.java۞1327۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞1328۩return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP );
smallsql/database/StoreImpl.java۞1329۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/StoreImpl.java۞1330۩return Utils.bytes2unique( page, this.offset);
smallsql/database/StoreImpl.java۞1331۩default: throw new Error();
smallsql/database/StoreImpl.java۞1332۩}
smallsql/database/StoreImpl.java۞1333۩}
smallsql/database/StoreImpl.java۞1339۩@Override
smallsql/database/StoreImpl.java۞1340۩String getString( int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞1341۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞1342۩if(readBoolean()) return null;
smallsql/database/StoreImpl.java۞1343۩switch(dataType){
smallsql/database/StoreImpl.java۞1344۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞1345۩return readBoolean() ? "1" : "0";
smallsql/database/StoreImpl.java۞1346۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞1347۩return String.valueOf( readBoolean() );
smallsql/database/StoreImpl.java۞1348۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞1349۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞1350۩return Utils.bytes2hex( readBinary() );
smallsql/database/StoreImpl.java۞1351۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞1352۩return String.valueOf( readUnsignedByte() );
smallsql/database/StoreImpl.java۞1353۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞1354۩return String.valueOf( readShort() );
smallsql/database/StoreImpl.java۞1355۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞1356۩return String.valueOf( readInt() );
smallsql/database/StoreImpl.java۞1357۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞1358۩return String.valueOf( readLong() );
smallsql/database/StoreImpl.java۞1359۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞1360۩return String.valueOf( readFloat() );
smallsql/database/StoreImpl.java۞1361۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞1362۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞1363۩return String.valueOf( readDouble() );
smallsql/database/StoreImpl.java۞1364۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞1365۩return Money.createFromUnscaledValue( readLong() ).toString();
smallsql/database/StoreImpl.java۞1366۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞1367۩return Money.createFromUnscaledValue( readInt() ).toString();
smallsql/database/StoreImpl.java۞1368۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞1369۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞1370۩return readNumeric().toString();
smallsql/database/StoreImpl.java۞1371۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞1372۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞1373۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞1374۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞1375۩return readString();
smallsql/database/StoreImpl.java۞1376۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞1377۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞1378۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞1379۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞1380۩return readLongString();
smallsql/database/StoreImpl.java۞1381۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞1382۩ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());
smallsql/database/StoreImpl.java۞1383۩ObjectInputStream ois = new ObjectInputStream(bais);
smallsql/database/StoreImpl.java۞1384۩return ois.readObject().toString();
smallsql/database/StoreImpl.java۞1385۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞1386۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞1387۩return Utils.bytes2hex( readLongBinary() );
smallsql/database/StoreImpl.java۞1388۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞1389۩return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP ).toString();
smallsql/database/StoreImpl.java۞1390۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞1391۩return new DateTime( readTime(), SQLTokenizer.TIME ).toString();
smallsql/database/StoreImpl.java۞1392۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞1393۩return new DateTime( readDate(), SQLTokenizer.DATE ).toString();
smallsql/database/StoreImpl.java۞1394۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞1395۩return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP ).toString();
smallsql/database/StoreImpl.java۞1396۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/StoreImpl.java۞1397۩return Utils.bytes2unique( page, this.offset);
smallsql/database/StoreImpl.java۞1398۩default: throw new Error();
smallsql/database/StoreImpl.java۞1399۩}
smallsql/database/StoreImpl.java۞1400۩}
smallsql/database/StoreImpl.java۞1406۩@Override
smallsql/database/StoreImpl.java۞1407۩byte[] getBytes(int valueOffset, int dataType) throws Exception{
smallsql/database/StoreImpl.java۞1408۩this.offset = valueOffset;
smallsql/database/StoreImpl.java۞1409۩if(readBoolean()) return null;
smallsql/database/StoreImpl.java۞1410۩switch(dataType){
smallsql/database/StoreImpl.java۞1411۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞1412۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞1413۩return readBinary();
smallsql/database/StoreImpl.java۞1414۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞1415۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞1416۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞1417۩byte[] bytes = new byte[1];
smallsql/database/StoreImpl.java۞1418۩System.arraycopy( page, valueOffset, bytes, 0, bytes.length);
smallsql/database/StoreImpl.java۞1419۩return bytes;
smallsql/database/StoreImpl.java۞1420۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞1421۩bytes = new byte[2];
smallsql/database/StoreImpl.java۞1422۩System.arraycopy( page, valueOffset, bytes, 0, bytes.length);
smallsql/database/StoreImpl.java۞1423۩return bytes;
smallsql/database/StoreImpl.java۞1424۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞1425۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞1426۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞1427۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞1428۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞1429۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞1430۩bytes = new byte[4];
smallsql/database/StoreImpl.java۞1431۩System.arraycopy( page, valueOffset, bytes, 0, bytes.length);
smallsql/database/StoreImpl.java۞1432۩return bytes;
smallsql/database/StoreImpl.java۞1433۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞1434۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞1435۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞1436۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞1437۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞1438۩bytes = new byte[8];
smallsql/database/StoreImpl.java۞1439۩System.arraycopy( page, valueOffset, bytes, 0, bytes.length);
smallsql/database/StoreImpl.java۞1440۩return bytes;
smallsql/database/StoreImpl.java۞1441۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞1442۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞1443۩return readNumeric().toByteArray();
smallsql/database/StoreImpl.java۞1444۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞1445۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞1446۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞1447۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞1448۩return readString().getBytes();
smallsql/database/StoreImpl.java۞1449۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞1450۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞1451۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞1452۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞1453۩return readLongString().getBytes();
smallsql/database/StoreImpl.java۞1454۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞1455۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞1456۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞1457۩return readLongBinary();
smallsql/database/StoreImpl.java۞1458۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/StoreImpl.java۞1459۩bytes = new byte[16];
smallsql/database/StoreImpl.java۞1460۩System.arraycopy( page, valueOffset, bytes, 0, bytes.length);
smallsql/database/StoreImpl.java۞1461۩return bytes;
smallsql/database/StoreImpl.java۞1462۩default: throw new Error();
smallsql/database/StoreImpl.java۞1463۩}
smallsql/database/StoreImpl.java۞1464۩}
smallsql/database/StoreImpl.java۞1466۩@Override
smallsql/database/StoreImpl.java۞1467۩void scanObjectOffsets( int[] offsets, int dataTypes[] ){
smallsql/database/StoreImpl.java۞1468۩offset = PAGE_CONTROL_SIZE;
smallsql/database/StoreImpl.java۞1469۩for(int i=0; i<offsets.length; i++){
smallsql/database/StoreImpl.java۞1470۩offsets[i] = offset;
smallsql/database/StoreImpl.java۞1471۩boolean isNull = readBoolean();
smallsql/database/StoreImpl.java۞1472۩switch(dataTypes[i]){
smallsql/database/StoreImpl.java۞1473۩case SQLTokenizer.BIT:
smallsql/database/StoreImpl.java۞1474۩case SQLTokenizer.BOOLEAN:
smallsql/database/StoreImpl.java۞1475۩case SQLTokenizer.TINYINT:
smallsql/database/StoreImpl.java۞1476۩offset++;
smallsql/database/StoreImpl.java۞1477۩break;
smallsql/database/StoreImpl.java۞1478۩case SQLTokenizer.SMALLINT:
smallsql/database/StoreImpl.java۞1479۩offset += 2;
smallsql/database/StoreImpl.java۞1480۩break;
smallsql/database/StoreImpl.java۞1481۩case SQLTokenizer.INT:
smallsql/database/StoreImpl.java۞1482۩case SQLTokenizer.REAL:
smallsql/database/StoreImpl.java۞1483۩case SQLTokenizer.SMALLMONEY:
smallsql/database/StoreImpl.java۞1484۩case SQLTokenizer.TIME:
smallsql/database/StoreImpl.java۞1485۩case SQLTokenizer.DATE:
smallsql/database/StoreImpl.java۞1486۩case SQLTokenizer.SMALLDATETIME:
smallsql/database/StoreImpl.java۞1487۩offset += 4;
smallsql/database/StoreImpl.java۞1488۩break;
smallsql/database/StoreImpl.java۞1489۩case SQLTokenizer.BIGINT:
smallsql/database/StoreImpl.java۞1490۩case SQLTokenizer.FLOAT:
smallsql/database/StoreImpl.java۞1491۩case SQLTokenizer.DOUBLE:
smallsql/database/StoreImpl.java۞1492۩case SQLTokenizer.MONEY:
smallsql/database/StoreImpl.java۞1493۩case SQLTokenizer.JAVA_OBJECT:
smallsql/database/StoreImpl.java۞1494۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/StoreImpl.java۞1495۩case SQLTokenizer.BLOB:
smallsql/database/StoreImpl.java۞1496۩case SQLTokenizer.CLOB:
smallsql/database/StoreImpl.java۞1497۩case SQLTokenizer.NCLOB:
smallsql/database/StoreImpl.java۞1498۩case SQLTokenizer.LONGNVARCHAR:
smallsql/database/StoreImpl.java۞1499۩case SQLTokenizer.LONGVARCHAR:
smallsql/database/StoreImpl.java۞1500۩case SQLTokenizer.TIMESTAMP:
smallsql/database/StoreImpl.java۞1501۩offset += 8;
smallsql/database/StoreImpl.java۞1502۩break;
smallsql/database/StoreImpl.java۞1503۩case SQLTokenizer.BINARY:
smallsql/database/StoreImpl.java۞1504۩case SQLTokenizer.VARBINARY:
smallsql/database/StoreImpl.java۞1505۩int count = readShort() & 0xFFFF;
smallsql/database/StoreImpl.java۞1506۩if(!isNull) offset += count;
smallsql/database/StoreImpl.java۞1507۩break;
smallsql/database/StoreImpl.java۞1508۩case SQLTokenizer.NUMERIC:
smallsql/database/StoreImpl.java۞1509۩case SQLTokenizer.DECIMAL:
smallsql/database/StoreImpl.java۞1510۩count = readByte();
smallsql/database/StoreImpl.java۞1511۩offset += 2;
smallsql/database/StoreImpl.java۞1512۩if(!isNull) offset += count*4;
smallsql/database/StoreImpl.java۞1513۩break;
smallsql/database/StoreImpl.java۞1514۩case SQLTokenizer.CHAR:
smallsql/database/StoreImpl.java۞1515۩case SQLTokenizer.NCHAR:
smallsql/database/StoreImpl.java۞1516۩case SQLTokenizer.VARCHAR:
smallsql/database/StoreImpl.java۞1517۩case SQLTokenizer.NVARCHAR:
smallsql/database/StoreImpl.java۞1518۩count = readShort() & 0xFFFF;
smallsql/database/StoreImpl.java۞1519۩if(!isNull) offset += count << 1;
smallsql/database/StoreImpl.java۞1520۩break;
smallsql/database/StoreImpl.java۞1521۩case SQLTokenizer.UNIQUEIDENTIFIER:
smallsql/database/StoreImpl.java۞1522۩offset += 16;
smallsql/database/StoreImpl.java۞1523۩break;
smallsql/database/StoreImpl.java۞1524۩default: throw new Error(String.valueOf( dataTypes[i] ) );
smallsql/database/StoreImpl.java۞1525۩}
smallsql/database/StoreImpl.java۞1526۩}
smallsql/database/StoreImpl.java۞1527۩}
smallsql/database/StoreImpl.java۞1529۩@Override
smallsql/database/StoreImpl.java۞1530۩void deleteRow(SSConnection con) throws SQLException{
smallsql/database/StoreImpl.java۞1531۩status = DELETED;
smallsql/database/StoreImpl.java۞1532۩type   = SQLTokenizer.DELETE;
smallsql/database/StoreImpl.java۞1533۩createWriteLock();
smallsql/database/StoreImpl.java۞1534۩writeFinsh(con);
smallsql/database/StoreImpl.java۞1535۩}
smallsql/database/StoreImpl.java۞1538۩StorePageLink getLink(){
smallsql/database/StoreImpl.java۞1539۩return ((TableStorePageInsert)storePage).getLink();
smallsql/database/StoreImpl.java۞1540۩}
smallsql/database/StoreImpl.java۞1545۩boolean isRollback(){
smallsql/database/StoreImpl.java۞1546۩return storePage.raFile == null;
smallsql/database/StoreImpl.java۞1547۩}
smallsql/database/StoreImpl.java۞1548۩}
smallsql/database/StoreNoCurrentRow.java۞33۩package smallsql.database;
smallsql/database/StoreNoCurrentRow.java۞35۩import java.sql.*;
smallsql/database/StoreNoCurrentRow.java۞36۩import smallsql.database.language.Language;
smallsql/database/StoreNoCurrentRow.java۞43۩public class StoreNoCurrentRow extends Store {
smallsql/database/StoreNoCurrentRow.java۞45۩private SQLException noCurrentRow(){
smallsql/database/StoreNoCurrentRow.java۞46۩return SmallSQLException.create(Language.ROW_NOCURRENT);
smallsql/database/StoreNoCurrentRow.java۞47۩}
smallsql/database/StoreNoCurrentRow.java۞50۩boolean isNull(int offset) throws SQLException {
smallsql/database/StoreNoCurrentRow.java۞51۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞52۩}
smallsql/database/StoreNoCurrentRow.java۞55۩boolean getBoolean(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞56۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞57۩}
smallsql/database/StoreNoCurrentRow.java۞60۩byte[] getBytes(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞61۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞62۩}
smallsql/database/StoreNoCurrentRow.java۞65۩double getDouble(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞66۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞67۩}
smallsql/database/StoreNoCurrentRow.java۞70۩float getFloat(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞71۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞72۩}
smallsql/database/StoreNoCurrentRow.java۞75۩int getInt(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞76۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞77۩}
smallsql/database/StoreNoCurrentRow.java۞80۩long getLong(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞81۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞82۩}
smallsql/database/StoreNoCurrentRow.java۞85۩long getMoney(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞86۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞87۩}
smallsql/database/StoreNoCurrentRow.java۞90۩MutableNumeric getNumeric(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞91۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞92۩}
smallsql/database/StoreNoCurrentRow.java۞95۩Object getObject(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞96۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞97۩}
smallsql/database/StoreNoCurrentRow.java۞100۩String getString(int offset, int dataType) throws Exception {
smallsql/database/StoreNoCurrentRow.java۞101۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞102۩}
smallsql/database/StoreNoCurrentRow.java۞106۩void scanObjectOffsets(int[] offsets, int[] dataTypes) {
smallsql/database/StoreNoCurrentRow.java۞109۩}
smallsql/database/StoreNoCurrentRow.java۞112۩int getUsedSize() {
smallsql/database/StoreNoCurrentRow.java۞114۩return 0;
smallsql/database/StoreNoCurrentRow.java۞115۩}
smallsql/database/StoreNoCurrentRow.java۞117۩long getNextPagePos(){
smallsql/database/StoreNoCurrentRow.java۞119۩return -1;
smallsql/database/StoreNoCurrentRow.java۞120۩}
smallsql/database/StoreNoCurrentRow.java۞122۩void deleteRow(SSConnection con) throws SQLException{
smallsql/database/StoreNoCurrentRow.java۞123۩throw noCurrentRow();
smallsql/database/StoreNoCurrentRow.java۞124۩}
smallsql/database/StoreNoCurrentRow.java۞125۩}
smallsql/database/StoreNull.java۞33۩package smallsql.database;
smallsql/database/StoreNull.java۞35۩import java.sql.*;
smallsql/database/StoreNull.java۞36۩import smallsql.database.language.Language;
smallsql/database/StoreNull.java۞46۩class StoreNull extends Store {
smallsql/database/StoreNull.java۞48۩private final long nextPagePos;
smallsql/database/StoreNull.java۞51۩StoreNull(){
smallsql/database/StoreNull.java۞52۩this(-1);
smallsql/database/StoreNull.java۞53۩}
smallsql/database/StoreNull.java۞56۩StoreNull(long nextPos){
smallsql/database/StoreNull.java۞57۩nextPagePos = nextPos;
smallsql/database/StoreNull.java۞58۩}
smallsql/database/StoreNull.java۞61۩final boolean isNull(int offset) {
smallsql/database/StoreNull.java۞62۩return true;
smallsql/database/StoreNull.java۞63۩}
smallsql/database/StoreNull.java۞65۩final boolean getBoolean(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞66۩return false;
smallsql/database/StoreNull.java۞67۩}
smallsql/database/StoreNull.java۞69۩final byte[] getBytes(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞70۩return null;
smallsql/database/StoreNull.java۞71۩}
smallsql/database/StoreNull.java۞74۩final double getDouble(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞75۩return 0;
smallsql/database/StoreNull.java۞76۩}
smallsql/database/StoreNull.java۞79۩final float getFloat(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞80۩return 0;
smallsql/database/StoreNull.java۞81۩}
smallsql/database/StoreNull.java۞84۩final int getInt(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞85۩return 0;
smallsql/database/StoreNull.java۞86۩}
smallsql/database/StoreNull.java۞89۩final long getLong(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞90۩return 0;
smallsql/database/StoreNull.java۞91۩}
smallsql/database/StoreNull.java۞94۩final long getMoney(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞95۩return 0;
smallsql/database/StoreNull.java۞96۩}
smallsql/database/StoreNull.java۞99۩final MutableNumeric getNumeric(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞100۩return null;
smallsql/database/StoreNull.java۞101۩}
smallsql/database/StoreNull.java۞104۩final Object getObject(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞105۩return null;
smallsql/database/StoreNull.java۞106۩}
smallsql/database/StoreNull.java۞109۩final String getString(int offset, int dataType) throws Exception {
smallsql/database/StoreNull.java۞110۩return null;
smallsql/database/StoreNull.java۞111۩}
smallsql/database/StoreNull.java۞115۩final void scanObjectOffsets(int[] offsets, int[] dataTypes) {}
smallsql/database/StoreNull.java۞118۩final int getUsedSize() {
smallsql/database/StoreNull.java۞119۩return 0;
smallsql/database/StoreNull.java۞120۩}
smallsql/database/StoreNull.java۞122۩final long getNextPagePos(){
smallsql/database/StoreNull.java۞123۩return nextPagePos;
smallsql/database/StoreNull.java۞124۩}
smallsql/database/StoreNull.java۞126۩final void deleteRow(SSConnection con) throws SQLException{
smallsql/database/StoreNull.java۞127۩if(nextPagePos >= 0){
smallsql/database/StoreNull.java۞128۩throw SmallSQLException.create(Language.ROW_DELETED);
smallsql/database/StoreNull.java۞129۩}
smallsql/database/StoreNull.java۞131۩throw new Error();
smallsql/database/StoreNull.java۞132۩}
smallsql/database/StoreNull.java۞133۩}
smallsql/database/StorePage.java۞34۩package smallsql.database;
smallsql/database/StorePage.java۞36۩import java.io.*;
smallsql/database/StorePage.java۞37۩import java.nio.ByteBuffer;
smallsql/database/StorePage.java۞38۩import java.nio.channels.FileChannel;
smallsql/database/StorePage.java۞39۩import java.sql.SQLException;
smallsql/database/StorePage.java۞44۩class StorePage extends TransactionStep{
smallsql/database/StorePage.java۞45۩byte[] page;
smallsql/database/StorePage.java۞46۩int pageSize;
smallsql/database/StorePage.java۞47۩long fileOffset;
smallsql/database/StorePage.java۞49۩StorePage(byte[] page, int pageSize, FileChannel raFile, long fileOffset){
smallsql/database/StorePage.java۞50۩super(raFile);
smallsql/database/StorePage.java۞51۩this.page = page;
smallsql/database/StorePage.java۞52۩this.pageSize = pageSize;
smallsql/database/StorePage.java۞53۩this.fileOffset = fileOffset;
smallsql/database/StorePage.java۞54۩}
smallsql/database/StorePage.java۞57۩final void setPageData(byte[] data, int size){
smallsql/database/StorePage.java۞58۩page = data;
smallsql/database/StorePage.java۞59۩pageSize = size;
smallsql/database/StorePage.java۞60۩}
smallsql/database/StorePage.java۞63۩@Override
smallsql/database/StorePage.java۞64۩long commit() throws SQLException{
smallsql/database/StorePage.java۞65۩try{
smallsql/database/StorePage.java۞68۩if(raFile != null && page != null){
smallsql/database/StorePage.java۞70۩ByteBuffer buffer = ByteBuffer.wrap( page, 0, pageSize );
smallsql/database/StorePage.java۞71۩synchronized(raFile){
smallsql/database/StorePage.java۞72۩if(fileOffset < 0){
smallsql/database/StorePage.java۞73۩fileOffset = raFile.size();
smallsql/database/StorePage.java۞74۩}
smallsql/database/StorePage.java۞75۩raFile.position(fileOffset);
smallsql/database/StorePage.java۞76۩raFile.write(buffer);
smallsql/database/StorePage.java۞77۩}
smallsql/database/StorePage.java۞79۩}
smallsql/database/StorePage.java۞80۩return fileOffset;
smallsql/database/StorePage.java۞81۩}catch(Exception e){
smallsql/database/StorePage.java۞82۩throw SmallSQLException.createFromException(e);
smallsql/database/StorePage.java۞83۩}
smallsql/database/StorePage.java۞84۩}
smallsql/database/StorePage.java۞87۩@Override
smallsql/database/StorePage.java۞88۩final void rollback(){
smallsql/database/StorePage.java۞89۩raFile = null;
smallsql/database/StorePage.java۞90۩}
smallsql/database/StorePage.java۞91۩}
smallsql/database/StorePageLink.java۞34۩package smallsql.database;
smallsql/database/StorePageLink.java۞42۩class StorePageLink {
smallsql/database/StorePageLink.java۞43۩long filePos;
smallsql/database/StorePageLink.java۞44۩TableStorePage page;
smallsql/database/StorePageLink.java۞46۩StoreImpl getStore(Table table, SSConnection con, int lock) throws Exception{
smallsql/database/StorePageLink.java۞47۩TableStorePage page = this.page;
smallsql/database/StorePageLink.java۞48۩if(page == null)
smallsql/database/StorePageLink.java۞49۩return table.getStore( con, filePos, lock );
smallsql/database/StorePageLink.java۞50۩while(page.nextLock != null) page = page.nextLock;
smallsql/database/StorePageLink.java۞51۩return table.getStore( page, lock);
smallsql/database/StorePageLink.java۞52۩}
smallsql/database/StorePageLink.java۞53۩}
smallsql/database/StorePageMap.java۞34۩package smallsql.database;
smallsql/database/StorePageMap.java۞39۩class StorePageMap {
smallsql/database/StorePageMap.java۞46۩private Entry[] table;
smallsql/database/StorePageMap.java۞51۩private int size;
smallsql/database/StorePageMap.java۞57۩private int threshold;
smallsql/database/StorePageMap.java۞67۩StorePageMap() {
smallsql/database/StorePageMap.java۞68۩threshold = 12;
smallsql/database/StorePageMap.java۞69۩table = new Entry[17];
smallsql/database/StorePageMap.java۞70۩}
smallsql/database/StorePageMap.java۞82۩final int size() {
smallsql/database/StorePageMap.java۞83۩return size;
smallsql/database/StorePageMap.java۞84۩}
smallsql/database/StorePageMap.java۞91۩final boolean isEmpty() {
smallsql/database/StorePageMap.java۞92۩return size == 0;
smallsql/database/StorePageMap.java۞93۩}
smallsql/database/StorePageMap.java۞98۩final TableStorePage get(long key) {
smallsql/database/StorePageMap.java۞99۩int i = (int)(key % table.length);
smallsql/database/StorePageMap.java۞100۩Entry e = table[i];
smallsql/database/StorePageMap.java۞101۩while (true) {
smallsql/database/StorePageMap.java۞102۩if (e == null)
smallsql/database/StorePageMap.java۞103۩return null;
smallsql/database/StorePageMap.java۞104۩if (e.key == key)
smallsql/database/StorePageMap.java۞105۩return e.value;
smallsql/database/StorePageMap.java۞106۩e = e.next;
smallsql/database/StorePageMap.java۞107۩}
smallsql/database/StorePageMap.java۞108۩}
smallsql/database/StorePageMap.java۞115۩final boolean containsKey(long key) {
smallsql/database/StorePageMap.java۞116۩return (get(key) != null);
smallsql/database/StorePageMap.java۞117۩}
smallsql/database/StorePageMap.java۞126۩final TableStorePage add(long key, TableStorePage value) {
smallsql/database/StorePageMap.java۞127۩int i = (int)(key % table.length);
smallsql/database/StorePageMap.java۞129۩table[i] = new Entry(key, value, table[i]);
smallsql/database/StorePageMap.java۞130۩if (size++ >= threshold)
smallsql/database/StorePageMap.java۞131۩resize(2 * table.length);
smallsql/database/StorePageMap.java۞132۩return null;
smallsql/database/StorePageMap.java۞133۩}
smallsql/database/StorePageMap.java۞150۩final private void resize(int newCapacity) {
smallsql/database/StorePageMap.java۞152۩Entry[] newTable = new Entry[newCapacity];
smallsql/database/StorePageMap.java۞153۩transfer(newTable);
smallsql/database/StorePageMap.java۞154۩table = newTable;
smallsql/database/StorePageMap.java۞155۩threshold = (int)(newCapacity * 0.75f);
smallsql/database/StorePageMap.java۞156۩}
smallsql/database/StorePageMap.java۞161۩final private void transfer(Entry[] newTable) {
smallsql/database/StorePageMap.java۞162۩Entry[] src = table;
smallsql/database/StorePageMap.java۞163۩int newCapacity = newTable.length;
smallsql/database/StorePageMap.java۞164۩for (int j = 0; j < src.length; j++) {
smallsql/database/StorePageMap.java۞165۩Entry e = src[j];
smallsql/database/StorePageMap.java۞166۩if (e != null) {
smallsql/database/StorePageMap.java۞167۩src[j] = null;
smallsql/database/StorePageMap.java۞168۩do {
smallsql/database/StorePageMap.java۞169۩Entry next = e.next;
smallsql/database/StorePageMap.java۞170۩e.next = null;
smallsql/database/StorePageMap.java۞171۩int i = (int)(e.key % newCapacity);
smallsql/database/StorePageMap.java۞174۩if(newTable[i] == null){
smallsql/database/StorePageMap.java۞175۩newTable[i] = e;
smallsql/database/StorePageMap.java۞176۩}else{
smallsql/database/StorePageMap.java۞177۩Entry entry = newTable[i];
smallsql/database/StorePageMap.java۞178۩while(entry.next != null) entry = entry.next;
smallsql/database/StorePageMap.java۞179۩entry.next = e;
smallsql/database/StorePageMap.java۞180۩}
smallsql/database/StorePageMap.java۞181۩e = next;
smallsql/database/StorePageMap.java۞182۩} while (e != null);
smallsql/database/StorePageMap.java۞183۩}
smallsql/database/StorePageMap.java۞184۩}
smallsql/database/StorePageMap.java۞185۩}
smallsql/database/StorePageMap.java۞197۩final TableStorePage remove(long key) {
smallsql/database/StorePageMap.java۞198۩int i = (int)(key % table.length);
smallsql/database/StorePageMap.java۞199۩Entry prev = table[i];
smallsql/database/StorePageMap.java۞200۩Entry e = prev;
smallsql/database/StorePageMap.java۞202۩while (e != null) {
smallsql/database/StorePageMap.java۞203۩Entry next = e.next;
smallsql/database/StorePageMap.java۞204۩if (e.key == key) {
smallsql/database/StorePageMap.java۞205۩size--;
smallsql/database/StorePageMap.java۞206۩if (prev == e)
smallsql/database/StorePageMap.java۞207۩table[i] = next;
smallsql/database/StorePageMap.java۞208۩else
smallsql/database/StorePageMap.java۞209۩prev.next = next;
smallsql/database/StorePageMap.java۞210۩return e.value;
smallsql/database/StorePageMap.java۞211۩}
smallsql/database/StorePageMap.java۞212۩prev = e;
smallsql/database/StorePageMap.java۞213۩e = next;
smallsql/database/StorePageMap.java۞214۩}
smallsql/database/StorePageMap.java۞215۩return null;
smallsql/database/StorePageMap.java۞216۩}
smallsql/database/StorePageMap.java۞222۩final void clear() {
smallsql/database/StorePageMap.java۞223۩Entry tab[] = table;
smallsql/database/StorePageMap.java۞224۩for (int i = 0; i < tab.length; i++)
smallsql/database/StorePageMap.java۞225۩tab[i] = null;
smallsql/database/StorePageMap.java۞226۩size = 0;
smallsql/database/StorePageMap.java۞227۩}
smallsql/database/StorePageMap.java۞237۩final boolean containsValue(TableStorePage value) {
smallsql/database/StorePageMap.java۞238۩Entry tab[] = table;
smallsql/database/StorePageMap.java۞239۩for (int i = 0; i < tab.length ; i++)
smallsql/database/StorePageMap.java۞240۩for (Entry e = tab[i] ; e != null ; e = e.next)
smallsql/database/StorePageMap.java۞241۩if (value.equals(e.value))
smallsql/database/StorePageMap.java۞242۩return true;
smallsql/database/StorePageMap.java۞243۩return false;
smallsql/database/StorePageMap.java۞244۩}
smallsql/database/StorePageMap.java۞248۩static class Entry{
smallsql/database/StorePageMap.java۞249۩final long key;
smallsql/database/StorePageMap.java۞250۩final TableStorePage value;
smallsql/database/StorePageMap.java۞251۩Entry next;
smallsql/database/StorePageMap.java۞256۩Entry(long k, TableStorePage v, Entry n) {
smallsql/database/StorePageMap.java۞257۩value = v;
smallsql/database/StorePageMap.java۞258۩next = n;
smallsql/database/StorePageMap.java۞259۩key = k;
smallsql/database/StorePageMap.java۞260۩}
smallsql/database/StorePageMap.java۞263۩}
smallsql/database/StorePageMap.java۞266۩}
smallsql/database/Strings.java۞34۩package smallsql.database;
smallsql/database/Strings.java۞41۩class Strings {
smallsql/database/Strings.java۞42۩private int size;
smallsql/database/Strings.java۞43۩private String[] data;
smallsql/database/Strings.java۞46۩Strings(){
smallsql/database/Strings.java۞47۩data = new String[16];
smallsql/database/Strings.java۞48۩}
smallsql/database/Strings.java۞51۩final int size(){
smallsql/database/Strings.java۞52۩return size;
smallsql/database/Strings.java۞53۩}
smallsql/database/Strings.java۞56۩final String get(int idx){
smallsql/database/Strings.java۞57۩if (idx >= size)
smallsql/database/Strings.java۞58۩throw new IndexOutOfBoundsException("Column index: "+idx+", Size: "+size);
smallsql/database/Strings.java۞59۩return data[idx];
smallsql/database/Strings.java۞60۩}
smallsql/database/Strings.java۞63۩final void add(String descr){
smallsql/database/Strings.java۞64۩if(size >= data.length ){
smallsql/database/Strings.java۞65۩resize(size << 1);
smallsql/database/Strings.java۞66۩}
smallsql/database/Strings.java۞67۩data[size++] = descr;
smallsql/database/Strings.java۞68۩}
smallsql/database/Strings.java۞71۩private final void resize(int newSize){
smallsql/database/Strings.java۞72۩String[] dataNew = new String[newSize];
smallsql/database/Strings.java۞73۩System.arraycopy(data, 0, dataNew, 0, size);
smallsql/database/Strings.java۞74۩data = dataNew;
smallsql/database/Strings.java۞75۩}
smallsql/database/Strings.java۞78۩public String[] toArray() {
smallsql/database/Strings.java۞79۩String[] array = new String[size];
smallsql/database/Strings.java۞80۩System.arraycopy(data, 0, array, 0, size);
smallsql/database/Strings.java۞81۩return array;
smallsql/database/Strings.java۞82۩}
smallsql/database/Strings.java۞84۩}
smallsql/database/Table.java۞33۩package smallsql.database;
smallsql/database/Table.java۞35۩import java.io.*;
smallsql/database/Table.java۞36۩import java.nio.ByteBuffer;
smallsql/database/Table.java۞37۩import java.nio.channels.FileChannel;
smallsql/database/Table.java۞38۩import java.sql.*;
smallsql/database/Table.java۞39۩import java.util.ArrayList;
smallsql/database/Table.java۞40۩import java.util.HashMap;
smallsql/database/Table.java۞41۩import java.util.Iterator;
smallsql/database/Table.java۞42۩import java.util.List;
smallsql/database/Table.java۞43۩import smallsql.database.language.Language;
smallsql/database/Table.java۞45۩class Table extends TableView{
smallsql/database/Table.java۞47۩private static final int INDEX = 1;
smallsql/database/Table.java۞49۩final Database database;
smallsql/database/Table.java۞50۩FileChannel raFile;
smallsql/database/Table.java۞51۩private Lobs lobs;
smallsql/database/Table.java۞52۩long firstPage;
smallsql/database/Table.java۞54۩final private HashMap locks = new HashMap();
smallsql/database/Table.java۞55۩private SSConnection tabLockConnection;
smallsql/database/Table.java۞56۩private int tabLockCount;
smallsql/database/Table.java۞58۩final private ArrayList locksInsert = new ArrayList();
smallsql/database/Table.java۞59۩final private HashMap serializeConnections = new HashMap();
smallsql/database/Table.java۞60۩final IndexDescriptions indexes;
smallsql/database/Table.java۞61۩final ForeignKeys references;
smallsql/database/Table.java۞67۩Table( Database database, SSConnection con, String name, FileChannel raFile, long offset, int tableFormatVersion) throws Exception{
smallsql/database/Table.java۞68۩super( name, new Columns() );
smallsql/database/Table.java۞69۩this.database = database;
smallsql/database/Table.java۞70۩this.raFile   = raFile;
smallsql/database/Table.java۞71۩this.firstPage = offset;
smallsql/database/Table.java۞72۩StoreImpl store = getStore(con, firstPage, SQLTokenizer.SELECT);
smallsql/database/Table.java۞73۩if(store == null){
smallsql/database/Table.java۞74۩throw SmallSQLException.create(Language.TABLE_FILE_INVALID, getFile(database));
smallsql/database/Table.java۞75۩}
smallsql/database/Table.java۞76۩int count = store.readInt();
smallsql/database/Table.java۞78۩for(int i=0; i<count; i++){
smallsql/database/Table.java۞79۩columns.add( store.readColumn(tableFormatVersion) );
smallsql/database/Table.java۞80۩}
smallsql/database/Table.java۞81۩indexes = new IndexDescriptions();
smallsql/database/Table.java۞82۩references = new ForeignKeys();
smallsql/database/Table.java۞85۩int type;
smallsql/database/Table.java۞86۩while((type = store.readInt()) != 0){
smallsql/database/Table.java۞87۩int offsetInPage = store.getCurrentOffsetInPage();
smallsql/database/Table.java۞88۩int size = store.readInt();
smallsql/database/Table.java۞89۩switch(type){
smallsql/database/Table.java۞90۩case INDEX:
smallsql/database/Table.java۞91۩indexes.add( IndexDescription.load( database, this, store) );
smallsql/database/Table.java۞92۩break;
smallsql/database/Table.java۞93۩}
smallsql/database/Table.java۞94۩store.setCurrentOffsetInPage(offsetInPage + size);
smallsql/database/Table.java۞95۩}
smallsql/database/Table.java۞97۩firstPage = store.getNextPagePos();
smallsql/database/Table.java۞98۩}
smallsql/database/Table.java۞104۩Table(Database database, SSConnection con, String name, Columns columns, IndexDescriptions indexes, ForeignKeys foreignKeys) throws Exception{
smallsql/database/Table.java۞105۩this(database, con, name, columns, null, indexes, foreignKeys);
smallsql/database/Table.java۞106۩}
smallsql/database/Table.java۞111۩Table(Database database, SSConnection con, String name, Columns columns, IndexDescriptions existIndexes, IndexDescriptions newIndexes, ForeignKeys foreignKeys) throws Exception{
smallsql/database/Table.java۞112۩super( name, columns );
smallsql/database/Table.java۞113۩this.database = database;
smallsql/database/Table.java۞114۩this.references = foreignKeys;
smallsql/database/Table.java۞115۩newIndexes.create(con, database, this);
smallsql/database/Table.java۞116۩if(existIndexes == null){
smallsql/database/Table.java۞117۩this.indexes = newIndexes;
smallsql/database/Table.java۞118۩}else{
smallsql/database/Table.java۞119۩this.indexes = existIndexes;
smallsql/database/Table.java۞120۩existIndexes.add(newIndexes);
smallsql/database/Table.java۞121۩}
smallsql/database/Table.java۞123۩write(con);
smallsql/database/Table.java۞124۩for(int i=0; i<foreignKeys.size(); i++){
smallsql/database/Table.java۞125۩ForeignKey foreignKey = foreignKeys.get(i);
smallsql/database/Table.java۞126۩Table pkTable = (Table)database.getTableView(con, foreignKey.pkTable);
smallsql/database/Table.java۞127۩pkTable.references.add(foreignKey);
smallsql/database/Table.java۞128۩}
smallsql/database/Table.java۞129۩}
smallsql/database/Table.java۞134۩Table(Database database, String name){
smallsql/database/Table.java۞135۩super( name, null);
smallsql/database/Table.java۞136۩this.database = database;
smallsql/database/Table.java۞137۩indexes = null;
smallsql/database/Table.java۞138۩references = null;
smallsql/database/Table.java۞139۩}
smallsql/database/Table.java۞144۩static void drop(Database database, String name) throws Exception{
smallsql/database/Table.java۞145۩boolean ok = new File( Utils.createTableViewFileName( database, name ) ).delete();
smallsql/database/Table.java۞146۩if(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);
smallsql/database/Table.java۞147۩}
smallsql/database/Table.java۞154۩void drop(SSConnection con) throws Exception{
smallsql/database/Table.java۞155۩TableStorePage storePage = requestLock( con, SQLTokenizer.CREATE, -1 );
smallsql/database/Table.java۞156۩if(storePage == null){
smallsql/database/Table.java۞157۩throw SmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED, name);
smallsql/database/Table.java۞158۩}
smallsql/database/Table.java۞160۩con.rollbackFile(raFile);
smallsql/database/Table.java۞161۩close();
smallsql/database/Table.java۞162۩if(lobs != null)
smallsql/database/Table.java۞163۩lobs.drop(con);
smallsql/database/Table.java۞164۩if(indexes != null)
smallsql/database/Table.java۞165۩indexes.drop(database);
smallsql/database/Table.java۞166۩boolean ok = getFile(database).delete();
smallsql/database/Table.java۞167۩if(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);
smallsql/database/Table.java۞168۩}
smallsql/database/Table.java۞174۩@Override
smallsql/database/Table.java۞175۩void close() throws Exception{
smallsql/database/Table.java۞176۩if(indexes != null)
smallsql/database/Table.java۞177۩indexes.close();
smallsql/database/Table.java۞178۩raFile.close();
smallsql/database/Table.java۞179۩raFile = null;
smallsql/database/Table.java۞180۩if( lobs != null ){
smallsql/database/Table.java۞181۩lobs.close();
smallsql/database/Table.java۞182۩lobs = null;
smallsql/database/Table.java۞183۩}
smallsql/database/Table.java۞184۩}
smallsql/database/Table.java۞187۩private void write(SSConnection con) throws Exception{
smallsql/database/Table.java۞188۩raFile = createFile( con, database );
smallsql/database/Table.java۞189۩firstPage = 8;
smallsql/database/Table.java۞190۩StoreImpl store = getStore( con, firstPage, SQLTokenizer.CREATE);
smallsql/database/Table.java۞191۩int count = columns.size();
smallsql/database/Table.java۞192۩store.writeInt( count );
smallsql/database/Table.java۞193۩for(int i=0; i<count; i++){
smallsql/database/Table.java۞194۩store.writeColumn(columns.get(i));
smallsql/database/Table.java۞195۩}
smallsql/database/Table.java۞198۩for(int i=0; i<indexes.size(); i++){
smallsql/database/Table.java۞199۩IndexDescription indexDesc = indexes.get(i);
smallsql/database/Table.java۞200۩store.writeInt( INDEX );
smallsql/database/Table.java۞201۩int offsetStart = store.getCurrentOffsetInPage();
smallsql/database/Table.java۞202۩store.setCurrentOffsetInPage( offsetStart + 4 );
smallsql/database/Table.java۞205۩indexDesc.save(store);
smallsql/database/Table.java۞208۩int offsetEnd = store.getCurrentOffsetInPage();
smallsql/database/Table.java۞209۩store.setCurrentOffsetInPage( offsetStart );
smallsql/database/Table.java۞210۩store.writeInt( offsetEnd - offsetStart);
smallsql/database/Table.java۞211۩store.setCurrentOffsetInPage( offsetEnd );
smallsql/database/Table.java۞212۩}
smallsql/database/Table.java۞213۩store.writeInt( 0 );
smallsql/database/Table.java۞215۩store.writeFinsh(null);
smallsql/database/Table.java۞216۩firstPage = store.getNextPagePos();
smallsql/database/Table.java۞217۩}
smallsql/database/Table.java۞220۩@Override
smallsql/database/Table.java۞221۩void writeMagic(FileChannel raFile) throws Exception{
smallsql/database/Table.java۞222۩ByteBuffer buffer = ByteBuffer.allocate(8);
smallsql/database/Table.java۞223۩buffer.putInt(MAGIC_TABLE);
smallsql/database/Table.java۞224۩buffer.putInt(TABLE_VIEW_VERSION);
smallsql/database/Table.java۞225۩buffer.position(0);
smallsql/database/Table.java۞226۩raFile.write(buffer);
smallsql/database/Table.java۞227۩}
smallsql/database/Table.java۞234۩StoreImpl getStore( SSConnection con, long filePos, int pageOperation ) throws Exception{
smallsql/database/Table.java۞235۩TableStorePage storePage = requestLock( con, pageOperation, filePos );
smallsql/database/Table.java۞236۩return StoreImpl.createStore( this, storePage, pageOperation, filePos );
smallsql/database/Table.java۞237۩}
smallsql/database/Table.java۞240۩StoreImpl getStore( TableStorePage storePage, int pageOperation ) throws Exception{
smallsql/database/Table.java۞242۩return StoreImpl.recreateStore( this, storePage, pageOperation );
smallsql/database/Table.java۞243۩}
smallsql/database/Table.java۞254۩StoreImpl getStoreInsert( SSConnection con ) throws Exception{
smallsql/database/Table.java۞255۩TableStorePage storePage = requestLock( con, SQLTokenizer.INSERT, -1 );
smallsql/database/Table.java۞256۩return StoreImpl.createStore( this, storePage, SQLTokenizer.INSERT, -1 );
smallsql/database/Table.java۞257۩}
smallsql/database/Table.java۞263۩StoreImpl getStoreTemp( SSConnection con ) throws Exception{
smallsql/database/Table.java۞264۩TableStorePage storePage = new TableStorePage( con, this, LOCK_NONE, -2);
smallsql/database/Table.java۞265۩return StoreImpl.createStore( this, storePage, SQLTokenizer.INSERT, -2 );
smallsql/database/Table.java۞266۩}
smallsql/database/Table.java۞269۩StoreImpl getLobStore(SSConnection con, long filePos, int pageOperation) throws Exception{
smallsql/database/Table.java۞270۩if(lobs == null){
smallsql/database/Table.java۞271۩lobs = new Lobs( this );
smallsql/database/Table.java۞272۩}
smallsql/database/Table.java۞273۩return lobs.getStore( con, filePos, pageOperation );
smallsql/database/Table.java۞274۩}
smallsql/database/Table.java۞282۩final long getFirstPage(){
smallsql/database/Table.java۞283۩return firstPage;
smallsql/database/Table.java۞284۩}
smallsql/database/Table.java۞291۩List getInserts(SSConnection con){
smallsql/database/Table.java۞292۩synchronized(locks){
smallsql/database/Table.java۞293۩ArrayList inserts = new ArrayList();
smallsql/database/Table.java۞294۩if(con.isolationLevel <= Connection.TRANSACTION_READ_UNCOMMITTED){
smallsql/database/Table.java۞295۩for(int i=0; i<locksInsert.size(); i++){
smallsql/database/Table.java۞296۩TableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);
smallsql/database/Table.java۞297۩inserts.add(lock.getLink());
smallsql/database/Table.java۞298۩}
smallsql/database/Table.java۞299۩}else{
smallsql/database/Table.java۞300۩for(int i=0; i<locksInsert.size(); i++){
smallsql/database/Table.java۞301۩TableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);
smallsql/database/Table.java۞302۩if(lock.con == con)
smallsql/database/Table.java۞303۩inserts.add(lock.getLink());
smallsql/database/Table.java۞304۩}
smallsql/database/Table.java۞305۩}
smallsql/database/Table.java۞306۩return inserts;
smallsql/database/Table.java۞307۩}
smallsql/database/Table.java۞308۩}
smallsql/database/Table.java۞320۩final TableStorePage requestLock(SSConnection con, int pageOperation, long page) throws Exception{
smallsql/database/Table.java۞321۩synchronized(locks){
smallsql/database/Table.java۞322۩if(raFile == null){
smallsql/database/Table.java۞323۩throw SmallSQLException.create(Language.TABLE_MODIFIED, name);
smallsql/database/Table.java۞324۩}
smallsql/database/Table.java۞325۩long endTime = 0;
smallsql/database/Table.java۞326۩while(true){
smallsql/database/Table.java۞327۩TableStorePage storePage = requestLockImpl( con, pageOperation, page);
smallsql/database/Table.java۞328۩if(storePage != null)
smallsql/database/Table.java۞329۩return storePage;
smallsql/database/Table.java۞330۩if(endTime == 0)
smallsql/database/Table.java۞331۩endTime = System.currentTimeMillis() + 5000;
smallsql/database/Table.java۞332۩long waitTime = endTime - System.currentTimeMillis();
smallsql/database/Table.java۞333۩if(waitTime <= 0)
smallsql/database/Table.java۞334۩throw SmallSQLException.create(Language.TABLE_DEADLOCK, name);
smallsql/database/Table.java۞335۩locks.wait(waitTime);
smallsql/database/Table.java۞336۩}
smallsql/database/Table.java۞337۩}
smallsql/database/Table.java۞338۩}
smallsql/database/Table.java۞346۩final private TableStorePage requestLockImpl(SSConnection con, int pageOperation, long page) throws SQLException{
smallsql/database/Table.java۞347۩synchronized(locks){
smallsql/database/Table.java۞348۩if(tabLockConnection != null && tabLockConnection != con) return null;
smallsql/database/Table.java۞349۩switch(con.isolationLevel){
smallsql/database/Table.java۞350۩case Connection.TRANSACTION_SERIALIZABLE:
smallsql/database/Table.java۞351۩serializeConnections.put( con, con);
smallsql/database/Table.java۞352۩break;
smallsql/database/Table.java۞353۩}
smallsql/database/Table.java۞355۩switch(pageOperation){
smallsql/database/Table.java۞356۩case SQLTokenizer.CREATE:{
smallsql/database/Table.java۞358۩if(locks.size() > 0){
smallsql/database/Table.java۞359۩Iterator values = locks.values().iterator();
smallsql/database/Table.java۞360۩while(values.hasNext()){
smallsql/database/Table.java۞361۩TableStorePage lock = (TableStorePage)values.next();
smallsql/database/Table.java۞362۩if(lock.con != con) return null;
smallsql/database/Table.java۞363۩}
smallsql/database/Table.java۞364۩}
smallsql/database/Table.java۞365۩for(int i=0; i<locksInsert.size(); i++){
smallsql/database/Table.java۞367۩TableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);
smallsql/database/Table.java۞368۩if(lock.con != con) return null;
smallsql/database/Table.java۞369۩}
smallsql/database/Table.java۞370۩if(serializeConnections.size() > 0){
smallsql/database/Table.java۞371۩Iterator values = locks.values().iterator();
smallsql/database/Table.java۞372۩while(values.hasNext()){
smallsql/database/Table.java۞373۩TableStorePage lock = (TableStorePage)values.next();
smallsql/database/Table.java۞374۩if(lock.con != con) return null;
smallsql/database/Table.java۞375۩}
smallsql/database/Table.java۞376۩}
smallsql/database/Table.java۞377۩tabLockConnection = con;
smallsql/database/Table.java۞378۩tabLockCount++;
smallsql/database/Table.java۞379۩TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);
smallsql/database/Table.java۞380۩con.add(lock);
smallsql/database/Table.java۞381۩return lock;
smallsql/database/Table.java۞382۩}
smallsql/database/Table.java۞383۩case SQLTokenizer.ALTER:{
smallsql/database/Table.java۞385۩if(locks.size() > 0 || locksInsert.size() > 0){
smallsql/database/Table.java۞386۩return null;
smallsql/database/Table.java۞387۩}
smallsql/database/Table.java۞388۩if(serializeConnections.size() > 0){
smallsql/database/Table.java۞389۩Iterator values = locks.values().iterator();
smallsql/database/Table.java۞390۩while(values.hasNext()){
smallsql/database/Table.java۞391۩TableStorePage lock = (TableStorePage)values.next();
smallsql/database/Table.java۞392۩if(lock.con != con) return null;
smallsql/database/Table.java۞393۩}
smallsql/database/Table.java۞394۩}
smallsql/database/Table.java۞395۩tabLockConnection = con;
smallsql/database/Table.java۞396۩tabLockCount++;
smallsql/database/Table.java۞397۩TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);
smallsql/database/Table.java۞398۩lock.rollback();
smallsql/database/Table.java۞399۩return lock;
smallsql/database/Table.java۞400۩}
smallsql/database/Table.java۞401۩case SQLTokenizer.INSERT:{
smallsql/database/Table.java۞403۩if(serializeConnections.size() > 1) return null;
smallsql/database/Table.java۞404۩if(serializeConnections.size() == 1 && serializeConnections.get(con) == null) return null;
smallsql/database/Table.java۞405۩TableStorePageInsert lock = new TableStorePageInsert(con, this, LOCK_INSERT);
smallsql/database/Table.java۞406۩locksInsert.add( lock );
smallsql/database/Table.java۞407۩con.add(lock);
smallsql/database/Table.java۞408۩return lock;
smallsql/database/Table.java۞409۩}
smallsql/database/Table.java۞410۩case SQLTokenizer.SELECT:
smallsql/database/Table.java۞411۩case SQLTokenizer.UPDATE:{
smallsql/database/Table.java۞412۩Long pageKey = new Long(page);
smallsql/database/Table.java۞413۩TableStorePage prevLock = null;
smallsql/database/Table.java۞414۩TableStorePage lock = (TableStorePage)locks.get( pageKey );
smallsql/database/Table.java۞415۩TableStorePage usableLock = null;
smallsql/database/Table.java۞416۩while(lock != null){
smallsql/database/Table.java۞417۩if(lock.con == con ||
smallsql/database/Table.java۞418۩con.isolationLevel <= Connection.TRANSACTION_READ_UNCOMMITTED){
smallsql/database/Table.java۞419۩usableLock = lock;
smallsql/database/Table.java۞420۩} else {
smallsql/database/Table.java۞421۩if(lock.lockType == LOCK_WRITE){
smallsql/database/Table.java۞422۩return null;
smallsql/database/Table.java۞423۩}
smallsql/database/Table.java۞424۩}
smallsql/database/Table.java۞425۩prevLock = lock;
smallsql/database/Table.java۞426۩lock = lock.nextLock;
smallsql/database/Table.java۞427۩}
smallsql/database/Table.java۞428۩if(usableLock != null){
smallsql/database/Table.java۞429۩return usableLock;
smallsql/database/Table.java۞430۩}
smallsql/database/Table.java۞431۩lock = new TableStorePage( con, this, LOCK_NONE, page);
smallsql/database/Table.java۞432۩if(con.isolationLevel >= Connection.TRANSACTION_REPEATABLE_READ || pageOperation == SQLTokenizer.UPDATE){
smallsql/database/Table.java۞433۩lock.lockType = pageOperation == SQLTokenizer.UPDATE ? LOCK_WRITE : LOCK_READ;
smallsql/database/Table.java۞434۩if(prevLock != null){
smallsql/database/Table.java۞435۩prevLock.nextLock = lock.nextLock;
smallsql/database/Table.java۞436۩}else{
smallsql/database/Table.java۞437۩locks.put( pageKey, lock );
smallsql/database/Table.java۞438۩}
smallsql/database/Table.java۞439۩con.add(lock);
smallsql/database/Table.java۞440۩}
smallsql/database/Table.java۞441۩return lock;
smallsql/database/Table.java۞442۩}
smallsql/database/Table.java۞443۩case SQLTokenizer.LONGVARBINARY:
smallsql/database/Table.java۞446۩return new TableStorePage( con, this, LOCK_INSERT, -1);
smallsql/database/Table.java۞447۩default:
smallsql/database/Table.java۞448۩throw new Error("pageOperation:"+pageOperation);
smallsql/database/Table.java۞449۩}
smallsql/database/Table.java۞450۩}
smallsql/database/Table.java۞451۩}
smallsql/database/Table.java۞459۩TableStorePage requestWriteLock(SSConnection con, TableStorePage readlock) throws SQLException{
smallsql/database/Table.java۞460۩if(readlock.lockType == LOCK_INSERT){
smallsql/database/Table.java۞461۩TableStorePage lock = new TableStorePage( con, this, LOCK_INSERT, -1);
smallsql/database/Table.java۞462۩readlock.nextLock = lock;
smallsql/database/Table.java۞463۩con.add(lock);
smallsql/database/Table.java۞464۩return lock;
smallsql/database/Table.java۞465۩}
smallsql/database/Table.java۞466۩Long pageKey = new Long(readlock.fileOffset);
smallsql/database/Table.java۞467۩TableStorePage prevLock = null;
smallsql/database/Table.java۞468۩TableStorePage lock = (TableStorePage)locks.get( pageKey );
smallsql/database/Table.java۞469۩while(lock != null){
smallsql/database/Table.java۞470۩if(lock.con != con) return null;
smallsql/database/Table.java۞471۩if(lock.lockType < LOCK_WRITE){
smallsql/database/Table.java۞474۩lock.lockType = LOCK_WRITE;
smallsql/database/Table.java۞475۩return lock;
smallsql/database/Table.java۞476۩}
smallsql/database/Table.java۞477۩prevLock = lock;
smallsql/database/Table.java۞478۩lock = lock.nextLock;
smallsql/database/Table.java۞479۩}
smallsql/database/Table.java۞480۩lock = new TableStorePage( con, this, LOCK_WRITE, readlock.fileOffset);
smallsql/database/Table.java۞481۩if(prevLock != null){
smallsql/database/Table.java۞482۩prevLock.nextLock = lock;
smallsql/database/Table.java۞483۩} else {
smallsql/database/Table.java۞484۩locks.put( pageKey, lock );
smallsql/database/Table.java۞485۩}
smallsql/database/Table.java۞486۩con.add(lock);
smallsql/database/Table.java۞487۩return lock;
smallsql/database/Table.java۞488۩}
smallsql/database/Table.java۞494۩void freeLock(TableStorePage storePage){
smallsql/database/Table.java۞495۩final int lockType = storePage.lockType;
smallsql/database/Table.java۞496۩final long fileOffset = storePage.fileOffset;
smallsql/database/Table.java۞497۩synchronized(locks){
smallsql/database/Table.java۞498۩try{
smallsql/database/Table.java۞499۩TableStorePage lock;
smallsql/database/Table.java۞500۩TableStorePage prev;
smallsql/database/Table.java۞501۩switch(lockType){
smallsql/database/Table.java۞502۩case LOCK_INSERT:
smallsql/database/Table.java۞503۩for(int i=0; i<locksInsert.size(); i++){
smallsql/database/Table.java۞504۩prev = lock = (TableStorePage)locksInsert.get(i);
smallsql/database/Table.java۞505۩while(lock != null){
smallsql/database/Table.java۞506۩if(lock == storePage){
smallsql/database/Table.java۞508۩if(lock == prev){
smallsql/database/Table.java۞509۩if(lock.nextLock == null){
smallsql/database/Table.java۞511۩locksInsert.remove(i--);
smallsql/database/Table.java۞512۩}else{
smallsql/database/Table.java۞514۩locksInsert.set( i, lock.nextLock );
smallsql/database/Table.java۞515۩}
smallsql/database/Table.java۞516۩}else{
smallsql/database/Table.java۞518۩prev.nextLock = lock.nextLock;
smallsql/database/Table.java۞519۩}
smallsql/database/Table.java۞520۩return;
smallsql/database/Table.java۞521۩}
smallsql/database/Table.java۞522۩prev = lock;
smallsql/database/Table.java۞523۩lock = lock.nextLock;
smallsql/database/Table.java۞524۩}
smallsql/database/Table.java۞525۩}
smallsql/database/Table.java۞526۩break;
smallsql/database/Table.java۞527۩case LOCK_READ:
smallsql/database/Table.java۞528۩case LOCK_WRITE:
smallsql/database/Table.java۞529۩Long pageKey = new Long(fileOffset);
smallsql/database/Table.java۞530۩lock = (TableStorePage)locks.get( pageKey );
smallsql/database/Table.java۞531۩prev = lock;
smallsql/database/Table.java۞532۩while(lock != null){
smallsql/database/Table.java۞533۩if(lock == storePage){
smallsql/database/Table.java۞535۩if(lock == prev){
smallsql/database/Table.java۞536۩if(lock.nextLock == null){
smallsql/database/Table.java۞538۩locks.remove(pageKey);
smallsql/database/Table.java۞539۩}else{
smallsql/database/Table.java۞541۩locks.put( pageKey, lock.nextLock );
smallsql/database/Table.java۞542۩}
smallsql/database/Table.java۞543۩}else{
smallsql/database/Table.java۞545۩prev.nextLock = lock.nextLock;
smallsql/database/Table.java۞546۩}
smallsql/database/Table.java۞547۩return;
smallsql/database/Table.java۞548۩}
smallsql/database/Table.java۞549۩prev = lock;
smallsql/database/Table.java۞550۩lock = lock.nextLock;
smallsql/database/Table.java۞551۩}
smallsql/database/Table.java۞553۩break;
smallsql/database/Table.java۞554۩case LOCK_TAB:
smallsql/database/Table.java۞555۩assert storePage.con == tabLockConnection : "Internal Error with TabLock";
smallsql/database/Table.java۞556۩if(--tabLockCount == 0) tabLockConnection = null;
smallsql/database/Table.java۞557۩break;
smallsql/database/Table.java۞558۩default:
smallsql/database/Table.java۞559۩throw new Error();
smallsql/database/Table.java۞560۩}
smallsql/database/Table.java۞561۩}finally{
smallsql/database/Table.java۞562۩locks.notifyAll();
smallsql/database/Table.java۞563۩}
smallsql/database/Table.java۞564۩}
smallsql/database/Table.java۞565۩}
smallsql/database/Table.java۞567۩}
smallsql/database/TableResult.java۞33۩package smallsql.database;
smallsql/database/TableResult.java۞35۩import java.sql.*;
smallsql/database/TableResult.java۞36۩import java.util.List;
smallsql/database/TableResult.java۞39۩final class TableResult extends TableViewResult{
smallsql/database/TableResult.java۞41۩final private Table table;
smallsql/database/TableResult.java۞45۩private List insertStorePages;
smallsql/database/TableResult.java۞49۩private long firstOwnInsert;
smallsql/database/TableResult.java۞53۩private long maxFileOffset;
smallsql/database/TableResult.java۞55۩TableResult(Table table){
smallsql/database/TableResult.java۞56۩this.table = table;
smallsql/database/TableResult.java۞57۩}
smallsql/database/TableResult.java۞67۩@Override
smallsql/database/TableResult.java۞68۩final boolean init( SSConnection con ) throws Exception{
smallsql/database/TableResult.java۞69۩if(super.init(con)){
smallsql/database/TableResult.java۞70۩Columns columns = table.columns;
smallsql/database/TableResult.java۞71۩offsets     = new int[columns.size()];
smallsql/database/TableResult.java۞72۩dataTypes   = new int[columns.size()];
smallsql/database/TableResult.java۞73۩for(int i=0; i<columns.size(); i++){
smallsql/database/TableResult.java۞74۩dataTypes[i] = columns.get(i).getDataType();
smallsql/database/TableResult.java۞75۩}
smallsql/database/TableResult.java۞76۩return true;
smallsql/database/TableResult.java۞77۩}
smallsql/database/TableResult.java۞78۩return false;
smallsql/database/TableResult.java۞79۩}
smallsql/database/TableResult.java۞82۩@Override
smallsql/database/TableResult.java۞83۩final void execute() throws Exception{
smallsql/database/TableResult.java۞84۩insertStorePages = table.getInserts(con);
smallsql/database/TableResult.java۞85۩firstOwnInsert = 0x4000000000000000L | insertStorePages.size();
smallsql/database/TableResult.java۞86۩maxFileOffset = table.raFile.size();
smallsql/database/TableResult.java۞87۩beforeFirst();
smallsql/database/TableResult.java۞88۩}
smallsql/database/TableResult.java۞96۩@Override
smallsql/database/TableResult.java۞97۩final TableView getTableView(){
smallsql/database/TableResult.java۞98۩return table;
smallsql/database/TableResult.java۞99۩}
smallsql/database/TableResult.java۞103۩@Override
smallsql/database/TableResult.java۞104۩final void deleteRow() throws SQLException{
smallsql/database/TableResult.java۞105۩store.deleteRow(con);
smallsql/database/TableResult.java۞106۩store = new StoreNull(store.getNextPagePos());
smallsql/database/TableResult.java۞107۩}
smallsql/database/TableResult.java۞113۩@Override
smallsql/database/TableResult.java۞114۩final void updateRow(Expression[] updateValues) throws Exception{
smallsql/database/TableResult.java۞115۩Columns tableColumns = table.columns;
smallsql/database/TableResult.java۞116۩int count = tableColumns.size();
smallsql/database/TableResult.java۞118۩StoreImpl newStore = table.getStoreTemp(con);
smallsql/database/TableResult.java۞123۩synchronized(con.getMonitor()){
smallsql/database/TableResult.java۞124۩((StoreImpl)this.store).createWriteLock();
smallsql/database/TableResult.java۞126۩for(int i=0; i<count; i++){
smallsql/database/TableResult.java۞127۩Expression src = updateValues[i];
smallsql/database/TableResult.java۞128۩if(src != null){
smallsql/database/TableResult.java۞130۩newStore.writeExpression( src, tableColumns.get(i) );
smallsql/database/TableResult.java۞131۩}else{
smallsql/database/TableResult.java۞132۩copyValueInto( i, newStore );
smallsql/database/TableResult.java۞133۩}
smallsql/database/TableResult.java۞134۩}
smallsql/database/TableResult.java۞135۩((StoreImpl)this.store).updateFinsh(con, newStore);
smallsql/database/TableResult.java۞136۩}
smallsql/database/TableResult.java۞137۩}
smallsql/database/TableResult.java۞140۩@Override
smallsql/database/TableResult.java۞141۩final void insertRow(Expression[] updateValues) throws Exception{
smallsql/database/TableResult.java۞142۩Columns tableColumns = table.columns;
smallsql/database/TableResult.java۞143۩int count = tableColumns.size();
smallsql/database/TableResult.java۞146۩StoreImpl store = table.getStoreInsert(con);
smallsql/database/TableResult.java۞147۩for(int i=0; i<count; i++){
smallsql/database/TableResult.java۞148۩Column tableColumn = tableColumns.get(i);
smallsql/database/TableResult.java۞149۩Expression src = updateValues[i];
smallsql/database/TableResult.java۞150۩if(src == null) src = tableColumn.getDefaultValue(con);
smallsql/database/TableResult.java۞151۩store.writeExpression( src, tableColumn );
smallsql/database/TableResult.java۞153۩}
smallsql/database/TableResult.java۞154۩store.writeFinsh( con );
smallsql/database/TableResult.java۞155۩insertStorePages.add(store.getLink());
smallsql/database/TableResult.java۞156۩}
smallsql/database/TableResult.java۞164۩private Store store = Store.NOROW;
smallsql/database/TableResult.java۞167۩private long filePos;
smallsql/database/TableResult.java۞168۩private int[] offsets;
smallsql/database/TableResult.java۞169۩private int[] dataTypes;
smallsql/database/TableResult.java۞170۩private int row;
smallsql/database/TableResult.java۞173۩private long afterLastValidFilePos;
smallsql/database/TableResult.java۞178۩final private boolean moveToRow() throws Exception{
smallsql/database/TableResult.java۞179۩if(filePos >= 0x4000000000000000L){
smallsql/database/TableResult.java۞180۩store = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);
smallsql/database/TableResult.java۞181۩}else{
smallsql/database/TableResult.java۞182۩store = (filePos < maxFileOffset) ? table.getStore( con, filePos, lock ) : null;
smallsql/database/TableResult.java۞183۩if(store == null){
smallsql/database/TableResult.java۞184۩if(insertStorePages.size() > 0){
smallsql/database/TableResult.java۞185۩filePos = 0x4000000000000000L;
smallsql/database/TableResult.java۞186۩store = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);
smallsql/database/TableResult.java۞187۩}
smallsql/database/TableResult.java۞188۩}
smallsql/database/TableResult.java۞189۩}
smallsql/database/TableResult.java۞190۩if(store != null){
smallsql/database/TableResult.java۞191۩if(!store.isValidPage()){
smallsql/database/TableResult.java۞192۩return false;
smallsql/database/TableResult.java۞193۩}
smallsql/database/TableResult.java۞194۩store.scanObjectOffsets( offsets, dataTypes );
smallsql/database/TableResult.java۞195۩afterLastValidFilePos = store.getNextPagePos();
smallsql/database/TableResult.java۞196۩return true;
smallsql/database/TableResult.java۞197۩}else{
smallsql/database/TableResult.java۞198۩filePos = -1;
smallsql/database/TableResult.java۞199۩noRow();
smallsql/database/TableResult.java۞200۩return false;
smallsql/database/TableResult.java۞201۩}
smallsql/database/TableResult.java۞202۩}
smallsql/database/TableResult.java۞209۩final private boolean moveToValidRow() throws Exception{
smallsql/database/TableResult.java۞210۩while(filePos >= 0){
smallsql/database/TableResult.java۞211۩if(moveToRow())
smallsql/database/TableResult.java۞212۩return true;
smallsql/database/TableResult.java۞213۩setNextFilePos();
smallsql/database/TableResult.java۞214۩}
smallsql/database/TableResult.java۞215۩row = 0;
smallsql/database/TableResult.java۞216۩return false;
smallsql/database/TableResult.java۞217۩}
smallsql/database/TableResult.java۞220۩@Override
smallsql/database/TableResult.java۞221۩final void beforeFirst(){
smallsql/database/TableResult.java۞222۩filePos = 0;
smallsql/database/TableResult.java۞223۩store = Store.NOROW;
smallsql/database/TableResult.java۞224۩row = 0;
smallsql/database/TableResult.java۞225۩}
smallsql/database/TableResult.java۞228۩@Override
smallsql/database/TableResult.java۞229۩final boolean first() throws Exception{
smallsql/database/TableResult.java۞230۩filePos = table.getFirstPage();
smallsql/database/TableResult.java۞231۩row = 1;
smallsql/database/TableResult.java۞232۩return moveToValidRow();
smallsql/database/TableResult.java۞233۩}
smallsql/database/TableResult.java۞243۩final private void setNextFilePos(){
smallsql/database/TableResult.java۞244۩if(filePos < 0) return;
smallsql/database/TableResult.java۞245۩if(store == Store.NOROW)
smallsql/database/TableResult.java۞246۩filePos = table.getFirstPage();
smallsql/database/TableResult.java۞247۩else
smallsql/database/TableResult.java۞248۩if(filePos >= 0x4000000000000000L){
smallsql/database/TableResult.java۞249۩filePos++;
smallsql/database/TableResult.java۞250۩if((filePos & 0x3FFFFFFFFFFFFFFFL) >= insertStorePages.size()){
smallsql/database/TableResult.java۞251۩filePos = -1;
smallsql/database/TableResult.java۞252۩noRow();
smallsql/database/TableResult.java۞253۩}
smallsql/database/TableResult.java۞254۩}else
smallsql/database/TableResult.java۞255۩filePos = store.getNextPagePos();
smallsql/database/TableResult.java۞256۩}
smallsql/database/TableResult.java۞258۩@Override
smallsql/database/TableResult.java۞259۩final boolean next() throws Exception{
smallsql/database/TableResult.java۞260۩if(filePos < 0) return false;
smallsql/database/TableResult.java۞261۩setNextFilePos();
smallsql/database/TableResult.java۞262۩row++;
smallsql/database/TableResult.java۞263۩return moveToValidRow();
smallsql/database/TableResult.java۞264۩}
smallsql/database/TableResult.java۞267۩@Override
smallsql/database/TableResult.java۞268۩final void afterLast(){
smallsql/database/TableResult.java۞269۩filePos = -1;
smallsql/database/TableResult.java۞270۩noRow();
smallsql/database/TableResult.java۞271۩}
smallsql/database/TableResult.java۞274۩@Override
smallsql/database/TableResult.java۞275۩final int getRow(){
smallsql/database/TableResult.java۞276۩return row;
smallsql/database/TableResult.java۞277۩}
smallsql/database/TableResult.java۞283۩@Override
smallsql/database/TableResult.java۞284۩final long getRowPosition(){
smallsql/database/TableResult.java۞285۩return filePos;
smallsql/database/TableResult.java۞286۩}
smallsql/database/TableResult.java۞289۩@Override
smallsql/database/TableResult.java۞290۩final void setRowPosition(long rowPosition) throws Exception{
smallsql/database/TableResult.java۞291۩filePos = rowPosition;
smallsql/database/TableResult.java۞292۩if(filePos < 0 || !moveToRow()){
smallsql/database/TableResult.java۞293۩store = new StoreNull(store.getNextPagePos());
smallsql/database/TableResult.java۞294۩}
smallsql/database/TableResult.java۞295۩}
smallsql/database/TableResult.java۞298۩@Override
smallsql/database/TableResult.java۞299۩final boolean rowInserted(){
smallsql/database/TableResult.java۞300۩return filePos >= firstOwnInsert;
smallsql/database/TableResult.java۞301۩}
smallsql/database/TableResult.java۞304۩@Override
smallsql/database/TableResult.java۞305۩final boolean rowDeleted(){
smallsql/database/TableResult.java۞308۩if(store instanceof StoreNull && store != Store.NULL){
smallsql/database/TableResult.java۞309۩return true;
smallsql/database/TableResult.java۞310۩}
smallsql/database/TableResult.java۞311۩if(store instanceof StoreImpl &&
smallsql/database/TableResult.java۞312۩((StoreImpl)store).isRollback()){
smallsql/database/TableResult.java۞313۩return true;
smallsql/database/TableResult.java۞314۩}
smallsql/database/TableResult.java۞315۩return false;
smallsql/database/TableResult.java۞316۩}
smallsql/database/TableResult.java۞319۩@Override
smallsql/database/TableResult.java۞320۩final void nullRow(){
smallsql/database/TableResult.java۞321۩row = 0;
smallsql/database/TableResult.java۞322۩store = Store.NULL;
smallsql/database/TableResult.java۞323۩}
smallsql/database/TableResult.java۞326۩@Override
smallsql/database/TableResult.java۞327۩final void noRow(){
smallsql/database/TableResult.java۞328۩row = 0;
smallsql/database/TableResult.java۞329۩store = Store.NOROW;
smallsql/database/TableResult.java۞330۩}
smallsql/database/TableResult.java۞339۩@Override
smallsql/database/TableResult.java۞340۩final boolean isNull( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞341۩return store.isNull( offsets[colIdx] );
smallsql/database/TableResult.java۞342۩}
smallsql/database/TableResult.java۞344۩@Override
smallsql/database/TableResult.java۞345۩final boolean getBoolean( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞346۩return store.getBoolean( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞347۩}
smallsql/database/TableResult.java۞349۩@Override
smallsql/database/TableResult.java۞350۩final int getInt( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞351۩return store.getInt( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞352۩}
smallsql/database/TableResult.java۞354۩@Override
smallsql/database/TableResult.java۞355۩final long getLong( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞356۩return store.getLong( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞357۩}
smallsql/database/TableResult.java۞359۩@Override
smallsql/database/TableResult.java۞360۩final float getFloat( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞361۩return store.getFloat( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞362۩}
smallsql/database/TableResult.java۞364۩@Override
smallsql/database/TableResult.java۞365۩final double getDouble( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞366۩return store.getDouble( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞367۩}
smallsql/database/TableResult.java۞369۩@Override
smallsql/database/TableResult.java۞370۩final long getMoney( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞371۩return store.getMoney( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞372۩}
smallsql/database/TableResult.java۞374۩@Override
smallsql/database/TableResult.java۞375۩final MutableNumeric getNumeric( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞376۩return store.getNumeric( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞377۩}
smallsql/database/TableResult.java۞379۩@Override
smallsql/database/TableResult.java۞380۩final Object getObject( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞381۩return store.getObject( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞382۩}
smallsql/database/TableResult.java۞384۩@Override
smallsql/database/TableResult.java۞385۩final String getString( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞386۩return store.getString( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞387۩}
smallsql/database/TableResult.java۞389۩@Override
smallsql/database/TableResult.java۞390۩final byte[] getBytes( int colIdx ) throws Exception{
smallsql/database/TableResult.java۞391۩return store.getBytes( offsets[colIdx], dataTypes[colIdx] );
smallsql/database/TableResult.java۞392۩}
smallsql/database/TableResult.java۞394۩@Override
smallsql/database/TableResult.java۞395۩final int getDataType( int colIdx ){
smallsql/database/TableResult.java۞396۩return dataTypes[colIdx];
smallsql/database/TableResult.java۞397۩}
smallsql/database/TableResult.java۞399۩final private void copyValueInto( int colIdx, StoreImpl dst){
smallsql/database/TableResult.java۞400۩int offset = offsets[colIdx++];
smallsql/database/TableResult.java۞401۩int length = (colIdx < offsets.length ? offsets[colIdx] : store.getUsedSize()) - offset;
smallsql/database/TableResult.java۞402۩dst.copyValueFrom( (StoreImpl)store, offset, length);
smallsql/database/TableResult.java۞403۩}
smallsql/database/TableResult.java۞406۩}
smallsql/database/TableStorePage.java۞33۩package smallsql.database;
smallsql/database/TableStorePage.java۞35۩import java.sql.*;
smallsql/database/TableStorePage.java۞37۩public class TableStorePage extends StorePage{
smallsql/database/TableStorePage.java۞38۩final Table table;
smallsql/database/TableStorePage.java۞41۩int lockType;
smallsql/database/TableStorePage.java۞42۩SSConnection con;
smallsql/database/TableStorePage.java۞43۩TableStorePage nextLock;
smallsql/database/TableStorePage.java۞46۩TableStorePage(SSConnection con, Table table, int lockType, long fileOffset){
smallsql/database/TableStorePage.java۞47۩super( null, 0, table.raFile, fileOffset );
smallsql/database/TableStorePage.java۞48۩this.con 	= con;
smallsql/database/TableStorePage.java۞49۩this.table = table;
smallsql/database/TableStorePage.java۞50۩this.lockType 	= lockType;
smallsql/database/TableStorePage.java۞51۩}
smallsql/database/TableStorePage.java۞54۩byte[] getData(){
smallsql/database/TableStorePage.java۞55۩return page;
smallsql/database/TableStorePage.java۞56۩}
smallsql/database/TableStorePage.java۞62۩long commit() throws SQLException{
smallsql/database/TableStorePage.java۞63۩if(nextLock != null){
smallsql/database/TableStorePage.java۞65۩fileOffset = nextLock.commit();
smallsql/database/TableStorePage.java۞66۩nextLock = null;
smallsql/database/TableStorePage.java۞67۩rollback();
smallsql/database/TableStorePage.java۞68۩return fileOffset;
smallsql/database/TableStorePage.java۞69۩}
smallsql/database/TableStorePage.java۞70۩if(lockType == TableView.LOCK_READ)
smallsql/database/TableStorePage.java۞71۩return fileOffset;
smallsql/database/TableStorePage.java۞72۩return super.commit();
smallsql/database/TableStorePage.java۞73۩}
smallsql/database/TableStorePage.java۞76۩final void freeLock(){
smallsql/database/TableStorePage.java۞77۩table.freeLock(this);
smallsql/database/TableStorePage.java۞78۩}
smallsql/database/TableStorePage.java۞79۩}
smallsql/database/TableStorePageInsert.java۞34۩package smallsql.database;
smallsql/database/TableStorePageInsert.java۞36۩import java.sql.*;
smallsql/database/TableStorePageInsert.java۞45۩class TableStorePageInsert extends TableStorePage {
smallsql/database/TableStorePageInsert.java۞47۩final private StorePageLink link = new StorePageLink();
smallsql/database/TableStorePageInsert.java۞49۩TableStorePageInsert(SSConnection con, Table table, int lockType){
smallsql/database/TableStorePageInsert.java۞50۩super( con, table, lockType, -1);
smallsql/database/TableStorePageInsert.java۞51۩link.page = this;
smallsql/database/TableStorePageInsert.java۞52۩link.filePos = fileOffset;
smallsql/database/TableStorePageInsert.java۞53۩}
smallsql/database/TableStorePageInsert.java۞59۩final long commit() throws SQLException{
smallsql/database/TableStorePageInsert.java۞60۩long result = super.commit();
smallsql/database/TableStorePageInsert.java۞61۩link.filePos = fileOffset;
smallsql/database/TableStorePageInsert.java۞62۩link.page = null;
smallsql/database/TableStorePageInsert.java۞63۩return result;
smallsql/database/TableStorePageInsert.java۞64۩}
smallsql/database/TableStorePageInsert.java۞70۩final StorePageLink getLink(){
smallsql/database/TableStorePageInsert.java۞71۩return link;
smallsql/database/TableStorePageInsert.java۞72۩}
smallsql/database/TableStorePageInsert.java۞73۩}
smallsql/database/TableView.java۞34۩package smallsql.database;
smallsql/database/TableView.java۞36۩import java.io.*;
smallsql/database/TableView.java۞37۩import java.nio.ByteBuffer;
smallsql/database/TableView.java۞38۩import java.nio.channels.FileChannel;
smallsql/database/TableView.java۞39۩import java.sql.*;
smallsql/database/TableView.java۞41۩import smallsql.database.language.Language;
smallsql/database/TableView.java۞47۩abstract class TableView {
smallsql/database/TableView.java۞49۩static final int MAGIC_TABLE = 'S' << 24 | 'Q' << 16 | 'L' << 8 | 'T';
smallsql/database/TableView.java۞50۩static final int MAGIC_VIEW  = 'S' << 24 | 'Q' << 16 | 'L' << 8 | 'V';
smallsql/database/TableView.java۞51۩static final int TABLE_VIEW_VERSION = 2;
smallsql/database/TableView.java۞52۩static final int TABLE_VIEW_OLD_VERSION = 1;
smallsql/database/TableView.java۞54۩final String name;
smallsql/database/TableView.java۞55۩final Columns columns;
smallsql/database/TableView.java۞61۩private long timestamp = System.currentTimeMillis();
smallsql/database/TableView.java۞63۩static final int LOCK_NONE   = 0;
smallsql/database/TableView.java۞64۩static final int LOCK_INSERT = 1;
smallsql/database/TableView.java۞65۩static final int LOCK_READ   = 2;
smallsql/database/TableView.java۞66۩static final int LOCK_WRITE  = 3;
smallsql/database/TableView.java۞67۩static final int LOCK_TAB    = 4;
smallsql/database/TableView.java۞70۩TableView(String name, Columns columns){
smallsql/database/TableView.java۞71۩this.name = name;
smallsql/database/TableView.java۞72۩this.columns = columns;
smallsql/database/TableView.java۞73۩}
smallsql/database/TableView.java۞78۩static TableView load(SSConnection con, Database database, String name) throws SQLException{
smallsql/database/TableView.java۞79۩FileChannel raFile = null;
smallsql/database/TableView.java۞80۩try{
smallsql/database/TableView.java۞81۩String fileName = Utils.createTableViewFileName( database, name );
smallsql/database/TableView.java۞82۩File file = new File( fileName );
smallsql/database/TableView.java۞83۩if(!file.exists())
smallsql/database/TableView.java۞84۩throw SmallSQLException.create(Language.TABLE_OR_VIEW_MISSING, name);
smallsql/database/TableView.java۞85۩raFile = Utils.openRaFile( file, database.isReadOnly() );
smallsql/database/TableView.java۞86۩ByteBuffer buffer = ByteBuffer.allocate(8);
smallsql/database/TableView.java۞87۩raFile.read(buffer);
smallsql/database/TableView.java۞88۩buffer.position(0);
smallsql/database/TableView.java۞89۩int magic   = buffer.getInt();
smallsql/database/TableView.java۞90۩int version = buffer.getInt();
smallsql/database/TableView.java۞91۩switch(magic){
smallsql/database/TableView.java۞92۩case MAGIC_TABLE:
smallsql/database/TableView.java۞93۩case MAGIC_VIEW:
smallsql/database/TableView.java۞94۩break;
smallsql/database/TableView.java۞95۩default:
smallsql/database/TableView.java۞96۩throw SmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID, fileName);
smallsql/database/TableView.java۞97۩}
smallsql/database/TableView.java۞98۩if(version > TABLE_VIEW_VERSION)
smallsql/database/TableView.java۞99۩throw SmallSQLException.create(Language.FILE_TOONEW, new Object[] { new Integer(version), fileName });
smallsql/database/TableView.java۞100۩if(version < TABLE_VIEW_OLD_VERSION)
smallsql/database/TableView.java۞101۩throw SmallSQLException.create(Language.FILE_TOOOLD, new Object[] { new Integer(version), fileName });
smallsql/database/TableView.java۞102۩if(magic == MAGIC_TABLE)
smallsql/database/TableView.java۞103۩return new Table( database, con, name, raFile, raFile.position(), version);
smallsql/database/TableView.java۞104۩return new View ( con, name, raFile, raFile.position());
smallsql/database/TableView.java۞105۩}catch(Throwable e){
smallsql/database/TableView.java۞106۩if(raFile != null)
smallsql/database/TableView.java۞107۩try{
smallsql/database/TableView.java۞108۩raFile.close();
smallsql/database/TableView.java۞109۩}catch(Exception e2){
smallsql/database/TableView.java۞110۩DriverManager.println(e2.toString());
smallsql/database/TableView.java۞111۩}
smallsql/database/TableView.java۞112۩throw SmallSQLException.createFromException(e);
smallsql/database/TableView.java۞113۩}
smallsql/database/TableView.java۞114۩}
smallsql/database/TableView.java۞123۩File getFile(Database database){
smallsql/database/TableView.java۞124۩return new File( Utils.createTableViewFileName( database, name ) );
smallsql/database/TableView.java۞125۩}
smallsql/database/TableView.java۞136۩FileChannel createFile(SSConnection con, Database database) throws Exception{
smallsql/database/TableView.java۞137۩if( database.isReadOnly() ){
smallsql/database/TableView.java۞138۩throw SmallSQLException.create(Language.DB_READONLY);
smallsql/database/TableView.java۞139۩}
smallsql/database/TableView.java۞140۩File file = getFile( database );
smallsql/database/TableView.java۞141۩boolean ok = file.createNewFile();
smallsql/database/TableView.java۞142۩if(!ok) throw SmallSQLException.create(Language.TABLE_EXISTENT, name);
smallsql/database/TableView.java۞143۩FileChannel raFile = Utils.openRaFile( file, database.isReadOnly() );
smallsql/database/TableView.java۞144۩con.add(new CreateFile(file, raFile, con, database));
smallsql/database/TableView.java۞145۩writeMagic(raFile);
smallsql/database/TableView.java۞146۩return raFile;
smallsql/database/TableView.java۞147۩}
smallsql/database/TableView.java۞149۩abstract void writeMagic(FileChannel raFile) throws Exception;
smallsql/database/TableView.java۞152۩String getName(){
smallsql/database/TableView.java۞153۩return name;
smallsql/database/TableView.java۞154۩}
smallsql/database/TableView.java۞157۩long getTimestamp(){
smallsql/database/TableView.java۞158۩return timestamp;
smallsql/database/TableView.java۞159۩}
smallsql/database/TableView.java۞165۩final int findColumnIdx(String columnName){
smallsql/database/TableView.java۞167۩for(int i=0; i<columns.size(); i++){
smallsql/database/TableView.java۞168۩if( columns.get(i).getName().equalsIgnoreCase(columnName) ) return i;
smallsql/database/TableView.java۞169۩}
smallsql/database/TableView.java۞170۩return -1;
smallsql/database/TableView.java۞171۩}
smallsql/database/TableView.java۞177۩final Column findColumn(String columnName){
smallsql/database/TableView.java۞178۩for(int i=0; i<columns.size(); i++){
smallsql/database/TableView.java۞179۩Column column = columns.get(i);
smallsql/database/TableView.java۞180۩if( column.getName().equalsIgnoreCase(columnName) ) return column;
smallsql/database/TableView.java۞181۩}
smallsql/database/TableView.java۞182۩return null;
smallsql/database/TableView.java۞183۩}
smallsql/database/TableView.java۞190۩void close() throws Exception{}
smallsql/database/TableView.java۞192۩}
smallsql/database/TableViewMap.java۞34۩package smallsql.database;
smallsql/database/TableViewMap.java۞36۩import java.util.Collection;
smallsql/database/TableViewMap.java۞37۩import java.util.HashMap;
smallsql/database/TableViewMap.java۞38۩import java.util.Locale;
smallsql/database/TableViewMap.java۞45۩final class TableViewMap{
smallsql/database/TableViewMap.java۞46۩private final HashMap map = new HashMap();
smallsql/database/TableViewMap.java۞59۩private Object getUniqueKey(String name){
smallsql/database/TableViewMap.java۞60۩return name.toUpperCase(Locale.US);
smallsql/database/TableViewMap.java۞61۩}
smallsql/database/TableViewMap.java۞64۩TableView get(String name){
smallsql/database/TableViewMap.java۞65۩return (TableView)map.get(getUniqueKey(name));
smallsql/database/TableViewMap.java۞66۩}
smallsql/database/TableViewMap.java۞69۩void put(String name, TableView tableView){
smallsql/database/TableViewMap.java۞70۩map.put(getUniqueKey(name), tableView);
smallsql/database/TableViewMap.java۞71۩}
smallsql/database/TableViewMap.java۞74۩TableView remove(String name){
smallsql/database/TableViewMap.java۞75۩return (TableView)map.remove(getUniqueKey(name));
smallsql/database/TableViewMap.java۞76۩}
smallsql/database/TableViewMap.java۞79۩Collection values(){
smallsql/database/TableViewMap.java۞80۩return map.values();
smallsql/database/TableViewMap.java۞81۩}
smallsql/database/TableViewMap.java۞82۩}
smallsql/database/TableViewResult.java۞34۩package smallsql.database;
smallsql/database/TableViewResult.java۞36۩import java.sql.SQLException;
smallsql/database/TableViewResult.java۞37۩import smallsql.database.language.Language;
smallsql/database/TableViewResult.java۞42۩abstract class TableViewResult extends DataSource {
smallsql/database/TableViewResult.java۞43۩SSConnection con;
smallsql/database/TableViewResult.java۞45۩private String alias;
smallsql/database/TableViewResult.java۞46۩private long tableTimestamp;
smallsql/database/TableViewResult.java۞47۩int lock = SQLTokenizer.SELECT;
smallsql/database/TableViewResult.java۞49۩static TableViewResult createResult(TableView tableView){
smallsql/database/TableViewResult.java۞50۩if(tableView instanceof Table)
smallsql/database/TableViewResult.java۞51۩return new TableResult((Table)tableView);
smallsql/database/TableViewResult.java۞52۩return new ViewResult( (View)tableView );
smallsql/database/TableViewResult.java۞53۩}
smallsql/database/TableViewResult.java۞56۩static TableViewResult getTableViewResult(RowSource from) throws SQLException{
smallsql/database/TableViewResult.java۞57۩if(from instanceof Where){
smallsql/database/TableViewResult.java۞58۩from = ((Where)from).getFrom();
smallsql/database/TableViewResult.java۞59۩}
smallsql/database/TableViewResult.java۞60۩if(from instanceof TableViewResult){
smallsql/database/TableViewResult.java۞61۩return (TableViewResult)from;
smallsql/database/TableViewResult.java۞62۩}
smallsql/database/TableViewResult.java۞63۩throw SmallSQLException.create(Language.ROWSOURCE_READONLY);
smallsql/database/TableViewResult.java۞64۩}
smallsql/database/TableViewResult.java۞66۩void setAlias( String alias ){
smallsql/database/TableViewResult.java۞67۩this.alias = alias;
smallsql/database/TableViewResult.java۞68۩}
smallsql/database/TableViewResult.java۞71۩String getAlias(){
smallsql/database/TableViewResult.java۞72۩return (alias != null) ? alias : getTableView().name;
smallsql/database/TableViewResult.java۞73۩}
smallsql/database/TableViewResult.java۞76۩boolean hasAlias(){
smallsql/database/TableViewResult.java۞77۩return alias != null;
smallsql/database/TableViewResult.java۞78۩}
smallsql/database/TableViewResult.java۞88۩boolean init( SSConnection con ) throws Exception{
smallsql/database/TableViewResult.java۞89۩TableView tableView = getTableView();
smallsql/database/TableViewResult.java۞90۩if(tableTimestamp != tableView.getTimestamp()){
smallsql/database/TableViewResult.java۞91۩this.con = con;
smallsql/database/TableViewResult.java۞92۩tableTimestamp = tableView.getTimestamp();
smallsql/database/TableViewResult.java۞93۩return true;
smallsql/database/TableViewResult.java۞94۩}
smallsql/database/TableViewResult.java۞95۩return false;
smallsql/database/TableViewResult.java۞96۩}
smallsql/database/TableViewResult.java۞101۩abstract void deleteRow() throws SQLException;
smallsql/database/TableViewResult.java۞109۩abstract void updateRow(Expression[] updateValues) throws Exception;
smallsql/database/TableViewResult.java۞111۩abstract void insertRow(Expression[] updateValues) throws Exception;
smallsql/database/TableViewResult.java۞114۩final boolean isScrollable(){
smallsql/database/TableViewResult.java۞115۩return false;
smallsql/database/TableViewResult.java۞116۩}
smallsql/database/TableViewResult.java۞118۩}
smallsql/database/TransactionStep.java۞34۩package smallsql.database;
smallsql/database/TransactionStep.java۞36۩import java.nio.channels.FileChannel;
smallsql/database/TransactionStep.java۞37۩import java.sql.SQLException;
smallsql/database/TransactionStep.java۞44۩abstract class TransactionStep{
smallsql/database/TransactionStep.java۞46۩FileChannel raFile;
smallsql/database/TransactionStep.java۞48۩TransactionStep(FileChannel raFile){
smallsql/database/TransactionStep.java۞49۩this.raFile = raFile;
smallsql/database/TransactionStep.java۞50۩}
smallsql/database/TransactionStep.java۞52۩abstract long commit() throws SQLException;
smallsql/database/TransactionStep.java۞55۩abstract void rollback() throws SQLException;
smallsql/database/TransactionStep.java۞57۩void freeLock(){}
smallsql/database/TransactionStep.java۞59۩}
smallsql/database/UnionAll.java۞34۩package smallsql.database;
smallsql/database/UnionAll.java۞36۩import smallsql.database.language.Language;
smallsql/database/UnionAll.java۞41۩final class UnionAll extends DataSource {
smallsql/database/UnionAll.java۞43۩private final DataSources dataSources = new DataSources();
smallsql/database/UnionAll.java۞44۩private int dataSourceIdx;
smallsql/database/UnionAll.java۞45۩private DataSource currentDS;
smallsql/database/UnionAll.java۞46۩private int row;
smallsql/database/UnionAll.java۞49۩void addDataSource(DataSource ds){
smallsql/database/UnionAll.java۞50۩dataSources.add(ds);
smallsql/database/UnionAll.java۞51۩currentDS = dataSources.get(0);
smallsql/database/UnionAll.java۞52۩}
smallsql/database/UnionAll.java۞61۩boolean init(SSConnection con) throws Exception{
smallsql/database/UnionAll.java۞62۩boolean result = false;
smallsql/database/UnionAll.java۞63۩int colCount = -1;
smallsql/database/UnionAll.java۞64۩for(int i=0; i<dataSources.size(); i++){
smallsql/database/UnionAll.java۞65۩DataSource ds = dataSources.get(i);
smallsql/database/UnionAll.java۞66۩result |= ds.init(con);
smallsql/database/UnionAll.java۞67۩int nextColCount = ds.getTableView().columns.size();
smallsql/database/UnionAll.java۞68۩if(colCount == -1)
smallsql/database/UnionAll.java۞69۩colCount = nextColCount;
smallsql/database/UnionAll.java۞70۩else
smallsql/database/UnionAll.java۞71۩if(colCount != nextColCount)
smallsql/database/UnionAll.java۞72۩throw SmallSQLException.create(Language.UNION_DIFFERENT_COLS, new Object[] { new Integer(colCount), new Integer(nextColCount)});
smallsql/database/UnionAll.java۞73۩}
smallsql/database/UnionAll.java۞74۩return result;
smallsql/database/UnionAll.java۞75۩}
smallsql/database/UnionAll.java۞78۩final boolean isNull(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞79۩return currentDS.isNull(colIdx);
smallsql/database/UnionAll.java۞80۩}
smallsql/database/UnionAll.java۞83۩final boolean getBoolean(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞84۩return currentDS.getBoolean(colIdx);
smallsql/database/UnionAll.java۞85۩}
smallsql/database/UnionAll.java۞88۩final int getInt(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞89۩return currentDS.getInt(colIdx);
smallsql/database/UnionAll.java۞90۩}
smallsql/database/UnionAll.java۞93۩final long getLong(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞94۩return currentDS.getLong(colIdx);
smallsql/database/UnionAll.java۞95۩}
smallsql/database/UnionAll.java۞98۩final float getFloat(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞99۩return currentDS.getFloat(colIdx);
smallsql/database/UnionAll.java۞100۩}
smallsql/database/UnionAll.java۞103۩final double getDouble(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞104۩return currentDS.getDouble(colIdx);
smallsql/database/UnionAll.java۞105۩}
smallsql/database/UnionAll.java۞108۩final long getMoney(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞109۩return currentDS.getMoney(colIdx);
smallsql/database/UnionAll.java۞110۩}
smallsql/database/UnionAll.java۞113۩final MutableNumeric getNumeric(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞114۩return currentDS.getNumeric(colIdx);
smallsql/database/UnionAll.java۞115۩}
smallsql/database/UnionAll.java۞118۩final Object getObject(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞119۩return currentDS.getObject(colIdx);
smallsql/database/UnionAll.java۞120۩}
smallsql/database/UnionAll.java۞123۩final String getString(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞124۩return currentDS.getString(colIdx);
smallsql/database/UnionAll.java۞125۩}
smallsql/database/UnionAll.java۞128۩final byte[] getBytes(int colIdx) throws Exception {
smallsql/database/UnionAll.java۞129۩return currentDS.getBytes(colIdx);
smallsql/database/UnionAll.java۞130۩}
smallsql/database/UnionAll.java۞133۩final int getDataType(int colIdx) {
smallsql/database/UnionAll.java۞134۩return currentDS.getDataType(colIdx);
smallsql/database/UnionAll.java۞135۩}
smallsql/database/UnionAll.java۞138۩TableView getTableView(){
smallsql/database/UnionAll.java۞139۩return currentDS.getTableView();
smallsql/database/UnionAll.java۞140۩}
smallsql/database/UnionAll.java۞150۩final boolean isScrollable(){
smallsql/database/UnionAll.java۞151۩return false;
smallsql/database/UnionAll.java۞152۩}
smallsql/database/UnionAll.java۞155۩final void beforeFirst() throws Exception {
smallsql/database/UnionAll.java۞156۩dataSourceIdx = 0;
smallsql/database/UnionAll.java۞157۩currentDS = dataSources.get(0);
smallsql/database/UnionAll.java۞158۩currentDS.beforeFirst();
smallsql/database/UnionAll.java۞159۩row = 0;
smallsql/database/UnionAll.java۞160۩}
smallsql/database/UnionAll.java۞163۩final boolean first() throws Exception {
smallsql/database/UnionAll.java۞164۩dataSourceIdx = 0;
smallsql/database/UnionAll.java۞165۩currentDS = dataSources.get(0);
smallsql/database/UnionAll.java۞166۩boolean b = currentDS.first();
smallsql/database/UnionAll.java۞167۩row = b ? 1 : 0;
smallsql/database/UnionAll.java۞168۩return b;
smallsql/database/UnionAll.java۞169۩}
smallsql/database/UnionAll.java۞172۩final boolean next() throws Exception {
smallsql/database/UnionAll.java۞173۩boolean n = currentDS.next();
smallsql/database/UnionAll.java۞174۩row++;
smallsql/database/UnionAll.java۞175۩if(n) return true;
smallsql/database/UnionAll.java۞176۩while(dataSources.size() > dataSourceIdx+1){
smallsql/database/UnionAll.java۞177۩currentDS = dataSources.get(++dataSourceIdx);
smallsql/database/UnionAll.java۞178۩currentDS.beforeFirst();
smallsql/database/UnionAll.java۞179۩n = currentDS.next();
smallsql/database/UnionAll.java۞180۩if(n) return true;
smallsql/database/UnionAll.java۞181۩}
smallsql/database/UnionAll.java۞182۩row = 0;
smallsql/database/UnionAll.java۞183۩return false;
smallsql/database/UnionAll.java۞184۩}
smallsql/database/UnionAll.java۞187۩final void afterLast() throws Exception {
smallsql/database/UnionAll.java۞188۩dataSourceIdx = dataSources.size()-1;
smallsql/database/UnionAll.java۞189۩currentDS = dataSources.get(dataSourceIdx);
smallsql/database/UnionAll.java۞190۩currentDS.afterLast();
smallsql/database/UnionAll.java۞191۩row = 0;
smallsql/database/UnionAll.java۞192۩}
smallsql/database/UnionAll.java۞195۩final int getRow() throws Exception {
smallsql/database/UnionAll.java۞196۩return row;
smallsql/database/UnionAll.java۞197۩}
smallsql/database/UnionAll.java۞200۩private final int getBitCount(){
smallsql/database/UnionAll.java۞201۩int size = dataSources.size();
smallsql/database/UnionAll.java۞202۩int bitCount = 0;
smallsql/database/UnionAll.java۞203۩while(size>0){
smallsql/database/UnionAll.java۞204۩bitCount++;
smallsql/database/UnionAll.java۞205۩size >>= 1;
smallsql/database/UnionAll.java۞206۩}
smallsql/database/UnionAll.java۞207۩return bitCount;
smallsql/database/UnionAll.java۞208۩}
smallsql/database/UnionAll.java۞211۩final long getRowPosition() {
smallsql/database/UnionAll.java۞212۩int bitCount = getBitCount();
smallsql/database/UnionAll.java۞213۩return dataSourceIdx | currentDS.getRowPosition() << bitCount;
smallsql/database/UnionAll.java۞214۩}
smallsql/database/UnionAll.java۞217۩final void setRowPosition(long rowPosition) throws Exception {
smallsql/database/UnionAll.java۞218۩int bitCount = getBitCount();
smallsql/database/UnionAll.java۞219۩int mask = 0xFFFFFFFF >>> (32 - bitCount);
smallsql/database/UnionAll.java۞220۩dataSourceIdx = (int)rowPosition & mask;
smallsql/database/UnionAll.java۞221۩currentDS = dataSources.get(dataSourceIdx);
smallsql/database/UnionAll.java۞222۩currentDS.setRowPosition( rowPosition >> bitCount );
smallsql/database/UnionAll.java۞225۩}
smallsql/database/UnionAll.java۞228۩final boolean rowInserted(){
smallsql/database/UnionAll.java۞229۩return currentDS.rowInserted();
smallsql/database/UnionAll.java۞230۩}
smallsql/database/UnionAll.java۞233۩final boolean rowDeleted(){
smallsql/database/UnionAll.java۞234۩return currentDS.rowDeleted();
smallsql/database/UnionAll.java۞235۩}
smallsql/database/UnionAll.java۞238۩final void nullRow() {
smallsql/database/UnionAll.java۞239۩currentDS.nullRow();
smallsql/database/UnionAll.java۞240۩row = 0;
smallsql/database/UnionAll.java۞241۩}
smallsql/database/UnionAll.java۞244۩final void noRow() {
smallsql/database/UnionAll.java۞245۩currentDS.noRow();
smallsql/database/UnionAll.java۞246۩row = 0;
smallsql/database/UnionAll.java۞247۩}
smallsql/database/UnionAll.java۞250۩final void execute() throws Exception{
smallsql/database/UnionAll.java۞251۩for(int i=0; i<dataSources.size(); i++){
smallsql/database/UnionAll.java۞252۩dataSources.get(i).execute();
smallsql/database/UnionAll.java۞253۩}
smallsql/database/UnionAll.java۞254۩}
smallsql/database/UnionAll.java۞256۩}
smallsql/database/Utils.java۞33۩package smallsql.database;
smallsql/database/Utils.java۞35۩import java.io.File;
smallsql/database/Utils.java۞36۩import java.io.FileNotFoundException;
smallsql/database/Utils.java۞37۩import java.io.RandomAccessFile;
smallsql/database/Utils.java۞38۩import java.nio.channels.FileChannel;
smallsql/database/Utils.java۞39۩import java.nio.channels.FileLock;
smallsql/database/Utils.java۞40۩import java.sql.SQLException;
smallsql/database/Utils.java۞41۩import smallsql.database.language.Language;
smallsql/database/Utils.java۞43۩class Utils {
smallsql/database/Utils.java۞45۩static final String MASTER_FILENAME = "smallsql.master";
smallsql/database/Utils.java۞46۩static final String TABLE_VIEW_EXTENTION = ".sdb";
smallsql/database/Utils.java۞47۩private static final String LOB_EXTENTION = ".lob";
smallsql/database/Utils.java۞48۩static final String IDX_EXTENTION = ".idx";
smallsql/database/Utils.java۞49۩private static final Integer[] integerCache = new Integer[260];
smallsql/database/Utils.java۞50۩private static final Short[]   shortCache   = new Short[260];
smallsql/database/Utils.java۞52۩static{
smallsql/database/Utils.java۞53۩for(int i=-4; i<256; i++){
smallsql/database/Utils.java۞54۩integerCache[ i+4 ] = new Integer(i);
smallsql/database/Utils.java۞55۩shortCache  [ i+4 ] = new Short((short)i);
smallsql/database/Utils.java۞56۩}
smallsql/database/Utils.java۞57۩}
smallsql/database/Utils.java۞59۩static String createTableViewFileName(Database database, String name){
smallsql/database/Utils.java۞60۩return database.getName() + '/' + name + TABLE_VIEW_EXTENTION;
smallsql/database/Utils.java۞61۩}
smallsql/database/Utils.java۞63۩static String createLobFileName(Database database, String name){
smallsql/database/Utils.java۞64۩return database.getName() + '/' + name + LOB_EXTENTION;
smallsql/database/Utils.java۞65۩}
smallsql/database/Utils.java۞67۩static String createIdxFileName(Database database, String name){
smallsql/database/Utils.java۞68۩return database.getName() + '/' + name + IDX_EXTENTION;
smallsql/database/Utils.java۞69۩}
smallsql/database/Utils.java۞71۩static boolean like(String value, String pattern){
smallsql/database/Utils.java۞72۩if(value == null || pattern == null) return false;
smallsql/database/Utils.java۞73۩if(pattern.length() == 0) return true;
smallsql/database/Utils.java۞75۩int mIdx = 0;
smallsql/database/Utils.java۞76۩int sIdx = 0;
smallsql/database/Utils.java۞77۩boolean range = false;
smallsql/database/Utils.java۞78۩weiter:
smallsql/database/Utils.java۞79۩while(pattern.length() > mIdx && value.length() > sIdx) {
smallsql/database/Utils.java۞80۩char m = Character.toUpperCase(pattern.charAt(mIdx++));
smallsql/database/Utils.java۞81۩switch(m) {
smallsql/database/Utils.java۞82۩case '%':
smallsql/database/Utils.java۞83۩range = true;
smallsql/database/Utils.java۞84۩break;
smallsql/database/Utils.java۞85۩case '_':
smallsql/database/Utils.java۞86۩sIdx++;
smallsql/database/Utils.java۞87۩break;
smallsql/database/Utils.java۞88۩default:
smallsql/database/Utils.java۞89۩if(range) {
smallsql/database/Utils.java۞90۩for(; sIdx < value.length(); sIdx++) {
smallsql/database/Utils.java۞91۩if(Character.toUpperCase(value.charAt(sIdx)) == m) break;
smallsql/database/Utils.java۞92۩}
smallsql/database/Utils.java۞93۩if(sIdx >= value.length()) return false;
smallsql/database/Utils.java۞94۩int lastmIdx = mIdx - 1;
smallsql/database/Utils.java۞95۩sIdx++;
smallsql/database/Utils.java۞96۩while(pattern.length() > mIdx && value.length() > sIdx) {
smallsql/database/Utils.java۞97۩m = Character.toUpperCase(pattern.charAt(mIdx++));
smallsql/database/Utils.java۞98۩if(Character.toUpperCase(value.charAt(sIdx)) != m) {
smallsql/database/Utils.java۞99۩if(m == '%' || m == '_') {
smallsql/database/Utils.java۞100۩mIdx--;
smallsql/database/Utils.java۞101۩break;
smallsql/database/Utils.java۞102۩}
smallsql/database/Utils.java۞103۩mIdx = lastmIdx;
smallsql/database/Utils.java۞104۩continue weiter;
smallsql/database/Utils.java۞105۩}
smallsql/database/Utils.java۞106۩sIdx++;
smallsql/database/Utils.java۞107۩}
smallsql/database/Utils.java۞108۩range = false;
smallsql/database/Utils.java۞109۩}else{
smallsql/database/Utils.java۞110۩if(Character.toUpperCase(value.charAt(sIdx)) != m) return false;
smallsql/database/Utils.java۞111۩sIdx++;
smallsql/database/Utils.java۞112۩}
smallsql/database/Utils.java۞113۩break;
smallsql/database/Utils.java۞114۩}
smallsql/database/Utils.java۞115۩}
smallsql/database/Utils.java۞116۩while(pattern.length() > mIdx) {
smallsql/database/Utils.java۞118۩if(Character.toUpperCase(pattern.charAt(mIdx++)) != '%') return false;
smallsql/database/Utils.java۞119۩}
smallsql/database/Utils.java۞120۩while(value.length() > sIdx && !range) return false;
smallsql/database/Utils.java۞121۩return true;
smallsql/database/Utils.java۞122۩}
smallsql/database/Utils.java۞125۩static int long2int(long value){
smallsql/database/Utils.java۞126۩if(value > Integer.MAX_VALUE)
smallsql/database/Utils.java۞127۩return Integer.MAX_VALUE;
smallsql/database/Utils.java۞128۩if(value < Integer.MIN_VALUE)
smallsql/database/Utils.java۞129۩return Integer.MIN_VALUE;
smallsql/database/Utils.java۞130۩return (int)value;
smallsql/database/Utils.java۞131۩}
smallsql/database/Utils.java۞133۩static long double2long(double value){
smallsql/database/Utils.java۞134۩if(value > Long.MAX_VALUE)
smallsql/database/Utils.java۞135۩return Long.MAX_VALUE;
smallsql/database/Utils.java۞136۩if(value < Long.MIN_VALUE)
smallsql/database/Utils.java۞137۩return Long.MIN_VALUE;
smallsql/database/Utils.java۞138۩return (long)value;
smallsql/database/Utils.java۞139۩}
smallsql/database/Utils.java۞143۩static float bytes2float( byte[] bytes ){
smallsql/database/Utils.java۞144۩return Float.intBitsToFloat( bytes2int( bytes ) );
smallsql/database/Utils.java۞145۩}
smallsql/database/Utils.java۞147۩static double bytes2double( byte[] bytes ){
smallsql/database/Utils.java۞148۩return Double.longBitsToDouble( bytes2long( bytes ) );
smallsql/database/Utils.java۞149۩}
smallsql/database/Utils.java۞151۩static long bytes2long( byte[] bytes ){
smallsql/database/Utils.java۞152۩long result = 0;
smallsql/database/Utils.java۞153۩int length = Math.min( 8, bytes.length);
smallsql/database/Utils.java۞154۩for(int i=0; i<length; i++){
smallsql/database/Utils.java۞155۩result = (result << 8) | (bytes[i] & 0xFF);
smallsql/database/Utils.java۞156۩}
smallsql/database/Utils.java۞157۩return result;
smallsql/database/Utils.java۞158۩}
smallsql/database/Utils.java۞160۩static int bytes2int( byte[] bytes ){
smallsql/database/Utils.java۞161۩int result = 0;
smallsql/database/Utils.java۞162۩int length = Math.min( 4, bytes.length);
smallsql/database/Utils.java۞163۩for(int i=0; i<length; i++){
smallsql/database/Utils.java۞164۩result = (result << 8) | (bytes[i] & 0xFF);
smallsql/database/Utils.java۞165۩}
smallsql/database/Utils.java۞166۩return result;
smallsql/database/Utils.java۞167۩}
smallsql/database/Utils.java۞169۩static byte[] double2bytes( double value ){
smallsql/database/Utils.java۞170۩return long2bytes(Double.doubleToLongBits(value));
smallsql/database/Utils.java۞171۩}
smallsql/database/Utils.java۞173۩static byte[] float2bytes( float value ){
smallsql/database/Utils.java۞174۩return int2bytes(Float.floatToIntBits(value));
smallsql/database/Utils.java۞175۩}
smallsql/database/Utils.java۞177۩static byte[] long2bytes( long value ){
smallsql/database/Utils.java۞178۩byte[] result = new byte[8];
smallsql/database/Utils.java۞179۩result[0] = (byte)(value >> 56);
smallsql/database/Utils.java۞180۩result[1] = (byte)(value >> 48);
smallsql/database/Utils.java۞181۩result[2] = (byte)(value >> 40);
smallsql/database/Utils.java۞182۩result[3] = (byte)(value >> 32);
smallsql/database/Utils.java۞183۩result[4] = (byte)(value >> 24);
smallsql/database/Utils.java۞184۩result[5] = (byte)(value >> 16);
smallsql/database/Utils.java۞185۩result[6] = (byte)(value >> 8);
smallsql/database/Utils.java۞186۩result[7] = (byte)(value);
smallsql/database/Utils.java۞187۩return result;
smallsql/database/Utils.java۞188۩}
smallsql/database/Utils.java۞190۩static int money2int( long value ) {
smallsql/database/Utils.java۞191۩if (value < Integer.MIN_VALUE) return Integer.MIN_VALUE;
smallsql/database/Utils.java۞192۩else if (value > Integer.MAX_VALUE) return Integer.MAX_VALUE;
smallsql/database/Utils.java۞193۩else return (int) value;
smallsql/database/Utils.java۞194۩}
smallsql/database/Utils.java۞196۩static byte[] int2bytes( int value ){
smallsql/database/Utils.java۞197۩byte[] result = new byte[4];
smallsql/database/Utils.java۞198۩result[0] = (byte)(value >> 24);
smallsql/database/Utils.java۞199۩result[1] = (byte)(value >> 16);
smallsql/database/Utils.java۞200۩result[2] = (byte)(value >> 8);
smallsql/database/Utils.java۞201۩result[3] = (byte)(value);
smallsql/database/Utils.java۞202۩return result;
smallsql/database/Utils.java۞203۩}
smallsql/database/Utils.java۞205۩static String bytes2hex( byte[] bytes ){
smallsql/database/Utils.java۞206۩StringBuffer buf = new StringBuffer(bytes.length << 1);
smallsql/database/Utils.java۞207۩for(int i=0; i<bytes.length; i++){
smallsql/database/Utils.java۞208۩buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );
smallsql/database/Utils.java۞209۩buf.append( digits[ (bytes[i]     ) & 0x0F ] );
smallsql/database/Utils.java۞210۩}
smallsql/database/Utils.java۞211۩return buf.toString();
smallsql/database/Utils.java۞212۩}
smallsql/database/Utils.java۞214۩static byte[] hex2bytes( char[] hex, int offset, int length) throws SQLException{
smallsql/database/Utils.java۞215۩try{
smallsql/database/Utils.java۞216۩byte[] bytes = new byte[length / 2];
smallsql/database/Utils.java۞217۩for(int i=0; i<bytes.length; i++){
smallsql/database/Utils.java۞218۩bytes[i] = (byte)((hexDigit2int( hex[ offset++ ] ) << 4)
smallsql/database/Utils.java۞219۩| hexDigit2int( hex[ offset++ ] ));
smallsql/database/Utils.java۞220۩}
smallsql/database/Utils.java۞221۩return bytes;
smallsql/database/Utils.java۞222۩}catch(Exception e){
smallsql/database/Utils.java۞223۩throw SmallSQLException.create(Language.SEQUENCE_HEX_INVALID, String.valueOf(offset));
smallsql/database/Utils.java۞224۩}
smallsql/database/Utils.java۞225۩}
smallsql/database/Utils.java۞227۩private static int hexDigit2int(char digit){
smallsql/database/Utils.java۞228۩if(digit >= '0' && digit <= '9') return digit - '0';
smallsql/database/Utils.java۞229۩digit |= 0x20;
smallsql/database/Utils.java۞230۩if(digit >= 'a' && digit <= 'f') return digit - 'W';
smallsql/database/Utils.java۞231۩throw new RuntimeException();
smallsql/database/Utils.java۞232۩}
smallsql/database/Utils.java۞234۩static byte[] unique2bytes( String unique ) throws SQLException{
smallsql/database/Utils.java۞235۩char[] chars = unique.toCharArray();
smallsql/database/Utils.java۞236۩byte[] daten = new byte[16];
smallsql/database/Utils.java۞237۩daten[3] = hex2byte( chars, 0 );
smallsql/database/Utils.java۞238۩daten[2] = hex2byte( chars, 2 );
smallsql/database/Utils.java۞239۩daten[1] = hex2byte( chars, 4 );
smallsql/database/Utils.java۞240۩daten[0] = hex2byte( chars, 6 );
smallsql/database/Utils.java۞242۩daten[5] = hex2byte( chars, 9 );
smallsql/database/Utils.java۞243۩daten[4] = hex2byte( chars, 11 );
smallsql/database/Utils.java۞245۩daten[7] = hex2byte( chars, 14 );
smallsql/database/Utils.java۞246۩daten[6] = hex2byte( chars, 16 );
smallsql/database/Utils.java۞248۩daten[8] = hex2byte( chars, 19 );
smallsql/database/Utils.java۞249۩daten[9] = hex2byte( chars, 21 );
smallsql/database/Utils.java۞251۩daten[10] = hex2byte( chars, 24 );
smallsql/database/Utils.java۞252۩daten[11] = hex2byte( chars, 26 );
smallsql/database/Utils.java۞253۩daten[12] = hex2byte( chars, 28 );
smallsql/database/Utils.java۞254۩daten[13] = hex2byte( chars, 30 );
smallsql/database/Utils.java۞255۩daten[14] = hex2byte( chars, 32 );
smallsql/database/Utils.java۞256۩daten[15] = hex2byte( chars, 34 );
smallsql/database/Utils.java۞257۩return daten;
smallsql/database/Utils.java۞258۩}
smallsql/database/Utils.java۞260۩private static byte hex2byte( char[] hex, int offset) throws SQLException{
smallsql/database/Utils.java۞261۩try{
smallsql/database/Utils.java۞262۩return (byte)((hexDigit2int( hex[ offset++ ] ) << 4)
smallsql/database/Utils.java۞263۩| hexDigit2int( hex[ offset++ ] ));
smallsql/database/Utils.java۞264۩}catch(Exception e){
smallsql/database/Utils.java۞265۩throw SmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR, new Object[] { new Integer(offset), new String(hex) });
smallsql/database/Utils.java۞266۩}
smallsql/database/Utils.java۞267۩}
smallsql/database/Utils.java۞269۩static String bytes2unique( byte[] daten, int offset ){
smallsql/database/Utils.java۞270۩if(daten.length-offset < 16){
smallsql/database/Utils.java۞271۩byte[] temp = new byte[16];
smallsql/database/Utils.java۞272۩System.arraycopy(daten, offset, temp, 0, daten.length-offset);
smallsql/database/Utils.java۞273۩daten = temp;
smallsql/database/Utils.java۞274۩}
smallsql/database/Utils.java۞275۩char[] chars = new char[36];
smallsql/database/Utils.java۞276۩chars[8] = chars[13] = chars[18] = chars[23] = '-';
smallsql/database/Utils.java۞278۩chars[0] = digits[ (daten[offset+3] >> 4) & 0x0F ];
smallsql/database/Utils.java۞279۩chars[1] = digits[ (daten[offset+3]     ) & 0x0F ];
smallsql/database/Utils.java۞280۩chars[2] = digits[ (daten[offset+2] >> 4) & 0x0F ];
smallsql/database/Utils.java۞281۩chars[3] = digits[ (daten[offset+2]     ) & 0x0F ];
smallsql/database/Utils.java۞282۩chars[4] = digits[ (daten[offset+1] >> 4) & 0x0F ];
smallsql/database/Utils.java۞283۩chars[5] = digits[ (daten[offset+1]     ) & 0x0F ];
smallsql/database/Utils.java۞284۩chars[6] = digits[ (daten[offset+0] >> 4) & 0x0F ];
smallsql/database/Utils.java۞285۩chars[7] = digits[ (daten[offset+0]     ) & 0x0F ];
smallsql/database/Utils.java۞287۩chars[ 9] = digits[ (daten[offset+5] >> 4) & 0x0F ];
smallsql/database/Utils.java۞288۩chars[10] = digits[ (daten[offset+5]     ) & 0x0F ];
smallsql/database/Utils.java۞289۩chars[11] = digits[ (daten[offset+4] >> 4) & 0x0F ];
smallsql/database/Utils.java۞290۩chars[12] = digits[ (daten[offset+4]     ) & 0x0F ];
smallsql/database/Utils.java۞292۩chars[14] = digits[ (daten[offset+7] >> 4) & 0x0F ];
smallsql/database/Utils.java۞293۩chars[15] = digits[ (daten[offset+7]     ) & 0x0F ];
smallsql/database/Utils.java۞294۩chars[16] = digits[ (daten[offset+6] >> 4) & 0x0F ];
smallsql/database/Utils.java۞295۩chars[17] = digits[ (daten[offset+6]     ) & 0x0F ];
smallsql/database/Utils.java۞297۩chars[19] = digits[ (daten[offset+8] >> 4) & 0x0F ];
smallsql/database/Utils.java۞298۩chars[20] = digits[ (daten[offset+8]     ) & 0x0F ];
smallsql/database/Utils.java۞299۩chars[21] = digits[ (daten[offset+9] >> 4) & 0x0F ];
smallsql/database/Utils.java۞300۩chars[22] = digits[ (daten[offset+9]     ) & 0x0F ];
smallsql/database/Utils.java۞302۩chars[24] = digits[ (daten[offset+10] >> 4) & 0x0F ];
smallsql/database/Utils.java۞303۩chars[25] = digits[ (daten[offset+10]     ) & 0x0F ];
smallsql/database/Utils.java۞304۩chars[26] = digits[ (daten[offset+11] >> 4) & 0x0F ];
smallsql/database/Utils.java۞305۩chars[27] = digits[ (daten[offset+11]     ) & 0x0F ];
smallsql/database/Utils.java۞306۩chars[28] = digits[ (daten[offset+12] >> 4) & 0x0F ];
smallsql/database/Utils.java۞307۩chars[29] = digits[ (daten[offset+12]     ) & 0x0F ];
smallsql/database/Utils.java۞308۩chars[30] = digits[ (daten[offset+13] >> 4) & 0x0F ];
smallsql/database/Utils.java۞309۩chars[31] = digits[ (daten[offset+13]     ) & 0x0F ];
smallsql/database/Utils.java۞310۩chars[32] = digits[ (daten[offset+14] >> 4) & 0x0F ];
smallsql/database/Utils.java۞311۩chars[33] = digits[ (daten[offset+14]     ) & 0x0F ];
smallsql/database/Utils.java۞312۩chars[34] = digits[ (daten[offset+15] >> 4) & 0x0F ];
smallsql/database/Utils.java۞313۩chars[35] = digits[ (daten[offset+15]     ) & 0x0F ];
smallsql/database/Utils.java۞314۩return new String(chars);
smallsql/database/Utils.java۞315۩}
smallsql/database/Utils.java۞317۩static boolean string2boolean( String val){
smallsql/database/Utils.java۞318۩try{
smallsql/database/Utils.java۞319۩return Double.parseDouble( val ) != 0;
smallsql/database/Utils.java۞320۩}catch(NumberFormatException e){}
smallsql/database/Utils.java۞321۩return "true".equalsIgnoreCase( val ) || "yes".equalsIgnoreCase( val ) || "t".equalsIgnoreCase( val );
smallsql/database/Utils.java۞322۩}
smallsql/database/Utils.java۞325۩static long doubleToMoney(double value){
smallsql/database/Utils.java۞326۩if(value < 0)
smallsql/database/Utils.java۞327۩return (long)(value * 10000 - 0.5);
smallsql/database/Utils.java۞328۩return (long)(value * 10000 + 0.5);
smallsql/database/Utils.java۞329۩}
smallsql/database/Utils.java۞331۩static int indexOf( char value, char[] str, int offset, int length ){
smallsql/database/Utils.java۞332۩value |= 0x20;
smallsql/database/Utils.java۞333۩for(int end = offset+length;offset < end; offset++){
smallsql/database/Utils.java۞334۩if((str[offset] | 0x20) == value) return offset;
smallsql/database/Utils.java۞335۩}
smallsql/database/Utils.java۞336۩return -1;
smallsql/database/Utils.java۞337۩}
smallsql/database/Utils.java۞339۩static int indexOf( int value, int[] list ){
smallsql/database/Utils.java۞340۩int offset = 0;
smallsql/database/Utils.java۞341۩for(int end = list.length; offset < end; offset++){
smallsql/database/Utils.java۞342۩if((list[offset]) == value) return offset;
smallsql/database/Utils.java۞343۩}
smallsql/database/Utils.java۞344۩return -1;
smallsql/database/Utils.java۞345۩}
smallsql/database/Utils.java۞347۩static int indexOf( byte[] value, byte[] list, int offset ){
smallsql/database/Utils.java۞348۩int length = value.length;
smallsql/database/Utils.java۞349۩loop1:
smallsql/database/Utils.java۞350۩for(int end = list.length-length; offset <= end; offset++){
smallsql/database/Utils.java۞351۩for(int i=0; i<length; i++ ){
smallsql/database/Utils.java۞352۩if(list[offset+i] != value[i]){
smallsql/database/Utils.java۞353۩continue loop1;
smallsql/database/Utils.java۞354۩}
smallsql/database/Utils.java۞355۩}
smallsql/database/Utils.java۞356۩return offset;
smallsql/database/Utils.java۞357۩}
smallsql/database/Utils.java۞358۩return -1;
smallsql/database/Utils.java۞359۩}
smallsql/database/Utils.java۞361۩static int compareBytes( byte[] leftBytes, byte[] rightBytes){
smallsql/database/Utils.java۞362۩int length = Math.min( leftBytes.length, rightBytes.length );
smallsql/database/Utils.java۞363۩int comp = 0;
smallsql/database/Utils.java۞364۩for(int i=0; i<length; i++){
smallsql/database/Utils.java۞365۩if(leftBytes[i] != rightBytes[i]){
smallsql/database/Utils.java۞366۩comp = leftBytes[i] < rightBytes[i] ? -1 : 1;
smallsql/database/Utils.java۞367۩break;
smallsql/database/Utils.java۞368۩}
smallsql/database/Utils.java۞369۩}
smallsql/database/Utils.java۞370۩if(comp == 0 && leftBytes.length != rightBytes.length){
smallsql/database/Utils.java۞371۩comp = leftBytes.length < rightBytes.length ? -1 : 1;
smallsql/database/Utils.java۞372۩}
smallsql/database/Utils.java۞373۩return comp;
smallsql/database/Utils.java۞374۩}
smallsql/database/Utils.java۞384۩static CommandSelect createMemoryCommandSelect( SSConnection con, String[] colNames, Object[][] data) throws SQLException{
smallsql/database/Utils.java۞385۩MemoryResult source = new MemoryResult(data, colNames.length);
smallsql/database/Utils.java۞386۩CommandSelect cmd = new CommandSelect(con.log);
smallsql/database/Utils.java۞387۩for(int i=0; i<colNames.length; i++){
smallsql/database/Utils.java۞388۩ExpressionName expr = new ExpressionName(colNames[i]);
smallsql/database/Utils.java۞389۩cmd.addColumnExpression( expr );
smallsql/database/Utils.java۞390۩expr.setFrom( source, i, source.getColumn(i));
smallsql/database/Utils.java۞391۩}
smallsql/database/Utils.java۞392۩cmd.setSource(source);
smallsql/database/Utils.java۞393۩return cmd;
smallsql/database/Utils.java۞394۩}
smallsql/database/Utils.java۞400۩static final Integer getInteger(int value){
smallsql/database/Utils.java۞401۩if(value >= -4 && value < 256){
smallsql/database/Utils.java۞402۩return integerCache[ value+4 ];
smallsql/database/Utils.java۞403۩}else
smallsql/database/Utils.java۞404۩return new Integer(value);
smallsql/database/Utils.java۞405۩}
smallsql/database/Utils.java۞410۩static final Short getShort(int value){
smallsql/database/Utils.java۞411۩if(value >= -4 && value < 256){
smallsql/database/Utils.java۞412۩return shortCache[ value+4 ];
smallsql/database/Utils.java۞413۩}else
smallsql/database/Utils.java۞414۩return new Short((short)value);
smallsql/database/Utils.java۞415۩}
smallsql/database/Utils.java۞430۩static final FileChannel openRaFile( File file, boolean readonly ) throws FileNotFoundException, SQLException{
smallsql/database/Utils.java۞431۩RandomAccessFile raFile = new RandomAccessFile(file, readonly ? "r" : "rw" );
smallsql/database/Utils.java۞432۩FileChannel channel = raFile.getChannel();
smallsql/database/Utils.java۞433۩if( !readonly ){
smallsql/database/Utils.java۞434۩try{
smallsql/database/Utils.java۞435۩FileLock lock = channel.tryLock();
smallsql/database/Utils.java۞436۩if(lock == null){
smallsql/database/Utils.java۞437۩throw SmallSQLException.create(Language.CANT_LOCK_FILE, file);
smallsql/database/Utils.java۞438۩}
smallsql/database/Utils.java۞439۩}catch(SQLException sqlex){
smallsql/database/Utils.java۞440۩throw sqlex;
smallsql/database/Utils.java۞441۩}catch(Throwable th){
smallsql/database/Utils.java۞442۩throw SmallSQLException.createFromException(Language.CANT_LOCK_FILE, file, th);
smallsql/database/Utils.java۞443۩}
smallsql/database/Utils.java۞444۩}
smallsql/database/Utils.java۞445۩return channel;
smallsql/database/Utils.java۞446۩}
smallsql/database/Utils.java۞455۩static final Expressions getExpressionNameFromTree(Expression tree){
smallsql/database/Utils.java۞456۩Expressions list = new Expressions();
smallsql/database/Utils.java۞457۩getExpressionNameFromTree( list, tree );
smallsql/database/Utils.java۞458۩return list;
smallsql/database/Utils.java۞459۩}
smallsql/database/Utils.java۞464۩private static final void getExpressionNameFromTree(Expressions list, Expression tree){
smallsql/database/Utils.java۞465۩if(tree.getType() == Expression.NAME ){
smallsql/database/Utils.java۞466۩list.add(tree);
smallsql/database/Utils.java۞467۩}
smallsql/database/Utils.java۞468۩Expression[] params = tree.getParams();
smallsql/database/Utils.java۞469۩if(params != null){
smallsql/database/Utils.java۞470۩for(int i=0; i<params.length; i++){
smallsql/database/Utils.java۞471۩getExpressionNameFromTree( list, tree );
smallsql/database/Utils.java۞472۩}
smallsql/database/Utils.java۞473۩}
smallsql/database/Utils.java۞474۩}
smallsql/database/Utils.java۞476۩final static char[] digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
smallsql/database/Utils.java۞477۩}
smallsql/database/View.java۞34۩package smallsql.database;
smallsql/database/View.java۞36۩import java.io.*;
smallsql/database/View.java۞37۩import java.nio.ByteBuffer;
smallsql/database/View.java۞38۩import java.nio.channels.FileChannel;
smallsql/database/View.java۞40۩import smallsql.database.language.Language;
smallsql/database/View.java۞45۩class View extends TableView{
smallsql/database/View.java۞46۩final String sql;
smallsql/database/View.java۞47۩final CommandSelect commandSelect;
smallsql/database/View.java۞53۩View(SSConnection con, String name, FileChannel raFile, long offset) throws Exception{
smallsql/database/View.java۞54۩super( name, new Columns() );
smallsql/database/View.java۞55۩StorePage storePage = new StorePage( null, -1, raFile, offset);
smallsql/database/View.java۞56۩StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);
smallsql/database/View.java۞57۩sql = store.readString();
smallsql/database/View.java۞60۩int type;
smallsql/database/View.java۞61۩while((type = store.readInt()) != 0){
smallsql/database/View.java۞62۩int offsetInPage = store.getCurrentOffsetInPage();
smallsql/database/View.java۞63۩int size = store.readInt();
smallsql/database/View.java۞64۩switch(type){
smallsql/database/View.java۞66۩}
smallsql/database/View.java۞67۩store.setCurrentOffsetInPage(offsetInPage + size);
smallsql/database/View.java۞68۩}
smallsql/database/View.java۞70۩raFile.close();
smallsql/database/View.java۞71۩commandSelect = (CommandSelect)new SQLParser().parse(con, sql);
smallsql/database/View.java۞72۩createColumns(con);
smallsql/database/View.java۞73۩}
smallsql/database/View.java۞79۩View(Database database, SSConnection con, String name, String sql) throws Exception{
smallsql/database/View.java۞80۩super( name, new Columns() );
smallsql/database/View.java۞81۩this.sql  = sql;
smallsql/database/View.java۞82۩this.commandSelect = null;
smallsql/database/View.java۞83۩write(database, con);
smallsql/database/View.java۞84۩}
smallsql/database/View.java۞90۩View(SSConnection con, CommandSelect commandSelect) throws Exception{
smallsql/database/View.java۞91۩super("UNION", new Columns());
smallsql/database/View.java۞92۩this.sql = null;
smallsql/database/View.java۞93۩this.commandSelect = commandSelect;
smallsql/database/View.java۞94۩createColumns(con);
smallsql/database/View.java۞95۩}
smallsql/database/View.java۞98۩private void createColumns(SSConnection con) throws Exception{
smallsql/database/View.java۞99۩commandSelect.compile(con);
smallsql/database/View.java۞100۩Expressions exprs = commandSelect.columnExpressions;
smallsql/database/View.java۞101۩for(int c=0; c<exprs.size(); c++){
smallsql/database/View.java۞102۩Expression expr = exprs.get(c);
smallsql/database/View.java۞103۩if(expr instanceof ExpressionName){
smallsql/database/View.java۞104۩Column column = ((ExpressionName)expr).getColumn().copy();
smallsql/database/View.java۞105۩column.setName( expr.getAlias() );
smallsql/database/View.java۞106۩columns.add( column );
smallsql/database/View.java۞107۩}else{
smallsql/database/View.java۞108۩columns.add( new ColumnExpression(expr));
smallsql/database/View.java۞109۩}
smallsql/database/View.java۞110۩}
smallsql/database/View.java۞111۩}
smallsql/database/View.java۞117۩static void drop(Database database, String name) throws Exception{
smallsql/database/View.java۞118۩File file = new File( Utils.createTableViewFileName( database, name ) );
smallsql/database/View.java۞119۩boolean ok = file.delete();
smallsql/database/View.java۞120۩if(!ok) throw SmallSQLException.create(Language.VIEW_CANTDROP, name);
smallsql/database/View.java۞121۩}
smallsql/database/View.java۞124۩private void write(Database database, SSConnection con) throws Exception{
smallsql/database/View.java۞125۩FileChannel raFile = createFile( con, database );
smallsql/database/View.java۞126۩StorePage storePage = new StorePage( null, -1, raFile, 8);
smallsql/database/View.java۞127۩StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.CREATE, 8);
smallsql/database/View.java۞128۩store.writeString(sql);
smallsql/database/View.java۞131۩store.writeInt( 0 );
smallsql/database/View.java۞133۩store.writeFinsh(null);
smallsql/database/View.java۞134۩raFile.close();
smallsql/database/View.java۞135۩}
smallsql/database/View.java۞137۩@Override
smallsql/database/View.java۞138۩void writeMagic(FileChannel raFile) throws Exception{
smallsql/database/View.java۞139۩ByteBuffer buffer = ByteBuffer.allocate(8);
smallsql/database/View.java۞140۩buffer.putInt(MAGIC_VIEW);
smallsql/database/View.java۞141۩buffer.putInt(TABLE_VIEW_VERSION);
smallsql/database/View.java۞142۩buffer.position(0);
smallsql/database/View.java۞143۩raFile.write(buffer);
smallsql/database/View.java۞144۩}
smallsql/database/View.java۞146۩}
smallsql/database/ViewResult.java۞34۩package smallsql.database;
smallsql/database/ViewResult.java۞36۩import java.sql.*;
smallsql/database/ViewResult.java۞42۩class ViewResult extends TableViewResult {
smallsql/database/ViewResult.java۞44۩final private View view;
smallsql/database/ViewResult.java۞45۩final private Expressions columnExpressions;
smallsql/database/ViewResult.java۞46۩final private CommandSelect commandSelect;
smallsql/database/ViewResult.java۞49۩ViewResult(View view){
smallsql/database/ViewResult.java۞50۩this.view = view;
smallsql/database/ViewResult.java۞51۩this.columnExpressions = view.commandSelect.columnExpressions;
smallsql/database/ViewResult.java۞52۩this.commandSelect     = view.commandSelect;
smallsql/database/ViewResult.java۞53۩}
smallsql/database/ViewResult.java۞61۩ViewResult(SSConnection con, CommandSelect commandSelect) throws SQLException{
smallsql/database/ViewResult.java۞62۩try{
smallsql/database/ViewResult.java۞63۩this.view = new View( con, commandSelect);
smallsql/database/ViewResult.java۞64۩this.columnExpressions = commandSelect.columnExpressions;
smallsql/database/ViewResult.java۞65۩this.commandSelect     = commandSelect;
smallsql/database/ViewResult.java۞66۩}catch(Exception e){
smallsql/database/ViewResult.java۞67۩throw SmallSQLException.createFromException(e);
smallsql/database/ViewResult.java۞68۩}
smallsql/database/ViewResult.java۞69۩}
smallsql/database/ViewResult.java۞79۩boolean init( SSConnection con ) throws Exception{
smallsql/database/ViewResult.java۞80۩if(super.init(con)){
smallsql/database/ViewResult.java۞81۩commandSelect.compile(con);
smallsql/database/ViewResult.java۞82۩return true;
smallsql/database/ViewResult.java۞83۩}
smallsql/database/ViewResult.java۞84۩return false;
smallsql/database/ViewResult.java۞85۩}
smallsql/database/ViewResult.java۞96۩TableView getTableView(){
smallsql/database/ViewResult.java۞97۩return view;
smallsql/database/ViewResult.java۞98۩}
smallsql/database/ViewResult.java۞101۩void deleteRow() throws SQLException{
smallsql/database/ViewResult.java۞102۩commandSelect.deleteRow(con);
smallsql/database/ViewResult.java۞103۩}
smallsql/database/ViewResult.java۞105۩void updateRow(Expression[] updateValues) throws Exception{
smallsql/database/ViewResult.java۞106۩commandSelect.updateRow(con, updateValues);
smallsql/database/ViewResult.java۞107۩}
smallsql/database/ViewResult.java۞109۩void insertRow(Expression[] updateValues) throws Exception{
smallsql/database/ViewResult.java۞110۩commandSelect.insertRow(con, updateValues);
smallsql/database/ViewResult.java۞111۩}
smallsql/database/ViewResult.java۞118۩boolean isNull(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞119۩return columnExpressions.get(colIdx).isNull();
smallsql/database/ViewResult.java۞120۩}
smallsql/database/ViewResult.java۞123۩boolean getBoolean(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞124۩return columnExpressions.get(colIdx).getBoolean();
smallsql/database/ViewResult.java۞125۩}
smallsql/database/ViewResult.java۞128۩int getInt(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞129۩return columnExpressions.get(colIdx).getInt();
smallsql/database/ViewResult.java۞130۩}
smallsql/database/ViewResult.java۞133۩long getLong(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞134۩return columnExpressions.get(colIdx).getLong();
smallsql/database/ViewResult.java۞135۩}
smallsql/database/ViewResult.java۞138۩float getFloat(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞139۩return columnExpressions.get(colIdx).getFloat();
smallsql/database/ViewResult.java۞140۩}
smallsql/database/ViewResult.java۞143۩double getDouble(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞144۩return columnExpressions.get(colIdx).getDouble();
smallsql/database/ViewResult.java۞145۩}
smallsql/database/ViewResult.java۞148۩long getMoney(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞149۩return columnExpressions.get(colIdx).getMoney();
smallsql/database/ViewResult.java۞150۩}
smallsql/database/ViewResult.java۞153۩MutableNumeric getNumeric(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞154۩return columnExpressions.get(colIdx).getNumeric();
smallsql/database/ViewResult.java۞155۩}
smallsql/database/ViewResult.java۞158۩Object getObject(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞159۩return columnExpressions.get(colIdx).getObject();
smallsql/database/ViewResult.java۞160۩}
smallsql/database/ViewResult.java۞163۩String getString(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞164۩return columnExpressions.get(colIdx).getString();
smallsql/database/ViewResult.java۞165۩}
smallsql/database/ViewResult.java۞168۩byte[] getBytes(int colIdx) throws Exception {
smallsql/database/ViewResult.java۞169۩return columnExpressions.get(colIdx).getBytes();
smallsql/database/ViewResult.java۞170۩}
smallsql/database/ViewResult.java۞173۩int getDataType(int colIdx) {
smallsql/database/ViewResult.java۞174۩return columnExpressions.get(colIdx).getDataType();
smallsql/database/ViewResult.java۞175۩}
smallsql/database/ViewResult.java۞184۩void beforeFirst() throws Exception {
smallsql/database/ViewResult.java۞185۩commandSelect.beforeFirst();
smallsql/database/ViewResult.java۞186۩}
smallsql/database/ViewResult.java۞189۩boolean isBeforeFirst() throws SQLException{
smallsql/database/ViewResult.java۞190۩return commandSelect.isBeforeFirst();
smallsql/database/ViewResult.java۞191۩}
smallsql/database/ViewResult.java۞194۩boolean isFirst() throws SQLException{
smallsql/database/ViewResult.java۞195۩return commandSelect.isFirst();
smallsql/database/ViewResult.java۞196۩}
smallsql/database/ViewResult.java۞199۩boolean first() throws Exception {
smallsql/database/ViewResult.java۞200۩return commandSelect.first();
smallsql/database/ViewResult.java۞201۩}
smallsql/database/ViewResult.java۞204۩boolean previous() throws Exception{
smallsql/database/ViewResult.java۞205۩return commandSelect.previous();
smallsql/database/ViewResult.java۞206۩}
smallsql/database/ViewResult.java۞209۩boolean next() throws Exception {
smallsql/database/ViewResult.java۞210۩return commandSelect.next();
smallsql/database/ViewResult.java۞211۩}
smallsql/database/ViewResult.java۞214۩boolean last() throws Exception{
smallsql/database/ViewResult.java۞215۩return commandSelect.last();
smallsql/database/ViewResult.java۞216۩}
smallsql/database/ViewResult.java۞219۩boolean isLast() throws Exception{
smallsql/database/ViewResult.java۞220۩return commandSelect.isLast();
smallsql/database/ViewResult.java۞221۩}
smallsql/database/ViewResult.java۞224۩boolean isAfterLast() throws Exception{
smallsql/database/ViewResult.java۞225۩return commandSelect.isAfterLast();
smallsql/database/ViewResult.java۞226۩}
smallsql/database/ViewResult.java۞229۩void afterLast() throws Exception{
smallsql/database/ViewResult.java۞230۩commandSelect.afterLast();
smallsql/database/ViewResult.java۞231۩}
smallsql/database/ViewResult.java۞234۩boolean absolute(int row) throws Exception{
smallsql/database/ViewResult.java۞235۩return commandSelect.absolute(row);
smallsql/database/ViewResult.java۞236۩}
smallsql/database/ViewResult.java۞239۩boolean relative(int rows) throws Exception{
smallsql/database/ViewResult.java۞240۩return commandSelect.relative(rows);
smallsql/database/ViewResult.java۞241۩}
smallsql/database/ViewResult.java۞244۩int getRow() throws Exception{
smallsql/database/ViewResult.java۞245۩return commandSelect.getRow();
smallsql/database/ViewResult.java۞246۩}
smallsql/database/ViewResult.java۞249۩long getRowPosition() {
smallsql/database/ViewResult.java۞250۩return commandSelect.from.getRowPosition();
smallsql/database/ViewResult.java۞251۩}
smallsql/database/ViewResult.java۞254۩void setRowPosition(long rowPosition) throws Exception {
smallsql/database/ViewResult.java۞255۩commandSelect.from.setRowPosition(rowPosition);
smallsql/database/ViewResult.java۞256۩}
smallsql/database/ViewResult.java۞259۩final boolean rowInserted(){
smallsql/database/ViewResult.java۞260۩return commandSelect.from.rowInserted();
smallsql/database/ViewResult.java۞261۩}
smallsql/database/ViewResult.java۞264۩final boolean rowDeleted(){
smallsql/database/ViewResult.java۞265۩return commandSelect.from.rowDeleted();
smallsql/database/ViewResult.java۞266۩}
smallsql/database/ViewResult.java۞269۩void nullRow() {
smallsql/database/ViewResult.java۞270۩commandSelect.from.nullRow();
smallsql/database/ViewResult.java۞272۩}
smallsql/database/ViewResult.java۞275۩void noRow() {
smallsql/database/ViewResult.java۞276۩commandSelect.from.noRow();
smallsql/database/ViewResult.java۞277۩}
smallsql/database/ViewResult.java۞280۩final void execute() throws Exception{
smallsql/database/ViewResult.java۞281۩commandSelect.from.execute();
smallsql/database/ViewResult.java۞282۩}
smallsql/database/ViewResult.java۞283۩}
smallsql/database/Where.java۞34۩package smallsql.database;
smallsql/database/Where.java۞37۩class Where extends RowSource {
smallsql/database/Where.java۞39۩final private RowSource rowSource;
smallsql/database/Where.java۞40۩final private Expression where;
smallsql/database/Where.java۞41۩private int row = 0;
smallsql/database/Where.java۞42۩private boolean isCurrentRow;
smallsql/database/Where.java۞44۩Where(RowSource rowSource, Expression where){
smallsql/database/Where.java۞45۩this.rowSource = rowSource;
smallsql/database/Where.java۞46۩this.where = where;
smallsql/database/Where.java۞47۩}
smallsql/database/Where.java۞49۩RowSource getFrom(){
smallsql/database/Where.java۞50۩return rowSource;
smallsql/database/Where.java۞51۩}
smallsql/database/Where.java۞58۩final private boolean isValidRow() throws Exception{
smallsql/database/Where.java۞59۩return where == null || rowSource.rowInserted() || where.getBoolean();
smallsql/database/Where.java۞60۩}
smallsql/database/Where.java۞63۩final boolean isScrollable() {
smallsql/database/Where.java۞64۩return rowSource.isScrollable();
smallsql/database/Where.java۞65۩}
smallsql/database/Where.java۞68۩final boolean isBeforeFirst(){
smallsql/database/Where.java۞69۩return row == 0;
smallsql/database/Where.java۞70۩}
smallsql/database/Where.java۞73۩final boolean isFirst(){
smallsql/database/Where.java۞74۩return row == 1 && isCurrentRow;
smallsql/database/Where.java۞75۩}
smallsql/database/Where.java۞78۩final boolean isLast() throws Exception{
smallsql/database/Where.java۞79۩if(!isCurrentRow) return false;
smallsql/database/Where.java۞80۩long rowPos = rowSource.getRowPosition();
smallsql/database/Where.java۞81۩boolean isNext = next();
smallsql/database/Where.java۞82۩rowSource.setRowPosition(rowPos);
smallsql/database/Where.java۞83۩return !isNext;
smallsql/database/Where.java۞84۩}
smallsql/database/Where.java۞87۩final boolean isAfterLast(){
smallsql/database/Where.java۞88۩return row > 0 && !isCurrentRow;
smallsql/database/Where.java۞89۩}
smallsql/database/Where.java۞92۩final void beforeFirst() throws Exception {
smallsql/database/Where.java۞93۩rowSource.beforeFirst();
smallsql/database/Where.java۞94۩row = 0;
smallsql/database/Where.java۞95۩}
smallsql/database/Where.java۞98۩final boolean first() throws Exception {
smallsql/database/Where.java۞99۩isCurrentRow = rowSource.first();
smallsql/database/Where.java۞100۩while(isCurrentRow && !isValidRow()){
smallsql/database/Where.java۞101۩isCurrentRow = rowSource.next();
smallsql/database/Where.java۞102۩}
smallsql/database/Where.java۞103۩row = 1;
smallsql/database/Where.java۞104۩return isCurrentRow;
smallsql/database/Where.java۞105۩}
smallsql/database/Where.java۞108۩final boolean previous() throws Exception {
smallsql/database/Where.java۞109۩boolean oldIsCurrentRow = isCurrentRow;
smallsql/database/Where.java۞110۩do{
smallsql/database/Where.java۞111۩isCurrentRow = rowSource.previous();
smallsql/database/Where.java۞112۩}while(isCurrentRow && !isValidRow());
smallsql/database/Where.java۞113۩if(oldIsCurrentRow || isCurrentRow) row--;
smallsql/database/Where.java۞114۩return isCurrentRow;
smallsql/database/Where.java۞115۩}
smallsql/database/Where.java۞118۩final boolean next() throws Exception {
smallsql/database/Where.java۞119۩boolean oldIsCurrentRow = isCurrentRow;
smallsql/database/Where.java۞120۩do{
smallsql/database/Where.java۞121۩isCurrentRow = rowSource.next();
smallsql/database/Where.java۞122۩}while(isCurrentRow && !isValidRow());
smallsql/database/Where.java۞123۩if(oldIsCurrentRow || isCurrentRow) row++;
smallsql/database/Where.java۞124۩return isCurrentRow;
smallsql/database/Where.java۞125۩}
smallsql/database/Where.java۞128۩final boolean last() throws Exception{
smallsql/database/Where.java۞129۩while(next()){}
smallsql/database/Where.java۞130۩return previous();
smallsql/database/Where.java۞131۩}
smallsql/database/Where.java۞134۩final void afterLast() throws Exception {
smallsql/database/Where.java۞135۩while(next()){}
smallsql/database/Where.java۞136۩}
smallsql/database/Where.java۞139۩final int getRow() throws Exception {
smallsql/database/Where.java۞140۩return isCurrentRow ? row : 0;
smallsql/database/Where.java۞141۩}
smallsql/database/Where.java۞144۩final long getRowPosition() {
smallsql/database/Where.java۞145۩return rowSource.getRowPosition();
smallsql/database/Where.java۞146۩}
smallsql/database/Where.java۞149۩final void setRowPosition(long rowPosition) throws Exception {
smallsql/database/Where.java۞150۩rowSource.setRowPosition(rowPosition);
smallsql/database/Where.java۞151۩}
smallsql/database/Where.java۞154۩final void nullRow() {
smallsql/database/Where.java۞155۩rowSource.nullRow();
smallsql/database/Where.java۞156۩row = 0;
smallsql/database/Where.java۞157۩}
smallsql/database/Where.java۞160۩final void noRow() {
smallsql/database/Where.java۞161۩rowSource.noRow();
smallsql/database/Where.java۞162۩row = 0;
smallsql/database/Where.java۞163۩}
smallsql/database/Where.java۞166۩final boolean rowInserted() {
smallsql/database/Where.java۞167۩return rowSource.rowInserted();
smallsql/database/Where.java۞168۩}
smallsql/database/Where.java۞171۩final boolean rowDeleted() {
smallsql/database/Where.java۞172۩return rowSource.rowDeleted();
smallsql/database/Where.java۞173۩}
smallsql/database/Where.java۞176۩final void execute() throws Exception{
smallsql/database/Where.java۞177۩rowSource.execute();
smallsql/database/Where.java۞178۩}
smallsql/database/Where.java۞184۩boolean isExpressionsFromThisRowSource(Expressions columns){
smallsql/database/Where.java۞185۩return rowSource.isExpressionsFromThisRowSource(columns);
smallsql/database/Where.java۞186۩}
smallsql/database/Where.java۞187۩}
smallsql/database/language/Language.java۞33۩package smallsql.database.language;
smallsql/database/language/Language.java۞35۩import java.util.HashMap;
smallsql/database/language/Language.java۞36۩import java.util.HashSet;
smallsql/database/language/Language.java۞37۩import java.util.Locale;
smallsql/database/language/Language.java۞38۩import java.util.Map;
smallsql/database/language/Language.java۞39۩import java.util.Set;
smallsql/database/language/Language.java۞46۩public class Language {
smallsql/database/language/Language.java۞53۩public static final String CUSTOM_MESSAGE			= "SS-0000";
smallsql/database/language/Language.java۞55۩public static final String UNSUPPORTED_OPERATION 	= "SS-0001";
smallsql/database/language/Language.java۞56۩public static final String CANT_LOCK_FILE           = "SS-0003";
smallsql/database/language/Language.java۞58۩public static final String DB_EXISTENT 				= "SS-0030";
smallsql/database/language/Language.java۞59۩public static final String DB_NONEXISTENT 			= "SS-0031";
smallsql/database/language/Language.java۞60۩public static final String DB_NOT_DIRECTORY 		= "SS-0032";
smallsql/database/language/Language.java۞61۩public static final String DB_NOTCONNECTED 			= "SS-0033";
smallsql/database/language/Language.java۞62۩public static final String DB_READONLY              = "SS-0034";
smallsql/database/language/Language.java۞64۩public static final String CONNECTION_CLOSED 		= "SS-0070";
smallsql/database/language/Language.java۞66۩public static final String VIEW_INSERT 				= "SS-0100";
smallsql/database/language/Language.java۞67۩public static final String VIEWDROP_NOT_VIEW 		= "SS-0101";
smallsql/database/language/Language.java۞68۩public static final String VIEW_CANTDROP 			= "SS-0102";
smallsql/database/language/Language.java۞70۩public static final String RSET_NOT_PRODUCED 		= "SS-0130";
smallsql/database/language/Language.java۞71۩public static final String RSET_READONLY 			= "SS-0131";
smallsql/database/language/Language.java۞72۩public static final String RSET_FWDONLY				= "SS-0132";
smallsql/database/language/Language.java۞73۩public static final String RSET_CLOSED				= "SS-0133";
smallsql/database/language/Language.java۞74۩public static final String RSET_NOT_INSERT_ROW		= "SS-0134";
smallsql/database/language/Language.java۞75۩public static final String RSET_ON_INSERT_ROW		= "SS-0135";
smallsql/database/language/Language.java۞76۩public static final String ROWSOURCE_READONLY		= "SS-0136";
smallsql/database/language/Language.java۞78۩public static final String STMT_IS_CLOSED           = "SS-0140";
smallsql/database/language/Language.java۞80۩public static final String SUBQUERY_COL_COUNT		= "SS-0160";
smallsql/database/language/Language.java۞81۩public static final String JOIN_DELETE				= "SS-0161";
smallsql/database/language/Language.java۞82۩public static final String JOIN_INSERT				= "SS-0162";
smallsql/database/language/Language.java۞83۩public static final String DELETE_WO_FROM			= "SS-0163";
smallsql/database/language/Language.java۞84۩public static final String INSERT_WO_FROM			= "SS-0164";
smallsql/database/language/Language.java۞86۩public static final String TABLE_CANT_RENAME		= "SS-0190";
smallsql/database/language/Language.java۞87۩public static final String TABLE_CANT_DROP			= "SS-0191";
smallsql/database/language/Language.java۞88۩public static final String TABLE_CANT_DROP_LOCKED	= "SS-0192";
smallsql/database/language/Language.java۞89۩public static final String TABLE_CORRUPT_PAGE		= "SS-0193";
smallsql/database/language/Language.java۞90۩public static final String TABLE_MODIFIED			= "SS-0194";
smallsql/database/language/Language.java۞91۩public static final String TABLE_DEADLOCK			= "SS-0195";
smallsql/database/language/Language.java۞92۩public static final String TABLE_OR_VIEW_MISSING	= "SS-0196";
smallsql/database/language/Language.java۞93۩public static final String TABLE_FILE_INVALID		= "SS-0197";
smallsql/database/language/Language.java۞94۩public static final String TABLE_OR_VIEW_FILE_INVALID = "SS-0198";
smallsql/database/language/Language.java۞95۩public static final String TABLE_EXISTENT			= "SS-0199";
smallsql/database/language/Language.java۞97۩public static final String FK_NOT_TABLE				= "SS-0220";
smallsql/database/language/Language.java۞98۩public static final String PK_ONLYONE				= "SS-0221";
smallsql/database/language/Language.java۞99۩public static final String KEY_DUPLICATE			= "SS-0222";
smallsql/database/language/Language.java۞101۩public static final String MONTH_TOOLARGE 			= "SS-0251";
smallsql/database/language/Language.java۞102۩public static final String DAYS_TOOLARGE 			= "SS-0252";
smallsql/database/language/Language.java۞103۩public static final String HOURS_TOOLARGE 			= "SS-0253";
smallsql/database/language/Language.java۞104۩public static final String MINUTES_TOOLARGE 		= "SS-0254";
smallsql/database/language/Language.java۞105۩public static final String SECS_TOOLARGE 			= "SS-0255";
smallsql/database/language/Language.java۞106۩public static final String MILLIS_TOOLARGE 			= "SS-0256";
smallsql/database/language/Language.java۞107۩public static final String DATETIME_INVALID 		= "SS-0257";
smallsql/database/language/Language.java۞109۩public static final String UNSUPPORTED_CONVERSION_OPER = "SS-0280";
smallsql/database/language/Language.java۞110۩public static final String UNSUPPORTED_DATATYPE_OPER = "SS-0281";
smallsql/database/language/Language.java۞111۩public static final String UNSUPPORTED_DATATYPE_FUNC = "SS-0282";
smallsql/database/language/Language.java۞112۩public static final String UNSUPPORTED_CONVERSION_FUNC = "SS-0283";
smallsql/database/language/Language.java۞113۩public static final String UNSUPPORTED_TYPE_CONV 	= "SS-0284";
smallsql/database/language/Language.java۞114۩public static final String UNSUPPORTED_TYPE_SUM 	= "SS-0285";
smallsql/database/language/Language.java۞115۩public static final String UNSUPPORTED_TYPE_MAX 	= "SS-0286";
smallsql/database/language/Language.java۞116۩public static final String UNSUPPORTED_CONVERSION 	= "SS-0287";
smallsql/database/language/Language.java۞117۩public static final String INSERT_INVALID_LEN 		= "SS-0288";
smallsql/database/language/Language.java۞118۩public static final String SUBSTR_INVALID_LEN 		= "SS-0289";
smallsql/database/language/Language.java۞120۩public static final String VALUE_STR_TOOLARGE 		= "SS-0310";
smallsql/database/language/Language.java۞121۩public static final String VALUE_BIN_TOOLARGE 		= "SS-0311";
smallsql/database/language/Language.java۞122۩public static final String VALUE_NULL_INVALID 		= "SS-0312";
smallsql/database/language/Language.java۞123۩public static final String VALUE_CANT_CONVERT 		= "SS-0313";
smallsql/database/language/Language.java۞125۩public static final String BYTEARR_INVALID_SIZE 	= "SS-0340";
smallsql/database/language/Language.java۞126۩public static final String LOB_DELETED 				= "SS-0341";
smallsql/database/language/Language.java۞128۩public static final String PARAM_CLASS_UNKNOWN 		= "SS-0370";
smallsql/database/language/Language.java۞129۩public static final String PARAM_EMPTY 				= "SS-0371";
smallsql/database/language/Language.java۞130۩public static final String PARAM_IDX_OUT_RANGE 		= "SS-0372";
smallsql/database/language/Language.java۞132۩public static final String COL_DUPLICATE 			= "SS-0400";
smallsql/database/language/Language.java۞133۩public static final String COL_MISSING 				= "SS-0401";
smallsql/database/language/Language.java۞134۩public static final String COL_VAL_UNMATCH 			= "SS-0402";
smallsql/database/language/Language.java۞135۩public static final String COL_INVALID_SIZE 		= "SS-0403";
smallsql/database/language/Language.java۞136۩public static final String COL_WRONG_PREFIX 		= "SS-0404";
smallsql/database/language/Language.java۞137۩public static final String COL_READONLY 			= "SS-0405";
smallsql/database/language/Language.java۞138۩public static final String COL_INVALID_NAME 		= "SS-0406";
smallsql/database/language/Language.java۞139۩public static final String COL_IDX_OUT_RANGE 		= "SS-0407";
smallsql/database/language/Language.java۞140۩public static final String COL_AMBIGUOUS 			= "SS-0408";
smallsql/database/language/Language.java۞142۩public static final String GROUP_AGGR_INVALID 		= "SS-0430";
smallsql/database/language/Language.java۞143۩public static final String GROUP_AGGR_NOTPART 		= "SS-0431";
smallsql/database/language/Language.java۞144۩public static final String ORDERBY_INTERNAL 		= "SS-0432";
smallsql/database/language/Language.java۞145۩public static final String UNION_DIFFERENT_COLS 	= "SS-0433";
smallsql/database/language/Language.java۞147۩public static final String INDEX_EXISTS 			= "SS-0460";
smallsql/database/language/Language.java۞148۩public static final String INDEX_MISSING 			= "SS-0461";
smallsql/database/language/Language.java۞149۩public static final String INDEX_FILE_INVALID 		= "SS-0462";
smallsql/database/language/Language.java۞150۩public static final String INDEX_CORRUPT 			= "SS-0463";
smallsql/database/language/Language.java۞151۩public static final String INDEX_TOOMANY_EQUALS 	= "SS-0464";
smallsql/database/language/Language.java۞153۩public static final String FILE_TOONEW 				= "SS-0490";
smallsql/database/language/Language.java۞154۩public static final String FILE_TOOOLD 				= "SS-0491";
smallsql/database/language/Language.java۞155۩public static final String FILE_CANT_DELETE         = "SS-0492";
smallsql/database/language/Language.java۞157۩public static final String ROW_0_ABSOLUTE 			= "SS-0520";
smallsql/database/language/Language.java۞158۩public static final String ROW_NOCURRENT 			= "SS-0521";
smallsql/database/language/Language.java۞159۩public static final String ROWS_WRONG_MAX 			= "SS-0522";
smallsql/database/language/Language.java۞160۩public static final String ROW_LOCKED 				= "SS-0523";
smallsql/database/language/Language.java۞161۩public static final String ROW_DELETED 				= "SS-0524";
smallsql/database/language/Language.java۞163۩public static final String SAVEPT_INVALID_TRANS 	= "SS-0550";
smallsql/database/language/Language.java۞164۩public static final String SAVEPT_INVALID_DRIVER 	= "SS-0551";
smallsql/database/language/Language.java۞166۩public static final String ALIAS_UNSUPPORTED 		= "SS-0580";
smallsql/database/language/Language.java۞167۩public static final String ISOLATION_UNKNOWN 		= "SS-0581";
smallsql/database/language/Language.java۞168۩public static final String FLAGVALUE_INVALID 		= "SS-0582";
smallsql/database/language/Language.java۞169۩public static final String ARGUMENT_INVALID 		= "SS-0583";
smallsql/database/language/Language.java۞170۩public static final String GENER_KEYS_UNREQUIRED 	= "SS-0584";
smallsql/database/language/Language.java۞171۩public static final String SEQUENCE_HEX_INVALID 	= "SS-0585";
smallsql/database/language/Language.java۞172۩public static final String SEQUENCE_HEX_INVALID_STR = "SS-0586";
smallsql/database/language/Language.java۞174۩public static final String SYNTAX_BASE_OFS			= "SS-0610";
smallsql/database/language/Language.java۞175۩public static final String SYNTAX_BASE_END			= "SS-0611";
smallsql/database/language/Language.java۞176۩public static final String STXADD_ADDITIONAL_TOK	= "SS-0612";
smallsql/database/language/Language.java۞177۩public static final String STXADD_IDENT_EXPECT		= "SS-0613";
smallsql/database/language/Language.java۞178۩public static final String STXADD_IDENT_EMPTY		= "SS-0614";
smallsql/database/language/Language.java۞179۩public static final String STXADD_IDENT_WRONG		= "SS-0615";
smallsql/database/language/Language.java۞180۩public static final String STXADD_OPER_MINUS		= "SS-0616";
smallsql/database/language/Language.java۞181۩public static final String STXADD_FUNC_UNKNOWN		= "SS-0617";
smallsql/database/language/Language.java۞182۩public static final String STXADD_PARAM_INVALID_COUNT	= "SS-0618";
smallsql/database/language/Language.java۞183۩public static final String STXADD_JOIN_INVALID		= "SS-0619";
smallsql/database/language/Language.java۞184۩public static final String STXADD_FROM_PAR_CLOSE	= "SS-0620";
smallsql/database/language/Language.java۞185۩public static final String STXADD_KEYS_REQUIRED		= "SS-0621";
smallsql/database/language/Language.java۞186۩public static final String STXADD_NOT_NUMBER		= "SS-0622";
smallsql/database/language/Language.java۞187۩public static final String STXADD_COMMENT_OPEN		= "SS-0623";
smallsql/database/language/Language.java۞193۩private Map messages;
smallsql/database/language/Language.java۞194۩private Map sqlStates;
smallsql/database/language/Language.java۞208۩public static Language getLanguage(String localeStr) {
smallsql/database/language/Language.java۞209۩try {
smallsql/database/language/Language.java۞210۩return getFromLocaleTree(localeStr);
smallsql/database/language/Language.java۞211۩}
smallsql/database/language/Language.java۞212۩catch (IllegalArgumentException e) {
smallsql/database/language/Language.java۞213۩return getDefaultLanguage();
smallsql/database/language/Language.java۞214۩}
smallsql/database/language/Language.java۞215۩}
smallsql/database/language/Language.java۞221۩public static Language getDefaultLanguage() {
smallsql/database/language/Language.java۞222۩String dfltLocaleStr = Locale.getDefault().toString();
smallsql/database/language/Language.java۞224۩try {
smallsql/database/language/Language.java۞225۩return getFromLocaleTree(dfltLocaleStr);
smallsql/database/language/Language.java۞226۩}
smallsql/database/language/Language.java۞227۩catch (IllegalArgumentException e) {
smallsql/database/language/Language.java۞228۩return new Language();
smallsql/database/language/Language.java۞229۩}
smallsql/database/language/Language.java۞230۩}
smallsql/database/language/Language.java۞242۩private static Language getFromLocaleTree(String localeStr)
smallsql/database/language/Language.java۞243۩throws IllegalArgumentException {
smallsql/database/language/Language.java۞244۩String part = localeStr;
smallsql/database/language/Language.java۞245۩while (true) {
smallsql/database/language/Language.java۞246۩String langClassName = Language.class.getName() + '_' + part;
smallsql/database/language/Language.java۞248۩try {
smallsql/database/language/Language.java۞249۩return (Language) Class.forName(langClassName).newInstance();
smallsql/database/language/Language.java۞250۩}
smallsql/database/language/Language.java۞251۩catch (IllegalAccessException e) {
smallsql/database/language/Language.java۞252۩assert(false): "Internal error: must never happen.";
smallsql/database/language/Language.java۞253۩}
smallsql/database/language/Language.java۞254۩catch (ClassNotFoundException e) {
smallsql/database/language/Language.java۞256۩}
smallsql/database/language/Language.java۞257۩catch (InstantiationException e) {
smallsql/database/language/Language.java۞258۩assert(false): "Error during Language instantiation: " + e.getMessage();
smallsql/database/language/Language.java۞259۩}
smallsql/database/language/Language.java۞261۩int lastUndsc = part.lastIndexOf("_");
smallsql/database/language/Language.java۞263۩if (lastUndsc > -1) part = part.substring(0, lastUndsc);
smallsql/database/language/Language.java۞264۩else break;
smallsql/database/language/Language.java۞265۩}
smallsql/database/language/Language.java۞267۩throw new IllegalArgumentException("Locale not found in the tree: " + localeStr);
smallsql/database/language/Language.java۞268۩}
smallsql/database/language/Language.java۞274۩protected Language() {
smallsql/database/language/Language.java۞275۩messages = new HashMap((int)(MESSAGES.length / 0.7));
smallsql/database/language/Language.java۞276۩sqlStates = new HashMap((int)(MESSAGES.length / 0.7));
smallsql/database/language/Language.java۞277۩addMessages(MESSAGES);
smallsql/database/language/Language.java۞278۩setSqlStates();
smallsql/database/language/Language.java۞279۩}
smallsql/database/language/Language.java۞291۩protected final void addMessages(String[][] entries)
smallsql/database/language/Language.java۞292۩throws IllegalArgumentException {
smallsql/database/language/Language.java۞293۩Set inserted = new HashSet();
smallsql/database/language/Language.java۞295۩for (int i = 0; i < entries.length; i++) {
smallsql/database/language/Language.java۞296۩String key = entries[i][0];
smallsql/database/language/Language.java۞298۩if (! inserted.add(key)) {
smallsql/database/language/Language.java۞299۩throw new IllegalArgumentException("Duplicate key: " + key);
smallsql/database/language/Language.java۞300۩}
smallsql/database/language/Language.java۞301۩else {
smallsql/database/language/Language.java۞302۩String value = entries[i][1];
smallsql/database/language/Language.java۞303۩messages.put(key, value);
smallsql/database/language/Language.java۞304۩}
smallsql/database/language/Language.java۞305۩}
smallsql/database/language/Language.java۞306۩}
smallsql/database/language/Language.java۞318۩private final void setSqlStates() {
smallsql/database/language/Language.java۞319۩Set inserted = new HashSet();
smallsql/database/language/Language.java۞321۩for (int i = 0; i < SQL_STATES.length; i++) {
smallsql/database/language/Language.java۞322۩String key = SQL_STATES[i][0];
smallsql/database/language/Language.java۞324۩if (! inserted.add(key)) {
smallsql/database/language/Language.java۞325۩throw new IllegalArgumentException("Duplicate key: " + key);
smallsql/database/language/Language.java۞326۩}
smallsql/database/language/Language.java۞327۩else {
smallsql/database/language/Language.java۞328۩String value = SQL_STATES[i][1];
smallsql/database/language/Language.java۞329۩sqlStates.put(key, value);
smallsql/database/language/Language.java۞330۩}
smallsql/database/language/Language.java۞331۩}
smallsql/database/language/Language.java۞332۩}
smallsql/database/language/Language.java۞334۩public String getMessage(String key) {
smallsql/database/language/Language.java۞335۩String message = (String) messages.get(key);
smallsql/database/language/Language.java۞336۩assert(message != null): "Message code not found: " + key;
smallsql/database/language/Language.java۞337۩return message;
smallsql/database/language/Language.java۞338۩}
smallsql/database/language/Language.java۞340۩public String getSqlState(String key) {
smallsql/database/language/Language.java۞341۩String sqlState = (String) sqlStates.get(key);
smallsql/database/language/Language.java۞342۩assert(sqlState != null): "SQL State code not found: " + key;
smallsql/database/language/Language.java۞343۩return sqlState;
smallsql/database/language/Language.java۞344۩}
smallsql/database/language/Language.java۞346۩public String[][] getEntries() {
smallsql/database/language/Language.java۞347۩return MESSAGES;
smallsql/database/language/Language.java۞348۩}
smallsql/database/language/Language.java۞354۩private final String[][] MESSAGES = {
smallsql/database/language/Language.java۞355۩{ CUSTOM_MESSAGE           		  , "{0}" },
smallsql/database/language/Language.java۞357۩{ UNSUPPORTED_OPERATION           , "Unsupported Operation {0}." },
smallsql/database/language/Language.java۞358۩{ CANT_LOCK_FILE                  , "Can''t lock file ''{0}''. A single SmallSQL Database can only be opened from a single process." },
smallsql/database/language/Language.java۞360۩{ DB_EXISTENT                     , "Database ''{0}'' already exists." },
smallsql/database/language/Language.java۞361۩{ DB_NONEXISTENT                  , "Database ''{0}'' does not exist." },
smallsql/database/language/Language.java۞362۩{ DB_NOT_DIRECTORY                , "Directory ''{0}'' is not a SmallSQL database." },
smallsql/database/language/Language.java۞363۩{ DB_NOTCONNECTED                 , "You are not connected with a Database." },
smallsql/database/language/Language.java۞365۩{ CONNECTION_CLOSED               , "Connection is already closed." },
smallsql/database/language/Language.java۞367۩{ VIEW_INSERT                     , "INSERT is not supported for a view." },
smallsql/database/language/Language.java۞368۩{ VIEWDROP_NOT_VIEW               , "Cannot use DROP VIEW with ''{0}'' because it does not is a view." },
smallsql/database/language/Language.java۞369۩{ VIEW_CANTDROP                   , "View ''{0}'' can''t be dropped." },
smallsql/database/language/Language.java۞371۩{ RSET_NOT_PRODUCED               , "No ResultSet was produced." },
smallsql/database/language/Language.java۞372۩{ RSET_READONLY                   , "ResultSet is read only." },
smallsql/database/language/Language.java۞373۩{ RSET_FWDONLY                    , "ResultSet is forward only." },
smallsql/database/language/Language.java۞374۩{ RSET_CLOSED                     , "ResultSet is closed." },
smallsql/database/language/Language.java۞375۩{ RSET_NOT_INSERT_ROW             , "Cursor is currently not on the insert row." },
smallsql/database/language/Language.java۞376۩{ RSET_ON_INSERT_ROW              , "Cursor is currently on the insert row." },
smallsql/database/language/Language.java۞377۩{ ROWSOURCE_READONLY              , "Rowsource is read only." },
smallsql/database/language/Language.java۞378۩{ STMT_IS_CLOSED                  , "Statement is already closed." },
smallsql/database/language/Language.java۞380۩{ SUBQUERY_COL_COUNT              , "Count of columns in subquery must be 1 and not {0}." },
smallsql/database/language/Language.java۞381۩{ JOIN_DELETE                     , "The method deleteRow not supported on joins." },
smallsql/database/language/Language.java۞382۩{ JOIN_INSERT                     , "The method insertRow not supported on joins." },
smallsql/database/language/Language.java۞383۩{ DELETE_WO_FROM                  , "The method deleteRow need a FROM expression." },
smallsql/database/language/Language.java۞384۩{ INSERT_WO_FROM                  , "The method insertRow need a FROM expression." },
smallsql/database/language/Language.java۞386۩{ TABLE_CANT_RENAME               , "Table ''{0}'' can''t be renamed." },
smallsql/database/language/Language.java۞387۩{ TABLE_CANT_DROP                 , "Table ''{0}'' can''t be dropped." },
smallsql/database/language/Language.java۞388۩{ TABLE_CANT_DROP_LOCKED          , "Table ''{0}'' can''t drop because is locked." },
smallsql/database/language/Language.java۞389۩{ TABLE_CORRUPT_PAGE              , "Corrupt table page at position: {0}." },
smallsql/database/language/Language.java۞390۩{ TABLE_MODIFIED                  , "Table ''{0}'' was modified." },
smallsql/database/language/Language.java۞391۩{ TABLE_DEADLOCK                  , "Deadlock, can not create a lock on table ''{0}''." },
smallsql/database/language/Language.java۞392۩{ TABLE_OR_VIEW_MISSING           , "Table or View ''{0}'' does not exist." },
smallsql/database/language/Language.java۞393۩{ TABLE_FILE_INVALID              , "File ''{0}'' does not include a valid SmallSQL Table." },
smallsql/database/language/Language.java۞394۩{ TABLE_OR_VIEW_FILE_INVALID      , "File ''{0}'' is not a valid Table or View store." },
smallsql/database/language/Language.java۞395۩{ TABLE_EXISTENT                  , "Table or View ''{0}'' already exists." },
smallsql/database/language/Language.java۞397۩{ FK_NOT_TABLE                    , "''{0}'' is not a table." },
smallsql/database/language/Language.java۞398۩{ PK_ONLYONE                      , "A table can have only one primary key." },
smallsql/database/language/Language.java۞399۩{ KEY_DUPLICATE                   , "Duplicate Key." },
smallsql/database/language/Language.java۞401۩{ MONTH_TOOLARGE                  , "Months are too large in DATE or TIMESTAMP value ''{0}''." },
smallsql/database/language/Language.java۞402۩{ DAYS_TOOLARGE                   , "Days are too large in DATE or TIMESTAMP value ''{0}''." },
smallsql/database/language/Language.java۞403۩{ HOURS_TOOLARGE                  , "Hours are too large in TIME or TIMESTAMP value ''{0}''." },
smallsql/database/language/Language.java۞404۩{ MINUTES_TOOLARGE                , "Minutes are too large in TIME or TIMESTAMP value ''{0}''." },
smallsql/database/language/Language.java۞405۩{ SECS_TOOLARGE                   , "Seconds are too large in TIME or TIMESTAMP value ''{0}''." },
smallsql/database/language/Language.java۞406۩{ MILLIS_TOOLARGE                 , "Milliseconds are too large in TIMESTAMP value ''{0}''." },
smallsql/database/language/Language.java۞407۩{ DATETIME_INVALID                , "''{0}'' is an invalid DATE, TIME or TIMESTAMP." },
smallsql/database/language/Language.java۞409۩{ UNSUPPORTED_CONVERSION_OPER     , "Unsupported conversion to data type ''{0}'' from data type ''{1}'' for operation ''{2}''." },
smallsql/database/language/Language.java۞410۩{ UNSUPPORTED_DATATYPE_OPER       , "Unsupported data type ''{0}'' for operation ''{1}''." },
smallsql/database/language/Language.java۞411۩{ UNSUPPORTED_DATATYPE_FUNC       , "Unsupported data type ''{0}'' for function ''{1}''." },
smallsql/database/language/Language.java۞412۩{ UNSUPPORTED_CONVERSION_FUNC     , "Unsupported conversion to data type ''{0}'' for function ''{1}''." },
smallsql/database/language/Language.java۞413۩{ UNSUPPORTED_TYPE_CONV           , "Unsupported type for CONVERT function: {0}." },
smallsql/database/language/Language.java۞414۩{ UNSUPPORTED_TYPE_SUM            , "Unsupported data type ''{0}'' for SUM function." },
smallsql/database/language/Language.java۞415۩{ UNSUPPORTED_TYPE_MAX            , "Unsupported data type ''{0}'' for MAX function." },
smallsql/database/language/Language.java۞416۩{ UNSUPPORTED_CONVERSION          , "Can''t convert ''{0}'' [{1}] to ''{2}''." },
smallsql/database/language/Language.java۞417۩{ INSERT_INVALID_LEN              , "Invalid length ''{0}'' in function INSERT." },
smallsql/database/language/Language.java۞418۩{ SUBSTR_INVALID_LEN              , "Invalid length ''{0}'' in function SUBSTRING." },
smallsql/database/language/Language.java۞420۩{ VALUE_STR_TOOLARGE              , "String value too large for column." },
smallsql/database/language/Language.java۞421۩{ VALUE_BIN_TOOLARGE              , "Binary value with length {0} to large for column with size {1}." },
smallsql/database/language/Language.java۞422۩{ VALUE_NULL_INVALID              , "Null values are not valid for column ''{0}''." },
smallsql/database/language/Language.java۞423۩{ VALUE_CANT_CONVERT              , "Cannot convert a {0} value to a {1} value." },
smallsql/database/language/Language.java۞425۩{ BYTEARR_INVALID_SIZE            , "Invalid byte array size {0} for UNIQUEIDENFIER." },
smallsql/database/language/Language.java۞426۩{ LOB_DELETED                     , "Lob Object was deleted." },
smallsql/database/language/Language.java۞428۩{ PARAM_CLASS_UNKNOWN             , "Unknown parameter class: ''{0}''." },
smallsql/database/language/Language.java۞429۩{ PARAM_EMPTY                     , "Parameter {0} is empty." },
smallsql/database/language/Language.java۞430۩{ PARAM_IDX_OUT_RANGE             , "Parameter index {0} out of range. The value must be between 1 and {1}." },
smallsql/database/language/Language.java۞432۩{ COL_DUPLICATE                	  , "There is a duplicated column name: ''{0}''." },
smallsql/database/language/Language.java۞433۩{ COL_MISSING                     , "Column ''{0}'' not found." },
smallsql/database/language/Language.java۞434۩{ COL_VAL_UNMATCH                 , "Columns and Values count is not identical." },
smallsql/database/language/Language.java۞435۩{ COL_INVALID_SIZE                , "Invalid column size {0} for column ''{1}''." },
smallsql/database/language/Language.java۞436۩{ COL_WRONG_PREFIX                , "The column prefix ''{0}'' does not match with a table name or alias name used in this query." },
smallsql/database/language/Language.java۞437۩{ COL_READONLY                    , "Column {0} is read only." },
smallsql/database/language/Language.java۞438۩{ COL_INVALID_NAME                , "Invalid column name ''{0}''." },
smallsql/database/language/Language.java۞439۩{ COL_IDX_OUT_RANGE               , "Column index out of range: {0}." },
smallsql/database/language/Language.java۞440۩{ COL_AMBIGUOUS                   , "Column ''{0}'' is ambiguous." },
smallsql/database/language/Language.java۞442۩{ GROUP_AGGR_INVALID              , "Aggregate function are not valid in the GROUP BY clause ({0})." },
smallsql/database/language/Language.java۞443۩{ GROUP_AGGR_NOTPART              , "Expression ''{0}'' is not part of a aggregate function or GROUP BY clause." },
smallsql/database/language/Language.java۞444۩{ ORDERBY_INTERNAL                , "Internal Error with ORDER BY." },
smallsql/database/language/Language.java۞445۩{ UNION_DIFFERENT_COLS            , "Different SELECT of the UNION have different column count: {0} and {1}." },
smallsql/database/language/Language.java۞447۩{ INDEX_EXISTS                    , "Index ''{0}'' already exists." },
smallsql/database/language/Language.java۞448۩{ INDEX_MISSING                   , "Index ''{0}'' does not exist." },
smallsql/database/language/Language.java۞449۩{ INDEX_FILE_INVALID              , "File ''{0}'' is not a valid Index store." },
smallsql/database/language/Language.java۞450۩{ INDEX_CORRUPT                   , "Error in loading Index. Index file is corrupt. ({0})." },
smallsql/database/language/Language.java۞451۩{ INDEX_TOOMANY_EQUALS            , "Too many equals entry in Index." },
smallsql/database/language/Language.java۞453۩{ FILE_TOONEW                     , "File version ({0}) of file ''{1}'' is too new for this runtime." },
smallsql/database/language/Language.java۞454۩{ FILE_TOOOLD                     , "File version ({0}) of file ''{1}'' is too old for this runtime." },
smallsql/database/language/Language.java۞455۩{ FILE_CANT_DELETE                , "File ''{0}'' can't be deleted." },
smallsql/database/language/Language.java۞457۩{ ROW_0_ABSOLUTE                  , "Row 0 is invalid for method absolute()." },
smallsql/database/language/Language.java۞458۩{ ROW_NOCURRENT                   , "No current row." },
smallsql/database/language/Language.java۞459۩{ ROWS_WRONG_MAX                  , "Wrong max rows value: {0}." },
smallsql/database/language/Language.java۞460۩{ ROW_LOCKED                      , "Row is locked from another Connection." },
smallsql/database/language/Language.java۞461۩{ ROW_DELETED                     , "Row already deleted." },
smallsql/database/language/Language.java۞463۩{ SAVEPT_INVALID_TRANS            , "Savepoint is not valid for this transaction." },
smallsql/database/language/Language.java۞464۩{ SAVEPT_INVALID_DRIVER           , "Savepoint is not valid for this driver {0}." },
smallsql/database/language/Language.java۞466۩{ ALIAS_UNSUPPORTED               , "Alias not supported for this type of row source." },
smallsql/database/language/Language.java۞467۩{ ISOLATION_UNKNOWN               , "Unknown Transaction Isolation Level: {0}." },
smallsql/database/language/Language.java۞468۩{ FLAGVALUE_INVALID               , "Invalid flag value in method getMoreResults: {0}." },
smallsql/database/language/Language.java۞469۩{ ARGUMENT_INVALID                , "Invalid argument in method setNeedGenratedKeys: {0}." },
smallsql/database/language/Language.java۞470۩{ GENER_KEYS_UNREQUIRED           , "GeneratedKeys not requested." },
smallsql/database/language/Language.java۞471۩{ SEQUENCE_HEX_INVALID            , "Invalid hex sequence at {0}." },
smallsql/database/language/Language.java۞472۩{ SEQUENCE_HEX_INVALID_STR        , "Invalid hex sequence at position {0} in ''{1}''." },
smallsql/database/language/Language.java۞474۩{ SYNTAX_BASE_OFS            	  , "Syntax error at offset {0} on ''{1}''. " },
smallsql/database/language/Language.java۞475۩{ SYNTAX_BASE_END        		  , "Syntax error, unexpected end of SQL string. " },
smallsql/database/language/Language.java۞476۩{ STXADD_ADDITIONAL_TOK			  , "Additional token after end of SQL statement." },
smallsql/database/language/Language.java۞477۩{ STXADD_IDENT_EXPECT			  , "Identifier expected." },
smallsql/database/language/Language.java۞478۩{ STXADD_IDENT_EMPTY 			  , "Empty Identifier." },
smallsql/database/language/Language.java۞479۩{ STXADD_IDENT_WRONG 			  , "Wrong Identifier ''{0}''." },
smallsql/database/language/Language.java۞480۩{ STXADD_OPER_MINUS 			  , "Invalid operator minus for data type VARBINARY." },
smallsql/database/language/Language.java۞481۩{ STXADD_FUNC_UNKNOWN 			  , "Unknown function." },
smallsql/database/language/Language.java۞482۩{ STXADD_PARAM_INVALID_COUNT	  , "Invalid parameter count." },
smallsql/database/language/Language.java۞483۩{ STXADD_JOIN_INVALID	  		  , "Invalid Join Syntax." },
smallsql/database/language/Language.java۞484۩{ STXADD_FROM_PAR_CLOSE	  		  , "Unexpected closing parenthesis in FROM clause." },
smallsql/database/language/Language.java۞485۩{ STXADD_KEYS_REQUIRED	  		  , "Required keywords are: " },
smallsql/database/language/Language.java۞486۩{ STXADD_NOT_NUMBER	  		      , "Number value required (passed = ''{0}'')." },
smallsql/database/language/Language.java۞487۩{ STXADD_COMMENT_OPEN			  , "Missing end comment mark (''*/'')." },
smallsql/database/language/Language.java۞488۩};
smallsql/database/language/Language.java۞494۩private final String[][] SQL_STATES = {
smallsql/database/language/Language.java۞495۩{ CUSTOM_MESSAGE           		  , "01000" },
smallsql/database/language/Language.java۞497۩{ UNSUPPORTED_OPERATION           , "01000" },
smallsql/database/language/Language.java۞498۩{ CANT_LOCK_FILE                  , "01000" },
smallsql/database/language/Language.java۞500۩{ DB_EXISTENT                     , "01000" },
smallsql/database/language/Language.java۞501۩{ DB_NONEXISTENT                  , "01000" },
smallsql/database/language/Language.java۞502۩{ DB_NOT_DIRECTORY                , "01000" },
smallsql/database/language/Language.java۞503۩{ DB_NOTCONNECTED                 , "01000" },
smallsql/database/language/Language.java۞505۩{ CONNECTION_CLOSED               , "01000" },
smallsql/database/language/Language.java۞507۩{ VIEW_INSERT                     , "01000" },
smallsql/database/language/Language.java۞508۩{ VIEWDROP_NOT_VIEW               , "01000" },
smallsql/database/language/Language.java۞509۩{ VIEW_CANTDROP                   , "01000" },
smallsql/database/language/Language.java۞511۩{ RSET_NOT_PRODUCED               , "01000" },
smallsql/database/language/Language.java۞512۩{ RSET_READONLY                   , "01000" },
smallsql/database/language/Language.java۞513۩{ RSET_FWDONLY                    , "01000" },
smallsql/database/language/Language.java۞514۩{ RSET_CLOSED                     , "01000" },
smallsql/database/language/Language.java۞515۩{ RSET_NOT_INSERT_ROW             , "01000" },
smallsql/database/language/Language.java۞516۩{ RSET_ON_INSERT_ROW              , "01000" },
smallsql/database/language/Language.java۞517۩{ ROWSOURCE_READONLY              , "01000" },
smallsql/database/language/Language.java۞518۩{ STMT_IS_CLOSED                  , "HY010" },
smallsql/database/language/Language.java۞520۩{ SUBQUERY_COL_COUNT              , "01000" },
smallsql/database/language/Language.java۞521۩{ JOIN_DELETE                     , "01000" },
smallsql/database/language/Language.java۞522۩{ JOIN_INSERT                     , "01000" },
smallsql/database/language/Language.java۞523۩{ DELETE_WO_FROM                  , "01000" },
smallsql/database/language/Language.java۞524۩{ INSERT_WO_FROM                  , "01000" },
smallsql/database/language/Language.java۞526۩{ TABLE_CANT_RENAME               , "01000" },
smallsql/database/language/Language.java۞527۩{ TABLE_CANT_DROP                 , "01000" },
smallsql/database/language/Language.java۞528۩{ TABLE_CANT_DROP_LOCKED          , "01000" },
smallsql/database/language/Language.java۞529۩{ TABLE_CORRUPT_PAGE              , "01000" },
smallsql/database/language/Language.java۞530۩{ TABLE_MODIFIED                  , "01000" },
smallsql/database/language/Language.java۞531۩{ TABLE_DEADLOCK                  , "01000" },
smallsql/database/language/Language.java۞532۩{ TABLE_OR_VIEW_MISSING           , "01000" },
smallsql/database/language/Language.java۞533۩{ TABLE_FILE_INVALID              , "01000" },
smallsql/database/language/Language.java۞534۩{ TABLE_OR_VIEW_FILE_INVALID      , "01000" },
smallsql/database/language/Language.java۞535۩{ TABLE_EXISTENT                  , "01000" },
smallsql/database/language/Language.java۞537۩{ FK_NOT_TABLE                    , "01000" },
smallsql/database/language/Language.java۞538۩{ PK_ONLYONE                      , "01000" },
smallsql/database/language/Language.java۞539۩{ KEY_DUPLICATE                   , "01000" },
smallsql/database/language/Language.java۞541۩{ MONTH_TOOLARGE                  , "01000" },
smallsql/database/language/Language.java۞542۩{ DAYS_TOOLARGE                   , "01000" },
smallsql/database/language/Language.java۞543۩{ HOURS_TOOLARGE                  , "01000" },
smallsql/database/language/Language.java۞544۩{ MINUTES_TOOLARGE                , "01000" },
smallsql/database/language/Language.java۞545۩{ SECS_TOOLARGE                   , "01000" },
smallsql/database/language/Language.java۞546۩{ MILLIS_TOOLARGE                 , "01000" },
smallsql/database/language/Language.java۞547۩{ DATETIME_INVALID                , "01000" },
smallsql/database/language/Language.java۞549۩{ UNSUPPORTED_CONVERSION_OPER     , "01000" },
smallsql/database/language/Language.java۞550۩{ UNSUPPORTED_DATATYPE_OPER       , "01000" },
smallsql/database/language/Language.java۞551۩{ UNSUPPORTED_DATATYPE_FUNC       , "01000" },
smallsql/database/language/Language.java۞552۩{ UNSUPPORTED_CONVERSION_FUNC     , "01000" },
smallsql/database/language/Language.java۞553۩{ UNSUPPORTED_TYPE_CONV           , "01000" },
smallsql/database/language/Language.java۞554۩{ UNSUPPORTED_TYPE_SUM            , "01000" },
smallsql/database/language/Language.java۞555۩{ UNSUPPORTED_TYPE_MAX            , "01000" },
smallsql/database/language/Language.java۞556۩{ UNSUPPORTED_CONVERSION          , "01000" },
smallsql/database/language/Language.java۞557۩{ INSERT_INVALID_LEN              , "01000" },
smallsql/database/language/Language.java۞558۩{ SUBSTR_INVALID_LEN              , "01000" },
smallsql/database/language/Language.java۞560۩{ VALUE_STR_TOOLARGE              , "01000" },
smallsql/database/language/Language.java۞561۩{ VALUE_BIN_TOOLARGE              , "01000" },
smallsql/database/language/Language.java۞562۩{ VALUE_NULL_INVALID              , "01000" },
smallsql/database/language/Language.java۞563۩{ VALUE_CANT_CONVERT              , "01000" },
smallsql/database/language/Language.java۞565۩{ BYTEARR_INVALID_SIZE            , "01000" },
smallsql/database/language/Language.java۞566۩{ LOB_DELETED                     , "01000" },
smallsql/database/language/Language.java۞568۩{ PARAM_CLASS_UNKNOWN             , "01000" },
smallsql/database/language/Language.java۞569۩{ PARAM_EMPTY                     , "01000" },
smallsql/database/language/Language.java۞570۩{ PARAM_IDX_OUT_RANGE             , "01000" },
smallsql/database/language/Language.java۞572۩{ COL_DUPLICATE                	  , "01000" },
smallsql/database/language/Language.java۞573۩{ COL_MISSING                     , "01000" },
smallsql/database/language/Language.java۞574۩{ COL_VAL_UNMATCH                 , "01000" },
smallsql/database/language/Language.java۞575۩{ COL_INVALID_SIZE                , "01000" },
smallsql/database/language/Language.java۞576۩{ COL_WRONG_PREFIX                , "01000" },
smallsql/database/language/Language.java۞577۩{ COL_READONLY                    , "01000" },
smallsql/database/language/Language.java۞578۩{ COL_INVALID_NAME                , "01000" },
smallsql/database/language/Language.java۞579۩{ COL_IDX_OUT_RANGE               , "01000" },
smallsql/database/language/Language.java۞580۩{ COL_AMBIGUOUS                   , "01000" },
smallsql/database/language/Language.java۞582۩{ GROUP_AGGR_INVALID              , "01000" },
smallsql/database/language/Language.java۞583۩{ GROUP_AGGR_NOTPART              , "01000" },
smallsql/database/language/Language.java۞584۩{ ORDERBY_INTERNAL                , "01000" },
smallsql/database/language/Language.java۞585۩{ UNION_DIFFERENT_COLS            , "01000" },
smallsql/database/language/Language.java۞587۩{ INDEX_EXISTS                    , "01000" },
smallsql/database/language/Language.java۞588۩{ INDEX_MISSING                   , "01000" },
smallsql/database/language/Language.java۞589۩{ INDEX_FILE_INVALID              , "01000" },
smallsql/database/language/Language.java۞590۩{ INDEX_CORRUPT                   , "01000" },
smallsql/database/language/Language.java۞591۩{ INDEX_TOOMANY_EQUALS            , "01000" },
smallsql/database/language/Language.java۞593۩{ FILE_TOONEW                     , "01000" },
smallsql/database/language/Language.java۞594۩{ FILE_TOOOLD                     , "01000" },
smallsql/database/language/Language.java۞595۩{ FILE_CANT_DELETE                , "01000" },
smallsql/database/language/Language.java۞597۩{ ROW_0_ABSOLUTE                  , "01000" },
smallsql/database/language/Language.java۞598۩{ ROW_NOCURRENT                   , "01000" },
smallsql/database/language/Language.java۞599۩{ ROWS_WRONG_MAX                  , "01000" },
smallsql/database/language/Language.java۞600۩{ ROW_LOCKED                      , "01000" },
smallsql/database/language/Language.java۞601۩{ ROW_DELETED                     , "01000" },
smallsql/database/language/Language.java۞603۩{ SAVEPT_INVALID_TRANS            , "01000" },
smallsql/database/language/Language.java۞604۩{ SAVEPT_INVALID_DRIVER           , "01000" },
smallsql/database/language/Language.java۞606۩{ ALIAS_UNSUPPORTED               , "01000" },
smallsql/database/language/Language.java۞607۩{ ISOLATION_UNKNOWN               , "01000" },
smallsql/database/language/Language.java۞608۩{ FLAGVALUE_INVALID               , "01000" },
smallsql/database/language/Language.java۞609۩{ ARGUMENT_INVALID                , "01000" },
smallsql/database/language/Language.java۞610۩{ GENER_KEYS_UNREQUIRED           , "01000" },
smallsql/database/language/Language.java۞611۩{ SEQUENCE_HEX_INVALID            , "01000" },
smallsql/database/language/Language.java۞612۩{ SEQUENCE_HEX_INVALID_STR        , "01000" },
smallsql/database/language/Language.java۞614۩{ SYNTAX_BASE_OFS            	  , "01000" },
smallsql/database/language/Language.java۞615۩{ SYNTAX_BASE_END        		  , "01000" },
smallsql/database/language/Language.java۞616۩{ STXADD_ADDITIONAL_TOK			  , "01000" },
smallsql/database/language/Language.java۞617۩{ STXADD_IDENT_EXPECT			  , "01000" },
smallsql/database/language/Language.java۞618۩{ STXADD_IDENT_EMPTY 			  , "01000" },
smallsql/database/language/Language.java۞619۩{ STXADD_IDENT_WRONG 			  , "01000" },
smallsql/database/language/Language.java۞620۩{ STXADD_OPER_MINUS 			  , "01000" },
smallsql/database/language/Language.java۞621۩{ STXADD_FUNC_UNKNOWN 			  , "01000" },
smallsql/database/language/Language.java۞622۩{ STXADD_PARAM_INVALID_COUNT	  , "01000" },
smallsql/database/language/Language.java۞623۩{ STXADD_JOIN_INVALID	  		  , "01000" },
smallsql/database/language/Language.java۞624۩{ STXADD_FROM_PAR_CLOSE	  		  , "01000" },
smallsql/database/language/Language.java۞625۩{ STXADD_KEYS_REQUIRED	  		  , "01000" },
smallsql/database/language/Language.java۞626۩{ STXADD_NOT_NUMBER	  		      , "01000" },
smallsql/database/language/Language.java۞627۩{ STXADD_COMMENT_OPEN			  , "01000" },
smallsql/database/language/Language.java۞628۩};
smallsql/database/language/Language.java۞629۩}
smallsql/database/language/Language_de.java۞33۩package smallsql.database.language;
smallsql/database/language/Language_de.java۞38۩public class Language_de extends Language {
smallsql/database/language/Language_de.java۞39۩protected Language_de() {
smallsql/database/language/Language_de.java۞40۩addMessages(ENTRIES);
smallsql/database/language/Language_de.java۞41۩}
smallsql/database/language/Language_de.java۞43۩public String[][] getEntries() {
smallsql/database/language/Language_de.java۞44۩return ENTRIES;
smallsql/database/language/Language_de.java۞45۩}
smallsql/database/language/Language_de.java۞51۩private final String[][] ENTRIES = {
smallsql/database/language/Language_de.java۞52۩{ UNSUPPORTED_OPERATION           , "Nicht unterstützte Funktion: {0}" },
smallsql/database/language/Language_de.java۞53۩{ CANT_LOCK_FILE                  , "Die Datei ''{0}'' kann nicht gelockt werden. Eine einzelne SmallSQL Datenbank kann nur für einen einzigen Prozess geöffnet werden." },
smallsql/database/language/Language_de.java۞55۩{ DB_EXISTENT                     , "Die Datenbank ''{0}'' existiert bereits." },
smallsql/database/language/Language_de.java۞56۩{ DB_NONEXISTENT                  , "Die Datenbank ''{0}'' existiert nicht." },
smallsql/database/language/Language_de.java۞57۩{ DB_NOT_DIRECTORY                , "Das Verzeichnis ''{0}'' ist keine SmallSQL Datenbank." },
smallsql/database/language/Language_de.java۞58۩{ DB_NOTCONNECTED                 , "Sie sind nicht mit einer Datenbank verbunden." },
smallsql/database/language/Language_de.java۞60۩{ CONNECTION_CLOSED               , "Die Verbindung ist bereits geschlossen." },
smallsql/database/language/Language_de.java۞62۩{ VIEW_INSERT                     , "INSERT wird nicht unterstützt für eine View." },
smallsql/database/language/Language_de.java۞63۩{ VIEWDROP_NOT_VIEW               , "DROP VIEW kann nicht mit ''{0}'' verwendet werden, weil es keine View ist." },
smallsql/database/language/Language_de.java۞64۩{ VIEW_CANTDROP                   , "View ''{0}'' kann nicht gelöscht werden." },
smallsql/database/language/Language_de.java۞66۩{ RSET_NOT_PRODUCED               , "Es wurde kein ResultSet erzeugt." },
smallsql/database/language/Language_de.java۞67۩{ RSET_READONLY                   , "Das ResultSet ist schreibgeschützt." },
smallsql/database/language/Language_de.java۞68۩{ RSET_FWDONLY                    , "Das ResultSet ist forward only." },
smallsql/database/language/Language_de.java۞69۩{ RSET_CLOSED                     , "Das ResultSet ist geschlossen." },
smallsql/database/language/Language_de.java۞70۩{ RSET_NOT_INSERT_ROW             , "Der Cursor zeigt aktuell nicht auf die Einfügeposition (insert row)." },
smallsql/database/language/Language_de.java۞71۩{ RSET_ON_INSERT_ROW              , "Der Cursor zeigt aktuell auf die Einfügeposition (insert row)." },
smallsql/database/language/Language_de.java۞72۩{ ROWSOURCE_READONLY              , "Die Rowsource ist schreibgeschützt." },
smallsql/database/language/Language_de.java۞73۩{ STMT_IS_CLOSED                  , "Das Statement ist bereits geschlossen." },
smallsql/database/language/Language_de.java۞75۩{ SUBQUERY_COL_COUNT              , "Die Anzahl der Spalten in der Subquery muss 1 sein und nicht {0}." },
smallsql/database/language/Language_de.java۞76۩{ JOIN_DELETE                     , "Die Methode deleteRow wird nicht unterstützt für Joins." },
smallsql/database/language/Language_de.java۞77۩{ JOIN_INSERT                     , "Die Methode insertRow wird nicht unterstützt für Joins." },
smallsql/database/language/Language_de.java۞78۩{ DELETE_WO_FROM                  , "Die Methode deleteRow benötigt einen FROM Ausdruck." },
smallsql/database/language/Language_de.java۞79۩{ INSERT_WO_FROM                  , "Die Methode insertRow benötigt einen FROM Ausdruck." },
smallsql/database/language/Language_de.java۞81۩{ TABLE_CANT_RENAME               , "Die Tabelle ''{0}'' kann nicht umbenannt werden." },
smallsql/database/language/Language_de.java۞82۩{ TABLE_CANT_DROP                 , "Die Tabelle ''{0}'' kann nicht gelöscht werden." },
smallsql/database/language/Language_de.java۞83۩{ TABLE_CANT_DROP_LOCKED          , "Die Tabelle ''{0}'' kann nicht gelöscht werden, weil sie gelockt ist." },
smallsql/database/language/Language_de.java۞84۩{ TABLE_CORRUPT_PAGE              , "Beschädigte Tabellenseite bei Position: {0}." },
smallsql/database/language/Language_de.java۞85۩{ TABLE_MODIFIED                  , "Die Tabelle ''{0}'' wurde modifiziert." },
smallsql/database/language/Language_de.java۞86۩{ TABLE_DEADLOCK                  , "Deadlock, es kann kein Lock erzeugt werden für Tabelle ''{0}''." },
smallsql/database/language/Language_de.java۞87۩{ TABLE_OR_VIEW_MISSING           , "Tabelle oder View ''{0}'' existiert nicht." },
smallsql/database/language/Language_de.java۞88۩{ TABLE_FILE_INVALID              , "Die Datei ''{0}'' enthält keine gültige SmallSQL Tabelle." },
smallsql/database/language/Language_de.java۞89۩{ TABLE_OR_VIEW_FILE_INVALID      , "Die Datei ''{0}'' ist keine gültiger Tabellen oder View Speicher." },
smallsql/database/language/Language_de.java۞90۩{ TABLE_EXISTENT                  , "Die Tabelle oder View ''{0}'' existiert bereits." },
smallsql/database/language/Language_de.java۞92۩{ FK_NOT_TABLE                    , "''{0}'' ist keine Tabelle." },
smallsql/database/language/Language_de.java۞93۩{ PK_ONLYONE                      , "Eine Tabelle kann nur einen Primärschlüssel haben." },
smallsql/database/language/Language_de.java۞94۩{ KEY_DUPLICATE                   , "Doppelter Schlüssel." },
smallsql/database/language/Language_de.java۞96۩{ MONTH_TOOLARGE                  , "Der Monat ist zu groß im DATE oder TIMESTAMP Wert ''{0}''." },
smallsql/database/language/Language_de.java۞97۩{ DAYS_TOOLARGE                   , "Die Tage sind zu groß im DATE oder TIMESTAMP Wert ''{0}''." },
smallsql/database/language/Language_de.java۞98۩{ HOURS_TOOLARGE                  , "Die Stunden sind zu groß im TIME oder TIMESTAMP Wert ''{0}''." },
smallsql/database/language/Language_de.java۞99۩{ MINUTES_TOOLARGE                , "Die Minuten sind zu groß im TIME oder TIMESTAMP Wert ''{0}''." },
smallsql/database/language/Language_de.java۞100۩{ SECS_TOOLARGE                   , "Die Sekunden sind zu groß im TIME oder TIMESTAMP Wert ''{0}''." },
smallsql/database/language/Language_de.java۞101۩{ MILLIS_TOOLARGE                 , "Die Millisekunden sind zu groß im TIMESTAMP Wert ''{0}''." },
smallsql/database/language/Language_de.java۞102۩{ DATETIME_INVALID                , "''{0}'' ist ein ungültiges DATE, TIME or TIMESTAMP." },
smallsql/database/language/Language_de.java۞104۩{ UNSUPPORTED_CONVERSION_OPER     , "Nicht unterstützte Konvertierung zu Datentyp ''{0}'' von Datentyp ''{1}'' für die Operation ''{2}''." },
smallsql/database/language/Language_de.java۞105۩{ UNSUPPORTED_DATATYPE_OPER       , "Nicht unterstützter Datentyp ''{0}'' für Operation ''{1}''." },
smallsql/database/language/Language_de.java۞106۩{ UNSUPPORTED_DATATYPE_FUNC       , "Nicht unterstützter Datentyp ''{0}'' für Funktion ''{1}''." },
smallsql/database/language/Language_de.java۞107۩{ UNSUPPORTED_CONVERSION_FUNC     , "Nicht unterstützte Konvertierung zu Datentyp ''{0}'' für Funktion ''{1}''." },
smallsql/database/language/Language_de.java۞108۩{ UNSUPPORTED_TYPE_CONV           , "Nicht unterstützter Typ für CONVERT Funktion: {0}." },
smallsql/database/language/Language_de.java۞109۩{ UNSUPPORTED_TYPE_SUM            , "Nicht unterstützter Datentyp ''{0}'' für SUM Funktion." },
smallsql/database/language/Language_de.java۞110۩{ UNSUPPORTED_TYPE_MAX            , "Nicht unterstützter Datentyp ''{0}'' für MAX Funktion." },
smallsql/database/language/Language_de.java۞111۩{ UNSUPPORTED_CONVERSION          , "Kann nicht konvertieren ''{0}'' [{1}] zu ''{2}''." },
smallsql/database/language/Language_de.java۞112۩{ INSERT_INVALID_LEN              , "Ungültige Länge ''{0}'' in Funktion INSERT." },
smallsql/database/language/Language_de.java۞113۩{ SUBSTR_INVALID_LEN              , "Ungültige Länge ''{0}'' in Funktion SUBSTRING." },
smallsql/database/language/Language_de.java۞115۩{ VALUE_STR_TOOLARGE              , "Der String Wert ist zu groß für die Spalte." },
smallsql/database/language/Language_de.java۞116۩{ VALUE_BIN_TOOLARGE              , "Ein Binäre Wert mit Länge {0} ist zu groß für eine Spalte mit der Größe {1}." },
smallsql/database/language/Language_de.java۞117۩{ VALUE_NULL_INVALID              , "Null Werte sind ungültig für die Spalte ''{0}''." },
smallsql/database/language/Language_de.java۞118۩{ VALUE_CANT_CONVERT              , "Kann nicht konvertieren ein {0} Wert zu einem {1} Wert." },
smallsql/database/language/Language_de.java۞120۩{ BYTEARR_INVALID_SIZE            , "Ungültige Bytearray Große {0} für UNIQUEIDENFIER." },
smallsql/database/language/Language_de.java۞121۩{ LOB_DELETED                     , "Lob Objekt wurde gelöscht." },
smallsql/database/language/Language_de.java۞123۩{ PARAM_CLASS_UNKNOWN             , "Unbekante Parameter Klasse: ''{0}''." },
smallsql/database/language/Language_de.java۞124۩{ PARAM_EMPTY                     , "Parameter {0} ist leer." },
smallsql/database/language/Language_de.java۞125۩{ PARAM_IDX_OUT_RANGE             , "Parameter Index {0} liegt außerhalb des Gültigkeitsbereiches. Der Wert muss zwischen 1 und {1} liegen." },
smallsql/database/language/Language_de.java۞127۩{ COL_DUPLICATE                   , "Es gibt einen doppelten Spaltennamen: ''{0}''." },
smallsql/database/language/Language_de.java۞128۩{ COL_MISSING                     , "Spalte ''{0}'' wurde nicht gefunden." },
smallsql/database/language/Language_de.java۞129۩{ COL_VAL_UNMATCH                 , "Die Spaltenanzahl und Werteanzahl ist nicht identisch." },
smallsql/database/language/Language_de.java۞130۩{ COL_INVALID_SIZE                , "Ungültige Spaltengröße {0} für Spalte ''{1}''." },
smallsql/database/language/Language_de.java۞131۩{ COL_WRONG_PREFIX                , "Der Spaltenprefix ''{0}'' passt zu keinem Tabellennamen oder Aliasnamen in dieser Abfrage." },
smallsql/database/language/Language_de.java۞132۩{ COL_READONLY                    , "Die Spalte {0} ist schreibgeschützt." },
smallsql/database/language/Language_de.java۞133۩{ COL_INVALID_NAME                , "Ungültiger Spaltenname ''{0}''." },
smallsql/database/language/Language_de.java۞134۩{ COL_IDX_OUT_RANGE               , "Spaltenindex außerhalb des Gültigkeitsbereiches: {0}." },
smallsql/database/language/Language_de.java۞135۩{ COL_AMBIGUOUS                   , "Die Spalte ''{0}'' ist mehrdeutig." },
smallsql/database/language/Language_de.java۞137۩{ GROUP_AGGR_INVALID              , "Aggregatfunktion sind nicht erlaubt im GROUP BY Klausel: ({0})." },
smallsql/database/language/Language_de.java۞138۩{ GROUP_AGGR_NOTPART              , "Der Ausdruck ''{0}'' ist nicht Teil einer Aggregatfunktion oder GROUP BY Klausel." },
smallsql/database/language/Language_de.java۞139۩{ ORDERBY_INTERNAL                , "Interner Error mit ORDER BY." },
smallsql/database/language/Language_de.java۞140۩{ UNION_DIFFERENT_COLS            , "Die SELECT Teile des UNION haben eine unterschiedliche Spaltenanzahl: {0} und {1}." },
smallsql/database/language/Language_de.java۞142۩{ INDEX_EXISTS                    , "Index ''{0}'' existiert bereits." },
smallsql/database/language/Language_de.java۞143۩{ INDEX_MISSING                   , "Index ''{0}'' existiert nicht." },
smallsql/database/language/Language_de.java۞144۩{ INDEX_FILE_INVALID              , "Die Datei ''{0}'' ist kein gültiger Indexspeicher." },
smallsql/database/language/Language_de.java۞145۩{ INDEX_CORRUPT                   , "Error beim Laden des Index. Die Index Datei ist beschädigt. ({0})." },
smallsql/database/language/Language_de.java۞146۩{ INDEX_TOOMANY_EQUALS            , "Zu viele identische Einträge im Index." },
smallsql/database/language/Language_de.java۞148۩{ FILE_TOONEW                     , "Dateiversion ({0}) der Datei ''{1}'' ist zu neu für diese Laufzeitbibliothek." },
smallsql/database/language/Language_de.java۞149۩{ FILE_TOOOLD                     , "Dateiversion ({0}) der Datei ''{1}'' ist zu alt für diese Laufzeitbibliothek." },
smallsql/database/language/Language_de.java۞150۩{ FILE_CANT_DELETE                , "Datei ''{0}'' kann nicht gelöscht werden." },
smallsql/database/language/Language_de.java۞152۩{ ROW_0_ABSOLUTE                  , "Datensatz 0 ist ungültig für die Methode absolute()." },
smallsql/database/language/Language_de.java۞153۩{ ROW_NOCURRENT                   , "Kein aktueller Datensatz." },
smallsql/database/language/Language_de.java۞154۩{ ROWS_WRONG_MAX                  , "Fehlerhafter Wert für Maximale Datensatzanzahl: {0}." },
smallsql/database/language/Language_de.java۞155۩{ ROW_LOCKED                      , "Der Datensatz ist gelocked von einer anderen Verbindung." },
smallsql/database/language/Language_de.java۞156۩{ ROW_DELETED                     , "Der Datensatz ist bereits gelöscht." },
smallsql/database/language/Language_de.java۞158۩{ SAVEPT_INVALID_TRANS            , "Der Savepoint ist nicht gültig für die aktuelle Transaction." },
smallsql/database/language/Language_de.java۞159۩{ SAVEPT_INVALID_DRIVER           , "Der Savepoint ist nicht gültig für diesen Treiber {0}." },
smallsql/database/language/Language_de.java۞161۩{ ALIAS_UNSUPPORTED               , "Ein Alias ist nicht erlaubt für diesen Typ von Rowsource." },
smallsql/database/language/Language_de.java۞162۩{ ISOLATION_UNKNOWN               , "Unbekantes Transaktion Isolation Level: {0}." },
smallsql/database/language/Language_de.java۞163۩{ FLAGVALUE_INVALID               , "Ungültiger Wert des Flags in Methode getMoreResults: {0}." },
smallsql/database/language/Language_de.java۞164۩{ ARGUMENT_INVALID                , "Ungültiges Argument in Methode setNeedGenratedKeys: {0}." },
smallsql/database/language/Language_de.java۞165۩{ GENER_KEYS_UNREQUIRED           , "GeneratedKeys wurden nicht angefordert." },
smallsql/database/language/Language_de.java۞166۩{ SEQUENCE_HEX_INVALID            , "Ungültige Hexadecimal Sequenze bei Position {0}." },
smallsql/database/language/Language_de.java۞167۩{ SEQUENCE_HEX_INVALID_STR        , "Ungültige Hexadecimal Sequenze bei Position {0} in ''{1}''." },
smallsql/database/language/Language_de.java۞169۩{ SYNTAX_BASE_OFS                 , "Syntax Error bei Position {0} in ''{1}''. " },
smallsql/database/language/Language_de.java۞170۩{ SYNTAX_BASE_END                 , "Syntax Error, unerwartetes Ende des SQL Strings. " },
smallsql/database/language/Language_de.java۞171۩{ STXADD_ADDITIONAL_TOK           , "Zusätzliche Zeichen nach dem Ende des SQL statement." },
smallsql/database/language/Language_de.java۞172۩{ STXADD_IDENT_EXPECT             , "Bezeichner erwartet." },
smallsql/database/language/Language_de.java۞173۩{ STXADD_IDENT_EMPTY              , "Leerer Bezeichner." },
smallsql/database/language/Language_de.java۞174۩{ STXADD_IDENT_WRONG              , "Ungültiger Bezeichner ''{0}''." },
smallsql/database/language/Language_de.java۞175۩{ STXADD_OPER_MINUS               , "Ungültiger Operator Minus für Datentyp VARBINARY." },
smallsql/database/language/Language_de.java۞176۩{ STXADD_FUNC_UNKNOWN             , "Unbekannte Funktion." },
smallsql/database/language/Language_de.java۞177۩{ STXADD_PARAM_INVALID_COUNT      , "Ungültige Paramter Anzahl." },
smallsql/database/language/Language_de.java۞178۩{ STXADD_JOIN_INVALID             , "Ungültige Join Syntax." },
smallsql/database/language/Language_de.java۞179۩{ STXADD_FROM_PAR_CLOSE           , "Unerwartet schließende Klammer in FROM Klausel." },
smallsql/database/language/Language_de.java۞180۩{ STXADD_KEYS_REQUIRED            , "Benötige Schlüsselwörter sind: " },
smallsql/database/language/Language_de.java۞181۩{ STXADD_NOT_NUMBER               , "Eine Zahl ist erforderlich: ''{0}''." },
smallsql/database/language/Language_de.java۞182۩{ STXADD_COMMENT_OPEN             , "Fehlendes Kommentarende ''*/''." },
smallsql/database/language/Language_de.java۞183۩};
smallsql/database/language/Language_de.java۞184۩}
smallsql/database/language/Language_en.java۞33۩package smallsql.database.language;
smallsql/database/language/Language_en.java۞38۩public class Language_en extends Language{
smallsql/database/language/Language_en.java۞41۩}
smallsql/database/language/Language_it.java۞33۩package smallsql.database.language;
smallsql/database/language/Language_it.java۞38۩public class Language_it extends Language {
smallsql/database/language/Language_it.java۞39۩protected Language_it() {
smallsql/database/language/Language_it.java۞40۩addMessages(ENTRIES);
smallsql/database/language/Language_it.java۞41۩}
smallsql/database/language/Language_it.java۞43۩public String[][] getEntries() {
smallsql/database/language/Language_it.java۞44۩return ENTRIES;
smallsql/database/language/Language_it.java۞45۩}
smallsql/database/language/Language_it.java۞51۩private final String[][] ENTRIES = {
smallsql/database/language/Language_it.java۞52۩{ UNSUPPORTED_OPERATION           , "Operazione non supportata: {0}." },
smallsql/database/language/Language_it.java۞53۩{ CANT_LOCK_FILE                  , "Impossibile bloccare il file ''{0}''. Un database SmallSQL Database può essere aperto da un unico processo." },
smallsql/database/language/Language_it.java۞55۩{ DB_EXISTENT                     , "Il database ''{0}'' è già esistente." },
smallsql/database/language/Language_it.java۞56۩{ DB_NONEXISTENT                  , "Il database ''{0}'' Non esiste." },
smallsql/database/language/Language_it.java۞57۩{ DB_NOT_DIRECTORY                , "La directory ''{0}'' non è un database SmallSQL." },
smallsql/database/language/Language_it.java۞58۩{ DB_NOTCONNECTED                 , "L''utente non è connesso a un database." },
smallsql/database/language/Language_it.java۞60۩{ CONNECTION_CLOSED               , "La connessione è già chiusa." },
smallsql/database/language/Language_it.java۞62۩{ VIEW_INSERT                     , "INSERT non è supportato per una view." },
smallsql/database/language/Language_it.java۞63۩{ VIEWDROP_NOT_VIEW               , "Non è possibile effettuare DROP VIEW con ''{0}'' perché non è una view." },
smallsql/database/language/Language_it.java۞64۩{ VIEW_CANTDROP                   , "Non si può effettuare drop sulla view ''{0}''." },
smallsql/database/language/Language_it.java۞66۩{ RSET_NOT_PRODUCED               , "Nessun ResultSet è stato prodotto." },
smallsql/database/language/Language_it.java۞67۩{ RSET_READONLY                   , "Il ResultSet è di sola lettura." },
smallsql/database/language/Language_it.java۞68۩{ RSET_FWDONLY                    , "Il ResultSet è forward only." },
smallsql/database/language/Language_it.java۞69۩{ RSET_CLOSED                     , "Il ResultSet è chiuso." },
smallsql/database/language/Language_it.java۞70۩{ RSET_NOT_INSERT_ROW             , "Il cursore non è attualmente nella riga ''InsertRow''." },
smallsql/database/language/Language_it.java۞71۩{ RSET_ON_INSERT_ROW              , "Il cursore è attualmente nella riga ''InsertRow''." },
smallsql/database/language/Language_it.java۞72۩{ ROWSOURCE_READONLY              , "Il Rowsource è di sola lettura." },
smallsql/database/language/Language_it.java۞74۩{ STMT_IS_CLOSED                  , "Lo Statement è in stato chiuso." },
smallsql/database/language/Language_it.java۞76۩{ SUBQUERY_COL_COUNT              , "Il conteggio delle colonne nella subquery deve essere 1 e non {0}." },
smallsql/database/language/Language_it.java۞77۩{ JOIN_DELETE                     , "DeleteRow non supportato nelle join." },
smallsql/database/language/Language_it.java۞78۩{ JOIN_INSERT                     , "InsertRow non supportato nelle join." },
smallsql/database/language/Language_it.java۞79۩{ DELETE_WO_FROM                  , "DeleteRow necessita un''espressione FROM." },
smallsql/database/language/Language_it.java۞80۩{ INSERT_WO_FROM                  , "InsertRow necessita un''espressione FROM." },
smallsql/database/language/Language_it.java۞82۩{ TABLE_CANT_RENAME               , "La tabella ''{0}'' non può essere rinominata." },
smallsql/database/language/Language_it.java۞83۩{ TABLE_CANT_DROP                 , "Non si può effettuare DROP della tabella ''{0}''." },
smallsql/database/language/Language_it.java۞84۩{ TABLE_CANT_DROP_LOCKED          , "Non si può effettuare DROP della tabella ''{0}'' perché è in LOCK." },
smallsql/database/language/Language_it.java۞85۩{ TABLE_CORRUPT_PAGE              , "Pagina della tabella corrotta alla posizione: {0}." },
smallsql/database/language/Language_it.java۞86۩{ TABLE_MODIFIED                  , "La tabella ''{0}'' è stata modificata." },
smallsql/database/language/Language_it.java۞87۩{ TABLE_DEADLOCK                  , "Deadlock: non si può mettere un lock sulla tabella ''{0}''." },
smallsql/database/language/Language_it.java۞88۩{ TABLE_OR_VIEW_MISSING           , "La tabella/view ''{0}'' non esiste." },
smallsql/database/language/Language_it.java۞89۩{ TABLE_FILE_INVALID              , "Il file ''{0}'' non include una tabella SmallSQL valida." },
smallsql/database/language/Language_it.java۞90۩{ TABLE_OR_VIEW_FILE_INVALID      , "Il file ''{0}'' non è un contenitore valido di tabella/view." },
smallsql/database/language/Language_it.java۞91۩{ TABLE_EXISTENT                  , "La tabella/vista ''{0}'' è già esistente." },
smallsql/database/language/Language_it.java۞93۩{ FK_NOT_TABLE                    , "''{0}'' non è una tabella." },
smallsql/database/language/Language_it.java۞94۩{ PK_ONLYONE                      , "Una tabella può avere solo una primary key." },
smallsql/database/language/Language_it.java۞95۩{ KEY_DUPLICATE                   , "Chiave duplicata." },
smallsql/database/language/Language_it.java۞97۩{ MONTH_TOOLARGE                  , "Valore del mese troppo alto del in DATE o TIMESTAMP ''{0}''." },
smallsql/database/language/Language_it.java۞98۩{ DAYS_TOOLARGE                   , "Valore del giorno troppo altro in DATE o TIMESTAMP ''{0}''." },
smallsql/database/language/Language_it.java۞99۩{ HOURS_TOOLARGE                  , "Valore delle ore troppo alto in in TIME o TIMESTAMP ''{0}''." },
smallsql/database/language/Language_it.java۞100۩{ MINUTES_TOOLARGE                , "Valore dei minuti troppo alto in TIME o TIMESTAMP ''{0}''." },
smallsql/database/language/Language_it.java۞101۩{ SECS_TOOLARGE                   , "Valore dei secondi troppo alto in TIME o TIMESTAMP ''{0}''." },
smallsql/database/language/Language_it.java۞102۩{ MILLIS_TOOLARGE                 , "VAlore dei millisecondi troppo alto in TIMESTAMP ''{0}''." },
smallsql/database/language/Language_it.java۞103۩{ DATETIME_INVALID                , "''{0}'' è un DATE, TIME or TIMESTAMP non valido." },
smallsql/database/language/Language_it.java۞105۩{ UNSUPPORTED_CONVERSION_OPER     , "Conversione non supportata verso il tipo di dato ''{0}'' dal tipo ''{1}'' per l''operazione ''{2}''." },
smallsql/database/language/Language_it.java۞106۩{ UNSUPPORTED_DATATYPE_OPER       , "Tipo di dato ''{0}'' non supportato per l''operazione ''{1}''." },
smallsql/database/language/Language_it.java۞107۩{ UNSUPPORTED_DATATYPE_FUNC       , "Tipo di dato ''{0}'' non supportato per la funzione ''{1}''." },
smallsql/database/language/Language_it.java۞108۩{ UNSUPPORTED_CONVERSION_FUNC     , "Conversione verso il tipo di dato ''{0}'' non supportato per la funzione ''{1}''." },
smallsql/database/language/Language_it.java۞109۩{ UNSUPPORTED_TYPE_CONV           , "Tipo non supportato per la funzione CONVERT: {0}." },
smallsql/database/language/Language_it.java۞110۩{ UNSUPPORTED_TYPE_SUM            , "Tipo non supportato per la funzione SUM: ''{0}''." },
smallsql/database/language/Language_it.java۞111۩{ UNSUPPORTED_TYPE_MAX            , "Tipo non supportato per la funzione MAX: ''{0}''." },
smallsql/database/language/Language_it.java۞112۩{ UNSUPPORTED_CONVERSION          , "Non è possible convertire ''{0}'' [{1}] in ''{2}''." },
smallsql/database/language/Language_it.java۞113۩{ INSERT_INVALID_LEN              , "Lunghezza non valida ''{0}'' per la funzione INSERT." },
smallsql/database/language/Language_it.java۞114۩{ SUBSTR_INVALID_LEN              , "Lunghezza non valida ''{0}'' per la funzione SUBSTRING." },
smallsql/database/language/Language_it.java۞116۩{ VALUE_STR_TOOLARGE              , "Stringa troppo lunga per la colonna." },
smallsql/database/language/Language_it.java۞117۩{ VALUE_BIN_TOOLARGE              , "Valore binario di lunghezza {0} eccessiva per la colonna di lunghezza {1}." },
smallsql/database/language/Language_it.java۞118۩{ VALUE_NULL_INVALID              , "Valori nulli non validi per la colonna ''{0}''." },
smallsql/database/language/Language_it.java۞119۩{ VALUE_CANT_CONVERT              , "Impossible convertire un valore {0} in un valore {1}." },
smallsql/database/language/Language_it.java۞121۩{ BYTEARR_INVALID_SIZE            , "Lunghezza non valida per un array di bytes: {0}." },
smallsql/database/language/Language_it.java۞122۩{ LOB_DELETED                     , "L''oggetto LOB è stato cancellato." },
smallsql/database/language/Language_it.java۞124۩{ PARAM_CLASS_UNKNOWN             , "Classe sconosciuta (''{0}'') per il parametro." },
smallsql/database/language/Language_it.java۞125۩{ PARAM_EMPTY                     , "Il parametro {0} è vuoto." },
smallsql/database/language/Language_it.java۞126۩{ PARAM_IDX_OUT_RANGE             , "L''indice {0} per il parametro è fuori dall''intervallo consentito ( 1 <= n <= {1} )." },
smallsql/database/language/Language_it.java۞128۩{ COL_DUPLICATE                	  , "Nome di colonna duplicato: ''{0}''." },
smallsql/database/language/Language_it.java۞129۩{ COL_MISSING                     , "Colonna ''{0}'' non trovata." },
smallsql/database/language/Language_it.java۞130۩{ COL_VAL_UNMATCH                 , "Il conteggio di colonne e valori non è identico." },
smallsql/database/language/Language_it.java۞131۩{ COL_INVALID_SIZE                , "Lunghezza non valida ({0}) per la colonna ''{1}''." },
smallsql/database/language/Language_it.java۞132۩{ COL_WRONG_PREFIX                , "Il prefisso di colonna ''{0}'' non coincide con un alias o nome di tabella usato nella query." },
smallsql/database/language/Language_it.java۞133۩{ COL_READONLY                    , "La colonna ''{0}'' è di sola lettura." },
smallsql/database/language/Language_it.java۞134۩{ COL_INVALID_NAME                , "Nome di colonna non valido ''{0}''." },
smallsql/database/language/Language_it.java۞135۩{ COL_IDX_OUT_RANGE               , "Indice di colonna fuori dall''intervallo valido: {0}." },
smallsql/database/language/Language_it.java۞136۩{ COL_AMBIGUOUS                   , "Il nome di colonna ''{0}'' è ambiguo." },
smallsql/database/language/Language_it.java۞138۩{ GROUP_AGGR_INVALID              , "Funzione di aggregrazione non valida per la clausola GROUP BY: ({0})." },
smallsql/database/language/Language_it.java۞139۩{ GROUP_AGGR_NOTPART              , "L''espressione ''{0}'' non è parte di una funzione di aggregazione o della clausola GROUP BY." },
smallsql/database/language/Language_it.java۞140۩{ ORDERBY_INTERNAL                , "Errore interno per ORDER BY." },
smallsql/database/language/Language_it.java۞141۩{ UNION_DIFFERENT_COLS            , "SELECT appartenenti ad una UNION con numero di colonne differenti: {0} e {1}." },
smallsql/database/language/Language_it.java۞143۩{ INDEX_EXISTS                    , "L''indice ''{0}'' è già esistente." },
smallsql/database/language/Language_it.java۞144۩{ INDEX_MISSING                   , "L''indice ''{0}'' non esiste." },
smallsql/database/language/Language_it.java۞145۩{ INDEX_FILE_INVALID              , "Il file ''{0}'' non è un contenitore valido per un indice." },
smallsql/database/language/Language_it.java۞146۩{ INDEX_CORRUPT                   , "Errore durante il caricamento dell''indice. File dell''indice corrotto: ''{0}''." },
smallsql/database/language/Language_it.java۞147۩{ INDEX_TOOMANY_EQUALS            , "Troppe voci uguali nell''indice." },
smallsql/database/language/Language_it.java۞149۩{ FILE_TOONEW                     , "La versione ({0}) del file ''{1}'' è troppo recente per questo runtime." },
smallsql/database/language/Language_it.java۞150۩{ FILE_TOOOLD                     , "La versione ({0}) del file ''{1}'' è troppo vecchia per questo runtime." },
smallsql/database/language/Language_it.java۞151۩{ FILE_CANT_DELETE                , "File ''(0)'' non possono essere eliminati." },
smallsql/database/language/Language_it.java۞153۩{ ROW_0_ABSOLUTE                  , "Il numero di riga 0 non è valido per il metodo ''absolute()''." },
smallsql/database/language/Language_it.java۞154۩{ ROW_NOCURRENT                   , "Nessuna riga corrente." },
smallsql/database/language/Language_it.java۞155۩{ ROWS_WRONG_MAX                  , "Numero massimo di righe non valido ({0})." },
smallsql/database/language/Language_it.java۞156۩{ ROW_LOCKED                      , "La riga è bloccata da un''altra connessione." },
smallsql/database/language/Language_it.java۞157۩{ ROW_DELETED                     , "Riga già cancellata." },
smallsql/database/language/Language_it.java۞159۩{ SAVEPT_INVALID_TRANS            , "SAVEPOINT non valido per questa transazione." },
smallsql/database/language/Language_it.java۞160۩{ SAVEPT_INVALID_DRIVER           , "SAVEPOINT non valido per questo driver {0}." },
smallsql/database/language/Language_it.java۞162۩{ ALIAS_UNSUPPORTED               , "Alias non supportato per questo tipo di sorgente righe." },
smallsql/database/language/Language_it.java۞163۩{ ISOLATION_UNKNOWN               , "Livello di Isolamento transazione sconosciuto: {0}." },
smallsql/database/language/Language_it.java۞164۩{ FLAGVALUE_INVALID               , "Flag non valida nel metodo ''getMoreResults'': {0}." },
smallsql/database/language/Language_it.java۞165۩{ ARGUMENT_INVALID                , "Argomento non valido nel metodo ''setNeedGenratedKeys'': {0}." },
smallsql/database/language/Language_it.java۞166۩{ GENER_KEYS_UNREQUIRED           , "GeneratedKeys non richieste." },
smallsql/database/language/Language_it.java۞167۩{ SEQUENCE_HEX_INVALID            , "Sequenza esadecimale non valido alla posizione {0}." },
smallsql/database/language/Language_it.java۞168۩{ SEQUENCE_HEX_INVALID_STR        , "Sequence esadecimale non valida alla positione {0} in ''{1}''." },
smallsql/database/language/Language_it.java۞170۩{ SYNTAX_BASE_OFS            	  , "Errore di sintassi alla posizione {0} in ''{1}''. " },
smallsql/database/language/Language_it.java۞171۩{ SYNTAX_BASE_END        		  , "Errore di sintassi, fine inattesa della stringa SQL. " },
smallsql/database/language/Language_it.java۞172۩{ STXADD_ADDITIONAL_TOK			  , "Token aggiuntivo dopo la fine dell''istruzione SQL." },
smallsql/database/language/Language_it.java۞173۩{ STXADD_IDENT_EXPECT			  , "Identificatore atteso." },
smallsql/database/language/Language_it.java۞174۩{ STXADD_IDENT_EMPTY 			  , "Identificatore vuoto." },
smallsql/database/language/Language_it.java۞175۩{ STXADD_IDENT_WRONG 			  , "Identificatore errato ''{0}''." },
smallsql/database/language/Language_it.java۞176۩{ STXADD_OPER_MINUS 			  , "Operatore ''meno'' non valido per il tipo di dato varbinary." },
smallsql/database/language/Language_it.java۞177۩{ STXADD_FUNC_UNKNOWN 			  , "Funzione sconosciuta." },
smallsql/database/language/Language_it.java۞178۩{ STXADD_PARAM_INVALID_COUNT	  , "Totale parametri non valido." },
smallsql/database/language/Language_it.java۞179۩{ STXADD_JOIN_INVALID	  		  , "Sintassi della join non valida." },
smallsql/database/language/Language_it.java۞180۩{ STXADD_FROM_PAR_CLOSE	  		  , "Parentesi chiusa non attesa nella clausola from." },
smallsql/database/language/Language_it.java۞181۩{ STXADD_KEYS_REQUIRED	  		  , "Le parole chiave richieste sono: " },
smallsql/database/language/Language_it.java۞182۩{ STXADD_NOT_NUMBER	  		      , "Richiesto valore numerico (passato = ''{0}'')." },
smallsql/database/language/Language_it.java۞183۩{ STXADD_COMMENT_OPEN	  		  , "Chiusura del commento mancante (''*/'')." },
smallsql/database/language/Language_it.java۞184۩};
smallsql/database/language/Language_it.java۞185۩}
smallsql/junit/AllTests.java۞33۩package smallsql.junit;
smallsql/junit/AllTests.java۞35۩import junit.framework.*;
smallsql/junit/AllTests.java۞36۩import java.sql.*;
smallsql/junit/AllTests.java۞37۩import java.util.Properties;
smallsql/junit/AllTests.java۞39۩public class AllTests extends TestCase{
smallsql/junit/AllTests.java۞41۩final static String CATALOG = "AllTests";
smallsql/junit/AllTests.java۞42۩final static String JDBC_URL = "jdbc:smallsql:" + CATALOG;
smallsql/junit/AllTests.java۞43۩private static Connection con;
smallsql/junit/AllTests.java۞46۩public static Connection getConnection() throws SQLException{
smallsql/junit/AllTests.java۞47۩if(con == null || con.isClosed()){
smallsql/junit/AllTests.java۞48۩con = createConnection();
smallsql/junit/AllTests.java۞49۩}
smallsql/junit/AllTests.java۞50۩return con;
smallsql/junit/AllTests.java۞51۩}
smallsql/junit/AllTests.java۞56۩public static Connection createConnection() throws SQLException{
smallsql/junit/AllTests.java۞58۩new smallsql.database.SSDriver();
smallsql/junit/AllTests.java۞59۩new sun.jdbc.odbc.JdbcOdbcDriver();
smallsql/junit/AllTests.java۞60۩return DriverManager.getConnection(JDBC_URL + "?create=true;locale=en");
smallsql/junit/AllTests.java۞62۩}
smallsql/junit/AllTests.java۞75۩public static Connection createConnection(String urlAddition,
smallsql/junit/AllTests.java۞76۩Properties info)
smallsql/junit/AllTests.java۞77۩throws SQLException {
smallsql/junit/AllTests.java۞78۩new smallsql.database.SSDriver();
smallsql/junit/AllTests.java۞79۩new sun.jdbc.odbc.JdbcOdbcDriver();
smallsql/junit/AllTests.java۞81۩if (urlAddition == null) urlAddition = "";
smallsql/junit/AllTests.java۞82۩if (info == null) info = new Properties();
smallsql/junit/AllTests.java۞84۩String urlComplete = JDBC_URL + urlAddition;
smallsql/junit/AllTests.java۞86۩return DriverManager.getConnection(urlComplete, info);
smallsql/junit/AllTests.java۞87۩}
smallsql/junit/AllTests.java۞89۩public static void printRS( ResultSet rs ) throws SQLException{
smallsql/junit/AllTests.java۞90۩while(rs.next()){
smallsql/junit/AllTests.java۞91۩for(int i=1; i<=rs.getMetaData().getColumnCount(); i++){
smallsql/junit/AllTests.java۞92۩System.out.print(rs.getObject(i)+"\t");
smallsql/junit/AllTests.java۞93۩}
smallsql/junit/AllTests.java۞94۩System.out.println();
smallsql/junit/AllTests.java۞95۩}
smallsql/junit/AllTests.java۞96۩}
smallsql/junit/AllTests.java۞98۩public static Test suite() throws Exception{
smallsql/junit/AllTests.java۞99۩TestSuite theSuite = new TestSuite("SmallSQL all Tests");
smallsql/junit/AllTests.java۞100۩theSuite.addTestSuite( TestAlterTable.class );
smallsql/junit/AllTests.java۞101۩theSuite.addTestSuite( TestAlterTable2.class );
smallsql/junit/AllTests.java۞102۩theSuite.addTest    ( TestDataTypes.suite() );
smallsql/junit/AllTests.java۞103۩theSuite.addTestSuite(TestDBMetaData.class);
smallsql/junit/AllTests.java۞104۩theSuite.addTestSuite(TestExceptionMethods.class);
smallsql/junit/AllTests.java۞105۩theSuite.addTest     (TestExceptions.suite());
smallsql/junit/AllTests.java۞106۩theSuite.addTestSuite(TestDeleteUpdate.class);
smallsql/junit/AllTests.java۞107۩theSuite.addTest     (TestFunctions.suite() );
smallsql/junit/AllTests.java۞108۩theSuite.addTestSuite(TestGroupBy.class);
smallsql/junit/AllTests.java۞109۩theSuite.addTestSuite(TestIdentifer.class);
smallsql/junit/AllTests.java۞110۩theSuite.addTest     (TestJoins.suite());
smallsql/junit/AllTests.java۞111۩theSuite.addTestSuite(TestLanguage.class);
smallsql/junit/AllTests.java۞112۩theSuite.addTestSuite(TestMoneyRounding.class );
smallsql/junit/AllTests.java۞113۩theSuite.addTest     (TestOperatoren.suite() );
smallsql/junit/AllTests.java۞114۩theSuite.addTestSuite(TestOrderBy.class);
smallsql/junit/AllTests.java۞115۩theSuite.addTestSuite(TestOther.class);
smallsql/junit/AllTests.java۞116۩theSuite.addTestSuite(TestResultSet.class);
smallsql/junit/AllTests.java۞117۩theSuite.addTestSuite(TestScrollable.class);
smallsql/junit/AllTests.java۞118۩theSuite.addTestSuite(TestStatement.class);
smallsql/junit/AllTests.java۞119۩theSuite.addTestSuite(TestThreads.class);
smallsql/junit/AllTests.java۞120۩theSuite.addTestSuite(TestTokenizer.class);
smallsql/junit/AllTests.java۞121۩theSuite.addTestSuite(TestTransactions.class);
smallsql/junit/AllTests.java۞122۩return theSuite;
smallsql/junit/AllTests.java۞123۩}
smallsql/junit/AllTests.java۞125۩public static void main(String[] argv) {
smallsql/junit/AllTests.java۞126۩try{
smallsql/junit/AllTests.java۞128۩junit.textui.TestRunner.main(new String[]{AllTests.class.getName()});
smallsql/junit/AllTests.java۞129۩}catch(Throwable e){
smallsql/junit/AllTests.java۞130۩e.printStackTrace();
smallsql/junit/AllTests.java۞131۩}
smallsql/junit/AllTests.java۞132۩}
smallsql/junit/AllTests.java۞134۩}
smallsql/junit/BasicTestCase.java۞33۩package smallsql.junit;
smallsql/junit/BasicTestCase.java۞35۩import junit.framework.*;
smallsql/junit/BasicTestCase.java۞37۩import java.io.*;
smallsql/junit/BasicTestCase.java۞38۩import java.math.BigDecimal;
smallsql/junit/BasicTestCase.java۞39۩import java.sql.*;
smallsql/junit/BasicTestCase.java۞40۩import java.text.DateFormatSymbols;
smallsql/junit/BasicTestCase.java۞42۩public class BasicTestCase extends TestCase {
smallsql/junit/BasicTestCase.java۞45۩protected static final String[] MONTHS =
smallsql/junit/BasicTestCase.java۞46۩new DateFormatSymbols().getShortMonths();
smallsql/junit/BasicTestCase.java۞48۩public BasicTestCase(){
smallsql/junit/BasicTestCase.java۞49۩super();
smallsql/junit/BasicTestCase.java۞50۩}
smallsql/junit/BasicTestCase.java۞52۩public BasicTestCase(String name){
smallsql/junit/BasicTestCase.java۞53۩super(makeNameValid(name));
smallsql/junit/BasicTestCase.java۞54۩}
smallsql/junit/BasicTestCase.java۞56۩private static String makeNameValid(String name){
smallsql/junit/BasicTestCase.java۞57۩return name.replace(',' , ';').replace('(','{');
smallsql/junit/BasicTestCase.java۞58۩}
smallsql/junit/BasicTestCase.java۞60۩void dropTable(Connection con, String name) throws SQLException{
smallsql/junit/BasicTestCase.java۞61۩try {
smallsql/junit/BasicTestCase.java۞62۩Statement st = con.createStatement();
smallsql/junit/BasicTestCase.java۞63۩st.execute("drop table "+name);
smallsql/junit/BasicTestCase.java۞64۩st.close();
smallsql/junit/BasicTestCase.java۞65۩} catch (SQLException e) {
smallsql/junit/BasicTestCase.java۞66۩String msg = e.getMessage();
smallsql/junit/BasicTestCase.java۞67۩if(msg.indexOf("[SmallSQL]Table")==0 && msg.indexOf(name)>0 && msg.indexOf("can't be dropped.")>0 ){
smallsql/junit/BasicTestCase.java۞68۩return;
smallsql/junit/BasicTestCase.java۞69۩}
smallsql/junit/BasicTestCase.java۞70۩throw e;
smallsql/junit/BasicTestCase.java۞71۩}
smallsql/junit/BasicTestCase.java۞72۩}
smallsql/junit/BasicTestCase.java۞74۩void dropView(Connection con, String name){
smallsql/junit/BasicTestCase.java۞75۩try {
smallsql/junit/BasicTestCase.java۞76۩Statement st = con.createStatement();
smallsql/junit/BasicTestCase.java۞77۩st.execute("drop view "+name);
smallsql/junit/BasicTestCase.java۞78۩st.close();
smallsql/junit/BasicTestCase.java۞79۩} catch (SQLException e) {}
smallsql/junit/BasicTestCase.java۞80۩}
smallsql/junit/BasicTestCase.java۞82۩public void assertRSMetaData( ResultSet rs, String[] colNames, int[] types) throws Exception{
smallsql/junit/BasicTestCase.java۞83۩ResultSetMetaData rm = rs.getMetaData();
smallsql/junit/BasicTestCase.java۞84۩int count = rm.getColumnCount();
smallsql/junit/BasicTestCase.java۞85۩assertEquals( "Column count:", colNames.length, count);
smallsql/junit/BasicTestCase.java۞86۩for(int i=1; i<=count; i++){
smallsql/junit/BasicTestCase.java۞87۩assertEquals("Col "+i+" name", colNames[i-1], rm.getColumnName(i));
smallsql/junit/BasicTestCase.java۞88۩assertEquals("Col "+i+" label", colNames[i-1], rm.getColumnLabel(i));
smallsql/junit/BasicTestCase.java۞89۩assertEquals("Col "+i+" type", types   [i-1], rm.getColumnType(i));
smallsql/junit/BasicTestCase.java۞90۩switch(types[i-1]){
smallsql/junit/BasicTestCase.java۞91۩case Types.VARCHAR:
smallsql/junit/BasicTestCase.java۞92۩assertTrue  ("Wrong Precision (" + rm.getColumnTypeName(i) + ") for Column "+i+": "+rm.getPrecision(i), rm.getPrecision(i) > 0);
smallsql/junit/BasicTestCase.java۞93۩break;
smallsql/junit/BasicTestCase.java۞94۩case Types.INTEGER:
smallsql/junit/BasicTestCase.java۞95۩assertTrue  ("Wrong Precision (" + rm.getColumnTypeName(i) + ") for Column "+i, rm.getPrecision(i) > 0);
smallsql/junit/BasicTestCase.java۞96۩break;
smallsql/junit/BasicTestCase.java۞97۩}
smallsql/junit/BasicTestCase.java۞98۩}
smallsql/junit/BasicTestCase.java۞99۩}
smallsql/junit/BasicTestCase.java۞101۩private final static char[] digits = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
smallsql/junit/BasicTestCase.java۞102۩private static String bytes2hex( byte[] bytes ){
smallsql/junit/BasicTestCase.java۞103۩StringBuffer buf = new StringBuffer(bytes.length << 1);
smallsql/junit/BasicTestCase.java۞104۩for(int i=0; i<bytes.length; i++){
smallsql/junit/BasicTestCase.java۞105۩buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );
smallsql/junit/BasicTestCase.java۞106۩buf.append( digits[ (bytes[i]     ) & 0x0F ] );
smallsql/junit/BasicTestCase.java۞107۩}
smallsql/junit/BasicTestCase.java۞108۩return buf.toString();
smallsql/junit/BasicTestCase.java۞109۩}
smallsql/junit/BasicTestCase.java۞111۩public void assertEqualsObject( String msg, Object obj1, Object obj2 ){
smallsql/junit/BasicTestCase.java۞112۩if(obj1 instanceof byte[]){
smallsql/junit/BasicTestCase.java۞113۩if(!java.util.Arrays.equals( (byte[])obj1, (byte[])obj2)){
smallsql/junit/BasicTestCase.java۞114۩fail(msg + " expected:" + bytes2hex((byte[])obj1)+ " but was:"+bytes2hex((byte[])obj2));
smallsql/junit/BasicTestCase.java۞115۩}
smallsql/junit/BasicTestCase.java۞116۩}else{
smallsql/junit/BasicTestCase.java۞117۩if(obj1 instanceof BigDecimal)
smallsql/junit/BasicTestCase.java۞118۩if(((BigDecimal)obj1).compareTo((BigDecimal)obj2) == 0) return;
smallsql/junit/BasicTestCase.java۞120۩assertEquals( msg, obj1, obj2);
smallsql/junit/BasicTestCase.java۞121۩}
smallsql/junit/BasicTestCase.java۞122۩}
smallsql/junit/BasicTestCase.java۞124۩public void assertEqualsObject( String msg, Object obj1, Object obj2, boolean needTrim ){
smallsql/junit/BasicTestCase.java۞125۩if(needTrim && obj1 != null){
smallsql/junit/BasicTestCase.java۞127۩if(obj1 instanceof String) obj1 = ((String)obj1).trim();
smallsql/junit/BasicTestCase.java۞128۩if(obj1 instanceof byte[]){
smallsql/junit/BasicTestCase.java۞129۩byte[] tmp = (byte[])obj1;
smallsql/junit/BasicTestCase.java۞130۩int k=tmp.length-1;
smallsql/junit/BasicTestCase.java۞131۩for(; k>= 0; k--) if(tmp[k] != 0) break;
smallsql/junit/BasicTestCase.java۞132۩k++;
smallsql/junit/BasicTestCase.java۞133۩byte[] tmp2 = new byte[k];
smallsql/junit/BasicTestCase.java۞134۩System.arraycopy( tmp, 0, tmp2, 0, k);
smallsql/junit/BasicTestCase.java۞135۩obj1 = tmp2;
smallsql/junit/BasicTestCase.java۞136۩}
smallsql/junit/BasicTestCase.java۞137۩}
smallsql/junit/BasicTestCase.java۞138۩if(needTrim && obj2 != null){
smallsql/junit/BasicTestCase.java۞140۩if(obj2 instanceof String) obj2 = ((String)obj2).trim();
smallsql/junit/BasicTestCase.java۞141۩if(obj2 instanceof byte[]){
smallsql/junit/BasicTestCase.java۞142۩byte[] tmp = (byte[])obj2;
smallsql/junit/BasicTestCase.java۞143۩int k=tmp.length-1;
smallsql/junit/BasicTestCase.java۞144۩for(; k>= 0; k--) if(tmp[k] != 0) break;
smallsql/junit/BasicTestCase.java۞145۩k++;
smallsql/junit/BasicTestCase.java۞146۩byte[] tmp2 = new byte[k];
smallsql/junit/BasicTestCase.java۞147۩System.arraycopy( tmp, 0, tmp2, 0, k);
smallsql/junit/BasicTestCase.java۞148۩obj2 = tmp2;
smallsql/junit/BasicTestCase.java۞149۩}
smallsql/junit/BasicTestCase.java۞150۩}
smallsql/junit/BasicTestCase.java۞151۩assertEqualsObject( msg, obj1, obj2);
smallsql/junit/BasicTestCase.java۞152۩}
smallsql/junit/BasicTestCase.java۞155۩void assertRowCount(int sollCount, String sql ) throws Exception{
smallsql/junit/BasicTestCase.java۞156۩Connection con = AllTests.getConnection();
smallsql/junit/BasicTestCase.java۞157۩Statement st = con.createStatement();
smallsql/junit/BasicTestCase.java۞158۩ResultSet rs = st.executeQuery(sql);
smallsql/junit/BasicTestCase.java۞159۩assertRowCount(sollCount,rs);
smallsql/junit/BasicTestCase.java۞160۩}
smallsql/junit/BasicTestCase.java۞163۩void assertRowCount(int sollCount, ResultSet rs ) throws Exception{
smallsql/junit/BasicTestCase.java۞164۩int colCount = rs.getMetaData().getColumnCount();
smallsql/junit/BasicTestCase.java۞165۩int count = 0;
smallsql/junit/BasicTestCase.java۞167۩while(rs.next()){
smallsql/junit/BasicTestCase.java۞168۩count++;
smallsql/junit/BasicTestCase.java۞169۩for(int i=1; i<=colCount; i++){
smallsql/junit/BasicTestCase.java۞170۩rs.getObject(i);
smallsql/junit/BasicTestCase.java۞172۩}
smallsql/junit/BasicTestCase.java۞174۩}
smallsql/junit/BasicTestCase.java۞175۩assertEquals( "Wrong row count", sollCount, count);
smallsql/junit/BasicTestCase.java۞176۩for(int i=1; i<=colCount; i++){
smallsql/junit/BasicTestCase.java۞177۩try{
smallsql/junit/BasicTestCase.java۞179۩fail( "Column:"+i+" Value:"+String.valueOf(rs.getObject(i)));
smallsql/junit/BasicTestCase.java۞180۩}catch(SQLException e){
smallsql/junit/BasicTestCase.java۞181۩assertSQLException("01000", 0, e);
smallsql/junit/BasicTestCase.java۞182۩}
smallsql/junit/BasicTestCase.java۞183۩}
smallsql/junit/BasicTestCase.java۞184۩assertFalse( "Scroll after last", rs.next() );
smallsql/junit/BasicTestCase.java۞185۩}
smallsql/junit/BasicTestCase.java۞191۩private boolean string2boolean( String val){
smallsql/junit/BasicTestCase.java۞192۩try{
smallsql/junit/BasicTestCase.java۞193۩return Double.parseDouble( val ) != 0;
smallsql/junit/BasicTestCase.java۞194۩}catch(NumberFormatException e){}
smallsql/junit/BasicTestCase.java۞195۩return "true".equalsIgnoreCase( val ) || "yes".equalsIgnoreCase( val ) || "t".equalsIgnoreCase( val );
smallsql/junit/BasicTestCase.java۞196۩}
smallsql/junit/BasicTestCase.java۞201۩void assertEqualsRsValue(Object obj, String sql) throws Exception{
smallsql/junit/BasicTestCase.java۞202۩Connection con = AllTests.getConnection();
smallsql/junit/BasicTestCase.java۞203۩Statement st = con.createStatement();
smallsql/junit/BasicTestCase.java۞204۩ResultSet rs = st.executeQuery(sql);
smallsql/junit/BasicTestCase.java۞205۩assertTrue( "No row produce", rs.next());
smallsql/junit/BasicTestCase.java۞206۩assertEqualsRsValue(obj,rs,false);
smallsql/junit/BasicTestCase.java۞207۩}
smallsql/junit/BasicTestCase.java۞210۩void assertEqualsRsValue(Object obj, ResultSet rs, boolean needTrim) throws Exception{
smallsql/junit/BasicTestCase.java۞211۩String name = rs.getMetaData().getColumnName(1);
smallsql/junit/BasicTestCase.java۞212۩assertEqualsObject( "Values not identical on read:", obj, rs.getObject(name), needTrim);
smallsql/junit/BasicTestCase.java۞213۩if(obj instanceof Time){
smallsql/junit/BasicTestCase.java۞214۩assertEquals("Time is different:", obj, rs.getTime(name) );
smallsql/junit/BasicTestCase.java۞215۩assertEquals("Time String is different:", obj.toString(), rs.getString(name) );
smallsql/junit/BasicTestCase.java۞216۩}
smallsql/junit/BasicTestCase.java۞217۩if(obj instanceof Timestamp){
smallsql/junit/BasicTestCase.java۞218۩assertEquals("Timestamp is different:", obj, rs.getTimestamp(name) );
smallsql/junit/BasicTestCase.java۞219۩assertEquals("Timestamp String is different:", obj.toString(), rs.getString(name) );
smallsql/junit/BasicTestCase.java۞220۩}
smallsql/junit/BasicTestCase.java۞221۩if(obj instanceof Date){
smallsql/junit/BasicTestCase.java۞222۩assertEquals("Date is different:", obj, rs.getDate(name) );
smallsql/junit/BasicTestCase.java۞223۩assertEquals("Date String is different:", obj.toString(), rs.getString(name) );
smallsql/junit/BasicTestCase.java۞224۩}
smallsql/junit/BasicTestCase.java۞225۩if(obj instanceof String){
smallsql/junit/BasicTestCase.java۞226۩String str = (String)obj;
smallsql/junit/BasicTestCase.java۞227۩assertEqualsObject("String is different:", str, rs.getString(name), needTrim );
smallsql/junit/BasicTestCase.java۞228۩assertEquals("String Boolean is different:", string2boolean(str), rs.getBoolean(name) );
smallsql/junit/BasicTestCase.java۞229۩try{
smallsql/junit/BasicTestCase.java۞230۩assertEquals("String Long is different:", Long.parseLong(str), rs.getLong(name) );
smallsql/junit/BasicTestCase.java۞231۩}catch(NumberFormatException ex){}
smallsql/junit/BasicTestCase.java۞232۩try{
smallsql/junit/BasicTestCase.java۞233۩assertEquals("String Integer is different:", Integer.parseInt(str), rs.getInt(name) );
smallsql/junit/BasicTestCase.java۞234۩}catch(NumberFormatException ex){}
smallsql/junit/BasicTestCase.java۞235۩try{
smallsql/junit/BasicTestCase.java۞236۩assertEquals("String Float is different:", Float.parseFloat(str), rs.getFloat(name), 0.0 );
smallsql/junit/BasicTestCase.java۞237۩}catch(NumberFormatException ex){}
smallsql/junit/BasicTestCase.java۞238۩try{
smallsql/junit/BasicTestCase.java۞239۩assertEquals("String Double is different:", Double.parseDouble(str), rs.getDouble(name), 0.0 );
smallsql/junit/BasicTestCase.java۞240۩}catch(NumberFormatException ex){}
smallsql/junit/BasicTestCase.java۞241۩}
smallsql/junit/BasicTestCase.java۞242۩if(obj instanceof BigDecimal){
smallsql/junit/BasicTestCase.java۞243۩if(!needTrim){
smallsql/junit/BasicTestCase.java۞244۩assertEquals("BigDecimal is different:", obj, rs.getBigDecimal(name) );
smallsql/junit/BasicTestCase.java۞245۩assertEquals("Scale is different:", ((BigDecimal)obj).scale(), rs.getMetaData().getScale(1));
smallsql/junit/BasicTestCase.java۞246۩}
smallsql/junit/BasicTestCase.java۞247۩assertEquals("Scale Meta is different:", rs.getBigDecimal(name).scale(), rs.getMetaData().getScale(1));
smallsql/junit/BasicTestCase.java۞248۩BigDecimal big2 = ((BigDecimal)obj).setScale(2,BigDecimal.ROUND_HALF_EVEN);
smallsql/junit/BasicTestCase.java۞249۩assertEquals("BigDecimal mit scale is different:", big2, rs.getBigDecimal(name, 2) );
smallsql/junit/BasicTestCase.java۞250۩}
smallsql/junit/BasicTestCase.java۞251۩if(obj instanceof Integer){
smallsql/junit/BasicTestCase.java۞252۩assertEquals("Scale is different:", 0, rs.getMetaData().getScale(1));
smallsql/junit/BasicTestCase.java۞253۩}
smallsql/junit/BasicTestCase.java۞254۩if(obj instanceof Number){
smallsql/junit/BasicTestCase.java۞255۩long longValue = ((Number)obj).longValue();
smallsql/junit/BasicTestCase.java۞256۩int intValue = ((Number)obj).intValue();
smallsql/junit/BasicTestCase.java۞257۩if(longValue >= Integer.MAX_VALUE)
smallsql/junit/BasicTestCase.java۞258۩intValue = Integer.MAX_VALUE;
smallsql/junit/BasicTestCase.java۞259۩if(longValue <= Integer.MIN_VALUE)
smallsql/junit/BasicTestCase.java۞260۩intValue = Integer.MIN_VALUE;
smallsql/junit/BasicTestCase.java۞261۩assertEquals("int is different:", intValue, rs.getInt(name) );
smallsql/junit/BasicTestCase.java۞262۩assertEquals("long is different:", longValue, rs.getLong(name) );
smallsql/junit/BasicTestCase.java۞263۩if(intValue >= Short.MIN_VALUE && intValue <= Short.MAX_VALUE)
smallsql/junit/BasicTestCase.java۞264۩assertEquals("short is different:", (short)intValue, rs.getShort(name) );
smallsql/junit/BasicTestCase.java۞265۩if(intValue >= Byte.MIN_VALUE && intValue <= Byte.MAX_VALUE)
smallsql/junit/BasicTestCase.java۞266۩assertEquals("byte is different:", (byte)intValue, rs.getByte(name) );
smallsql/junit/BasicTestCase.java۞268۩double value = ((Number)obj).doubleValue();
smallsql/junit/BasicTestCase.java۞269۩assertEquals("Double is different:", value, rs.getDouble(name),0.0 );
smallsql/junit/BasicTestCase.java۞270۩assertEquals("Float is different:", (float)value, rs.getFloat(name),0.0 );
smallsql/junit/BasicTestCase.java۞271۩String valueStr = obj.toString();
smallsql/junit/BasicTestCase.java۞272۩if(!needTrim){
smallsql/junit/BasicTestCase.java۞273۩assertEquals("Number String is different:", valueStr, rs.getString(name) );
smallsql/junit/BasicTestCase.java۞274۩}
smallsql/junit/BasicTestCase.java۞275۩BigDecimal decimal = Double.isInfinite(value) || Double.isNaN(value) ? null : new BigDecimal(valueStr);
smallsql/junit/BasicTestCase.java۞276۩assertEqualsObject("Number BigDecimal is different:", decimal, rs.getBigDecimal(name) );
smallsql/junit/BasicTestCase.java۞277۩assertEquals("Number boolean is different:", value != 0, rs.getBoolean(name) );
smallsql/junit/BasicTestCase.java۞278۩}
smallsql/junit/BasicTestCase.java۞279۩if(obj == null){
smallsql/junit/BasicTestCase.java۞280۩assertNull("String is different:", rs.getString(name) );
smallsql/junit/BasicTestCase.java۞281۩assertNull("Date is different:", rs.getDate(name) );
smallsql/junit/BasicTestCase.java۞282۩assertNull("Time is different:", rs.getTime(name) );
smallsql/junit/BasicTestCase.java۞283۩assertNull("Timestamp is different:", rs.getTimestamp(name) );
smallsql/junit/BasicTestCase.java۞284۩assertNull("BigDecimal is different:", rs.getBigDecimal(name) );
smallsql/junit/BasicTestCase.java۞285۩assertNull("BigDecimal with scale is different:", rs.getBigDecimal(name, 2) );
smallsql/junit/BasicTestCase.java۞286۩assertNull("Bytes with scale is different:", rs.getBytes(name) );
smallsql/junit/BasicTestCase.java۞287۩assertEquals("Double is different:", 0, rs.getDouble(name),0 );
smallsql/junit/BasicTestCase.java۞288۩assertEquals("Float is different:", 0, rs.getFloat(name),0 );
smallsql/junit/BasicTestCase.java۞289۩assertEquals("Long is different:", 0, rs.getLong(name) );
smallsql/junit/BasicTestCase.java۞290۩assertEquals("Int is different:", 0, rs.getInt(name) );
smallsql/junit/BasicTestCase.java۞291۩assertEquals("SmallInt is different:", 0, rs.getShort(name) );
smallsql/junit/BasicTestCase.java۞292۩assertEquals("TinyInt is different:", 0, rs.getByte(name) );
smallsql/junit/BasicTestCase.java۞293۩assertEquals("Boolean is different:", false, rs.getBoolean(name) );
smallsql/junit/BasicTestCase.java۞294۩}
smallsql/junit/BasicTestCase.java۞295۩if(obj instanceof byte[]){
smallsql/junit/BasicTestCase.java۞296۩assertTrue("Binary should start with 0x", rs.getString(name).startsWith("0x"));
smallsql/junit/BasicTestCase.java۞297۩}
smallsql/junit/BasicTestCase.java۞299۩ResultSetMetaData metaData = rs.getMetaData();
smallsql/junit/BasicTestCase.java۞300۩String className = metaData.getColumnClassName(1);
smallsql/junit/BasicTestCase.java۞301۩assertNotNull( "ClassName:", className);
smallsql/junit/BasicTestCase.java۞302۩if(obj != null){
smallsql/junit/BasicTestCase.java۞303۩Class gotClass = Class.forName(className);
smallsql/junit/BasicTestCase.java۞304۩Class objClass = obj.getClass();
smallsql/junit/BasicTestCase.java۞305۩String objClassName = objClass.getName();
smallsql/junit/BasicTestCase.java۞307۩int expectedLen = metaData.getColumnDisplaySize(1);
smallsql/junit/BasicTestCase.java۞310۩if (gotClass.equals(java.sql.Blob.class)) {
smallsql/junit/BasicTestCase.java۞311۩assertTrue(
smallsql/junit/BasicTestCase.java۞312۩"ClassName assignable: "+className+"<->"+objClassName,
smallsql/junit/BasicTestCase.java۞313۩objClass.equals(new byte[0].getClass()));
smallsql/junit/BasicTestCase.java۞315۩String message = "Check DisplaySize: " + expectedLen + "!=" + Integer.MAX_VALUE + ")";
smallsql/junit/BasicTestCase.java۞316۩assertTrue( message, expectedLen == Integer.MAX_VALUE );
smallsql/junit/BasicTestCase.java۞317۩}
smallsql/junit/BasicTestCase.java۞318۩else if (gotClass.equals(java.sql.Clob.class)) {
smallsql/junit/BasicTestCase.java۞319۩assertTrue(
smallsql/junit/BasicTestCase.java۞320۩"ClassName assignable: "+className+"<->"+objClassName,
smallsql/junit/BasicTestCase.java۞321۩objClass.equals(String.class));
smallsql/junit/BasicTestCase.java۞323۩String message = "Check DisplaySize: " + expectedLen + "!=" + Integer.MAX_VALUE + ")";
smallsql/junit/BasicTestCase.java۞324۩assertTrue( message, expectedLen == Integer.MAX_VALUE );
smallsql/junit/BasicTestCase.java۞325۩}
smallsql/junit/BasicTestCase.java۞326۩else {
smallsql/junit/BasicTestCase.java۞327۩String foundStr = rs.getString(name);
smallsql/junit/BasicTestCase.java۞329۩assertTrue("ClassName assignable: "+className+"<->"+objClassName, gotClass.isAssignableFrom(objClass));
smallsql/junit/BasicTestCase.java۞330۩assertTrue( "DisplaySize to small "+ expectedLen +"<"+foundStr.length()+" (" + foundStr + ")", expectedLen >= foundStr.length() );
smallsql/junit/BasicTestCase.java۞331۩}
smallsql/junit/BasicTestCase.java۞332۩}
smallsql/junit/BasicTestCase.java۞333۩}
smallsql/junit/BasicTestCase.java۞336۩void assertSQLException(String sqlstate, int vendorCode, SQLException ex) {
smallsql/junit/BasicTestCase.java۞337۩StringWriter sw = new StringWriter();
smallsql/junit/BasicTestCase.java۞338۩ex.printStackTrace(new PrintWriter(sw));
smallsql/junit/BasicTestCase.java۞339۩assertEquals( "Vendor Errorcode:"+sw, vendorCode, ex.getErrorCode() );
smallsql/junit/BasicTestCase.java۞340۩assertEquals( "SQL State:"+sw, sqlstate, ex.getSQLState());
smallsql/junit/BasicTestCase.java۞341۩}
smallsql/junit/BasicTestCase.java۞345۩void printSQL(String sql) throws SQLException{
smallsql/junit/BasicTestCase.java۞346۩Connection con = AllTests.getConnection();
smallsql/junit/BasicTestCase.java۞347۩Statement st = con.createStatement();
smallsql/junit/BasicTestCase.java۞348۩ResultSet rs = st.executeQuery(sql);
smallsql/junit/BasicTestCase.java۞349۩printRS( rs );
smallsql/junit/BasicTestCase.java۞350۩}
smallsql/junit/BasicTestCase.java۞352۩void printRS(ResultSet rs) throws SQLException{
smallsql/junit/BasicTestCase.java۞353۩int count = rs.getMetaData().getColumnCount();
smallsql/junit/BasicTestCase.java۞354۩while(rs.next()){
smallsql/junit/BasicTestCase.java۞355۩for(int i=1; i<=count; i++){
smallsql/junit/BasicTestCase.java۞356۩System.out.print(rs.getString(i) + '\t');
smallsql/junit/BasicTestCase.java۞357۩}
smallsql/junit/BasicTestCase.java۞358۩System.out.println();
smallsql/junit/BasicTestCase.java۞359۩}
smallsql/junit/BasicTestCase.java۞361۩}
smallsql/junit/BasicTestCase.java۞370۩static String getMonth3L(int ordinal) {
smallsql/junit/BasicTestCase.java۞371۩return MONTHS[ordinal - 1];
smallsql/junit/BasicTestCase.java۞372۩}
smallsql/junit/BasicTestCase.java۞373۩}
smallsql/junit/BenchTest.java۞33۩package smallsql.junit;
smallsql/junit/BenchTest.java۞35۩import java.sql.*;
smallsql/junit/BenchTest.java۞37۩public class BenchTest
smallsql/junit/BenchTest.java۞38۩{
smallsql/junit/BenchTest.java۞39۩static byte[] byteArray = {23, 34, 67 };
smallsql/junit/BenchTest.java۞40۩static byte[] largeByteArray = new byte[4000];
smallsql/junit/BenchTest.java۞42۩static String driverClassName = "smallsql.database.SSDriver";
smallsql/junit/BenchTest.java۞43۩static String userName        = "sa";
smallsql/junit/BenchTest.java۞44۩static String password        = "";
smallsql/junit/BenchTest.java۞45۩static String jdbcUrl         = "jdbc:smallsql:AllTests";
smallsql/junit/BenchTest.java۞46۩static int    rowCount        = 10000;
smallsql/junit/BenchTest.java۞48۩static Connection con;
smallsql/junit/BenchTest.java۞49۩static final String tableName = "BenchTest2";
smallsql/junit/BenchTest.java۞52۩public static void main(String[] args) throws SQLException{
smallsql/junit/BenchTest.java۞53۩for(int i=0; i<args.length;){
smallsql/junit/BenchTest.java۞54۩String option = args[i++];
smallsql/junit/BenchTest.java۞55۩if      (option.equals("-driver")  ) driverClassName = args[i++];
smallsql/junit/BenchTest.java۞56۩else if (option.equals("-user")    ) userName = args[i++];
smallsql/junit/BenchTest.java۞57۩else if (option.equals("-password")) password = args[i++];
smallsql/junit/BenchTest.java۞58۩else if (option.equals("-url")     ) jdbcUrl  = args[i++];
smallsql/junit/BenchTest.java۞59۩else if (option.equals("-rowcount")) rowCount = Integer.parseInt(args[i++]);
smallsql/junit/BenchTest.java۞60۩else if (option.equals("-?") | option.equals("-help")){
smallsql/junit/BenchTest.java۞61۩System.out.println( "Valid options are :\n\t-driver\n\t-url\n\t-user\n\t-password\n\t-rowcount");
smallsql/junit/BenchTest.java۞62۩System.exit(0);
smallsql/junit/BenchTest.java۞63۩}
smallsql/junit/BenchTest.java۞64۩else {System.out.println("Option " + option + " is ignored");i++;}
smallsql/junit/BenchTest.java۞65۩}
smallsql/junit/BenchTest.java۞66۩System.out.println( "Driver:  \t" + driverClassName);
smallsql/junit/BenchTest.java۞67۩System.out.println( "Username:\t" + userName);
smallsql/junit/BenchTest.java۞68۩System.out.println( "Password:\t" + password);
smallsql/junit/BenchTest.java۞69۩System.out.println( "JDBC URL:\t" + jdbcUrl);
smallsql/junit/BenchTest.java۞70۩System.out.println( "Row Count:\t" + rowCount);
smallsql/junit/BenchTest.java۞71۩System.out.println();
smallsql/junit/BenchTest.java۞72۩try{
smallsql/junit/BenchTest.java۞73۩Class.forName(driverClassName).newInstance();
smallsql/junit/BenchTest.java۞74۩con = DriverManager.getConnection( jdbcUrl, userName,password);
smallsql/junit/BenchTest.java۞75۩System.out.println( con.getMetaData().getDriverName() + " " + con.getMetaData().getDriverVersion());
smallsql/junit/BenchTest.java۞76۩System.out.println();
smallsql/junit/BenchTest.java۞77۩createTestTable( con );
smallsql/junit/BenchTest.java۞78۩test_InsertClassic( con );
smallsql/junit/BenchTest.java۞79۩test_DeleteAll( con );
smallsql/junit/BenchTest.java۞80۩test_InsertEmptyRows( con );
smallsql/junit/BenchTest.java۞81۩test_DeleteRows( con );
smallsql/junit/BenchTest.java۞82۩test_InsertRows( con );
smallsql/junit/BenchTest.java۞83۩test_RowRequestPages( con );
smallsql/junit/BenchTest.java۞84۩test_UpdateRows( con );
smallsql/junit/BenchTest.java۞85۩test_UpdateRowsPrepare( con );
smallsql/junit/BenchTest.java۞86۩test_UpdateRowsPrepareSP( con );
smallsql/junit/BenchTest.java۞87۩test_UpdateRowsPrepareBatch( con );
smallsql/junit/BenchTest.java۞88۩test_Scroll_getXXX( con );
smallsql/junit/BenchTest.java۞89۩test_UpdateLargeBinary( con );
smallsql/junit/BenchTest.java۞90۩test_UpdateLargeBinaryWithSP( con );
smallsql/junit/BenchTest.java۞91۩}catch(Exception e){
smallsql/junit/BenchTest.java۞92۩e.printStackTrace();
smallsql/junit/BenchTest.java۞93۩}finally{
smallsql/junit/BenchTest.java۞94۩if (con != null){
smallsql/junit/BenchTest.java۞96۩con.close();
smallsql/junit/BenchTest.java۞97۩}
smallsql/junit/BenchTest.java۞98۩}
smallsql/junit/BenchTest.java۞99۩}
smallsql/junit/BenchTest.java۞107۩static void test_InsertClassic(Connection con){
smallsql/junit/BenchTest.java۞108۩System.out.println();
smallsql/junit/BenchTest.java۞109۩System.out.println( "Test insert rows with default values with a classic insert statement: " + rowCount + " rows");
smallsql/junit/BenchTest.java۞111۩try{
smallsql/junit/BenchTest.java۞112۩Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );
smallsql/junit/BenchTest.java۞113۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞114۩for (int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞115۩st.execute("INSERT INTO " + tableName + "(i) VALUES(" + i +")");
smallsql/junit/BenchTest.java۞116۩}
smallsql/junit/BenchTest.java۞117۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞118۩ResultSet rs = st.executeQuery( "SELECT count(*) FROM " + tableName);
smallsql/junit/BenchTest.java۞119۩rs.next();
smallsql/junit/BenchTest.java۞120۩int count = rs.getInt(1);
smallsql/junit/BenchTest.java۞121۩if (count != rowCount)
smallsql/junit/BenchTest.java۞122۩System.out.println( "  Failed: Only " + count + " rows were inserted.");
smallsql/junit/BenchTest.java۞123۩else System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞124۩st.close();
smallsql/junit/BenchTest.java۞125۩}catch(Exception e){
smallsql/junit/BenchTest.java۞126۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞127۩}finally{
smallsql/junit/BenchTest.java۞128۩System.out.println();
smallsql/junit/BenchTest.java۞129۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞130۩}
smallsql/junit/BenchTest.java۞131۩}
smallsql/junit/BenchTest.java۞139۩static void test_DeleteAll(Connection con){
smallsql/junit/BenchTest.java۞140۩System.out.println();
smallsql/junit/BenchTest.java۞141۩System.out.println( "Test delete all rows: " + rowCount + " rows");
smallsql/junit/BenchTest.java۞143۩try{
smallsql/junit/BenchTest.java۞144۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞145۩Statement st = con.createStatement();
smallsql/junit/BenchTest.java۞146۩st.execute("DELETE FROM " + tableName);
smallsql/junit/BenchTest.java۞147۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞148۩System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞149۩st.close();
smallsql/junit/BenchTest.java۞150۩}catch(Exception e){
smallsql/junit/BenchTest.java۞151۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞152۩}finally{
smallsql/junit/BenchTest.java۞153۩System.out.println();
smallsql/junit/BenchTest.java۞154۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞155۩}
smallsql/junit/BenchTest.java۞156۩}
smallsql/junit/BenchTest.java۞164۩static void test_InsertEmptyRows(Connection con){
smallsql/junit/BenchTest.java۞165۩System.out.println();
smallsql/junit/BenchTest.java۞166۩System.out.println( "Test insert empty rows with insertRow(): " + rowCount + " rows");
smallsql/junit/BenchTest.java۞168۩try{
smallsql/junit/BenchTest.java۞169۩Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );
smallsql/junit/BenchTest.java۞170۩ResultSet rs = st.executeQuery("SELECT * FROM "+tableName);
smallsql/junit/BenchTest.java۞171۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞172۩for (int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞173۩rs.moveToInsertRow();
smallsql/junit/BenchTest.java۞174۩rs.insertRow();
smallsql/junit/BenchTest.java۞175۩}
smallsql/junit/BenchTest.java۞176۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞177۩rs = st.executeQuery( "SELECT count(*) FROM " + tableName);
smallsql/junit/BenchTest.java۞178۩rs.next();
smallsql/junit/BenchTest.java۞179۩int count = rs.getInt(1);
smallsql/junit/BenchTest.java۞180۩if (count != rowCount)
smallsql/junit/BenchTest.java۞181۩System.out.println( "  Failed: Only " + count + " rows were inserted.");
smallsql/junit/BenchTest.java۞182۩else System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞183۩st.close();
smallsql/junit/BenchTest.java۞184۩}catch(Exception e){
smallsql/junit/BenchTest.java۞185۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞186۩}finally{
smallsql/junit/BenchTest.java۞187۩System.out.println();
smallsql/junit/BenchTest.java۞188۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞189۩}
smallsql/junit/BenchTest.java۞190۩}
smallsql/junit/BenchTest.java۞198۩static void test_DeleteRows(Connection con){
smallsql/junit/BenchTest.java۞199۩System.out.println();
smallsql/junit/BenchTest.java۞200۩System.out.println( "Test delete rows with deleteRow(): " + rowCount + " rows");
smallsql/junit/BenchTest.java۞202۩try{
smallsql/junit/BenchTest.java۞203۩Statement st1 = con.createStatement();
smallsql/junit/BenchTest.java۞204۩ResultSet rs = st1.executeQuery( "SELECT count(*) FROM " + tableName);
smallsql/junit/BenchTest.java۞205۩rs.next();
smallsql/junit/BenchTest.java۞206۩int count = rs.getInt(1);
smallsql/junit/BenchTest.java۞207۩if (count != rowCount){
smallsql/junit/BenchTest.java۞209۩if (count == 0){
smallsql/junit/BenchTest.java۞210۩createTestDataWithClassicInsert( con );
smallsql/junit/BenchTest.java۞211۩rs = st1.executeQuery( "SELECT count(*) FROM " + tableName);
smallsql/junit/BenchTest.java۞212۩rs.next();
smallsql/junit/BenchTest.java۞213۩count = rs.getInt(1);
smallsql/junit/BenchTest.java۞214۩}
smallsql/junit/BenchTest.java۞215۩if (count != rowCount){
smallsql/junit/BenchTest.java۞216۩System.out.println( "  Failed: Only " + (rowCount-count) + " rows were deleted.");
smallsql/junit/BenchTest.java۞217۩return;
smallsql/junit/BenchTest.java۞218۩}
smallsql/junit/BenchTest.java۞219۩}
smallsql/junit/BenchTest.java۞220۩st1.close();
smallsql/junit/BenchTest.java۞222۩Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );
smallsql/junit/BenchTest.java۞223۩rs = st.executeQuery("SELECT * FROM "+tableName);
smallsql/junit/BenchTest.java۞224۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞225۩for (int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞226۩rs.next();
smallsql/junit/BenchTest.java۞227۩rs.deleteRow();
smallsql/junit/BenchTest.java۞228۩}
smallsql/junit/BenchTest.java۞229۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞230۩rs = st.executeQuery( "SELECT count(*) FROM " + tableName);
smallsql/junit/BenchTest.java۞231۩rs.next();
smallsql/junit/BenchTest.java۞232۩count = rs.getInt(1);
smallsql/junit/BenchTest.java۞233۩if (count != 0)
smallsql/junit/BenchTest.java۞234۩System.out.println( "  Failed: Only " + (rowCount-count) + " rows were deleted.");
smallsql/junit/BenchTest.java۞235۩else System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞236۩st.close();
smallsql/junit/BenchTest.java۞237۩}catch(Exception e){
smallsql/junit/BenchTest.java۞238۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞239۩}finally{
smallsql/junit/BenchTest.java۞240۩System.out.println();
smallsql/junit/BenchTest.java۞241۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞242۩}
smallsql/junit/BenchTest.java۞243۩}
smallsql/junit/BenchTest.java۞251۩static void test_InsertRows(Connection con){
smallsql/junit/BenchTest.java۞252۩System.out.println();
smallsql/junit/BenchTest.java۞253۩System.out.println( "Test insert rows with insertRow(): " + rowCount + " rows");
smallsql/junit/BenchTest.java۞255۩try{
smallsql/junit/BenchTest.java۞256۩Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );
smallsql/junit/BenchTest.java۞257۩ResultSet rs = st.executeQuery("SELECT * FROM " + tableName);
smallsql/junit/BenchTest.java۞258۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞259۩for (int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞260۩rs.moveToInsertRow();
smallsql/junit/BenchTest.java۞261۩rs.updateBytes (  "bi", byteArray );
smallsql/junit/BenchTest.java۞262۩rs.updateString(  "c" , "Test" );
smallsql/junit/BenchTest.java۞263۩rs.updateDate  (  "d" , new Date( System.currentTimeMillis() ) );
smallsql/junit/BenchTest.java۞264۩rs.updateFloat (  "de", (float)1234.56789 );
smallsql/junit/BenchTest.java۞265۩rs.updateFloat (  "f" , (float)9876.54321 );
smallsql/junit/BenchTest.java۞266۩rs.updateBytes (  "im", largeByteArray );
smallsql/junit/BenchTest.java۞267۩rs.updateInt   (  "i" , i );
smallsql/junit/BenchTest.java۞268۩rs.updateDouble(  "m" , 23.45 );
smallsql/junit/BenchTest.java۞269۩rs.updateDouble(  "n" , 567.45 );
smallsql/junit/BenchTest.java۞270۩rs.updateFloat (  "r" , (float)78.89 );
smallsql/junit/BenchTest.java۞271۩rs.updateTime  (  "sd", new Time( System.currentTimeMillis() ) );
smallsql/junit/BenchTest.java۞272۩rs.updateShort (  "si", (short)i );
smallsql/junit/BenchTest.java۞273۩rs.updateFloat (  "sm", (float)34.56 );
smallsql/junit/BenchTest.java۞274۩rs.updateString(  "sy", "sysname (30) NULL" );
smallsql/junit/BenchTest.java۞275۩rs.updateString(  "t" , "ntext NULL, sample to save in the field" );
smallsql/junit/BenchTest.java۞276۩rs.updateByte  (  "ti", (byte)i );
smallsql/junit/BenchTest.java۞277۩rs.updateBytes (  "vb", byteArray );
smallsql/junit/BenchTest.java۞278۩rs.updateString(  "vc", "nvarchar (255) NULL" );
smallsql/junit/BenchTest.java۞279۩rs.insertRow();
smallsql/junit/BenchTest.java۞280۩}
smallsql/junit/BenchTest.java۞281۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞282۩rs = st.executeQuery( "SELECT count(*) FROM " + tableName);
smallsql/junit/BenchTest.java۞283۩rs.next();
smallsql/junit/BenchTest.java۞284۩int count = rs.getInt(1);
smallsql/junit/BenchTest.java۞285۩if (count != rowCount){
smallsql/junit/BenchTest.java۞286۩st.execute("DELETE FROM " + tableName);
smallsql/junit/BenchTest.java۞287۩System.out.println( "  Failed: Only " + count + " rows were inserted.");
smallsql/junit/BenchTest.java۞288۩}else System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞289۩st.close();
smallsql/junit/BenchTest.java۞290۩}catch(Exception e){
smallsql/junit/BenchTest.java۞291۩e.printStackTrace();
smallsql/junit/BenchTest.java۞292۩try{
smallsql/junit/BenchTest.java۞294۩Statement st = con.createStatement();
smallsql/junit/BenchTest.java۞295۩st.execute("DELETE FROM " + tableName);
smallsql/junit/BenchTest.java۞296۩st.close();
smallsql/junit/BenchTest.java۞297۩}catch(Exception ee){}
smallsql/junit/BenchTest.java۞298۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞299۩}finally{
smallsql/junit/BenchTest.java۞300۩System.out.println();
smallsql/junit/BenchTest.java۞301۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞302۩}
smallsql/junit/BenchTest.java۞303۩}
smallsql/junit/BenchTest.java۞311۩static void test_RowRequestPages(Connection con){
smallsql/junit/BenchTest.java۞312۩int pages = 100;
smallsql/junit/BenchTest.java۞313۩int rows  = rowCount / pages;
smallsql/junit/BenchTest.java۞314۩System.out.println();
smallsql/junit/BenchTest.java۞315۩System.out.println( "Test request row pages : " + pages + " pages, " +rows + " rows per page");
smallsql/junit/BenchTest.java۞316۩try{
smallsql/junit/BenchTest.java۞317۩Statement st1 = con.createStatement();
smallsql/junit/BenchTest.java۞318۩ResultSet rs = st1.executeQuery( "SELECT count(*) FROM " + tableName);
smallsql/junit/BenchTest.java۞319۩rs.next();
smallsql/junit/BenchTest.java۞320۩int count = rs.getInt(1);
smallsql/junit/BenchTest.java۞321۩if (count != rowCount){
smallsql/junit/BenchTest.java۞323۩if (count == 0){
smallsql/junit/BenchTest.java۞324۩createTestDataWithClassicInsert( con );
smallsql/junit/BenchTest.java۞325۩rs = st1.executeQuery( "SELECT count(*) FROM " + tableName);
smallsql/junit/BenchTest.java۞326۩rs.next();
smallsql/junit/BenchTest.java۞327۩count = rs.getInt(1);
smallsql/junit/BenchTest.java۞328۩}
smallsql/junit/BenchTest.java۞329۩if (count != rowCount){
smallsql/junit/BenchTest.java۞330۩System.out.println( "  Failed: Only " + (rowCount-count) + " rows were found.");
smallsql/junit/BenchTest.java۞331۩return;
smallsql/junit/BenchTest.java۞332۩}
smallsql/junit/BenchTest.java۞333۩}
smallsql/junit/BenchTest.java۞334۩st1.close();
smallsql/junit/BenchTest.java۞336۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞337۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
smallsql/junit/BenchTest.java۞338۩st.setFetchSize( rows );
smallsql/junit/BenchTest.java۞339۩for (int i=0; i<pages; i++){
smallsql/junit/BenchTest.java۞340۩rs = st.executeQuery("SELECT * FROM " + tableName);
smallsql/junit/BenchTest.java۞341۩rs.absolute( i*rows+1 );
smallsql/junit/BenchTest.java۞342۩for (int r=1; r<rows; r++){
smallsql/junit/BenchTest.java۞344۩if (!rs.next()){
smallsql/junit/BenchTest.java۞345۩System.out.println( "  Failed: No rows were found at page " + i + " page and row " + r);
smallsql/junit/BenchTest.java۞346۩return;
smallsql/junit/BenchTest.java۞347۩}
smallsql/junit/BenchTest.java۞348۩int col_i = rs.getInt("i");
smallsql/junit/BenchTest.java۞349۩if (col_i != (i*rows+r)){
smallsql/junit/BenchTest.java۞350۩System.out.println( "  Failed: Wrong row " + col_i + ", it should be row " + (i*rows+r));
smallsql/junit/BenchTest.java۞351۩return;
smallsql/junit/BenchTest.java۞352۩}
smallsql/junit/BenchTest.java۞353۩}
smallsql/junit/BenchTest.java۞354۩}
smallsql/junit/BenchTest.java۞355۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞356۩System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞357۩st.close();
smallsql/junit/BenchTest.java۞358۩}catch(Exception e){
smallsql/junit/BenchTest.java۞359۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞360۩}finally{
smallsql/junit/BenchTest.java۞361۩System.out.println();
smallsql/junit/BenchTest.java۞362۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞363۩}
smallsql/junit/BenchTest.java۞364۩}
smallsql/junit/BenchTest.java۞372۩static void test_UpdateRows(Connection con){
smallsql/junit/BenchTest.java۞373۩System.out.println();
smallsql/junit/BenchTest.java۞374۩System.out.println( "Test update rows with updateRow(): " + rowCount + " rows");
smallsql/junit/BenchTest.java۞376۩try{
smallsql/junit/BenchTest.java۞377۩Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );
smallsql/junit/BenchTest.java۞378۩ResultSet rs = st.executeQuery("SELECT * FROM " + tableName);
smallsql/junit/BenchTest.java۞379۩int colCount = rs.getMetaData().getColumnCount();
smallsql/junit/BenchTest.java۞380۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞381۩int count = 0;
smallsql/junit/BenchTest.java۞382۩while(rs.next()){
smallsql/junit/BenchTest.java۞383۩for (int i=2; i<=colCount; i++){
smallsql/junit/BenchTest.java۞384۩rs.updateObject( i, rs.getObject(i) );
smallsql/junit/BenchTest.java۞385۩}
smallsql/junit/BenchTest.java۞386۩rs.updateRow();
smallsql/junit/BenchTest.java۞387۩count++;
smallsql/junit/BenchTest.java۞388۩}
smallsql/junit/BenchTest.java۞389۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞390۩if (count != rowCount)
smallsql/junit/BenchTest.java۞391۩System.out.println( "  Failed: Only " + count + " rows were updated.");
smallsql/junit/BenchTest.java۞392۩else System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞393۩st.close();
smallsql/junit/BenchTest.java۞394۩}catch(Exception e){
smallsql/junit/BenchTest.java۞395۩System.out.println("  Failed:" + e);
smallsql/junit/BenchTest.java۞396۩}finally{
smallsql/junit/BenchTest.java۞397۩System.out.println();
smallsql/junit/BenchTest.java۞398۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞399۩}
smallsql/junit/BenchTest.java۞400۩}
smallsql/junit/BenchTest.java۞408۩static void test_UpdateRowsPrepare(Connection con){
smallsql/junit/BenchTest.java۞409۩System.out.println();
smallsql/junit/BenchTest.java۞410۩System.out.println( "Test update rows with a PreparedStatement: " + rowCount + " rows");
smallsql/junit/BenchTest.java۞411۩try{
smallsql/junit/BenchTest.java۞412۩PreparedStatement pr = con.prepareStatement( "UPDATE " + tableName + " SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?" );
smallsql/junit/BenchTest.java۞413۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞414۩for (int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞415۩pr.setBytes (  1, byteArray );
smallsql/junit/BenchTest.java۞416۩pr.setString(  2 , "Test" );
smallsql/junit/BenchTest.java۞417۩pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );
smallsql/junit/BenchTest.java۞418۩pr.setFloat (  4, (float)1234.56789 );
smallsql/junit/BenchTest.java۞419۩pr.setFloat (  5 , (float)9876.54321 );
smallsql/junit/BenchTest.java۞420۩pr.setBytes (  6, largeByteArray );
smallsql/junit/BenchTest.java۞421۩pr.setInt   (  7 , i );
smallsql/junit/BenchTest.java۞422۩pr.setDouble(  8 , 23.45 );
smallsql/junit/BenchTest.java۞423۩pr.setDouble(  9 , 567.45 );
smallsql/junit/BenchTest.java۞424۩pr.setFloat (  10 , (float)78.89 );
smallsql/junit/BenchTest.java۞425۩pr.setTime  (  11, new Time( System.currentTimeMillis() ) );
smallsql/junit/BenchTest.java۞426۩pr.setShort (  12, (short)23456 );
smallsql/junit/BenchTest.java۞427۩pr.setFloat (  13, (float)34.56 );
smallsql/junit/BenchTest.java۞428۩pr.setString(  14, "sysname (30) NULL" );
smallsql/junit/BenchTest.java۞429۩pr.setString(  15 , "text NULL" );
smallsql/junit/BenchTest.java۞430۩pr.setByte  (  16, (byte)28 );
smallsql/junit/BenchTest.java۞431۩pr.setBytes (  17, byteArray );
smallsql/junit/BenchTest.java۞432۩pr.setString(  18, "varchar (255) NULL" );
smallsql/junit/BenchTest.java۞433۩pr.setInt   (  19 , i );
smallsql/junit/BenchTest.java۞434۩int updateCount = pr.executeUpdate();
smallsql/junit/BenchTest.java۞435۩if (updateCount != 1){
smallsql/junit/BenchTest.java۞436۩System.out.println( "  Failed: Update count should be 1 but it is " + updateCount + ".");
smallsql/junit/BenchTest.java۞437۩return;
smallsql/junit/BenchTest.java۞438۩}
smallsql/junit/BenchTest.java۞439۩}
smallsql/junit/BenchTest.java۞440۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞441۩System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞442۩pr.close();
smallsql/junit/BenchTest.java۞443۩}catch(Exception e){
smallsql/junit/BenchTest.java۞444۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞445۩}finally{
smallsql/junit/BenchTest.java۞446۩System.out.println();
smallsql/junit/BenchTest.java۞447۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞448۩}
smallsql/junit/BenchTest.java۞449۩}
smallsql/junit/BenchTest.java۞457۩static void test_UpdateRowsPrepareSP(Connection con){
smallsql/junit/BenchTest.java۞458۩System.out.println();
smallsql/junit/BenchTest.java۞459۩System.out.println( "Test update rows with a PreparedStatement and a stored procedure: " + rowCount + " rows");
smallsql/junit/BenchTest.java۞461۩try{
smallsql/junit/BenchTest.java۞462۩Statement st = con.createStatement();
smallsql/junit/BenchTest.java۞463۩try{st.execute("drop procedure sp_"+tableName);}catch(Exception e){}
smallsql/junit/BenchTest.java۞464۩st.execute("create procedure sp_"+tableName+" (@bi binary,@c nchar(255),@d datetime,@de decimal,@f float,@im image,@i int,@m money,@n numeric(18, 0),@r real,@sd smalldatetime,@si smallint,@sm smallmoney,@sy sysname,@t ntext,@ti tinyint,@vb varbinary(255),@vc nvarchar(255)) as UPDATE " + tableName + " SET bi=@bi,c=@c,d=@d,de=@de,f=@f,im=@im,i=@i,m=@m,n=@n,r=@r,sd=@sd,si=@si,sm=@sm,sy=@sy,t=@t,ti=@ti,vb=@vb,vc=@vc WHERE i=@i");
smallsql/junit/BenchTest.java۞466۩PreparedStatement pr = con.prepareStatement( "exec sp_" + tableName + " ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?" );
smallsql/junit/BenchTest.java۞467۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞468۩for (int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞469۩pr.setBytes (  1, byteArray );
smallsql/junit/BenchTest.java۞470۩pr.setString(  2 , "Test" );
smallsql/junit/BenchTest.java۞471۩pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );
smallsql/junit/BenchTest.java۞472۩pr.setFloat (  4, (float)1234.56789 );
smallsql/junit/BenchTest.java۞473۩pr.setFloat (  5 , (float)9876.54321 );
smallsql/junit/BenchTest.java۞474۩pr.setBytes (  6, largeByteArray );
smallsql/junit/BenchTest.java۞475۩pr.setInt   (  7 , i );
smallsql/junit/BenchTest.java۞476۩pr.setDouble(  8 , 23.45 );
smallsql/junit/BenchTest.java۞477۩pr.setDouble(  9 , 567.45 );
smallsql/junit/BenchTest.java۞478۩pr.setFloat (  10 , (float)78.89 );
smallsql/junit/BenchTest.java۞479۩pr.setTime  (  11, new Time( System.currentTimeMillis() ) );
smallsql/junit/BenchTest.java۞480۩pr.setShort (  12, (short)23456 );
smallsql/junit/BenchTest.java۞481۩pr.setFloat (  13, (float)34.56 );
smallsql/junit/BenchTest.java۞482۩pr.setString(  14, "sysname (30) NULL" );
smallsql/junit/BenchTest.java۞483۩pr.setString(  15 , "text NULL" );
smallsql/junit/BenchTest.java۞484۩pr.setByte  (  16, (byte)28 );
smallsql/junit/BenchTest.java۞485۩pr.setBytes (  17, byteArray );
smallsql/junit/BenchTest.java۞486۩pr.setString(  18, "varchar (255) NULL" );
smallsql/junit/BenchTest.java۞487۩int updateCount = pr.executeUpdate();
smallsql/junit/BenchTest.java۞488۩if (updateCount != 1){
smallsql/junit/BenchTest.java۞489۩System.out.println( "  Failed: Update count should be 1 but it is " + updateCount + ".");
smallsql/junit/BenchTest.java۞490۩return;
smallsql/junit/BenchTest.java۞491۩}
smallsql/junit/BenchTest.java۞492۩}
smallsql/junit/BenchTest.java۞493۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞494۩System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞495۩st.execute("drop procedure sp_"+tableName);
smallsql/junit/BenchTest.java۞496۩st.close();
smallsql/junit/BenchTest.java۞497۩pr.close();
smallsql/junit/BenchTest.java۞498۩}catch(Exception e){
smallsql/junit/BenchTest.java۞499۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞500۩}finally{
smallsql/junit/BenchTest.java۞501۩System.out.println();
smallsql/junit/BenchTest.java۞502۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞503۩}
smallsql/junit/BenchTest.java۞504۩}
smallsql/junit/BenchTest.java۞512۩static void test_UpdateRowsPrepareBatch(Connection con){
smallsql/junit/BenchTest.java۞513۩int batchSize = 10;
smallsql/junit/BenchTest.java۞514۩int batches = rowCount / batchSize;
smallsql/junit/BenchTest.java۞515۩System.out.println();
smallsql/junit/BenchTest.java۞516۩System.out.println( "Test update rows with PreparedStatement and Batches: " + batches + " batches, " + batchSize + " batch size");
smallsql/junit/BenchTest.java۞518۩try{
smallsql/junit/BenchTest.java۞519۩PreparedStatement pr = con.prepareStatement( "UPDATE " + tableName + " SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?" );
smallsql/junit/BenchTest.java۞520۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞521۩for (int i=0; i<batches; i++){
smallsql/junit/BenchTest.java۞522۩for (int r=0; r<batchSize; r++){
smallsql/junit/BenchTest.java۞523۩pr.setBytes (  1, byteArray );
smallsql/junit/BenchTest.java۞524۩pr.setString(  2 , "Test" );
smallsql/junit/BenchTest.java۞525۩pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );
smallsql/junit/BenchTest.java۞526۩pr.setFloat (  4, (float)1234.56789 );
smallsql/junit/BenchTest.java۞527۩pr.setFloat (  5 , (float)9876.54321 );
smallsql/junit/BenchTest.java۞528۩pr.setBytes (  6, largeByteArray );
smallsql/junit/BenchTest.java۞529۩pr.setInt   (  7 , i*batchSize + r );
smallsql/junit/BenchTest.java۞530۩pr.setDouble(  8 , 23.45 );
smallsql/junit/BenchTest.java۞531۩pr.setDouble(  9 , 567.45 );
smallsql/junit/BenchTest.java۞532۩pr.setFloat (  10 , (float)78.89 );
smallsql/junit/BenchTest.java۞533۩pr.setTime  (  11, new Time( System.currentTimeMillis() ) );
smallsql/junit/BenchTest.java۞534۩pr.setShort (  12, (short)23456 );
smallsql/junit/BenchTest.java۞535۩pr.setFloat (  13, (float)34.56 );
smallsql/junit/BenchTest.java۞536۩pr.setString(  14, "sysname (30) NULL" );
smallsql/junit/BenchTest.java۞537۩pr.setString(  15 , "text NULL" );
smallsql/junit/BenchTest.java۞538۩pr.setByte  (  16, (byte)28 );
smallsql/junit/BenchTest.java۞539۩pr.setBytes (  17, byteArray );
smallsql/junit/BenchTest.java۞540۩pr.setString(  18, "varchar (255) NULL" );
smallsql/junit/BenchTest.java۞541۩pr.setInt   (  19 , i );
smallsql/junit/BenchTest.java۞542۩pr.addBatch();
smallsql/junit/BenchTest.java۞543۩}
smallsql/junit/BenchTest.java۞544۩int[] updateCount = pr.executeBatch();
smallsql/junit/BenchTest.java۞545۩if (updateCount.length != batchSize){
smallsql/junit/BenchTest.java۞546۩System.out.println( "  Failed: Update count size should be " + batchSize + " but it is " + updateCount.length + ".");
smallsql/junit/BenchTest.java۞547۩return;
smallsql/junit/BenchTest.java۞548۩}
smallsql/junit/BenchTest.java۞549۩}
smallsql/junit/BenchTest.java۞550۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞551۩System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞552۩pr.close();
smallsql/junit/BenchTest.java۞553۩}catch(Exception e){
smallsql/junit/BenchTest.java۞554۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞555۩}finally{
smallsql/junit/BenchTest.java۞556۩System.out.println();
smallsql/junit/BenchTest.java۞557۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞558۩}
smallsql/junit/BenchTest.java۞559۩}
smallsql/junit/BenchTest.java۞567۩static void test_Scroll_getXXX(Connection con){
smallsql/junit/BenchTest.java۞568۩System.out.println();
smallsql/junit/BenchTest.java۞569۩System.out.println( "Test scroll and call the getXXX methods for every columns: " + rowCount + " rows");
smallsql/junit/BenchTest.java۞571۩try{
smallsql/junit/BenchTest.java۞572۩Statement st = con.createStatement();
smallsql/junit/BenchTest.java۞573۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞574۩ResultSet rs = st.executeQuery("SELECT * FROM " + tableName);
smallsql/junit/BenchTest.java۞575۩for (int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞576۩rs.next();
smallsql/junit/BenchTest.java۞577۩rs.getInt   (  1 );
smallsql/junit/BenchTest.java۞578۩rs.getBytes (  2 );
smallsql/junit/BenchTest.java۞579۩rs.getString(  3 );
smallsql/junit/BenchTest.java۞580۩rs.getDate  (  4 );
smallsql/junit/BenchTest.java۞581۩rs.getFloat (  5 );
smallsql/junit/BenchTest.java۞582۩rs.getFloat (  6 );
smallsql/junit/BenchTest.java۞583۩rs.getBytes (  7 );
smallsql/junit/BenchTest.java۞584۩rs.getInt   (  8 );
smallsql/junit/BenchTest.java۞585۩rs.getDouble(  9 );
smallsql/junit/BenchTest.java۞586۩rs.getDouble(  10 );
smallsql/junit/BenchTest.java۞587۩rs.getFloat (  11 );
smallsql/junit/BenchTest.java۞588۩rs.getTime  (  12 );
smallsql/junit/BenchTest.java۞589۩rs.getShort (  13 );
smallsql/junit/BenchTest.java۞590۩rs.getFloat (  14 );
smallsql/junit/BenchTest.java۞591۩rs.getString(  15 );
smallsql/junit/BenchTest.java۞592۩rs.getString(  16 );
smallsql/junit/BenchTest.java۞593۩rs.getByte  (  17 );
smallsql/junit/BenchTest.java۞594۩rs.getBytes (  18 );
smallsql/junit/BenchTest.java۞595۩rs.getString(  19 );
smallsql/junit/BenchTest.java۞596۩}
smallsql/junit/BenchTest.java۞597۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞598۩System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞599۩st.close();
smallsql/junit/BenchTest.java۞600۩}catch(Exception e){
smallsql/junit/BenchTest.java۞601۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞602۩}finally{
smallsql/junit/BenchTest.java۞603۩System.out.println();
smallsql/junit/BenchTest.java۞604۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞605۩}
smallsql/junit/BenchTest.java۞606۩}
smallsql/junit/BenchTest.java۞613۩static void test_UpdateLargeBinary(Connection con){
smallsql/junit/BenchTest.java۞614۩System.out.println();
smallsql/junit/BenchTest.java۞615۩System.out.println( "Test update large binary data: " + rowCount + "KB bytes");
smallsql/junit/BenchTest.java۞617۩try{
smallsql/junit/BenchTest.java۞618۩java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+".bin");
smallsql/junit/BenchTest.java۞619۩byte bytes[] = new byte[1024];
smallsql/junit/BenchTest.java۞620۩for(int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞621۩fos.write(bytes);
smallsql/junit/BenchTest.java۞622۩}
smallsql/junit/BenchTest.java۞623۩fos.close();
smallsql/junit/BenchTest.java۞624۩java.io.FileInputStream fis = new java.io.FileInputStream(tableName+".bin");
smallsql/junit/BenchTest.java۞625۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞626۩PreparedStatement pr = con.prepareStatement("Update " + tableName + " set im=? WHERE pr=1");
smallsql/junit/BenchTest.java۞627۩pr.setBinaryStream( 1, fis, rowCount*1024 );
smallsql/junit/BenchTest.java۞628۩pr.execute();
smallsql/junit/BenchTest.java۞629۩pr.close();
smallsql/junit/BenchTest.java۞630۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞631۩System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞632۩fis.close();
smallsql/junit/BenchTest.java۞633۩java.io.File file = new java.io.File(tableName+".bin");
smallsql/junit/BenchTest.java۞634۩file.delete();
smallsql/junit/BenchTest.java۞635۩}catch(Exception e){
smallsql/junit/BenchTest.java۞636۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞637۩}finally{
smallsql/junit/BenchTest.java۞638۩System.out.println();
smallsql/junit/BenchTest.java۞639۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞640۩}
smallsql/junit/BenchTest.java۞641۩}
smallsql/junit/BenchTest.java۞650۩static void test_UpdateLargeBinaryWithSP(Connection con){
smallsql/junit/BenchTest.java۞651۩System.out.println();
smallsql/junit/BenchTest.java۞652۩System.out.println( "Test update large binary data with a SP: " + rowCount + "KB bytes");
smallsql/junit/BenchTest.java۞654۩try{
smallsql/junit/BenchTest.java۞655۩java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+".bin");
smallsql/junit/BenchTest.java۞656۩byte bytes[] = new byte[1024];
smallsql/junit/BenchTest.java۞657۩for(int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞658۩fos.write(bytes);
smallsql/junit/BenchTest.java۞659۩}
smallsql/junit/BenchTest.java۞660۩fos.close();
smallsql/junit/BenchTest.java۞661۩java.io.FileInputStream fis = new java.io.FileInputStream(tableName+".bin");
smallsql/junit/BenchTest.java۞662۩long time = -System.currentTimeMillis();
smallsql/junit/BenchTest.java۞663۩Statement st = con.createStatement();
smallsql/junit/BenchTest.java۞664۩st.execute("CREATE PROCEDURE #UpdateLargeBinary(@im image) as Update " + tableName + " set im=@im WHERE pr=2");
smallsql/junit/BenchTest.java۞665۩PreparedStatement pr = con.prepareStatement("exec #UpdateLargeBinary ?");
smallsql/junit/BenchTest.java۞666۩pr.setBinaryStream( 1, fis, rowCount*1024 );
smallsql/junit/BenchTest.java۞667۩pr.execute();
smallsql/junit/BenchTest.java۞668۩st.execute("DROP PROCEDURE #UpdateLargeBinary");
smallsql/junit/BenchTest.java۞669۩st.close();
smallsql/junit/BenchTest.java۞670۩pr.close();
smallsql/junit/BenchTest.java۞671۩time += System.currentTimeMillis();
smallsql/junit/BenchTest.java۞672۩System.out.println( "  Test time: " + time + " ms");
smallsql/junit/BenchTest.java۞673۩fis.close();
smallsql/junit/BenchTest.java۞674۩java.io.File file = new java.io.File(tableName+".bin");
smallsql/junit/BenchTest.java۞675۩file.delete();
smallsql/junit/BenchTest.java۞676۩}catch(Exception e){
smallsql/junit/BenchTest.java۞677۩System.out.println("  Failed:"+e);
smallsql/junit/BenchTest.java۞678۩}finally{
smallsql/junit/BenchTest.java۞679۩System.out.println();
smallsql/junit/BenchTest.java۞680۩System.out.println("===================================================================");
smallsql/junit/BenchTest.java۞681۩}
smallsql/junit/BenchTest.java۞682۩}
smallsql/junit/BenchTest.java۞690۩static void createTestTable(Connection con) throws SQLException{
smallsql/junit/BenchTest.java۞691۩Statement st;
smallsql/junit/BenchTest.java۞692۩st = con.createStatement();
smallsql/junit/BenchTest.java۞694۩dropTestTable( con );
smallsql/junit/BenchTest.java۞697۩st.execute(
smallsql/junit/BenchTest.java۞698۩"CREATE TABLE " + tableName + " ("+
smallsql/junit/BenchTest.java۞699۩"    pr  numeric IDENTITY,"+
smallsql/junit/BenchTest.java۞700۩"    bi  binary (255) NULL ,"+
smallsql/junit/BenchTest.java۞701۩"    c   nchar (255) NULL ,"+
smallsql/junit/BenchTest.java۞702۩"    d   datetime NULL ,"+
smallsql/junit/BenchTest.java۞703۩"    de  decimal(18, 0) NULL ,"+
smallsql/junit/BenchTest.java۞704۩"    f   float NULL ,"+
smallsql/junit/BenchTest.java۞705۩"    im  image NULL ,"+
smallsql/junit/BenchTest.java۞706۩"    i   int NULL ,"+
smallsql/junit/BenchTest.java۞707۩"    m   money NULL ,"+
smallsql/junit/BenchTest.java۞708۩"    n   numeric(18, 0) NULL ,"+
smallsql/junit/BenchTest.java۞709۩"    r   real NULL ,"+
smallsql/junit/BenchTest.java۞710۩"    sd  smalldatetime NULL ,"+
smallsql/junit/BenchTest.java۞711۩"    si  smallint NULL ,"+
smallsql/junit/BenchTest.java۞712۩"    sm  smallmoney NULL ,"+
smallsql/junit/BenchTest.java۞713۩"    sy  sysname NULL ,"+
smallsql/junit/BenchTest.java۞714۩"    t   ntext NULL ,"+
smallsql/junit/BenchTest.java۞715۩"    ti  tinyint NULL ,"+
smallsql/junit/BenchTest.java۞716۩"    vb  varbinary (255) NULL ,"+
smallsql/junit/BenchTest.java۞717۩"    vc  nvarchar (255) NULL, "+
smallsql/junit/BenchTest.java۞718۩"CONSTRAINT PK_BenchTest2 PRIMARY KEY CLUSTERED (pr) "+
smallsql/junit/BenchTest.java۞719۩")");
smallsql/junit/BenchTest.java۞720۩st.close();
smallsql/junit/BenchTest.java۞721۩}
smallsql/junit/BenchTest.java۞725۩static void deleteTestTable(Connection con){
smallsql/junit/BenchTest.java۞726۩try{
smallsql/junit/BenchTest.java۞727۩Statement st = con.createStatement();
smallsql/junit/BenchTest.java۞728۩st.execute("DELETE FROM " + tableName);
smallsql/junit/BenchTest.java۞729۩st.close();
smallsql/junit/BenchTest.java۞730۩}catch(Exception e){}
smallsql/junit/BenchTest.java۞731۩}
smallsql/junit/BenchTest.java۞733۩static void dropTestTable(Connection con){
smallsql/junit/BenchTest.java۞734۩try{
smallsql/junit/BenchTest.java۞735۩Statement st = con.createStatement();
smallsql/junit/BenchTest.java۞736۩st.execute("drop table " + tableName);
smallsql/junit/BenchTest.java۞737۩st.close();
smallsql/junit/BenchTest.java۞738۩}catch(Exception e){}
smallsql/junit/BenchTest.java۞739۩}
smallsql/junit/BenchTest.java۞742۩static void createTestDataWithClassicInsert(Connection con) throws SQLException{
smallsql/junit/BenchTest.java۞743۩String sql = "INSERT INTO " + tableName + "(bi,c,d,de,f,im,i,m,n,r,si,sd,sm,sy,t,ti,vb,vc) VALUES(0x172243,'Test','20010101',1234.56789,9876.54321,0x";
smallsql/junit/BenchTest.java۞744۩for(int i=0; i<largeByteArray.length; i++){
smallsql/junit/BenchTest.java۞745۩sql += "00";
smallsql/junit/BenchTest.java۞746۩}
smallsql/junit/BenchTest.java۞747۩Statement st = con.createStatement();
smallsql/junit/BenchTest.java۞748۩for (int i=0; i<rowCount; i++){
smallsql/junit/BenchTest.java۞749۩st.execute(sql + ","+i+",23.45,567.45,78.89,"+i+",'11:11:11',34.56,'sysname (30) NULL','ntext NULL, sample to save in the field',"+(i & 0xFF)+",0x172243,'nvarchar (255) NULL')"  );
smallsql/junit/BenchTest.java۞750۩}
smallsql/junit/BenchTest.java۞751۩st.close();
smallsql/junit/BenchTest.java۞752۩}
smallsql/junit/BenchTest.java۞753۩}
smallsql/junit/TestAlterTable.java۞4۩package smallsql.junit;
smallsql/junit/TestAlterTable.java۞6۩import java.sql.*;
smallsql/junit/TestAlterTable.java۞12۩public class TestAlterTable extends BasicTestCase {
smallsql/junit/TestAlterTable.java۞14۩private final String table = "AlterTable";
smallsql/junit/TestAlterTable.java۞15۩private final int rowCount = 10;
smallsql/junit/TestAlterTable.java۞17۩public void setUp(){
smallsql/junit/TestAlterTable.java۞18۩tearDown();
smallsql/junit/TestAlterTable.java۞19۩try{
smallsql/junit/TestAlterTable.java۞20۩Connection con = AllTests.getConnection();
smallsql/junit/TestAlterTable.java۞21۩Statement st = con.createStatement();
smallsql/junit/TestAlterTable.java۞22۩st.execute("create table " + table + "(i int, v varchar(100))");
smallsql/junit/TestAlterTable.java۞23۩st.execute("Insert into " + table + " Values(1,'abc')");
smallsql/junit/TestAlterTable.java۞24۩st.execute("Insert into " + table + " Values(2,'bcd')");
smallsql/junit/TestAlterTable.java۞25۩st.execute("Insert into " + table + " Values(3,'cde')");
smallsql/junit/TestAlterTable.java۞26۩st.execute("Insert into " + table + " Values(4,'def')");
smallsql/junit/TestAlterTable.java۞27۩st.execute("Insert into " + table + " Values(5,'efg')");
smallsql/junit/TestAlterTable.java۞28۩st.execute("Insert into " + table + " Values(6,'fgh')");
smallsql/junit/TestAlterTable.java۞29۩st.execute("Insert into " + table + " Values(7,'ghi')");
smallsql/junit/TestAlterTable.java۞30۩st.execute("Insert into " + table + " Values(8,'hij')");
smallsql/junit/TestAlterTable.java۞31۩st.execute("Insert into " + table + " Values(9,'ijk')");
smallsql/junit/TestAlterTable.java۞32۩st.execute("Insert into " + table + " Values(10,'jkl')");
smallsql/junit/TestAlterTable.java۞33۩st.close();
smallsql/junit/TestAlterTable.java۞34۩}catch(Throwable e){
smallsql/junit/TestAlterTable.java۞35۩e.printStackTrace();
smallsql/junit/TestAlterTable.java۞36۩}
smallsql/junit/TestAlterTable.java۞37۩}
smallsql/junit/TestAlterTable.java۞39۩public void tearDown(){
smallsql/junit/TestAlterTable.java۞40۩try {
smallsql/junit/TestAlterTable.java۞41۩dropTable( AllTests.getConnection(), table );
smallsql/junit/TestAlterTable.java۞42۩} catch (SQLException ex) {
smallsql/junit/TestAlterTable.java۞43۩ex.printStackTrace();
smallsql/junit/TestAlterTable.java۞44۩}
smallsql/junit/TestAlterTable.java۞45۩}
smallsql/junit/TestAlterTable.java۞48۩public void testAdd1Column() throws Exception{
smallsql/junit/TestAlterTable.java۞49۩Connection con = AllTests.getConnection();
smallsql/junit/TestAlterTable.java۞50۩Statement st = con.createStatement();
smallsql/junit/TestAlterTable.java۞51۩st.execute("Alter Table " + table + " Add a Varchar(20)");
smallsql/junit/TestAlterTable.java۞52۩ResultSet rs = st.executeQuery("Select * From " + table);
smallsql/junit/TestAlterTable.java۞53۩assertRSMetaData( rs, new String[]{"i", "v", "a"},  new int[]{Types.INTEGER, Types.VARCHAR, Types.VARCHAR} );
smallsql/junit/TestAlterTable.java۞54۩}
smallsql/junit/TestAlterTable.java۞57۩public void testAdd2Column() throws Exception{
smallsql/junit/TestAlterTable.java۞58۩Connection con = AllTests.getConnection();
smallsql/junit/TestAlterTable.java۞59۩Statement st = con.createStatement();
smallsql/junit/TestAlterTable.java۞60۩st.execute("Alter Table " + table + " Add a Varchar(20), b int DEFAULT 25");
smallsql/junit/TestAlterTable.java۞61۩ResultSet rs = st.executeQuery("Select * From " + table);
smallsql/junit/TestAlterTable.java۞62۩assertRSMetaData( rs, new String[]{"i", "v", "a", "b"},  new int[]{Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.INTEGER} );
smallsql/junit/TestAlterTable.java۞63۩int count = 0;
smallsql/junit/TestAlterTable.java۞64۩while(rs.next()){
smallsql/junit/TestAlterTable.java۞65۩assertEquals( "default value", 25, rs.getInt("b") );
smallsql/junit/TestAlterTable.java۞66۩count++;
smallsql/junit/TestAlterTable.java۞67۩}
smallsql/junit/TestAlterTable.java۞68۩assertEquals( "RowCount", rowCount, count );
smallsql/junit/TestAlterTable.java۞69۩}
smallsql/junit/TestAlterTable.java۞72۩public void testAddWithTableLock_REPEATABLE_READ() throws Exception{
smallsql/junit/TestAlterTable.java۞73۩Connection con = AllTests.getConnection();
smallsql/junit/TestAlterTable.java۞74۩Statement st = con.createStatement();
smallsql/junit/TestAlterTable.java۞75۩int isolation = con.getTransactionIsolation();
smallsql/junit/TestAlterTable.java۞76۩con.setAutoCommit(false);
smallsql/junit/TestAlterTable.java۞77۩try{
smallsql/junit/TestAlterTable.java۞78۩con.setTransactionIsolation( Connection.TRANSACTION_REPEATABLE_READ );
smallsql/junit/TestAlterTable.java۞79۩ResultSet rs = st.executeQuery("Select * From " + table);
smallsql/junit/TestAlterTable.java۞80۩rs.next();
smallsql/junit/TestAlterTable.java۞81۩try {
smallsql/junit/TestAlterTable.java۞82۩st.execute("Alter Table " + table + " Add a Varchar(20)");
smallsql/junit/TestAlterTable.java۞83۩fail("Alter Table should not work on a table with a lock.");
smallsql/junit/TestAlterTable.java۞84۩} catch (SQLException ex) {
smallsql/junit/TestAlterTable.java۞85۩assertSQLException( "01000", 0, ex );
smallsql/junit/TestAlterTable.java۞86۩}
smallsql/junit/TestAlterTable.java۞87۩rs.next();
smallsql/junit/TestAlterTable.java۞88۩}finally{
smallsql/junit/TestAlterTable.java۞89۩con.setTransactionIsolation(isolation);
smallsql/junit/TestAlterTable.java۞90۩con.setAutoCommit(true);
smallsql/junit/TestAlterTable.java۞91۩}
smallsql/junit/TestAlterTable.java۞92۩}
smallsql/junit/TestAlterTable.java۞95۩public void testAddWithTableLock_READ_COMMITTED() throws Exception{
smallsql/junit/TestAlterTable.java۞96۩Connection con = AllTests.getConnection();
smallsql/junit/TestAlterTable.java۞97۩Statement st = con.createStatement();
smallsql/junit/TestAlterTable.java۞98۩int isolation = con.getTransactionIsolation();
smallsql/junit/TestAlterTable.java۞99۩con.setAutoCommit(false);
smallsql/junit/TestAlterTable.java۞100۩try{
smallsql/junit/TestAlterTable.java۞101۩con.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );
smallsql/junit/TestAlterTable.java۞102۩ResultSet rs = st.executeQuery("Select * From " + table);
smallsql/junit/TestAlterTable.java۞103۩rs.next();
smallsql/junit/TestAlterTable.java۞104۩st.execute("Alter Table " + table + " Add a Varchar(20)");
smallsql/junit/TestAlterTable.java۞105۩try {
smallsql/junit/TestAlterTable.java۞106۩rs.next();
smallsql/junit/TestAlterTable.java۞107۩fail("Alter Table should not work on a table with a lock.");
smallsql/junit/TestAlterTable.java۞108۩} catch (SQLException ex) {
smallsql/junit/TestAlterTable.java۞109۩assertSQLException( "01000", 0, ex );
smallsql/junit/TestAlterTable.java۞110۩}
smallsql/junit/TestAlterTable.java۞111۩}finally{
smallsql/junit/TestAlterTable.java۞112۩con.setTransactionIsolation(isolation);
smallsql/junit/TestAlterTable.java۞113۩con.setAutoCommit(true);
smallsql/junit/TestAlterTable.java۞114۩}
smallsql/junit/TestAlterTable.java۞115۩}
smallsql/junit/TestAlterTable.java۞117۩}
smallsql/junit/TestAlterTable2.java۞4۩package smallsql.junit;
smallsql/junit/TestAlterTable2.java۞6۩import java.sql.*;
smallsql/junit/TestAlterTable2.java۞12۩public class TestAlterTable2 extends BasicTestCase {
smallsql/junit/TestAlterTable2.java۞14۩private final String table = "AlterTable2";
smallsql/junit/TestAlterTable2.java۞16۩public void setUp(){
smallsql/junit/TestAlterTable2.java۞17۩tearDown();
smallsql/junit/TestAlterTable2.java۞18۩}
smallsql/junit/TestAlterTable2.java۞20۩public void tearDown(){
smallsql/junit/TestAlterTable2.java۞21۩try {
smallsql/junit/TestAlterTable2.java۞22۩dropTable( AllTests.getConnection(), table );
smallsql/junit/TestAlterTable2.java۞23۩} catch (SQLException ex) {
smallsql/junit/TestAlterTable2.java۞24۩ex.printStackTrace();
smallsql/junit/TestAlterTable2.java۞25۩}
smallsql/junit/TestAlterTable2.java۞26۩}
smallsql/junit/TestAlterTable2.java۞29۩public void testWithPrimaryKey() throws Exception{
smallsql/junit/TestAlterTable2.java۞30۩Connection con = AllTests.getConnection();
smallsql/junit/TestAlterTable2.java۞31۩Statement st = con.createStatement();
smallsql/junit/TestAlterTable2.java۞32۩st.execute("create table "+table+" (keyField varchar(2) primary key)");
smallsql/junit/TestAlterTable2.java۞33۩st.execute("alter table "+table+" add anotherField varchar(4)");
smallsql/junit/TestAlterTable2.java۞34۩ResultSet rs = st.executeQuery("Select * From " + table);
smallsql/junit/TestAlterTable2.java۞35۩assertRSMetaData( rs, new String[]{"keyField", "anotherField"},  new int[]{Types.VARCHAR, Types.VARCHAR} );
smallsql/junit/TestAlterTable2.java۞36۩rs = con.getMetaData().getIndexInfo( null, null, table, false, false );
smallsql/junit/TestAlterTable2.java۞37۩assertRowCount( 1, rs );
smallsql/junit/TestAlterTable2.java۞38۩}
smallsql/junit/TestAlterTable2.java۞41۩public void testAddPrimaryKey() throws Exception{
smallsql/junit/TestAlterTable2.java۞42۩Connection con = AllTests.getConnection();
smallsql/junit/TestAlterTable2.java۞43۩Statement st = con.createStatement();
smallsql/junit/TestAlterTable2.java۞44۩st.execute("create table "+table+" (a varchar(2))");
smallsql/junit/TestAlterTable2.java۞45۩st.execute("alter table "+table+" add b varchar(4) primary key");
smallsql/junit/TestAlterTable2.java۞46۩ResultSet rs = st.executeQuery("Select * From " + table);
smallsql/junit/TestAlterTable2.java۞47۩assertRSMetaData( rs, new String[]{"a", "b"},  new int[]{Types.VARCHAR, Types.VARCHAR} );
smallsql/junit/TestAlterTable2.java۞48۩rs = con.getMetaData().getIndexInfo( null, null, table, false, false );
smallsql/junit/TestAlterTable2.java۞49۩assertRowCount( 1, rs );
smallsql/junit/TestAlterTable2.java۞50۩}
smallsql/junit/TestAlterTable2.java۞53۩public void testAdd2PrimaryKeys() throws Exception{
smallsql/junit/TestAlterTable2.java۞54۩Connection con = AllTests.getConnection();
smallsql/junit/TestAlterTable2.java۞55۩Statement st = con.createStatement();
smallsql/junit/TestAlterTable2.java۞56۩st.execute("create table "+table+" (a varchar(2) primary key)");
smallsql/junit/TestAlterTable2.java۞58۩try {
smallsql/junit/TestAlterTable2.java۞59۩st.execute("alter table "+table+" add b varchar(4) primary key");
smallsql/junit/TestAlterTable2.java۞60۩fail("2 primary keys are invalid");
smallsql/junit/TestAlterTable2.java۞61۩} catch (SQLException ex) {
smallsql/junit/TestAlterTable2.java۞62۩assertSQLException("01000",0, ex);
smallsql/junit/TestAlterTable2.java۞63۩}
smallsql/junit/TestAlterTable2.java۞64۩ResultSet rs = st.executeQuery("Select * From " + table);
smallsql/junit/TestAlterTable2.java۞65۩assertRSMetaData( rs, new String[]{"a"},  new int[]{Types.VARCHAR} );
smallsql/junit/TestAlterTable2.java۞66۩rs = con.getMetaData().getIndexInfo( null, null, table, false, false );
smallsql/junit/TestAlterTable2.java۞67۩assertRowCount( 1, rs );
smallsql/junit/TestAlterTable2.java۞68۩}
smallsql/junit/TestAlterTable2.java۞71۩public void testAdd2Keys() throws Exception{
smallsql/junit/TestAlterTable2.java۞72۩Connection con = AllTests.getConnection();
smallsql/junit/TestAlterTable2.java۞73۩Statement st = con.createStatement();
smallsql/junit/TestAlterTable2.java۞74۩st.execute("create table "+table+" (a varchar(2) unique)");
smallsql/junit/TestAlterTable2.java۞75۩st.execute("alter table "+table+" add b varchar(4) primary key");
smallsql/junit/TestAlterTable2.java۞76۩ResultSet rs = st.executeQuery("Select * From " + table);
smallsql/junit/TestAlterTable2.java۞77۩assertRSMetaData( rs, new String[]{"a", "b"},  new int[]{Types.VARCHAR, Types.VARCHAR} );
smallsql/junit/TestAlterTable2.java۞78۩rs = con.getMetaData().getIndexInfo( null, null, table, false, false );
smallsql/junit/TestAlterTable2.java۞79۩assertRowCount( 2, rs );
smallsql/junit/TestAlterTable2.java۞80۩}
smallsql/junit/TestAlterTable2.java۞82۩}
smallsql/junit/TestDBMetaData.java۞33۩package smallsql.junit;
smallsql/junit/TestDBMetaData.java۞35۩import java.sql.*;
smallsql/junit/TestDBMetaData.java۞36۩import java.text.*;
smallsql/junit/TestDBMetaData.java۞37۩import java.util.Locale;
smallsql/junit/TestDBMetaData.java۞42۩public class TestDBMetaData extends BasicTestCase {
smallsql/junit/TestDBMetaData.java۞44۩public TestDBMetaData(){
smallsql/junit/TestDBMetaData.java۞45۩super();
smallsql/junit/TestDBMetaData.java۞46۩}
smallsql/junit/TestDBMetaData.java۞49۩public TestDBMetaData(String arg0) {
smallsql/junit/TestDBMetaData.java۞50۩super(arg0);
smallsql/junit/TestDBMetaData.java۞51۩}
smallsql/junit/TestDBMetaData.java۞54۩public void testGetURL() throws Exception{
smallsql/junit/TestDBMetaData.java۞55۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞56۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞57۩assertEquals( "URL", AllTests.JDBC_URL, md.getURL());
smallsql/junit/TestDBMetaData.java۞58۩}
smallsql/junit/TestDBMetaData.java۞61۩public void testVersions() throws Exception{
smallsql/junit/TestDBMetaData.java۞62۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞63۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞64۩assertEquals( "DriverVersion", md.getDriverVersion(), md.getDatabaseProductVersion());
smallsql/junit/TestDBMetaData.java۞65۩Driver driver = DriverManager.getDriver(AllTests.JDBC_URL);
smallsql/junit/TestDBMetaData.java۞66۩assertEquals( "MajorVersion", driver.getMajorVersion(), md.getDatabaseMajorVersion());
smallsql/junit/TestDBMetaData.java۞67۩assertEquals( "MajorVersion", driver.getMajorVersion(), md.getDriverMajorVersion());
smallsql/junit/TestDBMetaData.java۞68۩assertEquals( "MinorVersion", driver.getMinorVersion(), md.getDatabaseMinorVersion());
smallsql/junit/TestDBMetaData.java۞69۩assertEquals( "MinorVersion", driver.getMinorVersion(), md.getDriverMinorVersion());
smallsql/junit/TestDBMetaData.java۞70۩assertEquals( "Version", new DecimalFormat("###0.00", new DecimalFormatSymbols(Locale.US)).format(driver.getMajorVersion()+driver.getMinorVersion()/100.0), md.getDriverVersion());
smallsql/junit/TestDBMetaData.java۞71۩assertTrue( "jdbcCompliant", driver.jdbcCompliant() );
smallsql/junit/TestDBMetaData.java۞72۩}
smallsql/junit/TestDBMetaData.java۞75۩public void testFunctions() throws Exception{
smallsql/junit/TestDBMetaData.java۞76۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞77۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞78۩assertEquals( "getNumericFunctions", "ABS,ACOS,ASIN,ATAN,ATAN2,CEILING,COS,COT,DEGREES,EXP,FLOOR,LOG,LOG10,MOD,PI,POWER,RADIANS,RAND,ROUND,SIGN,SIN,SQRT,TAN,TRUNCATE",
smallsql/junit/TestDBMetaData.java۞79۩md.getNumericFunctions());
smallsql/junit/TestDBMetaData.java۞80۩assertEquals( "getStringFunctions", "ASCII,BIT_LENGTH,CHAR_LENGTH,CHARACTER_LENGTH,CHAR,CONCAT,DIFFERENCE,INSERT,LCASE,LEFT,LENGTH,LOCATE,LTRIM,OCTET_LENGTH,REPEAT,REPLACE,RIGHT,RTRIM,SOUNDEX,SPACE,SUBSTRING,TRIM,UCASE",
smallsql/junit/TestDBMetaData.java۞81۩md.getStringFunctions());
smallsql/junit/TestDBMetaData.java۞82۩assertEquals( "getStringFunctions", "IFNULL,USER,CONVERT,CAST,IIF",
smallsql/junit/TestDBMetaData.java۞83۩md.getSystemFunctions());
smallsql/junit/TestDBMetaData.java۞84۩assertEquals( "getStringFunctions", "CURDATE,CURRENT_DATE,CURTIME,DAYNAME,DAYOFMONTH,DAYOFWEEK,DAYOFYEAR,DAY,HOUR,MILLISECOND,MINUTE,MONTH,MONTHNAME,NOW,QUARTER,SECOND,TIMESTAMPADD,TIMESTAMPDIFF,WEEK,YEAR",
smallsql/junit/TestDBMetaData.java۞85۩md.getTimeDateFunctions());
smallsql/junit/TestDBMetaData.java۞86۩}
smallsql/junit/TestDBMetaData.java۞89۩public void testGetProcedures() throws Exception{
smallsql/junit/TestDBMetaData.java۞90۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞91۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞92۩ResultSet rs = md.getProcedures( null, null, "*");
smallsql/junit/TestDBMetaData.java۞93۩String[] colNames = {"PROCEDURE_CAT", "PROCEDURE_SCHEM", "PROCEDURE_NAME", "", "", "", "REMARKS", "PROCEDURE_TYPE"};
smallsql/junit/TestDBMetaData.java۞94۩int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };
smallsql/junit/TestDBMetaData.java۞95۩assertRSMetaData( rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞96۩}
smallsql/junit/TestDBMetaData.java۞99۩public void testGetProcedureColumns() throws Exception{
smallsql/junit/TestDBMetaData.java۞100۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞101۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞102۩ResultSet rs = md.getProcedureColumns( null, null, "*", null);
smallsql/junit/TestDBMetaData.java۞103۩String[] colNames = {"PROCEDURE_CAT", "PROCEDURE_SCHEM", "PROCEDURE_NAME", "COLUMN_NAME", "COLUMN_TYPE", "DATA_TYPE", "TYPE_NAME", "PRECISION", "LENGTH", "SCALE", "RADIX", "NULLABLE", "REMARKS" };
smallsql/junit/TestDBMetaData.java۞104۩int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };
smallsql/junit/TestDBMetaData.java۞105۩assertRSMetaData( rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞106۩}
smallsql/junit/TestDBMetaData.java۞109۩public void testGetTables() throws Exception{
smallsql/junit/TestDBMetaData.java۞110۩String[] colNames = {"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","TABLE_TYPE","REMARKS","TYPE_CAT","TYPE_SCHEM","TYPE_NAME","SELF_REFERENCING_COL_NAME","REF_GENERATION"};
smallsql/junit/TestDBMetaData.java۞111۩int[] types = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL};
smallsql/junit/TestDBMetaData.java۞114۩Connection con = DriverManager.getConnection("jdbc:smallsql?");
smallsql/junit/TestDBMetaData.java۞115۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞116۩ResultSet rs = md.getTables(null, null, null, null);
smallsql/junit/TestDBMetaData.java۞117۩super.assertRSMetaData(rs, colNames, new int[colNames.length]);
smallsql/junit/TestDBMetaData.java۞118۩assertFalse(rs.next());
smallsql/junit/TestDBMetaData.java۞119۩con.close();
smallsql/junit/TestDBMetaData.java۞122۩con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞123۩md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞124۩rs = md.getTables(null, null, null, null);
smallsql/junit/TestDBMetaData.java۞125۩super.assertRSMetaData(rs, colNames, types);
smallsql/junit/TestDBMetaData.java۞126۩}
smallsql/junit/TestDBMetaData.java۞129۩public void testGetSchemas() throws Exception{
smallsql/junit/TestDBMetaData.java۞130۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞131۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞132۩ResultSet rs = md.getSchemas();
smallsql/junit/TestDBMetaData.java۞133۩String[] colNames = {"TABLE_SCHEM"};
smallsql/junit/TestDBMetaData.java۞134۩int[] colTypes = {Types.NULL};
smallsql/junit/TestDBMetaData.java۞135۩assertRSMetaData( rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞136۩assertFalse(rs.next());
smallsql/junit/TestDBMetaData.java۞137۩}
smallsql/junit/TestDBMetaData.java۞140۩public void testGetCatalogs() throws Exception{
smallsql/junit/TestDBMetaData.java۞141۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞142۩try{
smallsql/junit/TestDBMetaData.java۞143۩con.createStatement().execute("drop database test2\n\r\t");
smallsql/junit/TestDBMetaData.java۞144۩}catch(SQLException e){}
smallsql/junit/TestDBMetaData.java۞145۩con.createStatement().execute("create database test2");
smallsql/junit/TestDBMetaData.java۞146۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞147۩ResultSet rs = md.getCatalogs();
smallsql/junit/TestDBMetaData.java۞148۩assertRSMetaData( rs, new String[]{"TABLE_CAT"}, new int[]{Types.VARCHAR});
smallsql/junit/TestDBMetaData.java۞149۩while(rs.next()){
smallsql/junit/TestDBMetaData.java۞150۩System.out.println( "testCatalogs:"+rs.getObject(1) );
smallsql/junit/TestDBMetaData.java۞151۩}
smallsql/junit/TestDBMetaData.java۞152۩}
smallsql/junit/TestDBMetaData.java۞155۩public void testGetTableTypes() throws Exception{
smallsql/junit/TestDBMetaData.java۞156۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞157۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞158۩ResultSet rs = md.getTableTypes();
smallsql/junit/TestDBMetaData.java۞159۩String[] colNames = {"TABLE_TYPE"};
smallsql/junit/TestDBMetaData.java۞160۩int[] colTypes = {Types.VARCHAR};
smallsql/junit/TestDBMetaData.java۞161۩assertRSMetaData( rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞162۩String type = "";
smallsql/junit/TestDBMetaData.java۞163۩int count = 0;
smallsql/junit/TestDBMetaData.java۞164۩while(rs.next()){
smallsql/junit/TestDBMetaData.java۞165۩String type2 = rs.getString("TABLE_TYPE");
smallsql/junit/TestDBMetaData.java۞166۩assertTrue( type+"-"+type2, type.compareTo(type2)<0);
smallsql/junit/TestDBMetaData.java۞167۩type = type2;
smallsql/junit/TestDBMetaData.java۞168۩count++;
smallsql/junit/TestDBMetaData.java۞169۩}
smallsql/junit/TestDBMetaData.java۞170۩assertEquals("Table Type Count", 3, count);
smallsql/junit/TestDBMetaData.java۞171۩}
smallsql/junit/TestDBMetaData.java۞174۩public void testGetColumn() throws Exception{
smallsql/junit/TestDBMetaData.java۞175۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞176۩dropTable(con,"tableColumns");
smallsql/junit/TestDBMetaData.java۞177۩dropView( con, "viewColumns");
smallsql/junit/TestDBMetaData.java۞178۩con.createStatement().execute("create table tableColumns(a int default 5)");
smallsql/junit/TestDBMetaData.java۞179۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞181۩ResultSet rs = md.getColumns(null, null, "tableColumns", null);
smallsql/junit/TestDBMetaData.java۞182۩String[] colNames = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE", "TYPE_NAME", "COLUMN_SIZE", "BUFFER_LENGTH", "DECIMAL_DIGITS", "NUM_PREC_RADIX", "NULLABLE", "REMARKS", "COLUMN_DEF", "SQL_DATA_TYPE", "SQL_DATETIME_SUB", "CHAR_OCTET_LENGTH", "ORDINAL_POSITION", "IS_NULLABLE"};
smallsql/junit/TestDBMetaData.java۞183۩int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR};
smallsql/junit/TestDBMetaData.java۞184۩assertRSMetaData( rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞185۩assertTrue( "No row", rs.next() );
smallsql/junit/TestDBMetaData.java۞186۩assertEquals( "a", rs.getObject("COLUMN_NAME") );
smallsql/junit/TestDBMetaData.java۞187۩assertEquals( "INT", rs.getObject("TYPE_NAME") );
smallsql/junit/TestDBMetaData.java۞188۩assertEquals( "5", rs.getObject("COLUMN_Def") );
smallsql/junit/TestDBMetaData.java۞190۩con.createStatement().execute("create view viewColumns as Select * from tableColumns");
smallsql/junit/TestDBMetaData.java۞192۩rs = md.getColumns(null, null, "viewColumns", null);
smallsql/junit/TestDBMetaData.java۞193۩assertRSMetaData( rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞194۩assertTrue( "No row", rs.next() );
smallsql/junit/TestDBMetaData.java۞195۩assertEquals( "a", rs.getObject("COLUMN_NAME") );
smallsql/junit/TestDBMetaData.java۞196۩assertEquals( "INT", rs.getObject("TYPE_NAME") );
smallsql/junit/TestDBMetaData.java۞197۩assertEquals( "5", rs.getObject("COLUMN_Def") );
smallsql/junit/TestDBMetaData.java۞199۩dropView( con, "viewColumns");
smallsql/junit/TestDBMetaData.java۞200۩dropTable( con, "tableColumns");
smallsql/junit/TestDBMetaData.java۞201۩}
smallsql/junit/TestDBMetaData.java۞204۩public void testGetTypeInfo() throws Exception{
smallsql/junit/TestDBMetaData.java۞205۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞206۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞208۩ResultSet rs = md.getTypeInfo();
smallsql/junit/TestDBMetaData.java۞210۩String[] colNames = {"TYPE_NAME", "DATA_TYPE", "PRECISION", "LITERAL_PREFIX", "LITERAL_SUFFIX", "CREATE_PARAMS", "NULLABLE", "CASE_SENSITIVE", "SEARCHABLE", "UNSIGNED_ATTRIBUTE", "FIXED_PREC_SCALE", "AUTO_INCREMENT", "LOCAL_TYPE_NAME", "MINIMUM_SCALE", "MAXIMUM_SCALE", "SQL_DATA_TYPE", "SQL_DATETIME_SUB", "NUM_PREC_RADIX"};
smallsql/junit/TestDBMetaData.java۞211۩int[] colTypes = {Types.VARCHAR, Types.SMALLINT, Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.BOOLEAN, Types.SMALLINT, Types.BOOLEAN, Types.BOOLEAN, Types.BOOLEAN, Types.NULL, Types.INTEGER, Types.INTEGER, Types.NULL, Types.NULL, Types.NULL };
smallsql/junit/TestDBMetaData.java۞212۩assertRSMetaData(rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞214۩assertTrue(rs.next());
smallsql/junit/TestDBMetaData.java۞215۩int lastDataType = rs.getInt("data_type");
smallsql/junit/TestDBMetaData.java۞216۩while(rs.next()){
smallsql/junit/TestDBMetaData.java۞217۩int dataType = rs.getInt("data_type");
smallsql/junit/TestDBMetaData.java۞218۩assertTrue("Wrong sorting order", dataType>=lastDataType );
smallsql/junit/TestDBMetaData.java۞219۩lastDataType = dataType;
smallsql/junit/TestDBMetaData.java۞220۩}
smallsql/junit/TestDBMetaData.java۞221۩}
smallsql/junit/TestDBMetaData.java۞224۩public void testGetCrossReference() throws Exception{
smallsql/junit/TestDBMetaData.java۞225۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞226۩dropTable(con,"tblCross1");
smallsql/junit/TestDBMetaData.java۞227۩dropTable(con,"tblCross2");
smallsql/junit/TestDBMetaData.java۞228۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞230۩Statement st = con.createStatement();
smallsql/junit/TestDBMetaData.java۞231۩st.execute("Create Table tblCross1(id1 counter primary key, v nvarchar(100))");
smallsql/junit/TestDBMetaData.java۞233۩st.execute("Create Table tblCross2(id2 int , v nvarchar(100), foreign key (id2) REFERENCES tblCross1(id1))");
smallsql/junit/TestDBMetaData.java۞234۩String[] colNames = {"PKTABLE_CAT", "PKTABLE_SCHEM", "PKTABLE_NAME", "PKCOLUMN_NAME", "FKTABLE_CAT", "FKTABLE_SCHEM", "FKTABLE_NAME", "FKCOLUMN_NAME", "KEY_SEQ", "UPDATE_RULE", "DELETE_RULE", "FK_NAME", "PK_NAME", "DEFERRABILITY"};
smallsql/junit/TestDBMetaData.java۞235۩int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT };
smallsql/junit/TestDBMetaData.java۞237۩ResultSet rs = md.getCrossReference(null,null,"tblCross1",null,null,"tblCross2");
smallsql/junit/TestDBMetaData.java۞238۩assertRSMetaData(rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞239۩assertTrue(rs.next());
smallsql/junit/TestDBMetaData.java۞240۩assertFalse(rs.next());
smallsql/junit/TestDBMetaData.java۞242۩rs = md.getImportedKeys(null,null,"tblCross2");
smallsql/junit/TestDBMetaData.java۞243۩assertRSMetaData(rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞244۩assertTrue(rs.next());
smallsql/junit/TestDBMetaData.java۞245۩assertFalse(rs.next());
smallsql/junit/TestDBMetaData.java۞247۩rs = md.getExportedKeys(null,null,"tblCross1");
smallsql/junit/TestDBMetaData.java۞248۩assertRSMetaData(rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞249۩assertTrue(rs.next());
smallsql/junit/TestDBMetaData.java۞250۩assertFalse(rs.next());
smallsql/junit/TestDBMetaData.java۞252۩dropTable(con,"tblCross1");
smallsql/junit/TestDBMetaData.java۞253۩dropTable(con,"tblCross2");
smallsql/junit/TestDBMetaData.java۞254۩}
smallsql/junit/TestDBMetaData.java۞257۩public void testGetBestRowIdentifier() throws Exception{
smallsql/junit/TestDBMetaData.java۞258۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞259۩dropTable(con,"tblBestRow1");
smallsql/junit/TestDBMetaData.java۞260۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞261۩Statement st = con.createStatement();
smallsql/junit/TestDBMetaData.java۞262۩st.execute("Create Table tblBestRow1(id1 counter primary key, v nvarchar(100))");
smallsql/junit/TestDBMetaData.java۞263۩String[] colNames = {"SCOPE", "COLUMN_NAME", "DATA_TYPE", "TYPE_NAME", "COLUMN_SIZE", "BUFFER_LENGTH", "DECIMAL_DIGITS", "PSEUDO_COLUMN"};
smallsql/junit/TestDBMetaData.java۞264۩int[] colTypes = {Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT};
smallsql/junit/TestDBMetaData.java۞266۩ResultSet rs = md.getBestRowIdentifier(null, null, "tblBestRow1", DatabaseMetaData.bestRowSession, true);
smallsql/junit/TestDBMetaData.java۞267۩assertRSMetaData(rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞268۩assertTrue(rs.next());
smallsql/junit/TestDBMetaData.java۞269۩assertEquals("Columnname:", "id1", rs.getString("COLUMN_NAME"));
smallsql/junit/TestDBMetaData.java۞270۩assertFalse(rs.next());
smallsql/junit/TestDBMetaData.java۞272۩String[] colNames2 = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "COLUMN_NAME", "KEY_SEQ", "PK_NAME"};
smallsql/junit/TestDBMetaData.java۞273۩int[] colTypes2 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR};
smallsql/junit/TestDBMetaData.java۞274۩rs = md.getPrimaryKeys(null, null, "tblBestRow1");
smallsql/junit/TestDBMetaData.java۞275۩assertRSMetaData(rs, colNames2, colTypes2);
smallsql/junit/TestDBMetaData.java۞276۩assertTrue(rs.next());
smallsql/junit/TestDBMetaData.java۞277۩assertEquals("Columnname:", "id1", rs.getString("COLUMN_NAME"));
smallsql/junit/TestDBMetaData.java۞278۩assertFalse(rs.next());
smallsql/junit/TestDBMetaData.java۞280۩String[] colNames3 = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "NON_UNIQUE", "INDEX_QUALIFIER", "INDEX_NAME", "TYPE", "ORDINAL_POSITION", "COLUMN_NAME", "ASC_OR_DESC", "CARDINALITY", "PAGES", "FILTER_CONDITION"};
smallsql/junit/TestDBMetaData.java۞281۩int[] colTypes3 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.BOOLEAN, Types.NULL, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL};
smallsql/junit/TestDBMetaData.java۞282۩rs = md.getIndexInfo(null, null, "tblBestRow1", true, true);
smallsql/junit/TestDBMetaData.java۞283۩assertRSMetaData(rs, colNames3, colTypes3);
smallsql/junit/TestDBMetaData.java۞284۩assertTrue(rs.next());
smallsql/junit/TestDBMetaData.java۞285۩assertEquals("Columnname:", "id1", rs.getString("COLUMN_NAME"));
smallsql/junit/TestDBMetaData.java۞286۩assertFalse(rs.next());
smallsql/junit/TestDBMetaData.java۞288۩dropTable(con,"tblBestRow1");
smallsql/junit/TestDBMetaData.java۞289۩}
smallsql/junit/TestDBMetaData.java۞292۩public void testGetgetUDTs() throws Exception{
smallsql/junit/TestDBMetaData.java۞293۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞294۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞295۩ResultSet rs = md.getUDTs(null, null, null, null);
smallsql/junit/TestDBMetaData.java۞296۩String[] colNames = {"TYPE_CAT", "TYPE_SCHEM", "TYPE_NAME", "CLASS_NAME", "DATA_TYPE", "REMARKS"};
smallsql/junit/TestDBMetaData.java۞297۩int[] colTypes = new int[colNames.length];
smallsql/junit/TestDBMetaData.java۞298۩assertRSMetaData( rs, colNames, colTypes);
smallsql/junit/TestDBMetaData.java۞299۩assertFalse(rs.next());
smallsql/junit/TestDBMetaData.java۞300۩}
smallsql/junit/TestDBMetaData.java۞303۩public void testGetConnection() throws Exception{
smallsql/junit/TestDBMetaData.java۞304۩Connection con = AllTests.getConnection();
smallsql/junit/TestDBMetaData.java۞305۩DatabaseMetaData md = con.getMetaData();
smallsql/junit/TestDBMetaData.java۞306۩assertEquals(con, md.getConnection());
smallsql/junit/TestDBMetaData.java۞307۩}
smallsql/junit/TestDBMetaData.java۞310۩}
smallsql/junit/TestDataTypes.java۞33۩package smallsql.junit;
smallsql/junit/TestDataTypes.java۞35۩import junit.framework.*;
smallsql/junit/TestDataTypes.java۞36۩import java.sql.*;
smallsql/junit/TestDataTypes.java۞37۩import java.math.*;
smallsql/junit/TestDataTypes.java۞39۩public class TestDataTypes extends BasicTestCase{
smallsql/junit/TestDataTypes.java۞41۩static final String[] DATATYPES = { "varchar(100)",
smallsql/junit/TestDataTypes.java۞42۩"varchar2(130)", "nvarchar(137)", "nvarchar2(137)", "sysname",
smallsql/junit/TestDataTypes.java۞43۩"char(100)", "CHARACTER(99)",
smallsql/junit/TestDataTypes.java۞44۩"nchar(80)",
smallsql/junit/TestDataTypes.java۞45۩"int", "smallint", "tinyint", "bigint", "byte",
smallsql/junit/TestDataTypes.java۞46۩"real", "float", "double",
smallsql/junit/TestDataTypes.java۞47۩"bit", "Boolean",
smallsql/junit/TestDataTypes.java۞48۩"binary( 125 )", "varbinary(57)", "raw(88)",
smallsql/junit/TestDataTypes.java۞49۩"java_object", "sql_variant",
smallsql/junit/TestDataTypes.java۞50۩"image", "LONGvarbinary", "long raw",
smallsql/junit/TestDataTypes.java۞51۩"blob", "clob","nclob",
smallsql/junit/TestDataTypes.java۞52۩"text", "ntext", "LongVarchar", "long",
smallsql/junit/TestDataTypes.java۞53۩"time", "date", "datetime", "timestamp", "SMALLDATETIME",
smallsql/junit/TestDataTypes.java۞54۩"UNIQUEIDENTIFIER",
smallsql/junit/TestDataTypes.java۞55۩"numeric(28,4)", "decimal(29,4)","number(29,4)", "varnum(29,4)",
smallsql/junit/TestDataTypes.java۞56۩"COUNTER",
smallsql/junit/TestDataTypes.java۞57۩"money", "smallmoney"};
smallsql/junit/TestDataTypes.java۞59۩private static final String table = "table_datatypes";
smallsql/junit/TestDataTypes.java۞61۩private String datatype;
smallsql/junit/TestDataTypes.java۞63۩TestDataTypes( String datatype ){
smallsql/junit/TestDataTypes.java۞64۩super( datatype );
smallsql/junit/TestDataTypes.java۞65۩this.datatype = datatype;
smallsql/junit/TestDataTypes.java۞66۩}
smallsql/junit/TestDataTypes.java۞68۩public void tearDown(){
smallsql/junit/TestDataTypes.java۞69۩try{
smallsql/junit/TestDataTypes.java۞70۩Connection con = AllTests.getConnection();
smallsql/junit/TestDataTypes.java۞71۩Statement st = con.createStatement();
smallsql/junit/TestDataTypes.java۞72۩st.execute("drop table " + table);
smallsql/junit/TestDataTypes.java۞73۩st.close();
smallsql/junit/TestDataTypes.java۞74۩}catch(Throwable e){
smallsql/junit/TestDataTypes.java۞76۩}
smallsql/junit/TestDataTypes.java۞77۩}
smallsql/junit/TestDataTypes.java۞79۩public void setUp(){
smallsql/junit/TestDataTypes.java۞80۩tearDown();
smallsql/junit/TestDataTypes.java۞81۩}
smallsql/junit/TestDataTypes.java۞83۩public void runTest() throws Throwable {
smallsql/junit/TestDataTypes.java۞84۩Connection con = AllTests.getConnection();
smallsql/junit/TestDataTypes.java۞85۩Statement st = con.createStatement();
smallsql/junit/TestDataTypes.java۞86۩st.execute("Create Table " + table +"(abc " + datatype + ")");
smallsql/junit/TestDataTypes.java۞87۩String name = "abc";
smallsql/junit/TestDataTypes.java۞89۩Object[] values = null;
smallsql/junit/TestDataTypes.java۞90۩String   quote = "";
smallsql/junit/TestDataTypes.java۞91۩String escape1 = "";
smallsql/junit/TestDataTypes.java۞92۩String escape2 = "";
smallsql/junit/TestDataTypes.java۞93۩boolean needTrim = false;
smallsql/junit/TestDataTypes.java۞95۩ResultSet rs = st.executeQuery("SELECT * From " + table);
smallsql/junit/TestDataTypes.java۞96۩ResultSetMetaData md = rs.getMetaData();
smallsql/junit/TestDataTypes.java۞97۩switch(md.getColumnType(1)){
smallsql/junit/TestDataTypes.java۞98۩case Types.CHAR:
smallsql/junit/TestDataTypes.java۞99۩needTrim = true;
smallsql/junit/TestDataTypes.java۞100۩case Types.VARCHAR:
smallsql/junit/TestDataTypes.java۞101۩case Types.LONGVARCHAR:
smallsql/junit/TestDataTypes.java۞102۩case Types.CLOB:
smallsql/junit/TestDataTypes.java۞103۩values = new Object[]{null,"qwert", "asdfg", "hjhjhj", "1234567890 qwertzuiop 1234567890 asdfghjklö 1234567890 yxcvbnm,.- 1234567890 "};
smallsql/junit/TestDataTypes.java۞104۩quote  = "\'";
smallsql/junit/TestDataTypes.java۞105۩break;
smallsql/junit/TestDataTypes.java۞106۩case Types.BIGINT:
smallsql/junit/TestDataTypes.java۞107۩values = new Object[]{null,new Long(123), new Long(-2123), new Long(392839283)};
smallsql/junit/TestDataTypes.java۞108۩break;
smallsql/junit/TestDataTypes.java۞109۩case Types.INTEGER:
smallsql/junit/TestDataTypes.java۞110۩values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(392839283)};
smallsql/junit/TestDataTypes.java۞111۩break;
smallsql/junit/TestDataTypes.java۞112۩case Types.SMALLINT:
smallsql/junit/TestDataTypes.java۞113۩values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(32000)};
smallsql/junit/TestDataTypes.java۞114۩break;
smallsql/junit/TestDataTypes.java۞115۩case Types.TINYINT:
smallsql/junit/TestDataTypes.java۞116۩values = new Object[]{null,new Integer(0), new Integer(12), new Integer(228)};
smallsql/junit/TestDataTypes.java۞117۩break;
smallsql/junit/TestDataTypes.java۞118۩case Types.REAL:
smallsql/junit/TestDataTypes.java۞119۩values = new Object[]{null,new Float(0.0), new Float(-12.123), new Float(22812345234.9)};
smallsql/junit/TestDataTypes.java۞120۩break;
smallsql/junit/TestDataTypes.java۞121۩case Types.FLOAT:
smallsql/junit/TestDataTypes.java۞122۩case Types.DOUBLE:
smallsql/junit/TestDataTypes.java۞123۩values = new Object[]{null,new Double(0.0), new Double(-12.123), new Double(22812345234.9)};
smallsql/junit/TestDataTypes.java۞124۩break;
smallsql/junit/TestDataTypes.java۞125۩case Types.NUMERIC:
smallsql/junit/TestDataTypes.java۞126۩case Types.DECIMAL:
smallsql/junit/TestDataTypes.java۞127۩needTrim = true;
smallsql/junit/TestDataTypes.java۞128۩if(md.getPrecision(1)<16){
smallsql/junit/TestDataTypes.java۞129۩values = new Object[]{null,new BigDecimal("0.0"), new BigDecimal("-2"), new BigDecimal("-12.123")};
smallsql/junit/TestDataTypes.java۞132۩}else{
smallsql/junit/TestDataTypes.java۞133۩values = new Object[]{null,new BigDecimal("0.0"), new BigDecimal("-2"), new BigDecimal("-12.123"), new BigDecimal("22812345234.9")};
smallsql/junit/TestDataTypes.java۞134۩}
smallsql/junit/TestDataTypes.java۞135۩break;
smallsql/junit/TestDataTypes.java۞136۩case Types.BIT:
smallsql/junit/TestDataTypes.java۞137۩case Types.BOOLEAN:
smallsql/junit/TestDataTypes.java۞138۩values = new Object[]{null, Boolean.TRUE, Boolean.FALSE};
smallsql/junit/TestDataTypes.java۞139۩break;
smallsql/junit/TestDataTypes.java۞140۩case Types.TIME:
smallsql/junit/TestDataTypes.java۞141۩values = new Object[]{null, new Time(10,17,56), new Time(0,0,0),new Time(23,59,59)};
smallsql/junit/TestDataTypes.java۞142۩escape1 = "{t '";
smallsql/junit/TestDataTypes.java۞143۩escape2 = "'}";
smallsql/junit/TestDataTypes.java۞144۩break;
smallsql/junit/TestDataTypes.java۞145۩case Types.DATE:
smallsql/junit/TestDataTypes.java۞146۩values = new Object[]{null, new java.sql.Date(10,10,1), new java.sql.Date(0,0,1),new java.sql.Date(70,0,1)};
smallsql/junit/TestDataTypes.java۞147۩escape1 = "{d '";
smallsql/junit/TestDataTypes.java۞148۩escape2 = "'}";
smallsql/junit/TestDataTypes.java۞149۩break;
smallsql/junit/TestDataTypes.java۞150۩case Types.TIMESTAMP:
smallsql/junit/TestDataTypes.java۞151۩if(md.getPrecision(1) >16)
smallsql/junit/TestDataTypes.java۞152۩values = new Object[]{null, new Timestamp(10,10,1, 10,17,56, 0), new Timestamp(0,0,1, 0,0,0, 0),new Timestamp( 120,1,1, 23,59,59, 500000000),new Timestamp(0),new Timestamp( -120,1,1, 23,59,59, 500000000)};
smallsql/junit/TestDataTypes.java۞153۩else
smallsql/junit/TestDataTypes.java۞154۩values = new Object[]{null, new Timestamp(10,10,1, 10,17,0, 0), new Timestamp(0,0,1, 0,0,0, 0),new Timestamp(0)};
smallsql/junit/TestDataTypes.java۞155۩escape1 = "{ts '";
smallsql/junit/TestDataTypes.java۞156۩escape2 = "'}";
smallsql/junit/TestDataTypes.java۞157۩break;
smallsql/junit/TestDataTypes.java۞158۩case Types.BINARY:
smallsql/junit/TestDataTypes.java۞159۩needTrim = true;
smallsql/junit/TestDataTypes.java۞160۩case Types.VARBINARY:
smallsql/junit/TestDataTypes.java۞161۩case Types.LONGVARBINARY:
smallsql/junit/TestDataTypes.java۞162۩case Types.BLOB:
smallsql/junit/TestDataTypes.java۞163۩values = new Object[]{null, new byte[]{1, 127, -23}};
smallsql/junit/TestDataTypes.java۞164۩break;
smallsql/junit/TestDataTypes.java۞165۩case Types.JAVA_OBJECT:
smallsql/junit/TestDataTypes.java۞166۩values = new Object[]{null, new Integer(-123), new Double(1.2), new byte[]{1, 127, -23}};
smallsql/junit/TestDataTypes.java۞167۩break;
smallsql/junit/TestDataTypes.java۞168۩case -11:
smallsql/junit/TestDataTypes.java۞169۩values = new Object[]{null, "342734E3-D9AC-408F-8724-B7A257C4529E", "342734E3-D9AC-408F-8724-B7A257C4529E"};
smallsql/junit/TestDataTypes.java۞170۩quote  = "\'";
smallsql/junit/TestDataTypes.java۞171۩break;
smallsql/junit/TestDataTypes.java۞172۩default: fail("Unknown column type: " + rs.getMetaData().getColumnType(1));
smallsql/junit/TestDataTypes.java۞173۩}
smallsql/junit/TestDataTypes.java۞174۩rs.close();
smallsql/junit/TestDataTypes.java۞177۩con.close();
smallsql/junit/TestDataTypes.java۞178۩con = AllTests.getConnection();
smallsql/junit/TestDataTypes.java۞179۩st = con.createStatement();
smallsql/junit/TestDataTypes.java۞181۩for(int i=0; i<values.length; i++){
smallsql/junit/TestDataTypes.java۞182۩Object val = values[i];
smallsql/junit/TestDataTypes.java۞183۩String q = (val == null) ? "" : quote;
smallsql/junit/TestDataTypes.java۞184۩String e1 = (val == null) ? "" : escape1;
smallsql/junit/TestDataTypes.java۞185۩String e2 = (val == null) ? "" : escape2;
smallsql/junit/TestDataTypes.java۞186۩if(val instanceof byte[]){
smallsql/junit/TestDataTypes.java۞187۩StringBuffer buf = new StringBuffer( "0x" );
smallsql/junit/TestDataTypes.java۞188۩for(int k=0; k<((byte[])val).length; k++){
smallsql/junit/TestDataTypes.java۞189۩String digit = "0" + Integer.toHexString( ((byte[])val)[k] );
smallsql/junit/TestDataTypes.java۞190۩buf.append( digit.substring( digit.length()-2 ) );
smallsql/junit/TestDataTypes.java۞191۩}
smallsql/junit/TestDataTypes.java۞192۩val = buf.toString();
smallsql/junit/TestDataTypes.java۞193۩}
smallsql/junit/TestDataTypes.java۞194۩st.execute("Insert into " + table + "(abc) Values(" + e1 + q + val + q + e2 + ")");
smallsql/junit/TestDataTypes.java۞195۩}
smallsql/junit/TestDataTypes.java۞196۩checkValues( st, values, needTrim);
smallsql/junit/TestDataTypes.java۞198۩st.execute("Delete From "+ table);
smallsql/junit/TestDataTypes.java۞199۩CallableStatement cal = con.prepareCall("Insert Into " + table + "(abc) Values(?)");
smallsql/junit/TestDataTypes.java۞200۩for(int i=0; i<values.length; i++){
smallsql/junit/TestDataTypes.java۞201۩Object val = values[i];
smallsql/junit/TestDataTypes.java۞202۩cal.setObject( 1, val);
smallsql/junit/TestDataTypes.java۞203۩cal.execute();
smallsql/junit/TestDataTypes.java۞204۩}
smallsql/junit/TestDataTypes.java۞205۩cal.close();
smallsql/junit/TestDataTypes.java۞206۩checkValues( st, values, needTrim);
smallsql/junit/TestDataTypes.java۞208۩st.execute("Delete From "+ table);
smallsql/junit/TestDataTypes.java۞209۩cal = con.prepareCall("Insert Into " + table + "(abc) Values(?)");
smallsql/junit/TestDataTypes.java۞210۩for(int i=0; i<values.length; i++){
smallsql/junit/TestDataTypes.java۞211۩Object val = values[i];
smallsql/junit/TestDataTypes.java۞212۩if(val == null){
smallsql/junit/TestDataTypes.java۞213۩cal.setNull( 1, Types.NULL );
smallsql/junit/TestDataTypes.java۞214۩}else
smallsql/junit/TestDataTypes.java۞215۩if(val instanceof Time){
smallsql/junit/TestDataTypes.java۞216۩cal.setTime( 1, (Time)val );
smallsql/junit/TestDataTypes.java۞217۩}else
smallsql/junit/TestDataTypes.java۞218۩if(val instanceof Timestamp){
smallsql/junit/TestDataTypes.java۞219۩cal.setTimestamp( 1, (Timestamp)val );
smallsql/junit/TestDataTypes.java۞220۩}else
smallsql/junit/TestDataTypes.java۞221۩if(val instanceof Date){
smallsql/junit/TestDataTypes.java۞222۩cal.setDate( 1, (Date)val );
smallsql/junit/TestDataTypes.java۞223۩}else
smallsql/junit/TestDataTypes.java۞224۩if(val instanceof String){
smallsql/junit/TestDataTypes.java۞225۩cal.setString( 1, (String)val );
smallsql/junit/TestDataTypes.java۞226۩}else
smallsql/junit/TestDataTypes.java۞227۩if(val instanceof Boolean){
smallsql/junit/TestDataTypes.java۞228۩cal.setBoolean( 1, ((Boolean)val).booleanValue() );
smallsql/junit/TestDataTypes.java۞229۩}else
smallsql/junit/TestDataTypes.java۞230۩if(val instanceof Byte){
smallsql/junit/TestDataTypes.java۞231۩cal.setByte( 1, ((Byte)val).byteValue() );
smallsql/junit/TestDataTypes.java۞232۩}else
smallsql/junit/TestDataTypes.java۞233۩if(val instanceof Short){
smallsql/junit/TestDataTypes.java۞234۩cal.setShort( 1, ((Short)val).shortValue() );
smallsql/junit/TestDataTypes.java۞235۩}else
smallsql/junit/TestDataTypes.java۞236۩if(val instanceof Integer){
smallsql/junit/TestDataTypes.java۞237۩cal.setInt( 1, ((Integer)val).intValue() );
smallsql/junit/TestDataTypes.java۞238۩}else
smallsql/junit/TestDataTypes.java۞239۩if(val instanceof Long){
smallsql/junit/TestDataTypes.java۞240۩cal.setLong( 1, ((Long)val).longValue() );
smallsql/junit/TestDataTypes.java۞241۩}else
smallsql/junit/TestDataTypes.java۞242۩if(val instanceof Float){
smallsql/junit/TestDataTypes.java۞243۩cal.setFloat( 1, ((Float)val).floatValue() );
smallsql/junit/TestDataTypes.java۞244۩}else
smallsql/junit/TestDataTypes.java۞245۩if(val instanceof Double){
smallsql/junit/TestDataTypes.java۞246۩cal.setDouble( 1, ((Double)val).doubleValue() );
smallsql/junit/TestDataTypes.java۞247۩}else
smallsql/junit/TestDataTypes.java۞248۩if(val instanceof BigDecimal){
smallsql/junit/TestDataTypes.java۞249۩cal.setBigDecimal( 1, (BigDecimal)val );
smallsql/junit/TestDataTypes.java۞250۩}else
smallsql/junit/TestDataTypes.java۞251۩if(val instanceof byte[]){
smallsql/junit/TestDataTypes.java۞252۩cal.setBytes( 1, (byte[])val );
smallsql/junit/TestDataTypes.java۞253۩}
smallsql/junit/TestDataTypes.java۞254۩cal.execute();
smallsql/junit/TestDataTypes.java۞255۩}
smallsql/junit/TestDataTypes.java۞256۩cal.close();
smallsql/junit/TestDataTypes.java۞257۩checkValues( st, values, needTrim);
smallsql/junit/TestDataTypes.java۞260۩st.execute("Delete From "+ table);
smallsql/junit/TestDataTypes.java۞261۩Statement st2 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestDataTypes.java۞262۩ResultSet rs2 = st2.executeQuery("SELECT * From " + table);
smallsql/junit/TestDataTypes.java۞263۩for(int i=0; i<values.length; i++){
smallsql/junit/TestDataTypes.java۞264۩rs2.moveToInsertRow();
smallsql/junit/TestDataTypes.java۞265۩Object val = values[i];
smallsql/junit/TestDataTypes.java۞266۩if(val == null){
smallsql/junit/TestDataTypes.java۞267۩rs2.updateNull( name );
smallsql/junit/TestDataTypes.java۞268۩}else
smallsql/junit/TestDataTypes.java۞269۩if(val instanceof Time){
smallsql/junit/TestDataTypes.java۞270۩rs2.updateTime( name, (Time)val );
smallsql/junit/TestDataTypes.java۞271۩}else
smallsql/junit/TestDataTypes.java۞272۩if(val instanceof Timestamp){
smallsql/junit/TestDataTypes.java۞273۩rs2.updateTimestamp( name, (Timestamp)val );
smallsql/junit/TestDataTypes.java۞274۩}else
smallsql/junit/TestDataTypes.java۞275۩if(val instanceof Date){
smallsql/junit/TestDataTypes.java۞276۩rs2.updateDate( name, (Date)val );
smallsql/junit/TestDataTypes.java۞277۩}else
smallsql/junit/TestDataTypes.java۞278۩if(val instanceof String){
smallsql/junit/TestDataTypes.java۞279۩rs2.updateString( name, (String)val );
smallsql/junit/TestDataTypes.java۞280۩}else
smallsql/junit/TestDataTypes.java۞281۩if(val instanceof Boolean){
smallsql/junit/TestDataTypes.java۞282۩rs2.updateBoolean( name, ((Boolean)val).booleanValue() );
smallsql/junit/TestDataTypes.java۞283۩}else
smallsql/junit/TestDataTypes.java۞284۩if(val instanceof Byte){
smallsql/junit/TestDataTypes.java۞285۩rs2.updateByte( name, ((Byte)val).byteValue() );
smallsql/junit/TestDataTypes.java۞286۩}else
smallsql/junit/TestDataTypes.java۞287۩if(val instanceof Short){
smallsql/junit/TestDataTypes.java۞288۩rs2.updateShort( name, ((Short)val).shortValue() );
smallsql/junit/TestDataTypes.java۞289۩}else
smallsql/junit/TestDataTypes.java۞290۩if(val instanceof Integer){
smallsql/junit/TestDataTypes.java۞291۩rs2.updateInt( name, ((Integer)val).intValue() );
smallsql/junit/TestDataTypes.java۞292۩}else
smallsql/junit/TestDataTypes.java۞293۩if(val instanceof Long){
smallsql/junit/TestDataTypes.java۞294۩rs2.updateLong( name, ((Long)val).longValue() );
smallsql/junit/TestDataTypes.java۞295۩}else
smallsql/junit/TestDataTypes.java۞296۩if(val instanceof Float){
smallsql/junit/TestDataTypes.java۞297۩rs2.updateFloat( name, ((Float)val).floatValue() );
smallsql/junit/TestDataTypes.java۞298۩}else
smallsql/junit/TestDataTypes.java۞299۩if(val instanceof Double){
smallsql/junit/TestDataTypes.java۞300۩rs2.updateDouble( name, ((Double)val).doubleValue() );
smallsql/junit/TestDataTypes.java۞301۩}else
smallsql/junit/TestDataTypes.java۞302۩if(val instanceof BigDecimal){
smallsql/junit/TestDataTypes.java۞303۩rs2.updateBigDecimal( name, (BigDecimal)val );
smallsql/junit/TestDataTypes.java۞304۩}else
smallsql/junit/TestDataTypes.java۞305۩if(val instanceof byte[]){
smallsql/junit/TestDataTypes.java۞306۩rs2.updateBytes( name, (byte[])val );
smallsql/junit/TestDataTypes.java۞307۩}
smallsql/junit/TestDataTypes.java۞308۩rs2.insertRow();
smallsql/junit/TestDataTypes.java۞309۩}
smallsql/junit/TestDataTypes.java۞310۩st2.close();
smallsql/junit/TestDataTypes.java۞311۩checkValues( st, values, needTrim);
smallsql/junit/TestDataTypes.java۞312۩}
smallsql/junit/TestDataTypes.java۞315۩private void checkValues(Statement st, Object[] values, boolean needTrim) throws Exception{
smallsql/junit/TestDataTypes.java۞316۩ResultSet rs = st.executeQuery("SELECT * From " + table);
smallsql/junit/TestDataTypes.java۞318۩int i = 0;
smallsql/junit/TestDataTypes.java۞319۩while(rs.next()){
smallsql/junit/TestDataTypes.java۞320۩assertEqualsRsValue(values[i], rs, needTrim);
smallsql/junit/TestDataTypes.java۞321۩i++;
smallsql/junit/TestDataTypes.java۞322۩}
smallsql/junit/TestDataTypes.java۞323۩rs.close();
smallsql/junit/TestDataTypes.java۞324۩}
smallsql/junit/TestDataTypes.java۞327۩public static Test suite() throws Exception{
smallsql/junit/TestDataTypes.java۞328۩TestSuite theSuite = new TestSuite("Data Types");
smallsql/junit/TestDataTypes.java۞329۩for(int i=0; i<DATATYPES.length; i++){
smallsql/junit/TestDataTypes.java۞330۩theSuite.addTest(new TestDataTypes( DATATYPES[i] ) );
smallsql/junit/TestDataTypes.java۞331۩}
smallsql/junit/TestDataTypes.java۞332۩return theSuite;
smallsql/junit/TestDataTypes.java۞333۩}
smallsql/junit/TestDataTypes.java۞335۩public static void main(String[] argv) {
smallsql/junit/TestDataTypes.java۞336۩junit.swingui.TestRunner.main(new String[]{TestDataTypes.class.getName()});
smallsql/junit/TestDataTypes.java۞337۩}
smallsql/junit/TestDataTypes.java۞338۩}
smallsql/junit/TestDeleteUpdate.java۞33۩package smallsql.junit;
smallsql/junit/TestDeleteUpdate.java۞35۩import java.sql.*;
smallsql/junit/TestDeleteUpdate.java۞41۩public class TestDeleteUpdate extends BasicTestCase {
smallsql/junit/TestDeleteUpdate.java۞46۩public TestDeleteUpdate() {
smallsql/junit/TestDeleteUpdate.java۞47۩super();
smallsql/junit/TestDeleteUpdate.java۞48۩}
smallsql/junit/TestDeleteUpdate.java۞53۩public TestDeleteUpdate(String name) {
smallsql/junit/TestDeleteUpdate.java۞54۩super(name);
smallsql/junit/TestDeleteUpdate.java۞55۩}
smallsql/junit/TestDeleteUpdate.java۞58۩public void testDelete() throws Exception{
smallsql/junit/TestDeleteUpdate.java۞59۩Connection con = AllTests.getConnection();
smallsql/junit/TestDeleteUpdate.java۞60۩dropTable(con,"testDelete");
smallsql/junit/TestDeleteUpdate.java۞61۩Statement st = con.createStatement();
smallsql/junit/TestDeleteUpdate.java۞62۩st.execute("create table testDelete(a int default 15)");
smallsql/junit/TestDeleteUpdate.java۞63۩for(int i=0; i<10; i++){
smallsql/junit/TestDeleteUpdate.java۞64۩st.execute("Insert into testDelete Values("+i+")");
smallsql/junit/TestDeleteUpdate.java۞65۩}
smallsql/junit/TestDeleteUpdate.java۞66۩assertRowCount( 10, "Select * from testDelete");
smallsql/junit/TestDeleteUpdate.java۞68۩st.execute("delete from testDelete Where a=3");
smallsql/junit/TestDeleteUpdate.java۞69۩assertRowCount( 9, "Select * from testDelete");
smallsql/junit/TestDeleteUpdate.java۞71۩st.execute("delete from testDelete Where a<5");
smallsql/junit/TestDeleteUpdate.java۞72۩assertRowCount( 5, "Select * from testDelete");
smallsql/junit/TestDeleteUpdate.java۞74۩st.execute("delete from testDelete");
smallsql/junit/TestDeleteUpdate.java۞75۩assertRowCount( 0, "Select * from testDelete");
smallsql/junit/TestDeleteUpdate.java۞76۩dropTable(con,"testDelete");
smallsql/junit/TestDeleteUpdate.java۞77۩}
smallsql/junit/TestDeleteUpdate.java۞79۩public void testUpdate1() throws Exception{
smallsql/junit/TestDeleteUpdate.java۞80۩Connection con = AllTests.getConnection();
smallsql/junit/TestDeleteUpdate.java۞81۩dropTable(con,"testUpdate");
smallsql/junit/TestDeleteUpdate.java۞82۩Statement st = con.createStatement();
smallsql/junit/TestDeleteUpdate.java۞83۩st.execute("create table testUpdate(id int default 15, value int)");
smallsql/junit/TestDeleteUpdate.java۞84۩for(int i=0; i<10; i++){
smallsql/junit/TestDeleteUpdate.java۞85۩st.execute("Insert into testUpdate Values("+i+','+i+")");
smallsql/junit/TestDeleteUpdate.java۞86۩}
smallsql/junit/TestDeleteUpdate.java۞87۩assertRowCount( 10, "Select * from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞89۩int updateCount;
smallsql/junit/TestDeleteUpdate.java۞90۩updateCount = st.executeUpdate("update testUpdate set value=103 Where id=3");
smallsql/junit/TestDeleteUpdate.java۞91۩assertEqualsRsValue( new Integer(103), "Select value from testUpdate Where id=3");
smallsql/junit/TestDeleteUpdate.java۞92۩assertRowCount( 10, "Select value from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞93۩assertEquals( 1, updateCount);
smallsql/junit/TestDeleteUpdate.java۞95۩updateCount = st.executeUpdate("update testUpdate set value=104 Where id=3");
smallsql/junit/TestDeleteUpdate.java۞96۩assertEqualsRsValue( new Integer(104), "Select value from testUpdate Where id=3");
smallsql/junit/TestDeleteUpdate.java۞97۩assertRowCount( 10, "Select value from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞98۩assertEquals( 1, updateCount);
smallsql/junit/TestDeleteUpdate.java۞100۩updateCount = st.executeUpdate("delete from testUpdate Where id=3");
smallsql/junit/TestDeleteUpdate.java۞101۩assertRowCount( 9, "Select * from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞102۩assertEquals( 1, updateCount);
smallsql/junit/TestDeleteUpdate.java۞104۩updateCount = st.executeUpdate("update testUpdate set value=27 Where id<5");
smallsql/junit/TestDeleteUpdate.java۞105۩assertEquals( 4, updateCount);
smallsql/junit/TestDeleteUpdate.java۞107۩dropTable(con,"testUpdate");
smallsql/junit/TestDeleteUpdate.java۞108۩}
smallsql/junit/TestDeleteUpdate.java۞110۩public void testUpdate2() throws Exception{
smallsql/junit/TestDeleteUpdate.java۞111۩Connection con = AllTests.getConnection();
smallsql/junit/TestDeleteUpdate.java۞112۩dropTable(con,"testUpdate");
smallsql/junit/TestDeleteUpdate.java۞113۩Statement st = con.createStatement();
smallsql/junit/TestDeleteUpdate.java۞114۩st.execute("create table testUpdate(id int default 15, value1 varchar(100), value2 int)");
smallsql/junit/TestDeleteUpdate.java۞115۩for(int i=0; i<10; i++){
smallsql/junit/TestDeleteUpdate.java۞116۩st.execute("Insert into testUpdate Values("+i+','+(i*100)+','+i+")");
smallsql/junit/TestDeleteUpdate.java۞117۩}
smallsql/junit/TestDeleteUpdate.java۞118۩assertRowCount( 10, "Select * from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞120۩st.execute("update testUpdate set value1=13 Where id=3");
smallsql/junit/TestDeleteUpdate.java۞121۩assertEqualsRsValue( "13", "Select value1 from testUpdate Where id=3");
smallsql/junit/TestDeleteUpdate.java۞122۩assertRowCount( 10, "Select * from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞124۩st.execute("update testUpdate set value1=1040 Where id=3");
smallsql/junit/TestDeleteUpdate.java۞125۩assertEqualsRsValue( "1040", "Select value1 from testUpdate Where id=3");
smallsql/junit/TestDeleteUpdate.java۞126۩assertRowCount( 10, "Select * from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞128۩st.execute("update testUpdate set value1=10400 Where id=3");
smallsql/junit/TestDeleteUpdate.java۞129۩assertEqualsRsValue( "10400", "Select value1 from testUpdate Where id=3");
smallsql/junit/TestDeleteUpdate.java۞130۩assertRowCount( 10, "Select * from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞132۩st.execute("update testUpdate set value1=13,id=3 Where id=3");
smallsql/junit/TestDeleteUpdate.java۞133۩assertEqualsRsValue( "13", "Select value1 from testUpdate Where id=3");
smallsql/junit/TestDeleteUpdate.java۞134۩assertRowCount( 10, "Select * from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞136۩st.execute("delete from testUpdate Where id=3");
smallsql/junit/TestDeleteUpdate.java۞137۩assertRowCount( 9, "Select * from testUpdate");
smallsql/junit/TestDeleteUpdate.java۞139۩dropTable(con,"testUpdate");
smallsql/junit/TestDeleteUpdate.java۞140۩}
smallsql/junit/TestDeleteUpdate.java۞143۩public void testUpdateMultiTables() throws Exception{
smallsql/junit/TestDeleteUpdate.java۞144۩Connection con = AllTests.getConnection();
smallsql/junit/TestDeleteUpdate.java۞145۩dropTable(con,"testUpdate1");
smallsql/junit/TestDeleteUpdate.java۞146۩dropTable(con,"testUpdate2");
smallsql/junit/TestDeleteUpdate.java۞147۩Statement st = con.createStatement();
smallsql/junit/TestDeleteUpdate.java۞148۩st.execute("create table testUpdate1(id1 int, value1 varchar(100))");
smallsql/junit/TestDeleteUpdate.java۞149۩st.execute("create table testUpdate2(id2 int, value2 varchar(100))");
smallsql/junit/TestDeleteUpdate.java۞150۩st.execute("Insert into testUpdate1 Values(11, 'qwert1')");
smallsql/junit/TestDeleteUpdate.java۞151۩st.execute("Insert into testUpdate2 Values(11, 'qwert2')");
smallsql/junit/TestDeleteUpdate.java۞153۩st.execute("update testUpdate1 inner join testUpdate2 on id1=id2 Set value1=value1+'update', value2=value2+'update'");
smallsql/junit/TestDeleteUpdate.java۞154۩ResultSet rs = st.executeQuery("Select * From testUpdate1 inner join testUpdate2 on id1=id2");
smallsql/junit/TestDeleteUpdate.java۞155۩assertTrue( rs.next() );
smallsql/junit/TestDeleteUpdate.java۞156۩assertEquals( "qwert1update", rs.getString("value1"));
smallsql/junit/TestDeleteUpdate.java۞157۩assertEquals( "qwert2update", rs.getString("value2"));
smallsql/junit/TestDeleteUpdate.java۞159۩dropTable(con,"testUpdate1");
smallsql/junit/TestDeleteUpdate.java۞160۩dropTable(con,"testUpdate2");
smallsql/junit/TestDeleteUpdate.java۞161۩}
smallsql/junit/TestDeleteUpdate.java۞162۩}
smallsql/junit/TestExceptionMethods.java۞34۩package smallsql.junit;
smallsql/junit/TestExceptionMethods.java۞36۩import java.io.File;
smallsql/junit/TestExceptionMethods.java۞37۩import java.sql.*;
smallsql/junit/TestExceptionMethods.java۞42۩public class TestExceptionMethods extends BasicTestCase{
smallsql/junit/TestExceptionMethods.java۞44۩public void testForwardOnly() throws Exception{
smallsql/junit/TestExceptionMethods.java۞45۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptionMethods.java۞46۩try{
smallsql/junit/TestExceptionMethods.java۞47۩con.createStatement().execute("Create Table ExceptionMethods(v varchar(30))");
smallsql/junit/TestExceptionMethods.java۞49۩con.createStatement().execute("Insert Into ExceptionMethods(v) Values('qwert')");
smallsql/junit/TestExceptionMethods.java۞51۩ResultSet rs = con.createStatement().executeQuery("Select * from ExceptionMethods");
smallsql/junit/TestExceptionMethods.java۞52۩assertEquals(true, rs.next());
smallsql/junit/TestExceptionMethods.java۞54۩try{
smallsql/junit/TestExceptionMethods.java۞55۩rs.isBeforeFirst();
smallsql/junit/TestExceptionMethods.java۞56۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞57۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞58۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞59۩}
smallsql/junit/TestExceptionMethods.java۞61۩try{
smallsql/junit/TestExceptionMethods.java۞62۩rs.isFirst();
smallsql/junit/TestExceptionMethods.java۞63۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞64۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞65۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞66۩}
smallsql/junit/TestExceptionMethods.java۞68۩try{
smallsql/junit/TestExceptionMethods.java۞69۩rs.first();
smallsql/junit/TestExceptionMethods.java۞70۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞71۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞72۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞73۩}
smallsql/junit/TestExceptionMethods.java۞75۩try{
smallsql/junit/TestExceptionMethods.java۞76۩rs.previous();
smallsql/junit/TestExceptionMethods.java۞77۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞78۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞79۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞80۩}
smallsql/junit/TestExceptionMethods.java۞82۩try{
smallsql/junit/TestExceptionMethods.java۞83۩rs.last();
smallsql/junit/TestExceptionMethods.java۞84۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞85۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞86۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞87۩}
smallsql/junit/TestExceptionMethods.java۞89۩try{
smallsql/junit/TestExceptionMethods.java۞90۩rs.isLast();
smallsql/junit/TestExceptionMethods.java۞91۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞92۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞93۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞94۩}
smallsql/junit/TestExceptionMethods.java۞96۩try{
smallsql/junit/TestExceptionMethods.java۞97۩rs.isAfterLast();
smallsql/junit/TestExceptionMethods.java۞98۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞99۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞100۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞101۩}
smallsql/junit/TestExceptionMethods.java۞103۩try{
smallsql/junit/TestExceptionMethods.java۞104۩rs.afterLast();
smallsql/junit/TestExceptionMethods.java۞105۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞106۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞107۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞108۩}
smallsql/junit/TestExceptionMethods.java۞110۩try{
smallsql/junit/TestExceptionMethods.java۞111۩rs.absolute(1);
smallsql/junit/TestExceptionMethods.java۞112۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞113۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞114۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞115۩}
smallsql/junit/TestExceptionMethods.java۞117۩try{
smallsql/junit/TestExceptionMethods.java۞118۩rs.relative(1);
smallsql/junit/TestExceptionMethods.java۞119۩fail("SQLException 'ResultSet is forward only' should be throw");
smallsql/junit/TestExceptionMethods.java۞120۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞121۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞122۩}
smallsql/junit/TestExceptionMethods.java۞123۩}finally{
smallsql/junit/TestExceptionMethods.java۞124۩dropTable(con, "ExceptionMethods");
smallsql/junit/TestExceptionMethods.java۞125۩}
smallsql/junit/TestExceptionMethods.java۞126۩}
smallsql/junit/TestExceptionMethods.java۞129۩public void testGetConnection() throws Exception{
smallsql/junit/TestExceptionMethods.java۞130۩Connection con;
smallsql/junit/TestExceptionMethods.java۞131۩try{
smallsql/junit/TestExceptionMethods.java۞132۩con = DriverManager.getConnection(AllTests.JDBC_URL + "?abc");
smallsql/junit/TestExceptionMethods.java۞133۩con.close();
smallsql/junit/TestExceptionMethods.java۞134۩fail("SQLException should be thrown");
smallsql/junit/TestExceptionMethods.java۞135۩}catch(SQLException ex){
smallsql/junit/TestExceptionMethods.java۞137۩}
smallsql/junit/TestExceptionMethods.java۞138۩con = DriverManager.getConnection(AllTests.JDBC_URL + "? ");
smallsql/junit/TestExceptionMethods.java۞139۩con.close();
smallsql/junit/TestExceptionMethods.java۞141۩con = DriverManager.getConnection(AllTests.JDBC_URL + "?a=b; ; c=d  ; e = f; ; ");
smallsql/junit/TestExceptionMethods.java۞144۩Connection con2 = DriverManager.getConnection( "jdbc:smallsql:" + new File( AllTests.CATALOG ).getAbsolutePath());
smallsql/junit/TestExceptionMethods.java۞145۩con.close();
smallsql/junit/TestExceptionMethods.java۞146۩con2.close();
smallsql/junit/TestExceptionMethods.java۞148۩con = DriverManager.getConnection( "jdbc:smallsql:file:" + AllTests.CATALOG );
smallsql/junit/TestExceptionMethods.java۞149۩con.close();
smallsql/junit/TestExceptionMethods.java۞150۩}
smallsql/junit/TestExceptionMethods.java۞153۩public void testDuplicatedColumnCreate() throws Exception{
smallsql/junit/TestExceptionMethods.java۞154۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptionMethods.java۞155۩Statement st = con.createStatement();
smallsql/junit/TestExceptionMethods.java۞156۩try{
smallsql/junit/TestExceptionMethods.java۞157۩st.execute("Create Table DuplicatedColumn(col INT, Col INT)");
smallsql/junit/TestExceptionMethods.java۞158۩fail("SQLException 'Duplicated Column' should be throw");
smallsql/junit/TestExceptionMethods.java۞159۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞160۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞161۩}
smallsql/junit/TestExceptionMethods.java۞162۩}
smallsql/junit/TestExceptionMethods.java۞165۩public void testDuplicatedColumnAlter() throws Exception{
smallsql/junit/TestExceptionMethods.java۞166۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptionMethods.java۞167۩try{
smallsql/junit/TestExceptionMethods.java۞168۩Statement st = con.createStatement();
smallsql/junit/TestExceptionMethods.java۞169۩st.execute("Create Table DuplicatedColumn(col INT)");
smallsql/junit/TestExceptionMethods.java۞170۩try{
smallsql/junit/TestExceptionMethods.java۞171۩st.execute("ALTER TABLE DuplicatedColumn Add Col INT");
smallsql/junit/TestExceptionMethods.java۞172۩fail("SQLException 'Duplicated Column' should be throw");
smallsql/junit/TestExceptionMethods.java۞173۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞174۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞175۩}
smallsql/junit/TestExceptionMethods.java۞176۩}finally{
smallsql/junit/TestExceptionMethods.java۞177۩dropTable(con, "DuplicatedColumn");
smallsql/junit/TestExceptionMethods.java۞178۩}
smallsql/junit/TestExceptionMethods.java۞179۩}
smallsql/junit/TestExceptionMethods.java۞182۩public void testDuplicatedColumnInsert() throws Exception{
smallsql/junit/TestExceptionMethods.java۞183۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptionMethods.java۞184۩try{
smallsql/junit/TestExceptionMethods.java۞185۩Statement st = con.createStatement();
smallsql/junit/TestExceptionMethods.java۞186۩st.execute("Create Table DuplicatedColumn(col INT)");
smallsql/junit/TestExceptionMethods.java۞187۩try{
smallsql/junit/TestExceptionMethods.java۞188۩st.execute("INSERT INTO DuplicatedColumn(col,Col) Values(1,2)");
smallsql/junit/TestExceptionMethods.java۞189۩fail("SQLException 'Duplicated Column' should be throw");
smallsql/junit/TestExceptionMethods.java۞190۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞191۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞192۩}
smallsql/junit/TestExceptionMethods.java۞193۩}finally{
smallsql/junit/TestExceptionMethods.java۞194۩dropTable(con, "DuplicatedColumn");
smallsql/junit/TestExceptionMethods.java۞195۩}
smallsql/junit/TestExceptionMethods.java۞196۩}
smallsql/junit/TestExceptionMethods.java۞202۩public void testDuplicatedCreateTable() throws Exception{
smallsql/junit/TestExceptionMethods.java۞203۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptionMethods.java۞204۩try{
smallsql/junit/TestExceptionMethods.java۞205۩dropTable(con, "DuplicatedTable");
smallsql/junit/TestExceptionMethods.java۞206۩Statement st = con.createStatement();
smallsql/junit/TestExceptionMethods.java۞207۩st.execute("Create Table DuplicatedTable(col INT primary key)");
smallsql/junit/TestExceptionMethods.java۞208۩int tableFileCount = countFiles("DuplicatedTable");
smallsql/junit/TestExceptionMethods.java۞209۩try{
smallsql/junit/TestExceptionMethods.java۞210۩st.execute("Create Table DuplicatedTable(col INT primary key)");
smallsql/junit/TestExceptionMethods.java۞211۩fail("SQLException 'Duplicated Table' should be throw");
smallsql/junit/TestExceptionMethods.java۞212۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞213۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞214۩}
smallsql/junit/TestExceptionMethods.java۞215۩assertEquals("Additional Files created",tableFileCount, countFiles("DuplicatedTable"));
smallsql/junit/TestExceptionMethods.java۞216۩}finally{
smallsql/junit/TestExceptionMethods.java۞217۩dropTable(con, "DuplicatedTable");
smallsql/junit/TestExceptionMethods.java۞218۩}
smallsql/junit/TestExceptionMethods.java۞219۩}
smallsql/junit/TestExceptionMethods.java۞222۩private int countFiles(String fileNameStart){
smallsql/junit/TestExceptionMethods.java۞223۩int count = 0;
smallsql/junit/TestExceptionMethods.java۞224۩String names[] = new File(AllTests.CATALOG).list();
smallsql/junit/TestExceptionMethods.java۞225۩for(int i=0; i<names.length; i++){
smallsql/junit/TestExceptionMethods.java۞226۩if(names[i].startsWith(fileNameStart)){
smallsql/junit/TestExceptionMethods.java۞227۩count++;
smallsql/junit/TestExceptionMethods.java۞228۩}
smallsql/junit/TestExceptionMethods.java۞229۩}
smallsql/junit/TestExceptionMethods.java۞230۩return count;
smallsql/junit/TestExceptionMethods.java۞231۩}
smallsql/junit/TestExceptionMethods.java۞234۩public void testAmbiguousColumn() throws Exception{
smallsql/junit/TestExceptionMethods.java۞235۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptionMethods.java۞236۩try{
smallsql/junit/TestExceptionMethods.java۞237۩Statement st = con.createStatement();
smallsql/junit/TestExceptionMethods.java۞238۩st.execute("create table foo (myint number)");
smallsql/junit/TestExceptionMethods.java۞239۩st.execute("create table bar (myint number)");
smallsql/junit/TestExceptionMethods.java۞240۩try{
smallsql/junit/TestExceptionMethods.java۞241۩st.executeQuery("select myint from foo, bar");
smallsql/junit/TestExceptionMethods.java۞242۩fail("SQLException 'Ambiguous name' should be throw");
smallsql/junit/TestExceptionMethods.java۞243۩}catch(SQLException e){
smallsql/junit/TestExceptionMethods.java۞244۩assertSQLException("01000", 0, e);
smallsql/junit/TestExceptionMethods.java۞245۩}
smallsql/junit/TestExceptionMethods.java۞246۩}finally{
smallsql/junit/TestExceptionMethods.java۞247۩dropTable(con, "foo");
smallsql/junit/TestExceptionMethods.java۞248۩dropTable(con, "bar");
smallsql/junit/TestExceptionMethods.java۞249۩}
smallsql/junit/TestExceptionMethods.java۞250۩}
smallsql/junit/TestExceptionMethods.java۞253۩public void testClosedStatement() throws Exception{
smallsql/junit/TestExceptionMethods.java۞254۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptionMethods.java۞255۩Statement st = con.createStatement();
smallsql/junit/TestExceptionMethods.java۞256۩st.close();
smallsql/junit/TestExceptionMethods.java۞257۩try{
smallsql/junit/TestExceptionMethods.java۞258۩st.execute("Select 1");
smallsql/junit/TestExceptionMethods.java۞259۩fail("Exception should throw");
smallsql/junit/TestExceptionMethods.java۞260۩}catch(SQLException ex){
smallsql/junit/TestExceptionMethods.java۞261۩assertSQLException("HY010", 0, ex);
smallsql/junit/TestExceptionMethods.java۞262۩}
smallsql/junit/TestExceptionMethods.java۞263۩try{
smallsql/junit/TestExceptionMethods.java۞264۩st.executeQuery("Select 1");
smallsql/junit/TestExceptionMethods.java۞265۩fail("Exception should throw");
smallsql/junit/TestExceptionMethods.java۞266۩}catch(SQLException ex){
smallsql/junit/TestExceptionMethods.java۞267۩assertSQLException("HY010", 0, ex);
smallsql/junit/TestExceptionMethods.java۞268۩}
smallsql/junit/TestExceptionMethods.java۞269۩try{
smallsql/junit/TestExceptionMethods.java۞270۩st.executeUpdate("Select 1");
smallsql/junit/TestExceptionMethods.java۞271۩fail("Exception should throw");
smallsql/junit/TestExceptionMethods.java۞272۩}catch(SQLException ex){
smallsql/junit/TestExceptionMethods.java۞273۩assertSQLException("HY010", 0, ex);
smallsql/junit/TestExceptionMethods.java۞274۩}
smallsql/junit/TestExceptionMethods.java۞275۩}
smallsql/junit/TestExceptionMethods.java۞278۩public void testClosedPreparedStatement() throws Exception{
smallsql/junit/TestExceptionMethods.java۞279۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptionMethods.java۞280۩PreparedStatement pr = con.prepareStatement("Select ?");
smallsql/junit/TestExceptionMethods.java۞281۩pr.setInt(1, 1);
smallsql/junit/TestExceptionMethods.java۞282۩pr.close();
smallsql/junit/TestExceptionMethods.java۞283۩try{
smallsql/junit/TestExceptionMethods.java۞284۩pr.setInt(1, 1);
smallsql/junit/TestExceptionMethods.java۞285۩fail("Exception should throw");
smallsql/junit/TestExceptionMethods.java۞286۩}catch(SQLException ex){
smallsql/junit/TestExceptionMethods.java۞287۩assertSQLException("HY010", 0, ex);
smallsql/junit/TestExceptionMethods.java۞288۩}
smallsql/junit/TestExceptionMethods.java۞289۩try{
smallsql/junit/TestExceptionMethods.java۞290۩pr.execute();
smallsql/junit/TestExceptionMethods.java۞291۩fail("Exception should throw");
smallsql/junit/TestExceptionMethods.java۞292۩}catch(SQLException ex){
smallsql/junit/TestExceptionMethods.java۞293۩assertSQLException("HY010", 0, ex);
smallsql/junit/TestExceptionMethods.java۞294۩}
smallsql/junit/TestExceptionMethods.java۞295۩try{
smallsql/junit/TestExceptionMethods.java۞296۩pr.executeQuery();
smallsql/junit/TestExceptionMethods.java۞297۩fail("Exception should throw");
smallsql/junit/TestExceptionMethods.java۞298۩}catch(SQLException ex){
smallsql/junit/TestExceptionMethods.java۞299۩assertSQLException("HY010", 0, ex);
smallsql/junit/TestExceptionMethods.java۞300۩}
smallsql/junit/TestExceptionMethods.java۞301۩try{
smallsql/junit/TestExceptionMethods.java۞302۩pr.executeUpdate();
smallsql/junit/TestExceptionMethods.java۞303۩fail("Exception should throw");
smallsql/junit/TestExceptionMethods.java۞304۩}catch(SQLException ex){
smallsql/junit/TestExceptionMethods.java۞305۩assertSQLException("HY010", 0, ex);
smallsql/junit/TestExceptionMethods.java۞306۩}
smallsql/junit/TestExceptionMethods.java۞307۩}
smallsql/junit/TestExceptionMethods.java۞309۩}
smallsql/junit/TestExceptions.java۞33۩package smallsql.junit;
smallsql/junit/TestExceptions.java۞35۩import junit.framework.*;
smallsql/junit/TestExceptions.java۞36۩import java.sql.*;
smallsql/junit/TestExceptions.java۞38۩public class TestExceptions extends BasicTestCase {
smallsql/junit/TestExceptions.java۞40۩private TestValue testValue;
smallsql/junit/TestExceptions.java۞41۩private static boolean init;
smallsql/junit/TestExceptions.java۞43۩private static final int SYNTAX = 1;
smallsql/junit/TestExceptions.java۞44۩private static final int RUNTIME= 2;
smallsql/junit/TestExceptions.java۞46۩private static final TestValue[] TESTS = new TestValue[]{
smallsql/junit/TestExceptions.java۞47۩a( "01000",    0, SYNTAX,  "SELECT 23 FROM"),
smallsql/junit/TestExceptions.java۞48۩a( "01000",    0, SYNTAX,  "SELECT c FROM exceptions Group By i"),
smallsql/junit/TestExceptions.java۞49۩a( "01000",    0, SYNTAX,  "SELECT first(c) FROM exceptions Group By i ORDER  by c"),
smallsql/junit/TestExceptions.java۞50۩a( "01000",    0, SYNTAX,  "SELECT 1 ORDER BY substring('qwert', 2, -3)"),
smallsql/junit/TestExceptions.java۞51۩a( "01000",    0, RUNTIME, "SELECT abs('abc')"),
smallsql/junit/TestExceptions.java۞52۩a( "01000",    0, SYNTAX,  "Create Table anyTable (c char(10)"),
smallsql/junit/TestExceptions.java۞53۩a( "01000",    0, SYNTAX,  "SELECT {ts 'abc'}"),
smallsql/junit/TestExceptions.java۞54۩a( "01000",    0, RUNTIME, "SELECT cast('abc' as timestamp)"),
smallsql/junit/TestExceptions.java۞55۩a( "01000",    0, SYNTAX, "SELECT 0xas"),
smallsql/junit/TestExceptions.java۞56۩a( "01000",    0, RUNTIME, "SELECT cast('1234-56as' as uniqueidentifier)"),
smallsql/junit/TestExceptions.java۞57۩a( "01000",    0, SYNTAX, "SELECT {ts '2020-04-31 00:00:00.000'}"),
smallsql/junit/TestExceptions.java۞58۩a( "01000",    0, SYNTAX, "SELECT {ts '2020-02-30 12:30:15.000'}"),
smallsql/junit/TestExceptions.java۞59۩a( "01000",    0, SYNTAX, "SELECT {d '2021-02-29'}"),
smallsql/junit/TestExceptions.java۞60۩a( "01000",    0, SYNTAX, "SELECT {d '2021-22-09'}"),
smallsql/junit/TestExceptions.java۞61۩a( "01000",    0, SYNTAX, "SELECT {t '24:30:15.000'}"),
smallsql/junit/TestExceptions.java۞62۩a( "01000",    0, SYNTAX, "SELECT {t '12:60:15.000'}"),
smallsql/junit/TestExceptions.java۞63۩a( "01000",    0, SYNTAX, "SELECT {t '12:30:65.000'}"),
smallsql/junit/TestExceptions.java۞64۩a( "01000",    0, SYNTAX,  "SELECT * FROM exceptions JOIN"),
smallsql/junit/TestExceptions.java۞65۩a( "01000",    0, SYNTAX,  "select 10/2,"),
smallsql/junit/TestExceptions.java۞67۩};
smallsql/junit/TestExceptions.java۞70۩TestExceptions(TestValue testValue){
smallsql/junit/TestExceptions.java۞71۩super(testValue.sql);
smallsql/junit/TestExceptions.java۞72۩this.testValue = testValue;
smallsql/junit/TestExceptions.java۞73۩}
smallsql/junit/TestExceptions.java۞76۩private void init() throws Exception{
smallsql/junit/TestExceptions.java۞77۩if(init) return;
smallsql/junit/TestExceptions.java۞78۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptions.java۞79۩Statement st = con.createStatement();
smallsql/junit/TestExceptions.java۞80۩dropTable( con, "exceptions");
smallsql/junit/TestExceptions.java۞81۩st.execute("Create Table exceptions (c varchar(30), i int)");
smallsql/junit/TestExceptions.java۞82۩init = true;
smallsql/junit/TestExceptions.java۞83۩}
smallsql/junit/TestExceptions.java۞86۩public void runTest() throws Exception{
smallsql/junit/TestExceptions.java۞87۩init();
smallsql/junit/TestExceptions.java۞88۩Connection con = AllTests.getConnection();
smallsql/junit/TestExceptions.java۞89۩Statement st = con.createStatement();
smallsql/junit/TestExceptions.java۞90۩ResultSet rs = null;
smallsql/junit/TestExceptions.java۞91۩try{
smallsql/junit/TestExceptions.java۞92۩rs = st.executeQuery( testValue.sql );
smallsql/junit/TestExceptions.java۞93۩}catch(SQLException sqle){
smallsql/junit/TestExceptions.java۞94۩assertTrue( "There should no syntax error:"+sqle, SYNTAX == testValue.errorType);
smallsql/junit/TestExceptions.java۞95۩assertSQLException( testValue.sqlstate, testValue.errorCode, sqle );
smallsql/junit/TestExceptions.java۞96۩}
smallsql/junit/TestExceptions.java۞97۩if(testValue.errorType == SYNTAX){
smallsql/junit/TestExceptions.java۞98۩assertNull("There should be a syntax error", rs);
smallsql/junit/TestExceptions.java۞99۩return;
smallsql/junit/TestExceptions.java۞100۩}
smallsql/junit/TestExceptions.java۞101۩try{
smallsql/junit/TestExceptions.java۞102۩while(rs.next()){
smallsql/junit/TestExceptions.java۞103۩for(int i=1; i<=rs.getMetaData().getColumnCount(); i++){
smallsql/junit/TestExceptions.java۞104۩rs.getObject(i);
smallsql/junit/TestExceptions.java۞105۩}
smallsql/junit/TestExceptions.java۞106۩}
smallsql/junit/TestExceptions.java۞107۩fail("There should be a runtime error");
smallsql/junit/TestExceptions.java۞108۩}catch(SQLException sqle){
smallsql/junit/TestExceptions.java۞109۩assertSQLException( testValue.sqlstate, testValue.errorCode, sqle );
smallsql/junit/TestExceptions.java۞110۩}
smallsql/junit/TestExceptions.java۞111۩}
smallsql/junit/TestExceptions.java۞114۩public static Test suite() throws Exception{
smallsql/junit/TestExceptions.java۞115۩TestSuite theSuite = new TestSuite("Exceptions");
smallsql/junit/TestExceptions.java۞116۩for(int i=0; i<TESTS.length; i++){
smallsql/junit/TestExceptions.java۞117۩theSuite.addTest(new TestExceptions( TESTS[i] ) );
smallsql/junit/TestExceptions.java۞118۩}
smallsql/junit/TestExceptions.java۞119۩return theSuite;
smallsql/junit/TestExceptions.java۞120۩}
smallsql/junit/TestExceptions.java۞123۩private static TestValue a(String sqlstate, int errorCode, int errorType, String sql ){
smallsql/junit/TestExceptions.java۞124۩TestValue value = new TestValue();
smallsql/junit/TestExceptions.java۞125۩value.sql       = sql;
smallsql/junit/TestExceptions.java۞126۩value.sqlstate  = sqlstate;
smallsql/junit/TestExceptions.java۞127۩value.errorCode = errorCode;
smallsql/junit/TestExceptions.java۞128۩value.errorType = errorType;
smallsql/junit/TestExceptions.java۞129۩return value;
smallsql/junit/TestExceptions.java۞130۩}
smallsql/junit/TestExceptions.java۞133۩private static class TestValue{
smallsql/junit/TestExceptions.java۞134۩String sql;
smallsql/junit/TestExceptions.java۞135۩String sqlstate;
smallsql/junit/TestExceptions.java۞136۩int errorCode;
smallsql/junit/TestExceptions.java۞137۩int errorType;
smallsql/junit/TestExceptions.java۞138۩}
smallsql/junit/TestExceptions.java۞140۩}
smallsql/junit/TestFunctions.java۞33۩package smallsql.junit;
smallsql/junit/TestFunctions.java۞35۩import junit.framework.*;
smallsql/junit/TestFunctions.java۞37۩import java.math.*;
smallsql/junit/TestFunctions.java۞38۩import java.sql.*;
smallsql/junit/TestFunctions.java۞40۩public class TestFunctions extends BasicTestCase{
smallsql/junit/TestFunctions.java۞42۩private TestValue testValue;
smallsql/junit/TestFunctions.java۞44۩private static final String table = "table_functions";
smallsql/junit/TestFunctions.java۞46۩private static final TestValue[] TESTS = new TestValue[]{
smallsql/junit/TestFunctions.java۞47۩a("$3"               	, new BigDecimal("3.0000")),
smallsql/junit/TestFunctions.java۞48۩a("$-3.1"              	, new BigDecimal("-3.1000")),
smallsql/junit/TestFunctions.java۞49۩a("-$3.2"              	, new BigDecimal("-3.2000")),
smallsql/junit/TestFunctions.java۞50۩a("1 + 2"               , new Integer(3)),
smallsql/junit/TestFunctions.java۞51۩a("3 * 2"               , new Integer(6)),
smallsql/junit/TestFunctions.java۞52۩a("Top 1 4 / 2"         , new Integer(2)),
smallsql/junit/TestFunctions.java۞53۩a("7/3"         		, new Integer(2)),
smallsql/junit/TestFunctions.java۞54۩a("5 - 2"               , new Integer(3)),
smallsql/junit/TestFunctions.java۞55۩a("- aint"              , new Integer(120)),
smallsql/junit/TestFunctions.java۞56۩a("5 - - 2"             , new Integer(7)),
smallsql/junit/TestFunctions.java۞57۩a("5 - - - 2"           , new Integer(3)),
smallsql/junit/TestFunctions.java۞58۩a("-.123E-1"            , new Double("-0.0123")),
smallsql/junit/TestFunctions.java۞59۩a(".123E-1"             , new Double("0.0123")),
smallsql/junit/TestFunctions.java۞60۩a("123e-1"              , new Double("12.3")),
smallsql/junit/TestFunctions.java۞61۩a("123E1"               , new Double("1230")),
smallsql/junit/TestFunctions.java۞62۩a("2*5+2"               , new Integer("12")),
smallsql/junit/TestFunctions.java۞63۩a("'a''b'"              , "a'b"),
smallsql/junit/TestFunctions.java۞64۩a("'a\"b'"              , "a\"b"),
smallsql/junit/TestFunctions.java۞65۩a("~1"                  , new Integer(-2)),
smallsql/junit/TestFunctions.java۞66۩a("abs(-5)"             , new Integer(5)),
smallsql/junit/TestFunctions.java۞67۩a("abs(aint)"           , new Integer(120)),
smallsql/junit/TestFunctions.java۞68۩a("abs("+table+".aint)" , new Integer(120)),
smallsql/junit/TestFunctions.java۞69۩a("abs(null)"           , null),
smallsql/junit/TestFunctions.java۞70۩a("abs(cast(5 as money))"  , new BigDecimal("5.0000")),
smallsql/junit/TestFunctions.java۞71۩a("abs(cast(-5 as money))" , new BigDecimal("5.0000")),
smallsql/junit/TestFunctions.java۞72۩a("abs(cast(-5 as numeric(4,2)))" , new BigDecimal("5.00")),
smallsql/junit/TestFunctions.java۞73۩a("abs(cast(5 as real))"   , new Float(5)),
smallsql/junit/TestFunctions.java۞74۩a("abs(cast(-5 as real))"  , new Float(5)),
smallsql/junit/TestFunctions.java۞75۩a("abs(cast(-5 as float))" , new Double(5)),
smallsql/junit/TestFunctions.java۞76۩a("abs(cast(5 as double))" , new Double(5)),
smallsql/junit/TestFunctions.java۞77۩a("abs(cast(5 as smallint))",new Integer(5)),
smallsql/junit/TestFunctions.java۞78۩a("abs(cast(-5 as bigint))", new Long(5)),
smallsql/junit/TestFunctions.java۞79۩a("abs(cast(5 as bigint))",  new Long(5)),
smallsql/junit/TestFunctions.java۞80۩a("convert(money, abs(-5))", new BigDecimal("5.0000")),
smallsql/junit/TestFunctions.java۞81۩a("convert(varchar(30), 11)" 	, "11"),
smallsql/junit/TestFunctions.java۞82۩a("convert(varchar(30), null)" 	, null),
smallsql/junit/TestFunctions.java۞83۩a("convert(varchar(1), 12)" 	, "1"),
smallsql/junit/TestFunctions.java۞84۩a("convert(char(5), 11)" 		, "11   "),
smallsql/junit/TestFunctions.java۞85۩a("convert(longvarchar, {d '1999-10-12'})" 	, "1999-10-12"),
smallsql/junit/TestFunctions.java۞86۩a("convert(binary(5), '11')" 	, new byte[]{'1','1',0,0,0}),
smallsql/junit/TestFunctions.java۞87۩a("convert(binary(5), null)" 	, null),
smallsql/junit/TestFunctions.java۞88۩a("convert(varbinary(5), 11)" 	, new byte[]{0,0,0,11}),
smallsql/junit/TestFunctions.java۞89۩a("convert(longvarbinary, '11')", new byte[]{'1','1'}),
smallsql/junit/TestFunctions.java۞90۩a("convert(varchar(30),convert(varbinary(30),'Meherban'))", "Meherban"),
smallsql/junit/TestFunctions.java۞91۩a("convert(bit, 1)" 			, Boolean.TRUE),
smallsql/junit/TestFunctions.java۞92۩a("convert(bit, false)" 		, Boolean.FALSE),
smallsql/junit/TestFunctions.java۞93۩a("convert(boolean, 0)" 		, Boolean.FALSE),
smallsql/junit/TestFunctions.java۞94۩a("convert(varchar(30), convert(bit, false))" 		, "0"),
smallsql/junit/TestFunctions.java۞95۩a("convert(varchar(30), convert(boolean, 0))" 		, "false"),
smallsql/junit/TestFunctions.java۞96۩a("convert(bigint, 11)" 		, new Long(11)),
smallsql/junit/TestFunctions.java۞97۩a("convert(int, 11)" 			, new Integer(11)),
smallsql/junit/TestFunctions.java۞98۩a("{fn convert(11, Sql_integer)}" 			, new Integer(11)),
smallsql/junit/TestFunctions.java۞99۩a("convert(integer, 11)" 			, new Integer(11)),
smallsql/junit/TestFunctions.java۞100۩a("convert(smallint, 123456789)", new Integer((short)123456789)),
smallsql/junit/TestFunctions.java۞101۩a("convert(tinyint, 123456789)"	, new Integer(123456789 & 0xFF)),
smallsql/junit/TestFunctions.java۞102۩a("convert(date, '1909-10-12')" , Date.valueOf("1909-10-12")),
smallsql/junit/TestFunctions.java۞103۩a("convert(date, null)" 		, null),
smallsql/junit/TestFunctions.java۞104۩a("convert(date, {ts '1999-10-12 15:14:13.123456'})" 	, Date.valueOf("1999-10-12")),
smallsql/junit/TestFunctions.java۞105۩a("convert(date, now())" 		, Date.valueOf( new Date(System.currentTimeMillis()).toString()) ),
smallsql/junit/TestFunctions.java۞106۩a("curdate()" 					, Date.valueOf( new Date(System.currentTimeMillis()).toString()) ),
smallsql/junit/TestFunctions.java۞107۩a("current_date()" 				, Date.valueOf( new Date(System.currentTimeMillis()).toString()) ),
smallsql/junit/TestFunctions.java۞108۩a("hour(curtime())" 			, new Integer(new Time(System.currentTimeMillis()).getHours()) ),
smallsql/junit/TestFunctions.java۞109۩a("minute({t '10:11:12'})" 		, new Integer(11) ),
smallsql/junit/TestFunctions.java۞110۩a("month( {ts '1899-10-12 15:14:13.123456'})" 	, new Integer(10)),
smallsql/junit/TestFunctions.java۞111۩a("year({d '2004-12-31'})"    , new Integer(2004)),
smallsql/junit/TestFunctions.java۞112۩a("convert(time, '15:14:13')" 	, Time.valueOf("15:14:13")),
smallsql/junit/TestFunctions.java۞113۩a("convert(time, null)" 		, null),
smallsql/junit/TestFunctions.java۞114۩a("convert(timestamp, '1999-10-12 15:14:13.123456')" 	, Timestamp.valueOf("1999-10-12 15:14:13.123")),
smallsql/junit/TestFunctions.java۞115۩a("cast({ts '1907-06-05 04:03:02.1'} as smalldatetime)", Timestamp.valueOf("1907-06-05 04:03:00.0")),
smallsql/junit/TestFunctions.java۞116۩a("cast({ts '2007-06-05 04:03:02.1'} as smalldatetime)", Timestamp.valueOf("2007-06-05 04:03:00.0")),
smallsql/junit/TestFunctions.java۞117۩a("convert(varchar(30), {d '1399-10-12 3:14:13'},  -1)" 	, "1399-10-12"),
smallsql/junit/TestFunctions.java۞118۩a("convert(varchar(30), {ts '1999-10-12  3:14:13.12'},  99)" 	, "1999-10-12 03:14:13.12"),
smallsql/junit/TestFunctions.java۞119۩a("convert(varchar(30), {ts '1999-10-12  0:14:13.123456'},   0)" 	, getMonth3L(10) + " 12 1999 12:14AM"),
smallsql/junit/TestFunctions.java۞120۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   1)" 	, "10/12/99"),
smallsql/junit/TestFunctions.java۞121۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   2)" 	, "99.10.12"),
smallsql/junit/TestFunctions.java۞122۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   3)" 	, "12/10/99"),
smallsql/junit/TestFunctions.java۞123۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   4)" 	, "12.10.99"),
smallsql/junit/TestFunctions.java۞124۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   5)" 	, "12-10-99"),
smallsql/junit/TestFunctions.java۞125۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   6)" 	, "12 " + getMonth3L(10) + " 99"),
smallsql/junit/TestFunctions.java۞126۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   7)" 	, getMonth3L(10) + " 12, 99"),
smallsql/junit/TestFunctions.java۞127۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   8)" 	, "15:14:13"),
smallsql/junit/TestFunctions.java۞128۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   9)" 	, getMonth3L(10) + " 12 1999 03:14:13:123PM"),
smallsql/junit/TestFunctions.java۞129۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  10)" 	, "10-12-99"),
smallsql/junit/TestFunctions.java۞130۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  11)" 	, "99/10/12"),
smallsql/junit/TestFunctions.java۞131۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  12)" 	, "991012"),
smallsql/junit/TestFunctions.java۞132۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  13)" 	, "12 " + getMonth3L(10) + " 1999 15:14:13:123"),
smallsql/junit/TestFunctions.java۞133۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  14)" 	, "15:14:13:123"),
smallsql/junit/TestFunctions.java۞134۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  20)" 	, "1999-10-12 15:14:13"),
smallsql/junit/TestFunctions.java۞135۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  21)" 	, "1999-10-12 15:14:13.123"),
smallsql/junit/TestFunctions.java۞136۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 100)" 	, getMonth3L(10) + " 12 1999 03:14PM"),
smallsql/junit/TestFunctions.java۞137۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 101)" 	, "10/12/1999"),
smallsql/junit/TestFunctions.java۞138۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 102)" 	, "1999.10.12"),
smallsql/junit/TestFunctions.java۞139۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 103)" 	, "12/10/1999"),
smallsql/junit/TestFunctions.java۞140۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 104)" 	, "12.10.1999"),
smallsql/junit/TestFunctions.java۞141۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 105)" 	, "12-10-1999"),
smallsql/junit/TestFunctions.java۞142۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 106)" 	, "12 " + getMonth3L(10) + " 1999"),
smallsql/junit/TestFunctions.java۞143۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 107)" 	, getMonth3L(10) + " 12, 1999"),
smallsql/junit/TestFunctions.java۞144۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 108)" 	, "15:14:13"),
smallsql/junit/TestFunctions.java۞145۩a("convert(varchar(30), {ts '1999-10-12  3:14:13.123456'}, 109)" 	, getMonth3L(10) + " 12 1999 03:14:13:123AM"),
smallsql/junit/TestFunctions.java۞146۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 109)" 	, getMonth3L(10) + " 12 1999 03:14:13:123PM"),
smallsql/junit/TestFunctions.java۞147۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 110)" 	, "10-12-1999"),
smallsql/junit/TestFunctions.java۞148۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 111)" 	, "1999/10/12"),
smallsql/junit/TestFunctions.java۞149۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 112)" 	, "19991012"),
smallsql/junit/TestFunctions.java۞150۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 113)" 	, "12 " + getMonth3L(10) + " 1999 15:14:13:123"),
smallsql/junit/TestFunctions.java۞151۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 114)" 	, "15:14:13:123"),
smallsql/junit/TestFunctions.java۞152۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 120)" 	, "1999-10-12 15:14:13"),
smallsql/junit/TestFunctions.java۞153۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 121)" 	, "1999-10-12 15:14:13.123"),
smallsql/junit/TestFunctions.java۞154۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 126)" 	, "1999-10-12T15:14:13.123"),
smallsql/junit/TestFunctions.java۞155۩a("convert(varchar(30), {ts '1999-10-12  3:14:13.123456'}, 130)" 	, "12 " + getMonth3L(10) + " 1999 03:14:13:123AM"),
smallsql/junit/TestFunctions.java۞156۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 130)" 	, "12 " + getMonth3L(10) + " 1999 03:14:13:123PM"),
smallsql/junit/TestFunctions.java۞157۩a("convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 131)" 	, "12/10/99 15:14:13:123"),
smallsql/junit/TestFunctions.java۞158۩a("convert(timestamp, null)" 	, null),
smallsql/junit/TestFunctions.java۞159۩a("convert(real, 11)" 			, new Float(11)),
smallsql/junit/TestFunctions.java۞160۩a("convert(real, null)" 		, null),
smallsql/junit/TestFunctions.java۞161۩a("convert(float, 11.0)" 		, new Double(11)),
smallsql/junit/TestFunctions.java۞162۩a("convert(double, '11')" 		, new Double(11)),
smallsql/junit/TestFunctions.java۞163۩a("-convert(decimal, '11.123456')" 		, new BigDecimal("-11")),
smallsql/junit/TestFunctions.java۞164۩a("-convert(decimal(38,6), '11.123456')" 		, new BigDecimal("-11.123456")),
smallsql/junit/TestFunctions.java۞165۩a("convert(decimal(38,6), '11.123456') + 1" 		, new BigDecimal("12.123456")),
smallsql/junit/TestFunctions.java۞166۩a("convert(decimal(38,6), '11.123456') - 1" 		, new BigDecimal("10.123456")),
smallsql/junit/TestFunctions.java۞167۩a("convert(decimal(12,2), '11.0000') * 1" 		, new BigDecimal("11.00")),
smallsql/junit/TestFunctions.java۞168۩a("convert(decimal(12,2), '11.0000') * convert(decimal(12,2), 1)" 		, new BigDecimal("11.0000")),
smallsql/junit/TestFunctions.java۞169۩a("convert(decimal(12,2), '11.0000') / 1" 		, new BigDecimal("11.0000000")),
smallsql/junit/TestFunctions.java۞170۩a("convert(decimal(12,0), 11) / convert(decimal(12,2), 1)" 		, new BigDecimal("11.000000")),
smallsql/junit/TestFunctions.java۞171۩a("convert(money, -10000 / 10000.0)" 		, new BigDecimal("-1.0000")),
smallsql/junit/TestFunctions.java۞172۩a("-convert(money, '11.123456')" 		, new BigDecimal("-11.1235")),
smallsql/junit/TestFunctions.java۞173۩a("-convert(smallmoney, '11.123456')" 	, new BigDecimal("-11.1235")),
smallsql/junit/TestFunctions.java۞174۩a("convert(uniqueidentifier, 0x12345678901234567890)" 	, "78563412-1290-5634-7890-000000000000"),
smallsql/junit/TestFunctions.java۞175۩a("convert(uniqueidentifier, '78563412-1290-5634-7890-000000000000')" 	, "78563412-1290-5634-7890-000000000000"),
smallsql/junit/TestFunctions.java۞176۩a("convert(binary(16), convert(uniqueidentifier, 0x12345678901234567890))" 	, new byte[]{0x12,0x34,0x56,0x78,(byte)0x90,0x12,0x34,0x56,0x78,(byte)0x90,0,0,0,0,0,0}),
smallsql/junit/TestFunctions.java۞177۩a("Timestampdiff(day,         {d '2004-10-12'}, {d '2004-10-14'})" 		, new Integer(2)),
smallsql/junit/TestFunctions.java۞178۩a("Timestampdiff(SQL_TSI_DAY, {d '2004-10-12'}, {d '2004-10-15'})" 		, new Integer(3)),
smallsql/junit/TestFunctions.java۞179۩a("Timestampdiff(d,           {d '2004-10-12'}, {d '2004-10-16'})" 		, new Integer(4)),
smallsql/junit/TestFunctions.java۞180۩a("Timestampdiff(dd,          {d '2004-10-12'}, {d '2004-10-17'})" 		, new Integer(5)),
smallsql/junit/TestFunctions.java۞181۩a("Timestampdiff(SQL_TSI_YEAR,{d '2000-10-12'}, {d '2005-10-17'})" 		, new Integer(5)),
smallsql/junit/TestFunctions.java۞182۩a("Timestampdiff(year,			{d '2000-10-12'}, {d '2005-10-17'})" 		, new Integer(5)),
smallsql/junit/TestFunctions.java۞183۩a("Timestampdiff(SQL_TSI_QUARTER,{d '2000-10-12'}, {d '2005-10-17'})" 	, new Integer(20)),
smallsql/junit/TestFunctions.java۞184۩a("Timestampdiff(quarter,		{d '2000-10-12'}, {d '2005-10-17'})" 	, new Integer(20)),
smallsql/junit/TestFunctions.java۞185۩a("Timestampdiff(SQL_TSI_MONTH,	{d '2004-10-12'}, {d '2005-11-17'})" 	, new Integer(13)),
smallsql/junit/TestFunctions.java۞186۩a("Timestampdiff(month,			{d '2004-10-12'}, {d '2005-11-17'})" 	, new Integer(13)),
smallsql/junit/TestFunctions.java۞187۩a("Timestampdiff(SQL_TSI_WEEK,	{d '2004-10-09'}, {d '2004-10-12'})" 		, new Integer(1)),
smallsql/junit/TestFunctions.java۞188۩a("Timestampdiff(week,			{d '2004-10-09'}, {d '2004-10-12'})" 		, new Integer(1)),
smallsql/junit/TestFunctions.java۞189۩a("Timestampdiff(SQL_TSI_HOUR,	{d '2004-10-12'}, {d '2004-10-13'})" 		, new Integer(24)),
smallsql/junit/TestFunctions.java۞190۩a("Timestampdiff(hour,			{d '2004-10-12'}, {d '2004-10-13'})" 		, new Integer(24)),
smallsql/junit/TestFunctions.java۞191۩a("Timestampdiff(SQL_TSI_MINUTE,{t '10:10:10'}, {t '11:11:11'})" 		, new Integer(61)),
smallsql/junit/TestFunctions.java۞192۩a("Timestampdiff(minute,		{t '10:10:10'}, {t '11:11:11'})" 		, new Integer(61)),
smallsql/junit/TestFunctions.java۞193۩a("Timestampdiff(SQL_TSI_SECOND,{t '00:00:10'}, {t '00:10:11'})" 		, new Integer(601)),
smallsql/junit/TestFunctions.java۞194۩a("Timestampdiff(second,		{t '00:00:10'}, {t '00:10:11'})" 		, new Integer(601)),
smallsql/junit/TestFunctions.java۞195۩a("Timestampdiff(SQL_TSI_FRAC_SECOND,{ts '2004-10-12 00:00:10.1'}, {ts '2004-10-12 00:00:10.2'})" 		, new Integer(100)),
smallsql/junit/TestFunctions.java۞196۩a("Timestampdiff(millisecond,{ts '2004-10-12 00:00:10.1'}, {ts '2004-10-12 00:00:10.2'})" 		, new Integer(100)),
smallsql/junit/TestFunctions.java۞197۩a("{fn TimestampAdd(SQL_TSI_YEAR,     1, {d '2004-10-17'})}" 		, Timestamp.valueOf("2005-10-17 00:00:00.0")),
smallsql/junit/TestFunctions.java۞198۩a("{fn TimestampAdd(SQL_TSI_QUARTER,  1, {d '2004-10-17'})}"        , Timestamp.valueOf("2005-01-17 00:00:00.0")),
smallsql/junit/TestFunctions.java۞199۩a("{fn TimestampAdd(SQL_TSI_MONTH,    1, {d '2004-10-17'})}"        , Timestamp.valueOf("2004-11-17 00:00:00.0")),
smallsql/junit/TestFunctions.java۞200۩a("{fn TimestampAdd(SQL_TSI_WEEK,     1, {d '2004-10-17'})}"        , Timestamp.valueOf("2004-10-24 00:00:00.0")),
smallsql/junit/TestFunctions.java۞201۩a("{fn TimestampAdd(SQL_TSI_HOUR,     1, {d '2004-10-17'})}"        , Timestamp.valueOf("2004-10-17 01:00:00.0")),
smallsql/junit/TestFunctions.java۞202۩a("{fn TimestampAdd(SQL_TSI_MINUTE,  61, {d '2004-10-17'})}"        , Timestamp.valueOf("2004-10-17 01:01:00.0")),
smallsql/junit/TestFunctions.java۞203۩a("{fn TimestampAdd(SQL_TSI_SECOND,  61, {d '2004-10-17'})}"        , Timestamp.valueOf("2004-10-17 00:01:01.0")),
smallsql/junit/TestFunctions.java۞204۩a("{fn TimestampAdd(SQL_TSI_FRAC_SECOND,1,{d '2004-10-17'})}"       , Timestamp.valueOf("2004-10-17 00:00:00.001")),
smallsql/junit/TestFunctions.java۞205۩a("Timestampdiff(second, null, {t '00:10:11'})" 		, null),
smallsql/junit/TestFunctions.java۞206۩a("Timestampdiff(second, {t '00:10:11'}, null)" 		, null),
smallsql/junit/TestFunctions.java۞207۩a("TimestampAdd(year,     1, null)" 		, null),
smallsql/junit/TestFunctions.java۞208۩a("DayOfWeek({d '2006-02-16'})" 		, new Integer(4)),
smallsql/junit/TestFunctions.java۞209۩a("DayOfWeek({d '2006-02-19'})" 		, new Integer(7)),
smallsql/junit/TestFunctions.java۞210۩a("DayOfYear({d '2004-01-01'})" 		, new Integer(1)),
smallsql/junit/TestFunctions.java۞211۩a("DayOfYear({d '2004-02-29'})" 		, new Integer(60)),
smallsql/junit/TestFunctions.java۞212۩a("DayOfYear({d '2004-03-01'})" 		, new Integer(61)),
smallsql/junit/TestFunctions.java۞213۩a("DayOfYear({d '2004-12-31'})" 		, new Integer(366)),
smallsql/junit/TestFunctions.java۞214۩a("DayOfMonth({d '1904-07-17'})" 		, new Integer(17)),
smallsql/junit/TestFunctions.java۞215۩a("locate('ae', 'QWAERAE')"		, new Integer(3)),
smallsql/junit/TestFunctions.java۞216۩a("locate('ae', 'QWAERAE', 3)"	, new Integer(3)),
smallsql/junit/TestFunctions.java۞217۩a("locate('ae', 'QWAERAE', 4)"	, new Integer(6)),
smallsql/junit/TestFunctions.java۞218۩a("locate('ae', 'QWAERAE', null)"		, new Integer(3)),
smallsql/junit/TestFunctions.java۞219۩a("locate(null, 'QWAERAE', 4)"	, null),
smallsql/junit/TestFunctions.java۞220۩a("locate('ae', null, 4)"	, null),
smallsql/junit/TestFunctions.java۞221۩a("{d '2004-10-12'}"	, 				java.sql.Date.valueOf("2004-10-12")),
smallsql/junit/TestFunctions.java۞222۩a("{ts '1999-10-12 15:14:13.123'}"	, 	Timestamp.valueOf("1999-10-12 15:14:13.123")),
smallsql/junit/TestFunctions.java۞223۩a("{t '15:14:13'}"	, 					Time.valueOf("15:14:13")),
smallsql/junit/TestFunctions.java۞224۩a("{fn length('abc')}", 				new Integer(3)),
smallsql/junit/TestFunctions.java۞225۩a("{fn length('abc ')}", 				new Integer(3)),
smallsql/junit/TestFunctions.java۞226۩a("{fn length(null)}", 					null),
smallsql/junit/TestFunctions.java۞227۩a("{fn Right('qwertzu', 3)}", 			"tzu"),
smallsql/junit/TestFunctions.java۞228۩a("{fn Right('qwertzu', 13)}", 			"qwertzu"),
smallsql/junit/TestFunctions.java۞229۩a("cast( Right('1234', 2) as real)", 	new Float(34)),
smallsql/junit/TestFunctions.java۞230۩a("cast( Right('1234', 2) as smallint)",new Integer(34)),
smallsql/junit/TestFunctions.java۞231۩a("cast( Right('1234', 2) as boolean)", Boolean.TRUE),
smallsql/junit/TestFunctions.java۞232۩a("right(0x1234567890, 2)",				new byte[]{0x78,(byte)0x90}),
smallsql/junit/TestFunctions.java۞233۩a("right(null, 2)",						null),
smallsql/junit/TestFunctions.java۞234۩a("left(null, 2)",                      null),
smallsql/junit/TestFunctions.java۞235۩a("left('abcd', 2)",                    "ab"),
smallsql/junit/TestFunctions.java۞236۩a("left(0x1234567890, 2)",              new byte[]{0x12,(byte)0x34}),
smallsql/junit/TestFunctions.java۞237۩a("cast({fn SubString('ab2.3qw', 3, 3)} as double)", 	new Double(2.3)),
smallsql/junit/TestFunctions.java۞238۩a("subString('qwert', 99, 2)", 		""),
smallsql/junit/TestFunctions.java۞239۩a("{fn SubString(0x1234567890, 0, 99)}",new byte[]{0x12,0x34,0x56,0x78,(byte)0x90}),
smallsql/junit/TestFunctions.java۞240۩a("{fn SubString(0x1234567890, 2, 2)}", new byte[]{0x34, 0x56}),
smallsql/junit/TestFunctions.java۞241۩a("{fn SubString(0x1234567890, 99, 2)}", new byte[]{}),
smallsql/junit/TestFunctions.java۞242۩a("SubString(null, 99, 2)", 			null),
smallsql/junit/TestFunctions.java۞243۩a("Insert('abcd', 2, 1, 'qw')",         "aqwcd"),
smallsql/junit/TestFunctions.java۞244۩a("Insert(0x1234, 2, 0, 0x56)",         new byte[]{0x12,0x56,0x34}),
smallsql/junit/TestFunctions.java۞245۩a("STUFF(null, 2, 0, 0x56)",         	null),
smallsql/junit/TestFunctions.java۞246۩a("lcase('Abcd')",                      "abcd"),
smallsql/junit/TestFunctions.java۞247۩a("ucase('Abcd')",                      "ABCD"),
smallsql/junit/TestFunctions.java۞248۩a("lcase(null)",                        null),
smallsql/junit/TestFunctions.java۞249۩a("ucase(null)",                        null),
smallsql/junit/TestFunctions.java۞250۩a("cast(1 as money) + SubString('a12', 2, 2)",new BigDecimal("13.0000")),
smallsql/junit/TestFunctions.java۞251۩a("cast(1 as numeric(5,2)) + SubString('a12', 2, 2)",new BigDecimal("13.00")),
smallsql/junit/TestFunctions.java۞252۩a("cast(1 as BigInt) + SubString('a12', 2, 2)",new Long(13)),
smallsql/junit/TestFunctions.java۞253۩a("cast(1 as real) + SubString('a12', 2, 2)",new Float(13)),
smallsql/junit/TestFunctions.java۞254۩a("1   + SubString('a12', 2, 2)",       new Integer(13)),
smallsql/junit/TestFunctions.java۞255۩a("1.0 + SubString('a12', 2, 2)",       new Double(13)),
smallsql/junit/TestFunctions.java۞256۩a("concat('abc', 'def')",               "abcdef"),
smallsql/junit/TestFunctions.java۞257۩a("{fn IfNull(null, 'abc')}", 			"abc"),
smallsql/junit/TestFunctions.java۞258۩a("{fn IfNull('asd', 'abc')}", 			"asd"),
smallsql/junit/TestFunctions.java۞259۩a("iif(true, 1, 2)", 					new Integer(1)),
smallsql/junit/TestFunctions.java۞260۩a("iif(false, 1, 2)", 					new Integer(2)),
smallsql/junit/TestFunctions.java۞261۩a("CASE aVarchar WHEN 'qwert' THEN 25 WHEN 'asdfg' THEN 26 ELSE null END", new Integer(25)),
smallsql/junit/TestFunctions.java۞262۩a("CASE WHEN aVarchar='qwert' THEN 'uu' WHEN aVarchar='bb' THEN 'gg' ELSE 'nn' END", "uu"),
smallsql/junit/TestFunctions.java۞263۩a("{fn Ascii('')}", 			null),
smallsql/junit/TestFunctions.java۞264۩a("{fn Ascii(null)}", 			null),
smallsql/junit/TestFunctions.java۞265۩a("Ascii('abc')", 				new Integer(97)),
smallsql/junit/TestFunctions.java۞266۩a("{fn Char(97)}", 				"a"),
smallsql/junit/TestFunctions.java۞267۩a("Char(null)", 				null),
smallsql/junit/TestFunctions.java۞268۩a("$1 + Char(49)",              new BigDecimal("2.0000")),
smallsql/junit/TestFunctions.java۞269۩a("Exp(null)", 					null),
smallsql/junit/TestFunctions.java۞270۩a("exp(0)", 					new Double(1)),
smallsql/junit/TestFunctions.java۞271۩a("log(exp(2.4))", 				new Double(2.4)),
smallsql/junit/TestFunctions.java۞272۩a("log10(10)", 					new Double(1)),
smallsql/junit/TestFunctions.java۞273۩a("cos(null)", 					null),
smallsql/junit/TestFunctions.java۞274۩a("cos(0)", 					new Double(1)),
smallsql/junit/TestFunctions.java۞275۩a("acos(1)", 					new Double(0)),
smallsql/junit/TestFunctions.java۞276۩a("sin(0)", 					new Double(0)),
smallsql/junit/TestFunctions.java۞277۩a("cos(pi())", 					new Double(-1)),
smallsql/junit/TestFunctions.java۞278۩a("asin(0)", 					new Double(0)),
smallsql/junit/TestFunctions.java۞279۩a("asin(sin(0.5))",				new Double(0.5)),
smallsql/junit/TestFunctions.java۞280۩a("tan(0)", 					new Double(0)),
smallsql/junit/TestFunctions.java۞281۩a("atan(tan(0.5))",				new Double(0.5)),
smallsql/junit/TestFunctions.java۞282۩a("atan2(0,3)",					new Double(0)),
smallsql/junit/TestFunctions.java۞283۩a("atan2(0,-3)",				new Double(Math.PI)),
smallsql/junit/TestFunctions.java۞284۩a("atn2(0,null)",				null),
smallsql/junit/TestFunctions.java۞285۩a("cot(0)",						new Double(Double.POSITIVE_INFINITY)),
smallsql/junit/TestFunctions.java۞286۩a("tan(0)", 					new Double(0)),
smallsql/junit/TestFunctions.java۞287۩a("degrees(pi())", 				new Double(180)),
smallsql/junit/TestFunctions.java۞288۩a("degrees(radians(50))", 		new Double(50)),
smallsql/junit/TestFunctions.java۞289۩a("ceiling(123.45)", 			new Double(124)),
smallsql/junit/TestFunctions.java۞290۩a("ceiling(-123.45)", 			new Double(-123)),
smallsql/junit/TestFunctions.java۞291۩a("power(2, 3)", 				new Double(8)),
smallsql/junit/TestFunctions.java۞292۩a("5.0 % 2", 					new Double(1)),
smallsql/junit/TestFunctions.java۞293۩a("5 % 2", 						new Integer(1)),
smallsql/junit/TestFunctions.java۞294۩a("mod(5, 2)", 					new Integer(1)),
smallsql/junit/TestFunctions.java۞295۩a("FLOOR(123.45)", 				new Double(123)),
smallsql/junit/TestFunctions.java۞296۩a("FLOOR('123.45')", 			new Double(123)),
smallsql/junit/TestFunctions.java۞297۩a("FLOOR(-123.45)", 			new Double(-124)),
smallsql/junit/TestFunctions.java۞298۩a("FLOOR($123.45)", 			new BigDecimal("123.0000")),
smallsql/junit/TestFunctions.java۞299۩a("Rand(0)", 					new Double(0.730967787376657)),
smallsql/junit/TestFunctions.java۞300۩a("ROUND(748.58, -4)", 			new Double(0)),
smallsql/junit/TestFunctions.java۞301۩a("ROUND(-748.58, -2)", 		new Double(-700)),
smallsql/junit/TestFunctions.java۞302۩a("ROUND('748.5876', 2)", 		new Double(748.59)),
smallsql/junit/TestFunctions.java۞303۩a("round( 1e19, 0)"       , new Double(1e19)),
smallsql/junit/TestFunctions.java۞304۩a("truncate( -1e19,0)"      , new Double(-1e19)),
smallsql/junit/TestFunctions.java۞305۩a("Sign('748.5876')", 			new Integer(1)),
smallsql/junit/TestFunctions.java۞306۩a("Sign(-2)", 					new Integer(-1)),
smallsql/junit/TestFunctions.java۞307۩a("Sign(2)",                    new Integer(1)),
smallsql/junit/TestFunctions.java۞308۩a("Sign(0)",                    new Integer(0)),
smallsql/junit/TestFunctions.java۞309۩a("Sign(-$2)",                  new Integer(-1)),
smallsql/junit/TestFunctions.java۞310۩a("Sign($2)",                   new Integer(1)),
smallsql/junit/TestFunctions.java۞311۩a("Sign($0)",                   new Integer(0)),
smallsql/junit/TestFunctions.java۞312۩a("Sign(cast(-2 as bigint))",   new Integer(-1)),
smallsql/junit/TestFunctions.java۞313۩a("Sign(cast(2 as bigint))",    new Integer(1)),
smallsql/junit/TestFunctions.java۞314۩a("Sign(cast(0 as bigint))",    new Integer(0)),
smallsql/junit/TestFunctions.java۞315۩a("Sign(1.0)",                  new Integer(1)),
smallsql/junit/TestFunctions.java۞316۩a("Sign(0.0)", 					new Integer(0)),
smallsql/junit/TestFunctions.java۞317۩a("Sign(-.1)",                  new Integer(-1)),
smallsql/junit/TestFunctions.java۞318۩a("Sign(cast(0 as numeric(5)))",new Integer(0)),
smallsql/junit/TestFunctions.java۞319۩a("Sign(null)", 				null),
smallsql/junit/TestFunctions.java۞320۩a("sqrt(9)", 					new Double(3)),
smallsql/junit/TestFunctions.java۞321۩a("Truncate(748.58, -4)", 		new Double(0)),
smallsql/junit/TestFunctions.java۞322۩a("Truncate(-748.58, -2)", 		new Double(-700)),
smallsql/junit/TestFunctions.java۞323۩a("Truncate('748.5876', 2)", 	new Double(748.58)),
smallsql/junit/TestFunctions.java۞324۩a("rtrim(null)",                null),
smallsql/junit/TestFunctions.java۞325۩a("rtrim(0x0012345600)",        new byte[]{0x00,0x12,0x34,0x56}),
smallsql/junit/TestFunctions.java۞326۩a("rtrim(' abc ')",             " abc"),
smallsql/junit/TestFunctions.java۞327۩a("ltrim(null)",                null),
smallsql/junit/TestFunctions.java۞328۩a("ltrim(0x0012345600)",        new byte[]{0x12,0x34,0x56,0x00}),
smallsql/junit/TestFunctions.java۞329۩a("ltrim(' abc ')",             "abc "),
smallsql/junit/TestFunctions.java۞330۩a("space(3)",                   "   "),
smallsql/junit/TestFunctions.java۞331۩a("space(null)",                null),
smallsql/junit/TestFunctions.java۞332۩a("space(-3)",                  null),
smallsql/junit/TestFunctions.java۞333۩a("replace('abcabc','bc','4')", "a4a4"),
smallsql/junit/TestFunctions.java۞334۩a("replace('abcabc','bc',null)",null),
smallsql/junit/TestFunctions.java۞335۩a("replace('abcabc','','4')",   "abcabc"),
smallsql/junit/TestFunctions.java۞336۩a("replace(0x123456,0x3456,0x77)", new byte[]{0x12,0x77}),
smallsql/junit/TestFunctions.java۞337۩a("replace(0x123456,0x,0x77)",  new byte[]{0x12,0x34,0x56}),
smallsql/junit/TestFunctions.java۞338۩a("replace(0x123456,0x88,0x77)",new byte[]{0x12,0x34,0x56}),
smallsql/junit/TestFunctions.java۞339۩a("repeat('ab',4)",             "abababab"),
smallsql/junit/TestFunctions.java۞340۩a("repeat(null,4)",             null),
smallsql/junit/TestFunctions.java۞341۩a("repeat(0x1234,3)",           new byte[]{0x12,0x34,0x12,0x34,0x12,0x34}),
smallsql/junit/TestFunctions.java۞342۩a("DIFFERENCE('Green','Greene')",new Integer(4)),
smallsql/junit/TestFunctions.java۞343۩a("DIFFERENCE('Green',null)",   null),
smallsql/junit/TestFunctions.java۞344۩a("OCTET_LENGTH('SomeWord')",   new Integer(16)),
smallsql/junit/TestFunctions.java۞345۩a("OCTET_LENGTH('')",   		new Integer(0)),
smallsql/junit/TestFunctions.java۞346۩a("OCTET_LENGTH(null)",   		null),
smallsql/junit/TestFunctions.java۞347۩a("BIT_LENGTH('SomeWord')",     new Integer(128)),
smallsql/junit/TestFunctions.java۞348۩a("BIT_LENGTH('')",   		    new Integer(0)),
smallsql/junit/TestFunctions.java۞349۩a("BIT_LENGTH(null)",   		null),
smallsql/junit/TestFunctions.java۞350۩a("CHAR_LENGTH('SomeWord')",    new Integer(8)),
smallsql/junit/TestFunctions.java۞351۩a("CHAR_LENGTH('')",   		    new Integer(0)),
smallsql/junit/TestFunctions.java۞352۩a("CHAR_LENGTH(null)",   		null),
smallsql/junit/TestFunctions.java۞353۩a("CHARACTER_LENGTH('SomeWord')", new Integer(8)),
smallsql/junit/TestFunctions.java۞354۩a("CHARACTER_LENGTH('')",   	new Integer(0)),
smallsql/junit/TestFunctions.java۞355۩a("CHARACTER_LENGTH(null)",   	null),
smallsql/junit/TestFunctions.java۞356۩a("soundex('Wikipedia')",       "W213"),
smallsql/junit/TestFunctions.java۞357۩a("0x10 < 0x1020",              Boolean.TRUE),
smallsql/junit/TestFunctions.java۞358۩};
smallsql/junit/TestFunctions.java۞361۩private static TestValue a(String function, Object result){
smallsql/junit/TestFunctions.java۞362۩TestValue value = new TestValue();
smallsql/junit/TestFunctions.java۞363۩value.function  = function;
smallsql/junit/TestFunctions.java۞364۩value.result    = result;
smallsql/junit/TestFunctions.java۞365۩return value;
smallsql/junit/TestFunctions.java۞366۩}
smallsql/junit/TestFunctions.java۞368۩TestFunctions(TestValue testValue){
smallsql/junit/TestFunctions.java۞369۩super(testValue.function);
smallsql/junit/TestFunctions.java۞370۩this.testValue = testValue;
smallsql/junit/TestFunctions.java۞371۩}
smallsql/junit/TestFunctions.java۞374۩public void tearDown(){
smallsql/junit/TestFunctions.java۞375۩try{
smallsql/junit/TestFunctions.java۞376۩Connection con = AllTests.getConnection();
smallsql/junit/TestFunctions.java۞377۩Statement st = con.createStatement();
smallsql/junit/TestFunctions.java۞378۩st.execute("drop table " + table);
smallsql/junit/TestFunctions.java۞379۩st.close();
smallsql/junit/TestFunctions.java۞380۩}catch(Throwable e){
smallsql/junit/TestFunctions.java۞382۩}
smallsql/junit/TestFunctions.java۞383۩}
smallsql/junit/TestFunctions.java۞385۩public void setUp(){
smallsql/junit/TestFunctions.java۞386۩tearDown();
smallsql/junit/TestFunctions.java۞387۩try{
smallsql/junit/TestFunctions.java۞388۩Connection con = AllTests.getConnection();
smallsql/junit/TestFunctions.java۞389۩Statement st = con.createStatement();
smallsql/junit/TestFunctions.java۞390۩st.execute("create table " + table + "(aInt int, aVarchar varchar(100))");
smallsql/junit/TestFunctions.java۞391۩st.execute("Insert into " + table + "(aInt, aVarchar) Values(-120,'qwert')");
smallsql/junit/TestFunctions.java۞392۩st.close();
smallsql/junit/TestFunctions.java۞393۩}catch(Throwable e){
smallsql/junit/TestFunctions.java۞394۩e.printStackTrace();
smallsql/junit/TestFunctions.java۞395۩}
smallsql/junit/TestFunctions.java۞396۩}
smallsql/junit/TestFunctions.java۞398۩public void runTest() throws Exception{
smallsql/junit/TestFunctions.java۞399۩String query = "Select " + testValue.function + ",5 from " + table;
smallsql/junit/TestFunctions.java۞400۩assertEqualsRsValue( testValue.result, query);
smallsql/junit/TestFunctions.java۞401۩if(!testValue.function.startsWith("Top")){
smallsql/junit/TestFunctions.java۞402۩assertEqualsRsValue( testValue.result, "Select " + testValue.function + " from " + table + " Group By " + testValue.function);
smallsql/junit/TestFunctions.java۞403۩}
smallsql/junit/TestFunctions.java۞404۩}
smallsql/junit/TestFunctions.java۞406۩public static Test suite() throws Exception{
smallsql/junit/TestFunctions.java۞407۩TestSuite theSuite = new TestSuite("Functions");
smallsql/junit/TestFunctions.java۞408۩for(int i=0; i<TESTS.length; i++){
smallsql/junit/TestFunctions.java۞409۩theSuite.addTest(new TestFunctions( TESTS[i] ) );
smallsql/junit/TestFunctions.java۞410۩}
smallsql/junit/TestFunctions.java۞411۩return theSuite;
smallsql/junit/TestFunctions.java۞412۩}
smallsql/junit/TestFunctions.java۞414۩private static class TestValue{
smallsql/junit/TestFunctions.java۞415۩String function;
smallsql/junit/TestFunctions.java۞416۩Object result;
smallsql/junit/TestFunctions.java۞417۩}
smallsql/junit/TestFunctions.java۞418۩}
smallsql/junit/TestGroupBy.java۞33۩package smallsql.junit;
smallsql/junit/TestGroupBy.java۞35۩import java.math.BigDecimal;
smallsql/junit/TestGroupBy.java۞36۩import java.sql.*;
smallsql/junit/TestGroupBy.java۞43۩public class TestGroupBy extends BasicTestCase {
smallsql/junit/TestGroupBy.java۞45۩private static final String table1 = "table_GroupBy1";
smallsql/junit/TestGroupBy.java۞47۩private static final String STR_VALUE1 = "name1";
smallsql/junit/TestGroupBy.java۞48۩private static final String STR_VALUE2 = "name2";
smallsql/junit/TestGroupBy.java۞50۩private boolean init;
smallsql/junit/TestGroupBy.java۞51۩public TestGroupBy() {
smallsql/junit/TestGroupBy.java۞52۩super();
smallsql/junit/TestGroupBy.java۞53۩}
smallsql/junit/TestGroupBy.java۞55۩public TestGroupBy(String name) {
smallsql/junit/TestGroupBy.java۞56۩super(name);
smallsql/junit/TestGroupBy.java۞57۩}
smallsql/junit/TestGroupBy.java۞59۩public void init(){
smallsql/junit/TestGroupBy.java۞60۩if(init) return;
smallsql/junit/TestGroupBy.java۞61۩try{
smallsql/junit/TestGroupBy.java۞62۩Connection con = AllTests.getConnection();
smallsql/junit/TestGroupBy.java۞63۩dropTable( con, table1 );
smallsql/junit/TestGroupBy.java۞64۩Statement st = con.createStatement();
smallsql/junit/TestGroupBy.java۞65۩st.execute("create table " + table1 + "(name varchar(30), id int )");
smallsql/junit/TestGroupBy.java۞68۩st.close();
smallsql/junit/TestGroupBy.java۞69۩PreparedStatement pr = con.prepareStatement("INSERT into " + table1 + "(name, id) Values(?,?)");
smallsql/junit/TestGroupBy.java۞70۩pr.setString( 1, STR_VALUE1);
smallsql/junit/TestGroupBy.java۞71۩pr.setInt( 2, 1 );
smallsql/junit/TestGroupBy.java۞72۩pr.execute();
smallsql/junit/TestGroupBy.java۞73۩pr.setString( 1, STR_VALUE1);
smallsql/junit/TestGroupBy.java۞74۩pr.setInt( 2, 2 );
smallsql/junit/TestGroupBy.java۞75۩pr.execute();
smallsql/junit/TestGroupBy.java۞76۩pr.setString( 1, STR_VALUE1);
smallsql/junit/TestGroupBy.java۞77۩pr.setNull( 2, Types.INTEGER );
smallsql/junit/TestGroupBy.java۞78۩pr.execute();
smallsql/junit/TestGroupBy.java۞79۩pr.setString( 1, STR_VALUE2);
smallsql/junit/TestGroupBy.java۞80۩pr.setInt( 2, 1 );
smallsql/junit/TestGroupBy.java۞81۩pr.execute();
smallsql/junit/TestGroupBy.java۞83۩pr.close();
smallsql/junit/TestGroupBy.java۞85۩init = true;
smallsql/junit/TestGroupBy.java۞86۩}catch(Throwable e){
smallsql/junit/TestGroupBy.java۞87۩e.printStackTrace();
smallsql/junit/TestGroupBy.java۞88۩}
smallsql/junit/TestGroupBy.java۞89۩}
smallsql/junit/TestGroupBy.java۞91۩public void testTest() throws Exception{
smallsql/junit/TestGroupBy.java۞92۩init();
smallsql/junit/TestGroupBy.java۞93۩Connection con = AllTests.getConnection();
smallsql/junit/TestGroupBy.java۞94۩Statement st = con.createStatement();
smallsql/junit/TestGroupBy.java۞95۩ResultSet rs;
smallsql/junit/TestGroupBy.java۞102۩rs = st.executeQuery("Select count(id) FROM " + table1 + " Group By name");
smallsql/junit/TestGroupBy.java۞103۩while(rs.next()){
smallsql/junit/TestGroupBy.java۞104۩rs.getObject(1);
smallsql/junit/TestGroupBy.java۞105۩}
smallsql/junit/TestGroupBy.java۞107۩rs = st.executeQuery("Select count(*) FROM " + table1 + " Group By name");
smallsql/junit/TestGroupBy.java۞108۩while(rs.next()){
smallsql/junit/TestGroupBy.java۞109۩rs.getObject(1);
smallsql/junit/TestGroupBy.java۞110۩}
smallsql/junit/TestGroupBy.java۞112۩rs = st.executeQuery("Select count(*) FROM " + table1);
smallsql/junit/TestGroupBy.java۞113۩assertTrue(rs.next());
smallsql/junit/TestGroupBy.java۞114۩assertEquals( 4, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞116۩rs = st.executeQuery("Select count(id) FROM " + table1);
smallsql/junit/TestGroupBy.java۞117۩assertTrue(rs.next());
smallsql/junit/TestGroupBy.java۞118۩assertEquals( 3, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞120۩rs = st.executeQuery("Select count(*)+1 FROM " + table1);
smallsql/junit/TestGroupBy.java۞121۩assertTrue(rs.next());
smallsql/junit/TestGroupBy.java۞122۩assertEquals( 5, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞123۩}
smallsql/junit/TestGroupBy.java۞125۩public void testCountWhere() throws Exception{
smallsql/junit/TestGroupBy.java۞126۩init();
smallsql/junit/TestGroupBy.java۞127۩assertEqualsRsValue( new Integer(0), "Select count(*) FROM " + table1 + " Where id=-1234");
smallsql/junit/TestGroupBy.java۞128۩}
smallsql/junit/TestGroupBy.java۞130۩public void testCountWherePrepare() throws Exception{
smallsql/junit/TestGroupBy.java۞131۩init();
smallsql/junit/TestGroupBy.java۞132۩Connection con = AllTests.getConnection();
smallsql/junit/TestGroupBy.java۞133۩PreparedStatement pr = con.prepareStatement("Select count(*) FROM " + table1 + " Where id=-1234");
smallsql/junit/TestGroupBy.java۞134۩for(int i=1; i<=3; i++){
smallsql/junit/TestGroupBy.java۞135۩ResultSet rs = pr.executeQuery();
smallsql/junit/TestGroupBy.java۞136۩assertTrue( "No row produce in loop:"+i, rs.next());
smallsql/junit/TestGroupBy.java۞137۩assertEquals( "loop:"+i, 0, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞138۩}
smallsql/junit/TestGroupBy.java۞139۩}
smallsql/junit/TestGroupBy.java۞141۩public void testCountOrderBy() throws Exception{
smallsql/junit/TestGroupBy.java۞142۩init();
smallsql/junit/TestGroupBy.java۞143۩Connection con = AllTests.getConnection();
smallsql/junit/TestGroupBy.java۞144۩PreparedStatement pr = con.prepareStatement("Select count(*) FROM " + table1 + " Group By name Order By name DESC");
smallsql/junit/TestGroupBy.java۞145۩for(int i=1; i<=3; i++){
smallsql/junit/TestGroupBy.java۞146۩ResultSet rs = pr.executeQuery( );
smallsql/junit/TestGroupBy.java۞147۩assertTrue  ( "loop:"+i, rs.next());
smallsql/junit/TestGroupBy.java۞148۩assertEquals( "loop:"+i, 1, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞149۩assertTrue  ( "loop:"+i, rs.next());
smallsql/junit/TestGroupBy.java۞150۩assertEquals( "loop:"+i, 3, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞151۩}
smallsql/junit/TestGroupBy.java۞152۩}
smallsql/junit/TestGroupBy.java۞154۩public void testGroupByWithExpression() throws Exception{
smallsql/junit/TestGroupBy.java۞155۩init();
smallsql/junit/TestGroupBy.java۞156۩Connection con = AllTests.getConnection();
smallsql/junit/TestGroupBy.java۞157۩PreparedStatement pr = con.prepareStatement("Select sum(id), name+'a' as ColumnName FROM " + table1 + " Group By name+'a' Order By Name+'a'");
smallsql/junit/TestGroupBy.java۞158۩for(int i=1; i<=3; i++){
smallsql/junit/TestGroupBy.java۞159۩ResultSet rs = pr.executeQuery( );
smallsql/junit/TestGroupBy.java۞160۩assertTrue  ( "loop:"+i, rs.next());
smallsql/junit/TestGroupBy.java۞161۩assertEquals( "loop:"+i, 3, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞162۩assertTrue  ( "loop:"+i, rs.next());
smallsql/junit/TestGroupBy.java۞163۩assertEquals( "loop:"+i, 1, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞164۩assertEquals( "loop:"+i+" Alias name von Expression", "ColumnName", rs.getMetaData().getColumnName(2));
smallsql/junit/TestGroupBy.java۞165۩}
smallsql/junit/TestGroupBy.java۞166۩}
smallsql/junit/TestGroupBy.java۞168۩public void testComplex() throws Exception{
smallsql/junit/TestGroupBy.java۞169۩init();
smallsql/junit/TestGroupBy.java۞170۩Connection con = AllTests.getConnection();
smallsql/junit/TestGroupBy.java۞171۩PreparedStatement pr = con.prepareStatement("Select abs(sum(abs(3-id))+2) FROM " + table1 + " Group By name+'a' Order By 'b'+(Name+'a')");
smallsql/junit/TestGroupBy.java۞172۩for(int i=1; i<=3; i++){
smallsql/junit/TestGroupBy.java۞173۩ResultSet rs = pr.executeQuery( );
smallsql/junit/TestGroupBy.java۞174۩assertTrue  ( "loop:"+i, rs.next());
smallsql/junit/TestGroupBy.java۞175۩assertEquals( "loop:"+i, 5, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞176۩assertTrue  ( "loop:"+i, rs.next());
smallsql/junit/TestGroupBy.java۞177۩assertEquals( "loop:"+i, 4, rs.getInt(1));
smallsql/junit/TestGroupBy.java۞178۩}
smallsql/junit/TestGroupBy.java۞179۩}
smallsql/junit/TestGroupBy.java۞181۩public void testWithNullValue() throws Exception{
smallsql/junit/TestGroupBy.java۞182۩init();
smallsql/junit/TestGroupBy.java۞183۩assertEqualsRsValue(new Integer(4), "Select count(*) FROM " + table1 + " Group By name+null" );
smallsql/junit/TestGroupBy.java۞184۩}
smallsql/junit/TestGroupBy.java۞186۩public void testSumInt() throws Exception{
smallsql/junit/TestGroupBy.java۞187۩init();
smallsql/junit/TestGroupBy.java۞188۩assertEqualsRsValue( new Integer(4), "Select sum(id) FROM " + table1);
smallsql/junit/TestGroupBy.java۞189۩}
smallsql/junit/TestGroupBy.java۞191۩public void testSumLong() throws Exception{
smallsql/junit/TestGroupBy.java۞192۩init();
smallsql/junit/TestGroupBy.java۞193۩assertEqualsRsValue( new Long(4), "Select sum(cast(id as BigInt)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞194۩}
smallsql/junit/TestGroupBy.java۞196۩public void testSumReal() throws Exception{
smallsql/junit/TestGroupBy.java۞197۩init();
smallsql/junit/TestGroupBy.java۞198۩assertEqualsRsValue( new Float(4), "Select sum(cast(id as real)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞199۩}
smallsql/junit/TestGroupBy.java۞201۩public void testSumDouble() throws Exception{
smallsql/junit/TestGroupBy.java۞202۩init();
smallsql/junit/TestGroupBy.java۞203۩assertEqualsRsValue( new Double(4), "Select sum(cast(id as double)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞204۩}
smallsql/junit/TestGroupBy.java۞206۩public void testSumDecimal() throws Exception{
smallsql/junit/TestGroupBy.java۞207۩init();
smallsql/junit/TestGroupBy.java۞208۩assertEqualsRsValue( new BigDecimal("4.00"), "Select sum(cast(id as decimal(38,2))) FROM " + table1);
smallsql/junit/TestGroupBy.java۞209۩}
smallsql/junit/TestGroupBy.java۞211۩public void testMaxInt() throws Exception{
smallsql/junit/TestGroupBy.java۞212۩init();
smallsql/junit/TestGroupBy.java۞213۩assertEqualsRsValue( new Integer(2), "Select max(id) FROM " + table1);
smallsql/junit/TestGroupBy.java۞214۩}
smallsql/junit/TestGroupBy.java۞216۩public void testMaxBigInt() throws Exception{
smallsql/junit/TestGroupBy.java۞217۩init();
smallsql/junit/TestGroupBy.java۞218۩assertEqualsRsValue( new Long(2), "Select max(cast(id as BigInt)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞219۩}
smallsql/junit/TestGroupBy.java۞221۩public void testMaxString() throws Exception{
smallsql/junit/TestGroupBy.java۞222۩init();
smallsql/junit/TestGroupBy.java۞223۩assertEqualsRsValue( STR_VALUE2, "Select max(name) FROM " + table1);
smallsql/junit/TestGroupBy.java۞224۩}
smallsql/junit/TestGroupBy.java۞227۩public void testMaxTinyint() throws Exception{
smallsql/junit/TestGroupBy.java۞228۩init();
smallsql/junit/TestGroupBy.java۞229۩assertEqualsRsValue( new Integer(2), "Select max(convert(tinyint,id)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞230۩}
smallsql/junit/TestGroupBy.java۞233۩public void testMaxReal() throws Exception{
smallsql/junit/TestGroupBy.java۞234۩init();
smallsql/junit/TestGroupBy.java۞235۩assertEqualsRsValue( new Float(2), "Select max(convert(real,id)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞236۩}
smallsql/junit/TestGroupBy.java۞239۩public void testMaxFloat() throws Exception{
smallsql/junit/TestGroupBy.java۞240۩init();
smallsql/junit/TestGroupBy.java۞241۩assertEqualsRsValue( new Double(2), "Select max(convert(float,id)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞242۩}
smallsql/junit/TestGroupBy.java۞245۩public void testMaxDouble() throws Exception{
smallsql/junit/TestGroupBy.java۞246۩init();
smallsql/junit/TestGroupBy.java۞247۩assertEqualsRsValue( new Double(2), "Select max(convert(double,id)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞248۩}
smallsql/junit/TestGroupBy.java۞251۩public void testMaxMoney() throws Exception{
smallsql/junit/TestGroupBy.java۞252۩init();
smallsql/junit/TestGroupBy.java۞253۩assertEqualsRsValue( new java.math.BigDecimal("2.0000"), "Select max(convert(money,id)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞254۩}
smallsql/junit/TestGroupBy.java۞257۩public void testMaxNumeric() throws Exception{
smallsql/junit/TestGroupBy.java۞258۩init();
smallsql/junit/TestGroupBy.java۞259۩assertEqualsRsValue( new java.math.BigDecimal("2"), "Select max(convert(numeric,id)) FROM " + table1);
smallsql/junit/TestGroupBy.java۞260۩}
smallsql/junit/TestGroupBy.java۞263۩public void testMaxDate() throws Exception{
smallsql/junit/TestGroupBy.java۞264۩init();
smallsql/junit/TestGroupBy.java۞265۩assertEqualsRsValue( java.sql.Date.valueOf("2345-01-23"), "Select max({d '2345-01-23'}) FROM " + table1);
smallsql/junit/TestGroupBy.java۞266۩}
smallsql/junit/TestGroupBy.java۞269۩public void testMaxTime() throws Exception{
smallsql/junit/TestGroupBy.java۞270۩init();
smallsql/junit/TestGroupBy.java۞271۩assertEqualsRsValue( java.sql.Time.valueOf("12:34:56"), "Select max({t '12:34:56'}) FROM " + table1);
smallsql/junit/TestGroupBy.java۞272۩}
smallsql/junit/TestGroupBy.java۞274۩public void testMaxTimestamp() throws Exception{
smallsql/junit/TestGroupBy.java۞275۩init();
smallsql/junit/TestGroupBy.java۞276۩assertEqualsRsValue( java.sql.Timestamp.valueOf("2345-01-23 12:34:56.123"), "Select max({ts '2345-01-23 12:34:56.123'}) FROM " + table1);
smallsql/junit/TestGroupBy.java۞277۩}
smallsql/junit/TestGroupBy.java۞279۩public void testMaxUniqueidentifier() throws Exception{
smallsql/junit/TestGroupBy.java۞280۩init();
smallsql/junit/TestGroupBy.java۞281۩String sql = "Select max(convert(uniqueidentifier, '12345678-3445-3445-3445-1234567890ab')) FROM " + table1;
smallsql/junit/TestGroupBy.java۞282۩assertEqualsRsValue( "12345678-3445-3445-3445-1234567890AB", sql);
smallsql/junit/TestGroupBy.java۞283۩}
smallsql/junit/TestGroupBy.java۞285۩public void testMaxOfNull() throws Exception{
smallsql/junit/TestGroupBy.java۞286۩init();
smallsql/junit/TestGroupBy.java۞287۩assertEqualsRsValue( null, "Select max(id) FROM " + table1 + " Where id is null");
smallsql/junit/TestGroupBy.java۞288۩}
smallsql/junit/TestGroupBy.java۞290۩public void testMin() throws Exception{
smallsql/junit/TestGroupBy.java۞291۩init();
smallsql/junit/TestGroupBy.java۞292۩assertEqualsRsValue( new Integer(1), "Select min(id) FROM " + table1);
smallsql/junit/TestGroupBy.java۞293۩}
smallsql/junit/TestGroupBy.java۞295۩public void testMinString() throws Exception{
smallsql/junit/TestGroupBy.java۞296۩init();
smallsql/junit/TestGroupBy.java۞297۩assertEqualsRsValue( STR_VALUE1, "Select min(name) FROM " + table1);
smallsql/junit/TestGroupBy.java۞298۩}
smallsql/junit/TestGroupBy.java۞300۩public void testMinOfNull() throws Exception{
smallsql/junit/TestGroupBy.java۞301۩init();
smallsql/junit/TestGroupBy.java۞302۩assertEqualsRsValue( null, "Select min(id) FROM " + table1 + " Where id is null");
smallsql/junit/TestGroupBy.java۞303۩}
smallsql/junit/TestGroupBy.java۞305۩public void testFirst1() throws Exception{
smallsql/junit/TestGroupBy.java۞306۩init();
smallsql/junit/TestGroupBy.java۞307۩assertEqualsRsValue( new Integer(1), "Select first(id) FROM " + table1);
smallsql/junit/TestGroupBy.java۞308۩}
smallsql/junit/TestGroupBy.java۞310۩public void testFirst2() throws Exception{
smallsql/junit/TestGroupBy.java۞311۩init();
smallsql/junit/TestGroupBy.java۞312۩assertEqualsRsValue( "name1", "Select first(name) FROM " + table1);
smallsql/junit/TestGroupBy.java۞313۩}
smallsql/junit/TestGroupBy.java۞315۩public void testLast1() throws Exception{
smallsql/junit/TestGroupBy.java۞316۩init();
smallsql/junit/TestGroupBy.java۞317۩assertEqualsRsValue( new Integer(1), "Select last(id) FROM " + table1);
smallsql/junit/TestGroupBy.java۞318۩}
smallsql/junit/TestGroupBy.java۞320۩public void testLast2() throws Exception{
smallsql/junit/TestGroupBy.java۞321۩init();
smallsql/junit/TestGroupBy.java۞322۩assertEqualsRsValue( "name2", "Select last(name) FROM " + table1);
smallsql/junit/TestGroupBy.java۞323۩}
smallsql/junit/TestGroupBy.java۞326۩public void testAvg() throws Exception{
smallsql/junit/TestGroupBy.java۞327۩init();
smallsql/junit/TestGroupBy.java۞328۩assertEqualsRsValue( new Integer(1), "Select avg(id) FROM " + table1);
smallsql/junit/TestGroupBy.java۞329۩}
smallsql/junit/TestGroupBy.java۞332۩public void testGroupBy() throws Exception{
smallsql/junit/TestGroupBy.java۞333۩init();
smallsql/junit/TestGroupBy.java۞334۩Connection con = AllTests.getConnection();
smallsql/junit/TestGroupBy.java۞335۩Statement st = con.createStatement();
smallsql/junit/TestGroupBy.java۞336۩ResultSet rs;
smallsql/junit/TestGroupBy.java۞337۩rs = st.executeQuery("Select name FROM " + table1 + " Group By name");
smallsql/junit/TestGroupBy.java۞338۩assertTrue(rs.next());
smallsql/junit/TestGroupBy.java۞339۩assertEquals( STR_VALUE1, rs.getObject(1) );
smallsql/junit/TestGroupBy.java۞340۩assertTrue(rs.next());
smallsql/junit/TestGroupBy.java۞341۩assertEquals( STR_VALUE2, rs.getObject(1) );
smallsql/junit/TestGroupBy.java۞343۩}
smallsql/junit/TestGroupBy.java۞350۩public void testViewWidthGroupBy() throws Exception{
smallsql/junit/TestGroupBy.java۞351۩init();
smallsql/junit/TestGroupBy.java۞352۩Connection con = AllTests.getConnection();
smallsql/junit/TestGroupBy.java۞353۩Statement st = con.createStatement();
smallsql/junit/TestGroupBy.java۞354۩try{
smallsql/junit/TestGroupBy.java۞355۩ResultSet rs;
smallsql/junit/TestGroupBy.java۞356۩st.execute("Create View qry" + table1 + " as Select name, name as name2, count(*) as count FROM " + table1 + " Group By name");
smallsql/junit/TestGroupBy.java۞357۩rs = st.executeQuery("Select * from qry" + table1);
smallsql/junit/TestGroupBy.java۞358۩assertEquals( "name",  rs.getMetaData().getColumnLabel(1) );
smallsql/junit/TestGroupBy.java۞359۩assertEquals( "name2", rs.getMetaData().getColumnLabel(2) );
smallsql/junit/TestGroupBy.java۞360۩assertEquals( "count", rs.getMetaData().getColumnLabel(3) );
smallsql/junit/TestGroupBy.java۞361۩}finally{
smallsql/junit/TestGroupBy.java۞362۩st.execute("Drop View qry" + table1);
smallsql/junit/TestGroupBy.java۞363۩}
smallsql/junit/TestGroupBy.java۞364۩}
smallsql/junit/TestGroupBy.java۞367۩public void testCountNoRow() throws Exception{
smallsql/junit/TestGroupBy.java۞368۩init();
smallsql/junit/TestGroupBy.java۞371۩Connection con = AllTests.getConnection();
smallsql/junit/TestGroupBy.java۞372۩Statement st = con.createStatement();
smallsql/junit/TestGroupBy.java۞373۩st.execute("Delete FROM " + table1);
smallsql/junit/TestGroupBy.java۞374۩init = false;
smallsql/junit/TestGroupBy.java۞375۩assertEqualsRsValue( new Integer(0), "Select count(*) FROM " + table1);
smallsql/junit/TestGroupBy.java۞376۩}
smallsql/junit/TestGroupBy.java۞378۩}
smallsql/junit/TestIdentifer.java۞33۩package smallsql.junit;
smallsql/junit/TestIdentifer.java۞35۩import java.sql.*;
smallsql/junit/TestIdentifer.java۞41۩public class TestIdentifer extends BasicTestCase {
smallsql/junit/TestIdentifer.java۞43۩public TestIdentifer(){
smallsql/junit/TestIdentifer.java۞44۩super();
smallsql/junit/TestIdentifer.java۞45۩}
smallsql/junit/TestIdentifer.java۞48۩public TestIdentifer(String arg0) {
smallsql/junit/TestIdentifer.java۞49۩super(arg0);
smallsql/junit/TestIdentifer.java۞50۩}
smallsql/junit/TestIdentifer.java۞53۩public void testQuoteIdentifer() throws Exception{
smallsql/junit/TestIdentifer.java۞54۩Connection con = AllTests.getConnection();
smallsql/junit/TestIdentifer.java۞55۩dropTable(con,"QuoteIdentifer");
smallsql/junit/TestIdentifer.java۞56۩con.createStatement().execute("create table \"QuoteIdentifer\"(\"a\" int default 5)");
smallsql/junit/TestIdentifer.java۞57۩ResultSet rs = con.createStatement().executeQuery("SELECT tbl.* from \"QuoteIdentifer\" tbl");
smallsql/junit/TestIdentifer.java۞58۩assertEquals( "a", rs.getMetaData().getColumnName(1));
smallsql/junit/TestIdentifer.java۞59۩assertEquals( "QuoteIdentifer", rs.getMetaData().getTableName(1));
smallsql/junit/TestIdentifer.java۞60۩while(rs.next()){
smallsql/junit/TestIdentifer.java۞62۩}
smallsql/junit/TestIdentifer.java۞63۩dropTable(con,"QuoteIdentifer");
smallsql/junit/TestIdentifer.java۞64۩}
smallsql/junit/TestIdentifer.java۞65۩}
smallsql/junit/TestJoins.java۞33۩package smallsql.junit;
smallsql/junit/TestJoins.java۞35۩import junit.framework.*;
smallsql/junit/TestJoins.java۞37۩import java.math.BigDecimal;
smallsql/junit/TestJoins.java۞38۩import java.sql.*;
smallsql/junit/TestJoins.java۞40۩public class TestJoins extends BasicTestCase {
smallsql/junit/TestJoins.java۞42۩private TestValue testValue;
smallsql/junit/TestJoins.java۞44۩private static final String table = "table_joins";
smallsql/junit/TestJoins.java۞45۩private static final String table2= "table_joins2";
smallsql/junit/TestJoins.java۞46۩private static final String table3= "table_joins3";
smallsql/junit/TestJoins.java۞48۩private static final TestValue[] TESTS = new TestValue[]{
smallsql/junit/TestJoins.java۞49۩a("tinyint"           , new Byte( (byte)3),     new Byte( (byte)4)),
smallsql/junit/TestJoins.java۞50۩a("byte"              , new Byte( (byte)3),     new Byte( (byte)4)),
smallsql/junit/TestJoins.java۞51۩a("smallint"          , new Short( (short)3),   new Short( (short)4)),
smallsql/junit/TestJoins.java۞52۩a("int"               , new Integer(3),         new Integer(4)),
smallsql/junit/TestJoins.java۞53۩a("bigint"            , new Long(3),            new Long(4)),
smallsql/junit/TestJoins.java۞54۩a("real"              , new Float(3.45),        new Float(4.56)),
smallsql/junit/TestJoins.java۞55۩a("float"             , new Float(3.45),        new Float(4.56)),
smallsql/junit/TestJoins.java۞56۩a("double"            , new Double(3.45),       new Double(4.56)),
smallsql/junit/TestJoins.java۞57۩a("smallmoney"        , new Float(3.45),        new Float(4.56)),
smallsql/junit/TestJoins.java۞58۩a("money"             , new Float(3.45),        new Float(4.56)),
smallsql/junit/TestJoins.java۞59۩a("money"             , new Double(3.45),       new Double(4.56)),
smallsql/junit/TestJoins.java۞60۩a("numeric(19,2)"     , new BigDecimal("3.45"), new BigDecimal("4.56")),
smallsql/junit/TestJoins.java۞61۩a("decimal(19,2)"     , new BigDecimal("3.45"), new BigDecimal("4.56")),
smallsql/junit/TestJoins.java۞62۩a("varnum(28,2)"      , new BigDecimal(3.45),   new BigDecimal(4.56)),
smallsql/junit/TestJoins.java۞63۩a("number(28,2)"      , new BigDecimal(3.45),   new BigDecimal(4.56)),
smallsql/junit/TestJoins.java۞64۩a("varchar(100)"      , new String("abc"),      new String("qwert")),
smallsql/junit/TestJoins.java۞65۩a("nvarchar(100)"     , new String("abc"),      new String("qwert")),
smallsql/junit/TestJoins.java۞66۩a("varchar2(100)"     , new String("abc"),      new String("qwert")),
smallsql/junit/TestJoins.java۞67۩a("nvarchar2(100)"    , new String("abc"),      new String("qwert")),
smallsql/junit/TestJoins.java۞68۩a("character(100)"    , new String("abc"),      new String("qwert")),
smallsql/junit/TestJoins.java۞69۩a("char(100)"         , new String("abc"),      new String("qwert")),
smallsql/junit/TestJoins.java۞70۩a("nchar(100)"        , new String("abc"),      new String("qwert")),
smallsql/junit/TestJoins.java۞71۩a("text"              , new String("abc"),      new String("qwert")),
smallsql/junit/TestJoins.java۞72۩a("ntext"             , new String("abc"),      new String("qwert")),
smallsql/junit/TestJoins.java۞73۩a("date"              , new Date(99, 1,1),      new Date(99, 2,2)),
smallsql/junit/TestJoins.java۞74۩a("time"              , new Time(9, 1,1),       new Time(9, 2,2)),
smallsql/junit/TestJoins.java۞75۩a("timestamp"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),
smallsql/junit/TestJoins.java۞76۩a("datetime"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),
smallsql/junit/TestJoins.java۞77۩a("smalldatetime"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),
smallsql/junit/TestJoins.java۞78۩a("binary(100)"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestJoins.java۞79۩a("varbinary(100)"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestJoins.java۞80۩a("raw(100)"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestJoins.java۞81۩a("long raw"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestJoins.java۞82۩a("longvarbinary"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestJoins.java۞83۩a("blob"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestJoins.java۞84۩a("image"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestJoins.java۞85۩a("boolean"           , Boolean.FALSE,          Boolean.TRUE),
smallsql/junit/TestJoins.java۞86۩a("bit"               , Boolean.FALSE,          Boolean.TRUE),
smallsql/junit/TestJoins.java۞87۩a("uniqueidentifier"  , "12345678-3445-3445-3445-1234567890ab",      "12345679-3445-3445-3445-1234567890ab"),
smallsql/junit/TestJoins.java۞88۩};
smallsql/junit/TestJoins.java۞91۩TestJoins(TestValue testValue){
smallsql/junit/TestJoins.java۞92۩super(testValue.dataType);
smallsql/junit/TestJoins.java۞93۩this.testValue = testValue;
smallsql/junit/TestJoins.java۞94۩}
smallsql/junit/TestJoins.java۞97۩private void clear() throws SQLException{
smallsql/junit/TestJoins.java۞98۩Connection con = AllTests.getConnection();
smallsql/junit/TestJoins.java۞99۩dropTable( con, table );
smallsql/junit/TestJoins.java۞100۩dropTable( con, table2 );
smallsql/junit/TestJoins.java۞101۩dropTable( con, table3 );
smallsql/junit/TestJoins.java۞102۩}
smallsql/junit/TestJoins.java۞105۩public void tearDown() throws SQLException{
smallsql/junit/TestJoins.java۞106۩clear();
smallsql/junit/TestJoins.java۞107۩}
smallsql/junit/TestJoins.java۞109۩public void setUp() throws Exception{
smallsql/junit/TestJoins.java۞110۩clear();
smallsql/junit/TestJoins.java۞111۩Connection con = AllTests.getConnection();
smallsql/junit/TestJoins.java۞112۩Statement st = con.createStatement();
smallsql/junit/TestJoins.java۞113۩st.execute("create table " + table + "(a " + testValue.dataType +" PRIMARY KEY, b " + testValue.dataType + ")");
smallsql/junit/TestJoins.java۞114۩st.execute("create table " + table2+ "(c " + testValue.dataType +" PRIMARY KEY, d " + testValue.dataType + ")");
smallsql/junit/TestJoins.java۞115۩st.execute("create table " + table3+ "(c " + testValue.dataType +" PRIMARY KEY, d " + testValue.dataType + ")");
smallsql/junit/TestJoins.java۞116۩st.close();
smallsql/junit/TestJoins.java۞117۩con.close();
smallsql/junit/TestJoins.java۞118۩con = AllTests.getConnection();
smallsql/junit/TestJoins.java۞119۩PreparedStatement pr = con.prepareStatement("INSERT into " + table + "(a,b) Values(?,?)");
smallsql/junit/TestJoins.java۞120۩insertValues( pr );
smallsql/junit/TestJoins.java۞121۩pr.close();
smallsql/junit/TestJoins.java۞123۩pr = con.prepareStatement("INSERT into " + table2 + " Values(?,?)");
smallsql/junit/TestJoins.java۞124۩insertValues( pr );
smallsql/junit/TestJoins.java۞125۩pr.close();
smallsql/junit/TestJoins.java۞126۩}
smallsql/junit/TestJoins.java۞128۩private void insertValues(PreparedStatement pr ) throws Exception{
smallsql/junit/TestJoins.java۞129۩pr.setObject( 1, testValue.small);
smallsql/junit/TestJoins.java۞130۩pr.setObject( 2, testValue.large);
smallsql/junit/TestJoins.java۞131۩pr.execute();
smallsql/junit/TestJoins.java۞133۩pr.setObject( 1, testValue.small);
smallsql/junit/TestJoins.java۞134۩pr.setObject( 2, testValue.small);
smallsql/junit/TestJoins.java۞135۩pr.execute();
smallsql/junit/TestJoins.java۞137۩pr.setObject( 1, testValue.large);
smallsql/junit/TestJoins.java۞138۩pr.setObject( 2, testValue.large);
smallsql/junit/TestJoins.java۞139۩pr.execute();
smallsql/junit/TestJoins.java۞141۩pr.setObject( 1, testValue.large);
smallsql/junit/TestJoins.java۞142۩pr.setObject( 2, testValue.small);
smallsql/junit/TestJoins.java۞143۩pr.execute();
smallsql/junit/TestJoins.java۞145۩pr.setObject( 1, null);
smallsql/junit/TestJoins.java۞146۩pr.setObject( 2, testValue.small);
smallsql/junit/TestJoins.java۞147۩pr.execute();
smallsql/junit/TestJoins.java۞149۩pr.setObject( 1, testValue.small);
smallsql/junit/TestJoins.java۞150۩pr.setObject( 2, null);
smallsql/junit/TestJoins.java۞151۩pr.execute();
smallsql/junit/TestJoins.java۞153۩pr.setObject( 1, null);
smallsql/junit/TestJoins.java۞154۩pr.setObject( 2, null);
smallsql/junit/TestJoins.java۞155۩pr.execute();
smallsql/junit/TestJoins.java۞156۩}
smallsql/junit/TestJoins.java۞158۩public void runTest() throws Exception{
smallsql/junit/TestJoins.java۞159۩Connection con = AllTests.getConnection();
smallsql/junit/TestJoins.java۞160۩Statement st = con.createStatement();
smallsql/junit/TestJoins.java۞161۩ResultSet rs;
smallsql/junit/TestJoins.java۞163۩rs = st.executeQuery("Select * from " + table + " where 1 = 0");
smallsql/junit/TestJoins.java۞164۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestJoins.java۞166۩assertRowCount( 7, "Select * from " + table);
smallsql/junit/TestJoins.java۞167۩assertRowCount( 49, "Select * from " + table + " t1, " + table2 + " t2");
smallsql/junit/TestJoins.java۞168۩assertRowCount( 0, "Select * from " + table + ", " + table3);
smallsql/junit/TestJoins.java۞169۩assertRowCount( 49, "Select * from ("+ table +"), " + table2);
smallsql/junit/TestJoins.java۞170۩assertRowCount( 49, "Select * from " + table + " Cross Join " + table2);
smallsql/junit/TestJoins.java۞171۩assertRowCount( 13, "Select * from " + table + " INNER JOIN " + table2 + " ON " + table + ".a = " + table2 + ".c");
smallsql/junit/TestJoins.java۞172۩assertRowCount( 13, "Select * from " + table + "       JOIN " + table2 + " ON " + table2 + ".c = " + table + ".a");
smallsql/junit/TestJoins.java۞173۩assertRowCount( 13, "Select * from {oj " + table + " INNER JOIN " + table2 + " ON " + table + ".a = " + table2 + ".c}");
smallsql/junit/TestJoins.java۞174۩assertRowCount( 13, "Select * from " + table + " AS t1 INNER JOIN " + table2 + " t2 ON t1.a = t2.c");
smallsql/junit/TestJoins.java۞175۩assertRowCount( 13, "Select * from {oj " + table + " t1 INNER JOIN " + table2 + " t2 ON t1.a = t2.c}");
smallsql/junit/TestJoins.java۞176۩assertRowCount( 4, "Select * from " + table + " t1 INNER JOIN " + table2 + " t2 ON t1.a = t2.c and t1.b=t2.d");
smallsql/junit/TestJoins.java۞177۩assertRowCount( 4, "Select * from " + table + " t1       JOIN " + table2 + " t2 ON t1.a = t2.c and t2.d=t1.b");
smallsql/junit/TestJoins.java۞178۩assertRowCount( 7, "Select * from " + table + " t1 LEFT OUTER JOIN " + table2 + " t2 ON t1.a = t2.c and t1.b=t2.d");
smallsql/junit/TestJoins.java۞179۩assertRowCount( 7, "Select * from " + table + " t1 LEFT       JOIN " + table2 + " t2 ON t1.a = t2.c and t1.b=t2.d");
smallsql/junit/TestJoins.java۞180۩assertRowCount( 15, "Select * from " + table + " t1 LEFT OUTER JOIN " + table2 + " t2 ON t1.a = t2.c");
smallsql/junit/TestJoins.java۞181۩assertRowCount( 7, "Select * from " + table + " t1 LEFT OUTER JOIN " + table3 + " t2 ON t1.a = t2.c");
smallsql/junit/TestJoins.java۞182۩assertRowCount( 7, "Select * from " + table + " t1 RIGHT OUTER JOIN " + table2 + " t2 ON t1.a = t2.c and t1.b=t2.d");
smallsql/junit/TestJoins.java۞183۩assertRowCount( 7, "Select * from " + table + " t1 RIGHT OUTER JOIN " + table2 + " t2 ON false");
smallsql/junit/TestJoins.java۞184۩assertRowCount( 15, "Select * from " + table + " t1 RIGHT OUTER JOIN " + table2 + " t2 ON t1.a = t2.c");
smallsql/junit/TestJoins.java۞185۩assertRowCount( 0, "Select * from " + table + " t1 RIGHT OUTER JOIN " + table3 + " t2 ON t1.a = t2.c");
smallsql/junit/TestJoins.java۞186۩assertRowCount( 14, "Select * from " + table + " t1 FULL OUTER JOIN " + table2 + " t2 ON 1=0");
smallsql/junit/TestJoins.java۞187۩assertRowCount( 17, "Select * from " + table + " t1 FULL OUTER JOIN " + table2 + " t2 ON t1.a = t2.c");
smallsql/junit/TestJoins.java۞188۩assertRowCount( 7, "Select * from " + table + " t1 FULL OUTER JOIN " + table3 + " t2 ON t1.a = t2.c");
smallsql/junit/TestJoins.java۞189۩assertRowCount( 7, "Select * from " + table3 + " t1 FULL OUTER JOIN " + table + " t2 ON t1.c = t2.a");
smallsql/junit/TestJoins.java۞190۩assertRowCount( 5, "Select * from " + table + " INNER JOIN (SELECT DISTINCT c FROM " + table2 + ") t1 ON " + table + ".a = t1.c");
smallsql/junit/TestJoins.java۞192۩st.close();
smallsql/junit/TestJoins.java۞193۩}
smallsql/junit/TestJoins.java۞195۩public static Test suite() throws Exception{
smallsql/junit/TestJoins.java۞196۩TestSuite theSuite = new TestSuite("Joins");
smallsql/junit/TestJoins.java۞197۩for(int i=0; i<TESTS.length; i++){
smallsql/junit/TestJoins.java۞198۩theSuite.addTest(new TestJoins( TESTS[i] ) );
smallsql/junit/TestJoins.java۞199۩}
smallsql/junit/TestJoins.java۞200۩return theSuite;
smallsql/junit/TestJoins.java۞201۩}
smallsql/junit/TestJoins.java۞204۩private static TestValue a(String dataType, Object small, Object large){
smallsql/junit/TestJoins.java۞205۩TestValue value = new TestValue();
smallsql/junit/TestJoins.java۞206۩value.dataType  = dataType;
smallsql/junit/TestJoins.java۞207۩value.small     = small;
smallsql/junit/TestJoins.java۞208۩value.large     = large;
smallsql/junit/TestJoins.java۞209۩return value;
smallsql/junit/TestJoins.java۞210۩}
smallsql/junit/TestJoins.java۞212۩private static class TestValue{
smallsql/junit/TestJoins.java۞213۩String dataType;
smallsql/junit/TestJoins.java۞214۩Object small;
smallsql/junit/TestJoins.java۞215۩Object large;
smallsql/junit/TestJoins.java۞216۩}
smallsql/junit/TestJoins.java۞218۩}
smallsql/junit/TestLanguage.java۞33۩package smallsql.junit;
smallsql/junit/TestLanguage.java۞35۩import java.sql.Connection;
smallsql/junit/TestLanguage.java۞36۩import java.sql.SQLException;
smallsql/junit/TestLanguage.java۞37۩import java.sql.Statement;
smallsql/junit/TestLanguage.java۞38۩import java.util.HashSet;
smallsql/junit/TestLanguage.java۞39۩import java.util.Iterator;
smallsql/junit/TestLanguage.java۞40۩import java.util.Locale;
smallsql/junit/TestLanguage.java۞41۩import java.util.Set;
smallsql/junit/TestLanguage.java۞43۩import smallsql.database.language.Language;
smallsql/junit/TestLanguage.java۞51۩public class TestLanguage extends BasicTestCase {
smallsql/junit/TestLanguage.java۞52۩private static final String TABLE_NAME = "test_lang";
smallsql/junit/TestLanguage.java۞54۩private static final String[] OTHER_LANGUAGES = { "it", "de" };
smallsql/junit/TestLanguage.java۞56۩public void setUp() throws SQLException {
smallsql/junit/TestLanguage.java۞57۩tearDown();
smallsql/junit/TestLanguage.java۞58۩}
smallsql/junit/TestLanguage.java۞60۩public void tearDown() throws SQLException {
smallsql/junit/TestLanguage.java۞62۩Connection conn = AllTests.createConnection("?locale=en", null);
smallsql/junit/TestLanguage.java۞64۩try {
smallsql/junit/TestLanguage.java۞65۩conn.prepareStatement("DROP TABLE " + TABLE_NAME).execute();
smallsql/junit/TestLanguage.java۞66۩}
smallsql/junit/TestLanguage.java۞67۩catch (Exception e) {}
smallsql/junit/TestLanguage.java۞68۩finally {
smallsql/junit/TestLanguage.java۞69۩conn.close();
smallsql/junit/TestLanguage.java۞70۩}
smallsql/junit/TestLanguage.java۞71۩}
smallsql/junit/TestLanguage.java۞77۩public void testBogusLocale() throws SQLException {
smallsql/junit/TestLanguage.java۞78۩Locale origLocale = Locale.getDefault();
smallsql/junit/TestLanguage.java۞79۩Locale.setDefault(Locale.ITALY);
smallsql/junit/TestLanguage.java۞81۩Connection conn = AllTests.createConnection("?locale=XXX", null);
smallsql/junit/TestLanguage.java۞82۩Statement stat = conn.createStatement();
smallsql/junit/TestLanguage.java۞84۩try {
smallsql/junit/TestLanguage.java۞85۩recreateTestTab(stat);
smallsql/junit/TestLanguage.java۞87۩stat.execute("CREATE TABLE " + TABLE_NAME + " (id_test INT)");
smallsql/junit/TestLanguage.java۞88۩fail();
smallsql/junit/TestLanguage.java۞89۩}
smallsql/junit/TestLanguage.java۞90۩catch (SQLException e) {
smallsql/junit/TestLanguage.java۞91۩assertMessage(e, "La tabella/vista '" + TABLE_NAME + "' è già esistente.");
smallsql/junit/TestLanguage.java۞92۩}
smallsql/junit/TestLanguage.java۞93۩finally {
smallsql/junit/TestLanguage.java۞94۩Locale.setDefault(origLocale);
smallsql/junit/TestLanguage.java۞95۩conn.close();
smallsql/junit/TestLanguage.java۞96۩}
smallsql/junit/TestLanguage.java۞97۩}
smallsql/junit/TestLanguage.java۞99۩public void testLocalizedErrors() throws Exception {
smallsql/junit/TestLanguage.java۞100۩Connection conn = AllTests.createConnection("?locale=it", null);
smallsql/junit/TestLanguage.java۞101۩Statement stat = conn.createStatement();
smallsql/junit/TestLanguage.java۞103۩try {
smallsql/junit/TestLanguage.java۞104۩try {
smallsql/junit/TestLanguage.java۞105۩recreateTestTab(stat);
smallsql/junit/TestLanguage.java۞107۩stat.execute("CREATE TABLE " + TABLE_NAME + " (id_test INT)");
smallsql/junit/TestLanguage.java۞108۩fail();
smallsql/junit/TestLanguage.java۞109۩}
smallsql/junit/TestLanguage.java۞110۩catch(SQLException e) {
smallsql/junit/TestLanguage.java۞111۩assertMessage(e, "La tabella/vista '" + TABLE_NAME + "' è già esistente.");
smallsql/junit/TestLanguage.java۞112۩}
smallsql/junit/TestLanguage.java۞114۩try {
smallsql/junit/TestLanguage.java۞115۩stat.execute("DROP TABLE " + TABLE_NAME);
smallsql/junit/TestLanguage.java۞116۩stat.execute("DROP TABLE " + TABLE_NAME);
smallsql/junit/TestLanguage.java۞117۩}
smallsql/junit/TestLanguage.java۞118۩catch (SQLException e) {
smallsql/junit/TestLanguage.java۞119۩assertMessage(e, "Non si può effettuare DROP della tabella");
smallsql/junit/TestLanguage.java۞120۩}
smallsql/junit/TestLanguage.java۞122۩try {
smallsql/junit/TestLanguage.java۞123۩stat.execute("CREATE TABLE foo");
smallsql/junit/TestLanguage.java۞124۩}
smallsql/junit/TestLanguage.java۞125۩catch (SQLException e) {
smallsql/junit/TestLanguage.java۞126۩assertMessage(e, "Errore di sintassi, fine inattesa");
smallsql/junit/TestLanguage.java۞127۩}
smallsql/junit/TestLanguage.java۞128۩}
smallsql/junit/TestLanguage.java۞129۩finally {
smallsql/junit/TestLanguage.java۞130۩conn.close();
smallsql/junit/TestLanguage.java۞131۩}
smallsql/junit/TestLanguage.java۞132۩}
smallsql/junit/TestLanguage.java۞134۩public void testSyntaxErrors() throws SQLException {
smallsql/junit/TestLanguage.java۞135۩Connection conn = AllTests.createConnection("?locale=it", null);
smallsql/junit/TestLanguage.java۞136۩Statement stat = conn.createStatement();
smallsql/junit/TestLanguage.java۞138۩try {
smallsql/junit/TestLanguage.java۞139۩try {
smallsql/junit/TestLanguage.java۞140۩stat.execute("CREATE TABLE");
smallsql/junit/TestLanguage.java۞141۩}
smallsql/junit/TestLanguage.java۞142۩catch (SQLException se) {
smallsql/junit/TestLanguage.java۞143۩assertMessage(se, "Errore di sintassi, fine inattesa della stringa SQL. Le parole chiave richieste sono: <identifier>");
smallsql/junit/TestLanguage.java۞144۩}
smallsql/junit/TestLanguage.java۞146۩try {
smallsql/junit/TestLanguage.java۞147۩stat.execute("Some nonsensical sentence.");
smallsql/junit/TestLanguage.java۞148۩}
smallsql/junit/TestLanguage.java۞149۩catch (SQLException se) {
smallsql/junit/TestLanguage.java۞150۩assertMessage(se, "Errore di sintassi alla posizione 0 in 'Some'. Le parole chiave richieste sono");
smallsql/junit/TestLanguage.java۞151۩}
smallsql/junit/TestLanguage.java۞153۩recreateTestTab(stat);
smallsql/junit/TestLanguage.java۞155۩try {
smallsql/junit/TestLanguage.java۞156۩stat.execute("SELECT bar() FROM foo");
smallsql/junit/TestLanguage.java۞157۩}
smallsql/junit/TestLanguage.java۞158۩catch (SQLException se) {
smallsql/junit/TestLanguage.java۞159۩assertMessage(se, "Errore di sintassi alla posizione 7 in 'bar'. Funzione sconosciuta");
smallsql/junit/TestLanguage.java۞160۩}
smallsql/junit/TestLanguage.java۞162۩try {
smallsql/junit/TestLanguage.java۞163۩stat.execute("SELECT UCASE('a', '');");
smallsql/junit/TestLanguage.java۞164۩}
smallsql/junit/TestLanguage.java۞165۩catch (SQLException se) {
smallsql/junit/TestLanguage.java۞166۩assertMessage(se, "Errore di sintassi alla posizione 7 in 'UCASE'. Totale parametri non valido.");
smallsql/junit/TestLanguage.java۞167۩}
smallsql/junit/TestLanguage.java۞168۩}
smallsql/junit/TestLanguage.java۞169۩finally {
smallsql/junit/TestLanguage.java۞170۩conn.close();
smallsql/junit/TestLanguage.java۞171۩}
smallsql/junit/TestLanguage.java۞172۩}
smallsql/junit/TestLanguage.java۞178۩private void assertMessage(SQLException e, String expectedText) {
smallsql/junit/TestLanguage.java۞179۩assertMessage(e, new String[] { expectedText });
smallsql/junit/TestLanguage.java۞180۩}
smallsql/junit/TestLanguage.java۞186۩private void assertMessage(SQLException e, String[] expectedTexts) {
smallsql/junit/TestLanguage.java۞187۩String message = e.getMessage();
smallsql/junit/TestLanguage.java۞188۩boolean found = true;
smallsql/junit/TestLanguage.java۞190۩for (int i = 0; found && i < expectedTexts.length; i++) {
smallsql/junit/TestLanguage.java۞191۩found = found && message.indexOf(expectedTexts[i]) >= 0;
smallsql/junit/TestLanguage.java۞192۩}
smallsql/junit/TestLanguage.java۞194۩if (! found) {
smallsql/junit/TestLanguage.java۞195۩System.err.println("ERROR [Wrong message]:" + message);
smallsql/junit/TestLanguage.java۞196۩fail();
smallsql/junit/TestLanguage.java۞197۩}
smallsql/junit/TestLanguage.java۞198۩}
smallsql/junit/TestLanguage.java۞200۩private void recreateTestTab(Statement stat) throws SQLException {
smallsql/junit/TestLanguage.java۞201۩stat.execute("CREATE TABLE " + TABLE_NAME + " (id_test INT)");
smallsql/junit/TestLanguage.java۞203۩}
smallsql/junit/TestLanguage.java۞211۩public void testEntries() throws Exception {
smallsql/junit/TestLanguage.java۞212۩boolean failed = false;
smallsql/junit/TestLanguage.java۞213۩StringBuffer msgBuf = new StringBuffer();
smallsql/junit/TestLanguage.java۞214۩Language eng = Language.getLanguage("en");
smallsql/junit/TestLanguage.java۞216۩HashSet engEntriesSet = new HashSet();
smallsql/junit/TestLanguage.java۞217۩String[][] engEntriesArr = eng.getEntries();
smallsql/junit/TestLanguage.java۞219۩for (int j = 1; j < engEntriesArr.length; j++) {
smallsql/junit/TestLanguage.java۞220۩engEntriesSet.add(engEntriesArr[j][0]);
smallsql/junit/TestLanguage.java۞221۩}
smallsql/junit/TestLanguage.java۞223۩for (int i = 0; i < OTHER_LANGUAGES.length; i++) {
smallsql/junit/TestLanguage.java۞224۩String localeStr = OTHER_LANGUAGES[i];
smallsql/junit/TestLanguage.java۞225۩Language lang2 = Language.getLanguage(localeStr);
smallsql/junit/TestLanguage.java۞227۩HashSet otherEntriesSet = new HashSet();
smallsql/junit/TestLanguage.java۞228۩String[][] otherEntriesArr = lang2.getEntries();
smallsql/junit/TestLanguage.java۞229۩for (int j = 0; j < otherEntriesArr.length; j++) {
smallsql/junit/TestLanguage.java۞230۩otherEntriesSet.add(otherEntriesArr[j][0]);
smallsql/junit/TestLanguage.java۞231۩}
smallsql/junit/TestLanguage.java۞234۩Set diff = (Set)engEntriesSet.clone();
smallsql/junit/TestLanguage.java۞235۩diff.removeAll(otherEntriesSet);
smallsql/junit/TestLanguage.java۞237۩if (diff.size() > 0) {
smallsql/junit/TestLanguage.java۞238۩failed = true;
smallsql/junit/TestLanguage.java۞239۩msgBuf.append("\nMissing entries for language ").append( OTHER_LANGUAGES[i] ).append(": ");
smallsql/junit/TestLanguage.java۞241۩for (Iterator itr = diff.iterator(); itr.hasNext(); ) {
smallsql/junit/TestLanguage.java۞242۩msgBuf.append(itr.next());
smallsql/junit/TestLanguage.java۞243۩if (itr.hasNext()) msgBuf.append(',');
smallsql/junit/TestLanguage.java۞244۩}
smallsql/junit/TestLanguage.java۞245۩}
smallsql/junit/TestLanguage.java۞248۩diff = (Set)otherEntriesSet.clone();
smallsql/junit/TestLanguage.java۞249۩diff.removeAll(engEntriesSet);
smallsql/junit/TestLanguage.java۞251۩if (diff.size() > 0) {
smallsql/junit/TestLanguage.java۞252۩failed = true;
smallsql/junit/TestLanguage.java۞253۩msgBuf.append("\nAdditional entries for language ").append( OTHER_LANGUAGES[i] ).append(": ");
smallsql/junit/TestLanguage.java۞255۩for (Iterator itr = diff.iterator(); itr.hasNext(); ) {
smallsql/junit/TestLanguage.java۞256۩msgBuf.append(itr.next());
smallsql/junit/TestLanguage.java۞257۩if (itr.hasNext()) msgBuf.append(',');
smallsql/junit/TestLanguage.java۞258۩}
smallsql/junit/TestLanguage.java۞259۩}
smallsql/junit/TestLanguage.java۞262۩StringBuffer buf = new StringBuffer();
smallsql/junit/TestLanguage.java۞263۩for (int j = 1; j < engEntriesArr.length; j++) {
smallsql/junit/TestLanguage.java۞264۩String key = engEntriesArr[j][0];
smallsql/junit/TestLanguage.java۞265۩String engValue = eng.getMessage(key);
smallsql/junit/TestLanguage.java۞266۩String otherValue = lang2.getMessage(key);
smallsql/junit/TestLanguage.java۞267۩if(engValue.equals(otherValue)){
smallsql/junit/TestLanguage.java۞268۩failed = true;
smallsql/junit/TestLanguage.java۞269۩if(buf.length() > 0){
smallsql/junit/TestLanguage.java۞270۩buf.append(',');
smallsql/junit/TestLanguage.java۞271۩}
smallsql/junit/TestLanguage.java۞272۩buf.append(key);
smallsql/junit/TestLanguage.java۞273۩}
smallsql/junit/TestLanguage.java۞274۩}
smallsql/junit/TestLanguage.java۞275۩if(buf.length()>0){
smallsql/junit/TestLanguage.java۞276۩msgBuf.append("\nNot translated entries for language ").append( OTHER_LANGUAGES[i] ).append(": ");
smallsql/junit/TestLanguage.java۞277۩msgBuf.append(buf);
smallsql/junit/TestLanguage.java۞278۩}
smallsql/junit/TestLanguage.java۞279۩}
smallsql/junit/TestLanguage.java۞281۩if (failed){
smallsql/junit/TestLanguage.java۞282۩System.err.println(msgBuf);
smallsql/junit/TestLanguage.java۞283۩fail(msgBuf.toString());
smallsql/junit/TestLanguage.java۞284۩}
smallsql/junit/TestLanguage.java۞285۩}
smallsql/junit/TestLanguage.java۞286۩}
smallsql/junit/TestMoneyRounding.java۞33۩package smallsql.junit;
smallsql/junit/TestMoneyRounding.java۞35۩import junit.framework.*;
smallsql/junit/TestMoneyRounding.java۞37۩import java.math.BigDecimal;
smallsql/junit/TestMoneyRounding.java۞38۩import java.sql.*;
smallsql/junit/TestMoneyRounding.java۞40۩import smallsql.database.Money;
smallsql/junit/TestMoneyRounding.java۞42۩public class TestMoneyRounding extends TestCase{
smallsql/junit/TestMoneyRounding.java۞44۩static final String table = "TestMoneyRounding";
smallsql/junit/TestMoneyRounding.java۞46۩public void setUp() throws SQLException{
smallsql/junit/TestMoneyRounding.java۞47۩tearDown();
smallsql/junit/TestMoneyRounding.java۞48۩Connection con = AllTests.getConnection();
smallsql/junit/TestMoneyRounding.java۞49۩Statement st = con.createStatement();
smallsql/junit/TestMoneyRounding.java۞50۩st.execute("create table " + table + "(a money, b smallmoney)");
smallsql/junit/TestMoneyRounding.java۞51۩}
smallsql/junit/TestMoneyRounding.java۞53۩public void tearDown(){
smallsql/junit/TestMoneyRounding.java۞54۩try{
smallsql/junit/TestMoneyRounding.java۞55۩Connection con = AllTests.getConnection();
smallsql/junit/TestMoneyRounding.java۞56۩Statement st = con.createStatement();
smallsql/junit/TestMoneyRounding.java۞57۩st.execute("drop table " + table);
smallsql/junit/TestMoneyRounding.java۞58۩st.close();
smallsql/junit/TestMoneyRounding.java۞59۩}catch(Throwable e){
smallsql/junit/TestMoneyRounding.java۞61۩}
smallsql/junit/TestMoneyRounding.java۞62۩}
smallsql/junit/TestMoneyRounding.java۞64۩public void testMoney1() throws Exception{
smallsql/junit/TestMoneyRounding.java۞65۩Connection con = AllTests.getConnection();
smallsql/junit/TestMoneyRounding.java۞66۩Statement st = con.createStatement();
smallsql/junit/TestMoneyRounding.java۞67۩int firstValue = -10000;
smallsql/junit/TestMoneyRounding.java۞68۩for(int i=firstValue; i<10000; i++){
smallsql/junit/TestMoneyRounding.java۞69۩st.execute("Insert into " + table + "(a,b) values(" + (i/10000.0) + "," +(i/10000.0) +")");
smallsql/junit/TestMoneyRounding.java۞70۩}
smallsql/junit/TestMoneyRounding.java۞71۩st.close();
smallsql/junit/TestMoneyRounding.java۞72۩verify(firstValue);
smallsql/junit/TestMoneyRounding.java۞73۩}
smallsql/junit/TestMoneyRounding.java۞76۩private void verify(int firstValue) throws Exception{
smallsql/junit/TestMoneyRounding.java۞77۩Connection con = AllTests.getConnection();
smallsql/junit/TestMoneyRounding.java۞78۩Statement st = con.createStatement();
smallsql/junit/TestMoneyRounding.java۞79۩ResultSet rs = st.executeQuery("Select * FROM " + table);
smallsql/junit/TestMoneyRounding.java۞80۩long i = firstValue;
smallsql/junit/TestMoneyRounding.java۞81۩while(rs.next()){
smallsql/junit/TestMoneyRounding.java۞82۩Object obj1 = rs.getObject(1);
smallsql/junit/TestMoneyRounding.java۞83۩Object obj2 = rs.getObject(2);
smallsql/junit/TestMoneyRounding.java۞84۩if(obj1 instanceof Money){
smallsql/junit/TestMoneyRounding.java۞85۩Money mon1 = (Money)obj1;
smallsql/junit/TestMoneyRounding.java۞86۩Money mon2 = (Money)obj2;
smallsql/junit/TestMoneyRounding.java۞87۩assertEquals("Roundungsfehler money:", i, mon1.unscaledValue());
smallsql/junit/TestMoneyRounding.java۞88۩assertEquals("Roundungsfehler smallmoney:", i, mon2.unscaledValue());
smallsql/junit/TestMoneyRounding.java۞89۩}else{
smallsql/junit/TestMoneyRounding.java۞90۩BigDecimal mon1 = (BigDecimal)obj1;
smallsql/junit/TestMoneyRounding.java۞91۩BigDecimal mon2 = (BigDecimal)obj2;
smallsql/junit/TestMoneyRounding.java۞92۩assertEquals("Roundungsfehler money:", i, mon1.unscaledValue().longValue());
smallsql/junit/TestMoneyRounding.java۞93۩assertEquals("Roundungsfehler smallmoney:", i, mon2.unscaledValue().longValue());
smallsql/junit/TestMoneyRounding.java۞94۩}
smallsql/junit/TestMoneyRounding.java۞95۩i++;
smallsql/junit/TestMoneyRounding.java۞96۩}
smallsql/junit/TestMoneyRounding.java۞97۩st.close();
smallsql/junit/TestMoneyRounding.java۞98۩}
smallsql/junit/TestMoneyRounding.java۞101۩public void testMoney2() throws Exception{
smallsql/junit/TestMoneyRounding.java۞102۩Connection con = AllTests.getConnection();
smallsql/junit/TestMoneyRounding.java۞103۩Statement st = con.createStatement();
smallsql/junit/TestMoneyRounding.java۞104۩int firstValue = -10000;
smallsql/junit/TestMoneyRounding.java۞105۩for(int i=firstValue; i<10000; i++){
smallsql/junit/TestMoneyRounding.java۞106۩st.execute("Insert into " + table + "(a,b) values( (" + i + "/10000.0), (" + i + "/10000.0) )");
smallsql/junit/TestMoneyRounding.java۞107۩}
smallsql/junit/TestMoneyRounding.java۞108۩st.close();
smallsql/junit/TestMoneyRounding.java۞109۩verify(firstValue);
smallsql/junit/TestMoneyRounding.java۞110۩}
smallsql/junit/TestMoneyRounding.java۞112۩}
smallsql/junit/TestOperatoren.java۞33۩package smallsql.junit;
smallsql/junit/TestOperatoren.java۞35۩import junit.framework.*;
smallsql/junit/TestOperatoren.java۞36۩import java.sql.*;
smallsql/junit/TestOperatoren.java۞37۩import java.math.*;
smallsql/junit/TestOperatoren.java۞39۩public class TestOperatoren extends BasicTestCase {
smallsql/junit/TestOperatoren.java۞41۩private TestValue testValue;
smallsql/junit/TestOperatoren.java۞43۩private static final String table = "table_functions";
smallsql/junit/TestOperatoren.java۞45۩private static final TestValue[] TESTS = new TestValue[]{
smallsql/junit/TestOperatoren.java۞46۩a("tinyint"           , new Byte( (byte)3),     new Byte( (byte)4)),
smallsql/junit/TestOperatoren.java۞47۩a("byte"              , new Byte( (byte)3),     new Byte( (byte)4)),
smallsql/junit/TestOperatoren.java۞48۩a("smallint"          , new Short( (short)3),   new Short( (short)4)),
smallsql/junit/TestOperatoren.java۞49۩a("int"               , new Integer(3),         new Integer(4)),
smallsql/junit/TestOperatoren.java۞50۩a("bigint"            , new Long(3),            new Long(4)),
smallsql/junit/TestOperatoren.java۞51۩a("real"              , new Float(3.45),        new Float(4.56)),
smallsql/junit/TestOperatoren.java۞52۩a("float"             , new Float(3.45),        new Float(4.56)),
smallsql/junit/TestOperatoren.java۞53۩a("double"            , new Double(3.45),       new Double(4.56)),
smallsql/junit/TestOperatoren.java۞54۩a("smallmoney"        , new Float(3.45),        new Float(4.56)),
smallsql/junit/TestOperatoren.java۞55۩a("money"             , new Float(3.45),        new Float(4.56)),
smallsql/junit/TestOperatoren.java۞56۩a("money"             , new Double(3.45),       new Double(4.56)),
smallsql/junit/TestOperatoren.java۞57۩a("numeric(19,2)"     , new BigDecimal("3.45"), new BigDecimal("4.56")),
smallsql/junit/TestOperatoren.java۞58۩a("decimal(19,2)"     , new BigDecimal("3.45"), new BigDecimal("4.56")),
smallsql/junit/TestOperatoren.java۞59۩a("varnum(28,2)"      , new BigDecimal("2.34"), new BigDecimal("3.45")),
smallsql/junit/TestOperatoren.java۞60۩a("number(28,2)"      , new BigDecimal("2.34"), new BigDecimal("3.45")),
smallsql/junit/TestOperatoren.java۞61۩a("varchar(100)"      , new String("abc"),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞62۩a("varchar(60000)"    , new String(new char[43210]),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞63۩a("nvarchar(100)"     , new String("abc"),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞64۩a("varchar2(100)"     , new String("abc"),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞65۩a("nvarchar2(100)"    , new String("abc"),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞66۩a("character(100)"    , new String("abc"),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞67۩a("char(100)"         , new String("abc"),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞68۩a("nchar(100)"        , new String("abc"),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞69۩a("text"              , new String("abc"),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞70۩a("ntext"             , new String("abc"),      new String("qwert")),
smallsql/junit/TestOperatoren.java۞71۩a("date"              , new Date(99, 1,1),      new Date(99, 2,2)),
smallsql/junit/TestOperatoren.java۞72۩a("time"              , new Time(9, 1,1),       new Time(9, 2,2)),
smallsql/junit/TestOperatoren.java۞73۩a("timestamp"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),
smallsql/junit/TestOperatoren.java۞74۩a("datetime"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),
smallsql/junit/TestOperatoren.java۞75۩a("smalldatetime"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),
smallsql/junit/TestOperatoren.java۞76۩a("binary(100)"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestOperatoren.java۞77۩a("varbinary(100)"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestOperatoren.java۞78۩a("varbinary(60000)"  , new byte[54321],        new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestOperatoren.java۞79۩a("raw(100)"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestOperatoren.java۞80۩a("long raw"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestOperatoren.java۞81۩a("longvarbinary"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestOperatoren.java۞82۩a("blob"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestOperatoren.java۞83۩a("image"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),
smallsql/junit/TestOperatoren.java۞84۩a("boolean"           , Boolean.FALSE,          Boolean.TRUE),
smallsql/junit/TestOperatoren.java۞85۩a("bit"               , Boolean.FALSE,          Boolean.TRUE),
smallsql/junit/TestOperatoren.java۞86۩a("uniqueidentifier"  , "12345678-3445-3445-3445-1234567890ab",      "12345679-3445-3445-3445-1234567890ac"),
smallsql/junit/TestOperatoren.java۞87۩};
smallsql/junit/TestOperatoren.java۞90۩TestOperatoren(TestValue testValue){
smallsql/junit/TestOperatoren.java۞91۩super(testValue.dataType);
smallsql/junit/TestOperatoren.java۞92۩this.testValue = testValue;
smallsql/junit/TestOperatoren.java۞93۩}
smallsql/junit/TestOperatoren.java۞95۩public void tearDown(){
smallsql/junit/TestOperatoren.java۞96۩try{
smallsql/junit/TestOperatoren.java۞97۩Connection con = AllTests.getConnection();
smallsql/junit/TestOperatoren.java۞98۩Statement st = con.createStatement();
smallsql/junit/TestOperatoren.java۞99۩st.execute("drop table " + table);
smallsql/junit/TestOperatoren.java۞100۩st.close();
smallsql/junit/TestOperatoren.java۞101۩}catch(Throwable e){
smallsql/junit/TestOperatoren.java۞103۩}
smallsql/junit/TestOperatoren.java۞104۩}
smallsql/junit/TestOperatoren.java۞106۩public void setUp(){
smallsql/junit/TestOperatoren.java۞107۩tearDown();
smallsql/junit/TestOperatoren.java۞108۩try{
smallsql/junit/TestOperatoren.java۞109۩Connection con = AllTests.getConnection();
smallsql/junit/TestOperatoren.java۞110۩Statement st = con.createStatement();
smallsql/junit/TestOperatoren.java۞111۩st.execute("create table " + table + "(a " + testValue.dataType +", b " + testValue.dataType + ")");
smallsql/junit/TestOperatoren.java۞112۩st.close();
smallsql/junit/TestOperatoren.java۞113۩PreparedStatement pr = con.prepareStatement("INSERT into " + table + "(a,b) Values(?,?)");
smallsql/junit/TestOperatoren.java۞115۩pr.setObject( 1, testValue.small);
smallsql/junit/TestOperatoren.java۞116۩pr.setObject( 2, testValue.large);
smallsql/junit/TestOperatoren.java۞117۩pr.execute();
smallsql/junit/TestOperatoren.java۞119۩pr.setObject( 1, testValue.small);
smallsql/junit/TestOperatoren.java۞120۩pr.setObject( 2, testValue.small);
smallsql/junit/TestOperatoren.java۞121۩pr.execute();
smallsql/junit/TestOperatoren.java۞123۩pr.setObject( 1, testValue.large);
smallsql/junit/TestOperatoren.java۞124۩pr.setObject( 2, testValue.large);
smallsql/junit/TestOperatoren.java۞125۩pr.execute();
smallsql/junit/TestOperatoren.java۞127۩pr.setObject( 1, testValue.large);
smallsql/junit/TestOperatoren.java۞128۩pr.setObject( 2, testValue.small);
smallsql/junit/TestOperatoren.java۞129۩pr.execute();
smallsql/junit/TestOperatoren.java۞131۩pr.setObject( 1, null);
smallsql/junit/TestOperatoren.java۞132۩pr.setObject( 2, testValue.small);
smallsql/junit/TestOperatoren.java۞133۩pr.execute();
smallsql/junit/TestOperatoren.java۞135۩pr.setObject( 1, testValue.small);
smallsql/junit/TestOperatoren.java۞136۩pr.setObject( 2, null);
smallsql/junit/TestOperatoren.java۞137۩pr.execute();
smallsql/junit/TestOperatoren.java۞139۩pr.setObject( 1, null);
smallsql/junit/TestOperatoren.java۞140۩pr.setObject( 2, null);
smallsql/junit/TestOperatoren.java۞141۩pr.execute();
smallsql/junit/TestOperatoren.java۞142۩pr.close();
smallsql/junit/TestOperatoren.java۞143۩}catch(Throwable e){
smallsql/junit/TestOperatoren.java۞144۩e.printStackTrace();
smallsql/junit/TestOperatoren.java۞145۩}
smallsql/junit/TestOperatoren.java۞146۩}
smallsql/junit/TestOperatoren.java۞149۩public void runTest() throws Exception{
smallsql/junit/TestOperatoren.java۞150۩Connection con = AllTests.getConnection();
smallsql/junit/TestOperatoren.java۞151۩Statement st = con.createStatement();
smallsql/junit/TestOperatoren.java۞152۩ResultSet rs;
smallsql/junit/TestOperatoren.java۞154۩rs = st.executeQuery("Select * from " + table + " where 1 = 0");
smallsql/junit/TestOperatoren.java۞155۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞157۩rs = st.executeQuery("Select * from " + table + " where a = b");
smallsql/junit/TestOperatoren.java۞158۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞159۩assertEqualsObject( "Values not equals", rs.getObject(1), rs.getObject(2), false);
smallsql/junit/TestOperatoren.java۞160۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞161۩assertEqualsObject( "Values not equals", rs.getObject(1), rs.getObject(2), false);
smallsql/junit/TestOperatoren.java۞162۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞164۩rs = st.executeQuery("Select * from " + table + " where a <= b and b <= a");
smallsql/junit/TestOperatoren.java۞165۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞166۩assertEqualsObject( "Values not equals", rs.getObject(1), rs.getObject(2), false);
smallsql/junit/TestOperatoren.java۞167۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞168۩assertEqualsObject( "Values not equals", rs.getObject(1), rs.getObject(2), false);
smallsql/junit/TestOperatoren.java۞169۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞171۩rs = st.executeQuery("Select * from " + table + " where (a > (b))");
smallsql/junit/TestOperatoren.java۞172۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞173۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞175۩rs = st.executeQuery("Select * from " + table + " where a >= b");
smallsql/junit/TestOperatoren.java۞176۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞177۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞178۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞179۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞181۩rs = st.executeQuery("Select * from " + table + " where not (a >= b)");
smallsql/junit/TestOperatoren.java۞182۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞183۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞184۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞185۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞186۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞188۩rs = st.executeQuery("Select * from " + table + " where a < b");
smallsql/junit/TestOperatoren.java۞189۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞190۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞192۩rs = st.executeQuery("Select * from " + table + " where a < b or a>b");
smallsql/junit/TestOperatoren.java۞193۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞194۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞195۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞197۩rs = st.executeQuery("Select * from " + table + " where a <= b");
smallsql/junit/TestOperatoren.java۞198۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞199۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞200۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞201۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞203۩rs = st.executeQuery("Select * from " + table + " where a <> b");
smallsql/junit/TestOperatoren.java۞204۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞205۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞206۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞208۩PreparedStatement pr = con.prepareStatement("Select * from " + table + " where a between ? and ?");
smallsql/junit/TestOperatoren.java۞209۩pr.setObject( 1, testValue.small);
smallsql/junit/TestOperatoren.java۞210۩pr.setObject( 2, testValue.large);
smallsql/junit/TestOperatoren.java۞211۩rs = pr.executeQuery();
smallsql/junit/TestOperatoren.java۞212۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞213۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞214۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞215۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞216۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞217۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞218۩pr.close();
smallsql/junit/TestOperatoren.java۞220۩pr = con.prepareStatement("Select * from " + table + " where a not between ? and ?");
smallsql/junit/TestOperatoren.java۞221۩pr.setObject( 1, testValue.small);
smallsql/junit/TestOperatoren.java۞222۩pr.setObject( 2, testValue.large);
smallsql/junit/TestOperatoren.java۞223۩rs = pr.executeQuery();
smallsql/junit/TestOperatoren.java۞224۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞225۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞226۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞227۩pr.close();
smallsql/junit/TestOperatoren.java۞229۩pr = con.prepareStatement("Select * from " + table + " where a in(?,?)");
smallsql/junit/TestOperatoren.java۞230۩pr.setObject( 1, testValue.small);
smallsql/junit/TestOperatoren.java۞231۩pr.setObject( 2, testValue.large);
smallsql/junit/TestOperatoren.java۞232۩rs = pr.executeQuery();
smallsql/junit/TestOperatoren.java۞233۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞234۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞235۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞236۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞237۩assertTrue( "To few rows", rs.next() );
smallsql/junit/TestOperatoren.java۞238۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞239۩pr.close();
smallsql/junit/TestOperatoren.java۞241۩pr = con.prepareStatement("Select * from " + table + " where a not in(?,?)");
smallsql/junit/TestOperatoren.java۞242۩pr.setObject( 1, testValue.small);
smallsql/junit/TestOperatoren.java۞243۩pr.setObject( 2, testValue.large);
smallsql/junit/TestOperatoren.java۞244۩rs = pr.executeQuery();
smallsql/junit/TestOperatoren.java۞245۩assertTrue( "To few rows", rs.next());
smallsql/junit/TestOperatoren.java۞246۩assertTrue( "To few rows", rs.next());
smallsql/junit/TestOperatoren.java۞247۩assertFalse( "To many rows", rs.next() );
smallsql/junit/TestOperatoren.java۞248۩pr.close();
smallsql/junit/TestOperatoren.java۞250۩st.close();
smallsql/junit/TestOperatoren.java۞251۩}
smallsql/junit/TestOperatoren.java۞253۩public static Test suite() throws Exception{
smallsql/junit/TestOperatoren.java۞254۩TestSuite theSuite = new TestSuite("Operatoren");
smallsql/junit/TestOperatoren.java۞255۩for(int i=0; i<TESTS.length; i++){
smallsql/junit/TestOperatoren.java۞256۩theSuite.addTest(new TestOperatoren( TESTS[i] ) );
smallsql/junit/TestOperatoren.java۞257۩}
smallsql/junit/TestOperatoren.java۞258۩return theSuite;
smallsql/junit/TestOperatoren.java۞259۩}
smallsql/junit/TestOperatoren.java۞261۩public static void main(String[] argv) {
smallsql/junit/TestOperatoren.java۞262۩junit.swingui.TestRunner.main(new String[]{TestOperatoren.class.getName()});
smallsql/junit/TestOperatoren.java۞263۩}
smallsql/junit/TestOperatoren.java۞267۩private static TestValue a(String dataType, Object small, Object large){
smallsql/junit/TestOperatoren.java۞268۩TestValue value = new TestValue();
smallsql/junit/TestOperatoren.java۞269۩value.dataType  = dataType;
smallsql/junit/TestOperatoren.java۞270۩value.small     = small;
smallsql/junit/TestOperatoren.java۞271۩value.large     = large;
smallsql/junit/TestOperatoren.java۞272۩return value;
smallsql/junit/TestOperatoren.java۞273۩}
smallsql/junit/TestOperatoren.java۞275۩private static class TestValue{
smallsql/junit/TestOperatoren.java۞276۩String dataType;
smallsql/junit/TestOperatoren.java۞277۩Object small;
smallsql/junit/TestOperatoren.java۞278۩Object large;
smallsql/junit/TestOperatoren.java۞279۩}
smallsql/junit/TestOperatoren.java۞281۩}
smallsql/junit/TestOrderBy.java۞33۩package smallsql.junit;
smallsql/junit/TestOrderBy.java۞35۩import java.sql.*;
smallsql/junit/TestOrderBy.java۞36۩import java.util.ArrayList;
smallsql/junit/TestOrderBy.java۞44۩public class TestOrderBy extends BasicTestCase {
smallsql/junit/TestOrderBy.java۞46۩static private boolean init;
smallsql/junit/TestOrderBy.java۞47۩private static final String table1 = "table_OrderBy1";
smallsql/junit/TestOrderBy.java۞48۩private static final String table2 = "table_OrderBy2";
smallsql/junit/TestOrderBy.java۞49۩private static final String table3 = "table_OrderBy3";
smallsql/junit/TestOrderBy.java۞50۩static private int valueCount;
smallsql/junit/TestOrderBy.java۞52۩public void init(){
smallsql/junit/TestOrderBy.java۞53۩if(init) return;
smallsql/junit/TestOrderBy.java۞54۩try{
smallsql/junit/TestOrderBy.java۞55۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞56۩dropTable( con, table1 );
smallsql/junit/TestOrderBy.java۞57۩dropTable( con, table2 );
smallsql/junit/TestOrderBy.java۞58۩dropTable( con, table3 );
smallsql/junit/TestOrderBy.java۞59۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞60۩st.execute("create table " + table1 + "(v varchar(30), c char(30), nv nvarchar(30),i int, d float, r real, bi bigint, b boolean)");
smallsql/junit/TestOrderBy.java۞61۩st.execute("create table " + table2 + "(c2 char(30))");
smallsql/junit/TestOrderBy.java۞62۩st.execute("create table " + table3 + "(vc varchar(30), vb varbinary(30))");
smallsql/junit/TestOrderBy.java۞63۩st.close();
smallsql/junit/TestOrderBy.java۞65۩PreparedStatement pr = con.prepareStatement("INSERT into " + table1 + "(v,c,nv,i,d,r,bi,b) Values(?,?,?,?,?,?,?,?)");
smallsql/junit/TestOrderBy.java۞66۩PreparedStatement pr2= con.prepareStatement("INSERT into " + table2 + "(c2) Values(?)");
smallsql/junit/TestOrderBy.java۞67۩for(int i=150; i>-10; i--){
smallsql/junit/TestOrderBy.java۞68۩pr.setString( 1, String.valueOf(i));
smallsql/junit/TestOrderBy.java۞69۩pr.setString( 2, String.valueOf(i));
smallsql/junit/TestOrderBy.java۞70۩pr.setString( 3, String.valueOf( (char)i ));
smallsql/junit/TestOrderBy.java۞71۩pr.setInt   ( 4, i );
smallsql/junit/TestOrderBy.java۞72۩pr.setDouble( 5, i );
smallsql/junit/TestOrderBy.java۞73۩pr.setFloat ( 6, i );
smallsql/junit/TestOrderBy.java۞74۩pr.setInt   ( 7, i );
smallsql/junit/TestOrderBy.java۞75۩pr.setBoolean( 8, i == 0 );
smallsql/junit/TestOrderBy.java۞76۩pr.execute();
smallsql/junit/TestOrderBy.java۞77۩pr2.setString( 1, String.valueOf(i));
smallsql/junit/TestOrderBy.java۞78۩pr2.execute();
smallsql/junit/TestOrderBy.java۞79۩valueCount++;
smallsql/junit/TestOrderBy.java۞80۩}
smallsql/junit/TestOrderBy.java۞81۩pr.setObject( 1, null, Types.VARCHAR);
smallsql/junit/TestOrderBy.java۞82۩pr.setObject( 2, null, Types.VARCHAR);
smallsql/junit/TestOrderBy.java۞83۩pr.setObject( 3, null, Types.VARCHAR);
smallsql/junit/TestOrderBy.java۞84۩pr.setObject( 4, null, Types.VARCHAR);
smallsql/junit/TestOrderBy.java۞85۩pr.setObject( 5, null, Types.VARCHAR);
smallsql/junit/TestOrderBy.java۞86۩pr.setObject( 6, null, Types.VARCHAR);
smallsql/junit/TestOrderBy.java۞87۩pr.setObject( 7, null, Types.VARCHAR);
smallsql/junit/TestOrderBy.java۞88۩pr.setObject( 8, null, Types.VARCHAR);
smallsql/junit/TestOrderBy.java۞89۩pr.execute();
smallsql/junit/TestOrderBy.java۞90۩pr2.setObject( 1, null, Types.VARCHAR);
smallsql/junit/TestOrderBy.java۞91۩pr2.execute();
smallsql/junit/TestOrderBy.java۞92۩pr2.setString( 1, "");
smallsql/junit/TestOrderBy.java۞93۩pr2.execute();
smallsql/junit/TestOrderBy.java۞95۩pr.close();
smallsql/junit/TestOrderBy.java۞97۩pr = con.prepareStatement("INSERT into " + table3 + "(vc, vb) Values(?,?)");
smallsql/junit/TestOrderBy.java۞98۩pr.setString( 1, table3);
smallsql/junit/TestOrderBy.java۞99۩pr.setBytes( 2, table3.getBytes());
smallsql/junit/TestOrderBy.java۞100۩pr.execute();
smallsql/junit/TestOrderBy.java۞101۩pr.setString( 1, "");
smallsql/junit/TestOrderBy.java۞102۩pr.setBytes( 2, new byte[0]);
smallsql/junit/TestOrderBy.java۞103۩pr.execute();
smallsql/junit/TestOrderBy.java۞104۩pr.setString( 1, null);
smallsql/junit/TestOrderBy.java۞105۩pr.setBytes( 2, null);
smallsql/junit/TestOrderBy.java۞106۩pr.execute();
smallsql/junit/TestOrderBy.java۞108۩init = true;
smallsql/junit/TestOrderBy.java۞109۩}catch(Throwable e){
smallsql/junit/TestOrderBy.java۞110۩e.printStackTrace();
smallsql/junit/TestOrderBy.java۞111۩}
smallsql/junit/TestOrderBy.java۞112۩}
smallsql/junit/TestOrderBy.java۞115۩public void testOrderBy_char() throws Exception{
smallsql/junit/TestOrderBy.java۞116۩init();
smallsql/junit/TestOrderBy.java۞117۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞118۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞119۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞120۩String oldValue;
smallsql/junit/TestOrderBy.java۞122۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by c");
smallsql/junit/TestOrderBy.java۞124۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞126۩oldValue = rs.getString("c");
smallsql/junit/TestOrderBy.java۞127۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞128۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞129۩oldValue = rs.getString("c");
smallsql/junit/TestOrderBy.java۞131۩int count = 1;
smallsql/junit/TestOrderBy.java۞132۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞133۩String newValue = rs.getString("c");
smallsql/junit/TestOrderBy.java۞134۩assertTrue( oldValue + "<" + newValue, oldValue.compareTo( newValue ) < 0 );
smallsql/junit/TestOrderBy.java۞135۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞136۩count++;
smallsql/junit/TestOrderBy.java۞137۩}
smallsql/junit/TestOrderBy.java۞138۩rs.close();
smallsql/junit/TestOrderBy.java۞139۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞140۩}
smallsql/junit/TestOrderBy.java۞143۩public void testOrderBy_varchar() throws Exception{
smallsql/junit/TestOrderBy.java۞144۩init();
smallsql/junit/TestOrderBy.java۞145۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞146۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞147۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞148۩String oldValue;
smallsql/junit/TestOrderBy.java۞150۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by v");
smallsql/junit/TestOrderBy.java۞152۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞154۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞155۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞156۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞157۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞159۩int count = 1;
smallsql/junit/TestOrderBy.java۞160۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞161۩String newValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞162۩assertTrue( oldValue + "<" + newValue, oldValue.compareTo( newValue ) < 0 );
smallsql/junit/TestOrderBy.java۞163۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞164۩count++;
smallsql/junit/TestOrderBy.java۞165۩}
smallsql/junit/TestOrderBy.java۞166۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞167۩}
smallsql/junit/TestOrderBy.java۞170۩public void testOrderBy_varchar_asc() throws Exception{
smallsql/junit/TestOrderBy.java۞171۩init();
smallsql/junit/TestOrderBy.java۞172۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞173۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞174۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞175۩String oldValue;
smallsql/junit/TestOrderBy.java۞177۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by v ASC");
smallsql/junit/TestOrderBy.java۞179۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞181۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞182۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞183۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞184۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞186۩int count = 1;
smallsql/junit/TestOrderBy.java۞187۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞188۩String newValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞189۩assertTrue( oldValue.compareTo( newValue ) < 0 );
smallsql/junit/TestOrderBy.java۞190۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞191۩count++;
smallsql/junit/TestOrderBy.java۞192۩}
smallsql/junit/TestOrderBy.java۞193۩rs.close();
smallsql/junit/TestOrderBy.java۞194۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞195۩}
smallsql/junit/TestOrderBy.java۞198۩public void testOrderBy_varchar_desc() throws Exception{
smallsql/junit/TestOrderBy.java۞199۩init();
smallsql/junit/TestOrderBy.java۞200۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞201۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞202۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞203۩String oldValue;
smallsql/junit/TestOrderBy.java۞205۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by v desc");
smallsql/junit/TestOrderBy.java۞207۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞208۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞210۩int count = 1;
smallsql/junit/TestOrderBy.java۞211۩while(oldValue != null && rs.next()){
smallsql/junit/TestOrderBy.java۞212۩String newValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞213۩if(newValue != null){
smallsql/junit/TestOrderBy.java۞214۩assertTrue( oldValue.compareTo( newValue ) > 0 );
smallsql/junit/TestOrderBy.java۞215۩count++;
smallsql/junit/TestOrderBy.java۞216۩}
smallsql/junit/TestOrderBy.java۞217۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞218۩}
smallsql/junit/TestOrderBy.java۞219۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞220۩assertFalse( rs.next() );
smallsql/junit/TestOrderBy.java۞222۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞223۩}
smallsql/junit/TestOrderBy.java۞226۩public void testOrderBy_varchar_DescAsc() throws Exception{
smallsql/junit/TestOrderBy.java۞227۩init();
smallsql/junit/TestOrderBy.java۞228۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞229۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞230۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞231۩String oldValue;
smallsql/junit/TestOrderBy.java۞233۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by v desc, i asc");
smallsql/junit/TestOrderBy.java۞235۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞236۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞238۩int count = 1;
smallsql/junit/TestOrderBy.java۞239۩while(oldValue != null && rs.next()){
smallsql/junit/TestOrderBy.java۞240۩String newValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞241۩if(newValue != null){
smallsql/junit/TestOrderBy.java۞242۩assertTrue( oldValue.compareTo( newValue ) > 0 );
smallsql/junit/TestOrderBy.java۞243۩count++;
smallsql/junit/TestOrderBy.java۞244۩}
smallsql/junit/TestOrderBy.java۞245۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞246۩}
smallsql/junit/TestOrderBy.java۞247۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞248۩assertFalse( rs.next() );
smallsql/junit/TestOrderBy.java۞250۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞251۩}
smallsql/junit/TestOrderBy.java۞254۩public void testOrderBy_varchar_GroupBy() throws Exception{
smallsql/junit/TestOrderBy.java۞255۩init();
smallsql/junit/TestOrderBy.java۞256۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞257۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞258۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞259۩String oldValue;
smallsql/junit/TestOrderBy.java۞261۩rs = st.executeQuery("SELECT first(v) cc FROM " + table1 + " Group By i ORDER  by first(V)");
smallsql/junit/TestOrderBy.java۞263۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞265۩oldValue = rs.getString("cc");
smallsql/junit/TestOrderBy.java۞266۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞267۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞268۩oldValue = rs.getString("cc");
smallsql/junit/TestOrderBy.java۞270۩int count = 1;
smallsql/junit/TestOrderBy.java۞271۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞272۩assertTrue( oldValue.compareTo( rs.getString("cc") ) < 0 );
smallsql/junit/TestOrderBy.java۞273۩oldValue = rs.getString("cc");
smallsql/junit/TestOrderBy.java۞274۩count++;
smallsql/junit/TestOrderBy.java۞275۩}
smallsql/junit/TestOrderBy.java۞276۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞277۩}
smallsql/junit/TestOrderBy.java۞280۩public void testOrderBy_varchar_Join() throws Exception{
smallsql/junit/TestOrderBy.java۞281۩init();
smallsql/junit/TestOrderBy.java۞282۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞283۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞284۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞285۩String oldValue;
smallsql/junit/TestOrderBy.java۞287۩rs = st.executeQuery("SELECT * FROM " + table1 + " t1 Inner join "+table2+" t2 on t1.c=t2.c2  ORDER  by v");
smallsql/junit/TestOrderBy.java۞289۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞291۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞293۩int count = 1;
smallsql/junit/TestOrderBy.java۞294۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞295۩assertTrue( oldValue.compareTo( rs.getString("v") ) < 0 );
smallsql/junit/TestOrderBy.java۞296۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞297۩count++;
smallsql/junit/TestOrderBy.java۞298۩}
smallsql/junit/TestOrderBy.java۞299۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞300۩}
smallsql/junit/TestOrderBy.java۞303۩public void testOrderBy_nvarchar() throws Exception{
smallsql/junit/TestOrderBy.java۞304۩init();
smallsql/junit/TestOrderBy.java۞305۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞306۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞307۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞308۩String oldValue;
smallsql/junit/TestOrderBy.java۞310۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by nv");
smallsql/junit/TestOrderBy.java۞312۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞314۩oldValue = rs.getString("nv");
smallsql/junit/TestOrderBy.java۞315۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞316۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞317۩oldValue = rs.getString("nv");
smallsql/junit/TestOrderBy.java۞319۩int count = 1;
smallsql/junit/TestOrderBy.java۞320۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞321۩assertTrue( String.CASE_INSENSITIVE_ORDER.compare( oldValue, rs.getString("nv") ) <= 0 );
smallsql/junit/TestOrderBy.java۞322۩oldValue = rs.getString("nv");
smallsql/junit/TestOrderBy.java۞323۩count++;
smallsql/junit/TestOrderBy.java۞324۩}
smallsql/junit/TestOrderBy.java۞325۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞326۩}
smallsql/junit/TestOrderBy.java۞329۩public void testOrderBy_int() throws Exception{
smallsql/junit/TestOrderBy.java۞330۩init();
smallsql/junit/TestOrderBy.java۞331۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞332۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞333۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞334۩Integer oldValue;
smallsql/junit/TestOrderBy.java۞336۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by i");
smallsql/junit/TestOrderBy.java۞338۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞340۩oldValue = (Integer)rs.getObject("i");
smallsql/junit/TestOrderBy.java۞341۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞342۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞343۩oldValue = (Integer)rs.getObject("i");
smallsql/junit/TestOrderBy.java۞345۩int count = 1;
smallsql/junit/TestOrderBy.java۞346۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞347۩assertTrue( oldValue.compareTo( (Integer)rs.getObject("i") ) < 0 );
smallsql/junit/TestOrderBy.java۞348۩oldValue = (Integer)rs.getObject("i");
smallsql/junit/TestOrderBy.java۞349۩count++;
smallsql/junit/TestOrderBy.java۞350۩}
smallsql/junit/TestOrderBy.java۞351۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞352۩}
smallsql/junit/TestOrderBy.java۞355۩public void test_function() throws Exception{
smallsql/junit/TestOrderBy.java۞356۩init();
smallsql/junit/TestOrderBy.java۞357۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞358۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞359۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞360۩int oldValue;
smallsql/junit/TestOrderBy.java۞362۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by abs(i)");
smallsql/junit/TestOrderBy.java۞364۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞366۩assertNull(rs.getObject("i"));
smallsql/junit/TestOrderBy.java۞367۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞368۩oldValue = Math.abs( rs.getInt("i") );
smallsql/junit/TestOrderBy.java۞370۩int count = 1;
smallsql/junit/TestOrderBy.java۞371۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞372۩int newValue = Math.abs( rs.getInt("i") );
smallsql/junit/TestOrderBy.java۞373۩assertTrue( oldValue <= newValue );
smallsql/junit/TestOrderBy.java۞374۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞375۩count++;
smallsql/junit/TestOrderBy.java۞376۩}
smallsql/junit/TestOrderBy.java۞377۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞378۩}
smallsql/junit/TestOrderBy.java۞381۩public void test_functionAscDesc() throws Exception{
smallsql/junit/TestOrderBy.java۞382۩init();
smallsql/junit/TestOrderBy.java۞383۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞384۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞385۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞386۩int oldValue;
smallsql/junit/TestOrderBy.java۞387۩int oldValue2;
smallsql/junit/TestOrderBy.java۞389۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by abs(i) Asc, i desc");
smallsql/junit/TestOrderBy.java۞391۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞393۩assertNull(rs.getObject("i"));
smallsql/junit/TestOrderBy.java۞394۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞395۩oldValue = Math.abs( rs.getInt("i") );
smallsql/junit/TestOrderBy.java۞396۩oldValue2 = rs.getInt("i");
smallsql/junit/TestOrderBy.java۞398۩int count = 1;
smallsql/junit/TestOrderBy.java۞399۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞400۩int newValue2 = rs.getInt("i");
smallsql/junit/TestOrderBy.java۞401۩int newValue = Math.abs( newValue2 );
smallsql/junit/TestOrderBy.java۞402۩assertTrue( oldValue <= newValue );
smallsql/junit/TestOrderBy.java۞403۩if(oldValue == newValue){
smallsql/junit/TestOrderBy.java۞404۩assertTrue( oldValue2 > newValue2 );
smallsql/junit/TestOrderBy.java۞405۩}
smallsql/junit/TestOrderBy.java۞406۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞407۩oldValue2 = newValue2;
smallsql/junit/TestOrderBy.java۞408۩count++;
smallsql/junit/TestOrderBy.java۞409۩}
smallsql/junit/TestOrderBy.java۞410۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞411۩}
smallsql/junit/TestOrderBy.java۞414۩public void testOrderBy_int_asc() throws Exception{
smallsql/junit/TestOrderBy.java۞415۩init();
smallsql/junit/TestOrderBy.java۞416۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞417۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞418۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞419۩Integer oldValue;
smallsql/junit/TestOrderBy.java۞421۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by i Asc");
smallsql/junit/TestOrderBy.java۞423۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞425۩oldValue = (Integer)rs.getObject("i");
smallsql/junit/TestOrderBy.java۞426۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞427۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞428۩oldValue = (Integer)rs.getObject("i");
smallsql/junit/TestOrderBy.java۞430۩int count = 1;
smallsql/junit/TestOrderBy.java۞431۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞432۩assertTrue( oldValue.compareTo( (Integer)rs.getObject("i") ) < 0 );
smallsql/junit/TestOrderBy.java۞433۩oldValue = (Integer)rs.getObject("i");
smallsql/junit/TestOrderBy.java۞434۩count++;
smallsql/junit/TestOrderBy.java۞435۩}
smallsql/junit/TestOrderBy.java۞436۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞437۩}
smallsql/junit/TestOrderBy.java۞440۩public void testOrderBy_int_desc() throws Exception{
smallsql/junit/TestOrderBy.java۞441۩init();
smallsql/junit/TestOrderBy.java۞442۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞443۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞444۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞445۩Integer oldValue;
smallsql/junit/TestOrderBy.java۞447۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by i Desc");
smallsql/junit/TestOrderBy.java۞449۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞450۩oldValue = (Integer)rs.getObject("i");
smallsql/junit/TestOrderBy.java۞452۩int count = 1;
smallsql/junit/TestOrderBy.java۞453۩while(oldValue != null && rs.next()){
smallsql/junit/TestOrderBy.java۞454۩Integer newValue = (Integer)rs.getObject("i");
smallsql/junit/TestOrderBy.java۞455۩if(newValue != null){
smallsql/junit/TestOrderBy.java۞456۩assertTrue( oldValue.compareTo( newValue ) > 0 );
smallsql/junit/TestOrderBy.java۞457۩count++;
smallsql/junit/TestOrderBy.java۞458۩}
smallsql/junit/TestOrderBy.java۞459۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞460۩}
smallsql/junit/TestOrderBy.java۞461۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞462۩assertFalse( rs.next() );
smallsql/junit/TestOrderBy.java۞463۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞464۩}
smallsql/junit/TestOrderBy.java۞467۩public void testOrderBy_double() throws Exception{
smallsql/junit/TestOrderBy.java۞468۩init();
smallsql/junit/TestOrderBy.java۞469۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞470۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞471۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞472۩Double oldValue;
smallsql/junit/TestOrderBy.java۞474۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by d");
smallsql/junit/TestOrderBy.java۞476۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞478۩oldValue = (Double)rs.getObject("d");
smallsql/junit/TestOrderBy.java۞479۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞480۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞481۩oldValue = (Double)rs.getObject("d");
smallsql/junit/TestOrderBy.java۞483۩int count = 1;
smallsql/junit/TestOrderBy.java۞484۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞485۩assertTrue( oldValue.compareTo( (Double)rs.getObject("d") ) < 0 );
smallsql/junit/TestOrderBy.java۞486۩oldValue = (Double)rs.getObject("d");
smallsql/junit/TestOrderBy.java۞487۩count++;
smallsql/junit/TestOrderBy.java۞488۩}
smallsql/junit/TestOrderBy.java۞489۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞490۩}
smallsql/junit/TestOrderBy.java۞493۩public void testOrderBy_real() throws Exception{
smallsql/junit/TestOrderBy.java۞494۩init();
smallsql/junit/TestOrderBy.java۞495۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞496۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞497۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞498۩Float oldValue;
smallsql/junit/TestOrderBy.java۞500۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by r");
smallsql/junit/TestOrderBy.java۞502۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞504۩oldValue = (Float)rs.getObject("r");
smallsql/junit/TestOrderBy.java۞505۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞506۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞507۩oldValue = (Float)rs.getObject("r");
smallsql/junit/TestOrderBy.java۞509۩int count = 1;
smallsql/junit/TestOrderBy.java۞510۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞511۩assertTrue( oldValue.compareTo( (Float)rs.getObject("r") ) < 0 );
smallsql/junit/TestOrderBy.java۞512۩oldValue = (Float)rs.getObject("r");
smallsql/junit/TestOrderBy.java۞513۩count++;
smallsql/junit/TestOrderBy.java۞514۩}
smallsql/junit/TestOrderBy.java۞515۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞516۩}
smallsql/junit/TestOrderBy.java۞519۩public void test_bigint() throws Exception{
smallsql/junit/TestOrderBy.java۞520۩init();
smallsql/junit/TestOrderBy.java۞521۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞522۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞523۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞524۩Long oldValue;
smallsql/junit/TestOrderBy.java۞526۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by bi");
smallsql/junit/TestOrderBy.java۞528۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞530۩oldValue = (Long)rs.getObject("bi");
smallsql/junit/TestOrderBy.java۞531۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞532۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞533۩oldValue = (Long)rs.getObject("bi");
smallsql/junit/TestOrderBy.java۞535۩int count = 1;
smallsql/junit/TestOrderBy.java۞536۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞537۩assertTrue( oldValue.compareTo( (Long)rs.getObject("bi") ) < 0 );
smallsql/junit/TestOrderBy.java۞538۩oldValue = (Long)rs.getObject("bi");
smallsql/junit/TestOrderBy.java۞539۩count++;
smallsql/junit/TestOrderBy.java۞540۩}
smallsql/junit/TestOrderBy.java۞541۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞542۩}
smallsql/junit/TestOrderBy.java۞545۩public void test_bigint_withDoublicateValues() throws Exception{
smallsql/junit/TestOrderBy.java۞546۩init();
smallsql/junit/TestOrderBy.java۞547۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞548۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞549۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞550۩Long oldValue;
smallsql/junit/TestOrderBy.java۞552۩rs = st.executeQuery("SELECT bi/2 bi_2 FROM " + table1 + " ORDER  by (bi/2)");
smallsql/junit/TestOrderBy.java۞554۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞556۩oldValue = (Long)rs.getObject("bi_2");
smallsql/junit/TestOrderBy.java۞557۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞558۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞559۩oldValue = (Long)rs.getObject("bi_2");
smallsql/junit/TestOrderBy.java۞561۩int count = 1;
smallsql/junit/TestOrderBy.java۞562۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞563۩Long newValue = (Long)rs.getObject("bi_2");
smallsql/junit/TestOrderBy.java۞564۩assertTrue( oldValue + "<="+newValue, oldValue.compareTo( newValue ) <= 0 );
smallsql/junit/TestOrderBy.java۞565۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞566۩count++;
smallsql/junit/TestOrderBy.java۞567۩}
smallsql/junit/TestOrderBy.java۞568۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞569۩}
smallsql/junit/TestOrderBy.java۞572۩public void test_boolean() throws Exception{
smallsql/junit/TestOrderBy.java۞573۩init();
smallsql/junit/TestOrderBy.java۞574۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞575۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞576۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞577۩boolean oldValue;
smallsql/junit/TestOrderBy.java۞579۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by b");
smallsql/junit/TestOrderBy.java۞581۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞583۩oldValue = rs.getBoolean("b");
smallsql/junit/TestOrderBy.java۞584۩assertFalse(oldValue);
smallsql/junit/TestOrderBy.java۞585۩assertTrue(rs.wasNull());
smallsql/junit/TestOrderBy.java۞586۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞587۩oldValue = rs.getBoolean("b");
smallsql/junit/TestOrderBy.java۞588۩assertFalse(oldValue);
smallsql/junit/TestOrderBy.java۞589۩assertFalse(rs.wasNull());
smallsql/junit/TestOrderBy.java۞591۩int count = 1;
smallsql/junit/TestOrderBy.java۞592۩while(!oldValue && rs.next()){
smallsql/junit/TestOrderBy.java۞593۩oldValue = rs.getBoolean("b");
smallsql/junit/TestOrderBy.java۞594۩assertFalse(rs.wasNull());
smallsql/junit/TestOrderBy.java۞595۩count++;
smallsql/junit/TestOrderBy.java۞596۩}
smallsql/junit/TestOrderBy.java۞597۩while(oldValue && rs.next()){
smallsql/junit/TestOrderBy.java۞598۩oldValue = rs.getBoolean("b");
smallsql/junit/TestOrderBy.java۞599۩assertFalse(rs.wasNull());
smallsql/junit/TestOrderBy.java۞600۩count++;
smallsql/junit/TestOrderBy.java۞601۩}
smallsql/junit/TestOrderBy.java۞602۩assertFalse(rs.next());
smallsql/junit/TestOrderBy.java۞603۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞604۩}
smallsql/junit/TestOrderBy.java۞607۩public void testVarcharEmpty() throws Exception{
smallsql/junit/TestOrderBy.java۞608۩init();
smallsql/junit/TestOrderBy.java۞609۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞610۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞611۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞613۩rs = st.executeQuery("SELECT * FROM " + table3 + " ORDER  by vc");
smallsql/junit/TestOrderBy.java۞615۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞616۩assertNull( rs.getObject("vc") );
smallsql/junit/TestOrderBy.java۞618۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞619۩assertEquals( "", rs.getObject("vc") );
smallsql/junit/TestOrderBy.java۞621۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞622۩assertEquals( table3, rs.getObject("vc") );
smallsql/junit/TestOrderBy.java۞624۩assertFalse( rs.next() );
smallsql/junit/TestOrderBy.java۞625۩}
smallsql/junit/TestOrderBy.java۞628۩public void testVarbinaryEmpty() throws Exception{
smallsql/junit/TestOrderBy.java۞629۩init();
smallsql/junit/TestOrderBy.java۞630۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞631۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞632۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞634۩rs = st.executeQuery("SELECT * FROM " + table3 + " ORDER  by vb");
smallsql/junit/TestOrderBy.java۞636۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞637۩assertNull( rs.getObject("vb") );
smallsql/junit/TestOrderBy.java۞639۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞640۩assertEqualsObject( "", new byte[0], rs.getObject("vb"), false );
smallsql/junit/TestOrderBy.java۞642۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞643۩assertEqualsObject( "", table3.getBytes(), rs.getObject("vb"), false );
smallsql/junit/TestOrderBy.java۞645۩assertFalse( rs.next() );
smallsql/junit/TestOrderBy.java۞646۩}
smallsql/junit/TestOrderBy.java۞649۩public void test2Columns() throws Exception{
smallsql/junit/TestOrderBy.java۞650۩init();
smallsql/junit/TestOrderBy.java۞651۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞652۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞653۩ResultSet rs = null;
smallsql/junit/TestOrderBy.java۞654۩String oldValue;
smallsql/junit/TestOrderBy.java۞656۩rs = st.executeQuery("SELECT * FROM " + table1+","+table2+" ORDER  by v, c2");
smallsql/junit/TestOrderBy.java۞658۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞659۩assertNull( rs.getObject("v") );
smallsql/junit/TestOrderBy.java۞660۩assertNull( rs.getObject("c2") );
smallsql/junit/TestOrderBy.java۞662۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞663۩oldValue = rs.getString("c2");
smallsql/junit/TestOrderBy.java۞665۩int count = 1;
smallsql/junit/TestOrderBy.java۞666۩while(rs.next() && rs.getString("v") == null){
smallsql/junit/TestOrderBy.java۞667۩String newValue = rs.getString("c2");
smallsql/junit/TestOrderBy.java۞668۩assertTrue( oldValue.compareTo( newValue ) < 0 );
smallsql/junit/TestOrderBy.java۞669۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞670۩count++;
smallsql/junit/TestOrderBy.java۞671۩}
smallsql/junit/TestOrderBy.java۞672۩assertEquals( valueCount+1, count );
smallsql/junit/TestOrderBy.java۞674۩boolean isNext = true;
smallsql/junit/TestOrderBy.java۞675۩while(isNext){
smallsql/junit/TestOrderBy.java۞676۩String vValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞677۩assertNull( rs.getObject("c2") );
smallsql/junit/TestOrderBy.java۞679۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞680۩oldValue = rs.getString("c2");
smallsql/junit/TestOrderBy.java۞681۩assertEquals( vValue, rs.getString("v") );
smallsql/junit/TestOrderBy.java۞683۩isNext = rs.next();
smallsql/junit/TestOrderBy.java۞684۩count = 1;
smallsql/junit/TestOrderBy.java۞685۩while(isNext && vValue.equals(rs.getString("v"))){
smallsql/junit/TestOrderBy.java۞686۩String newValue = rs.getString("c2");
smallsql/junit/TestOrderBy.java۞687۩assertTrue( oldValue.compareTo( newValue ) < 0 );
smallsql/junit/TestOrderBy.java۞688۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞689۩count++;
smallsql/junit/TestOrderBy.java۞690۩isNext = rs.next();
smallsql/junit/TestOrderBy.java۞691۩}
smallsql/junit/TestOrderBy.java۞692۩assertEquals( valueCount+1, count );
smallsql/junit/TestOrderBy.java۞693۩}
smallsql/junit/TestOrderBy.java۞694۩}
smallsql/junit/TestOrderBy.java۞698۩public void testOrderBy_Scollable() throws Exception{
smallsql/junit/TestOrderBy.java۞699۩init();
smallsql/junit/TestOrderBy.java۞700۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞701۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestOrderBy.java۞702۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞703۩int count;
smallsql/junit/TestOrderBy.java۞705۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by v");
smallsql/junit/TestOrderBy.java۞708۩rs.next();
smallsql/junit/TestOrderBy.java۞709۩rs.next();
smallsql/junit/TestOrderBy.java۞710۩rs.previous();
smallsql/junit/TestOrderBy.java۞712۩rs.last();
smallsql/junit/TestOrderBy.java۞713۩count = 0;
smallsql/junit/TestOrderBy.java۞714۩while(rs.previous()) count++;
smallsql/junit/TestOrderBy.java۞715۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞717۩rs.beforeFirst();
smallsql/junit/TestOrderBy.java۞718۩count = -1;
smallsql/junit/TestOrderBy.java۞719۩while(rs.next()) count++;
smallsql/junit/TestOrderBy.java۞720۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞722۩rs.beforeFirst();
smallsql/junit/TestOrderBy.java۞723۩count = -1;
smallsql/junit/TestOrderBy.java۞724۩while(rs.next()) count++;
smallsql/junit/TestOrderBy.java۞725۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞726۩}
smallsql/junit/TestOrderBy.java۞729۩public void testOrderBy_ScollableDesc() throws Exception{
smallsql/junit/TestOrderBy.java۞730۩init();
smallsql/junit/TestOrderBy.java۞731۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞732۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestOrderBy.java۞733۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞734۩int count;
smallsql/junit/TestOrderBy.java۞736۩rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by i desc, d");
smallsql/junit/TestOrderBy.java۞739۩rs.next();
smallsql/junit/TestOrderBy.java۞740۩rs.next();
smallsql/junit/TestOrderBy.java۞741۩rs.previous();
smallsql/junit/TestOrderBy.java۞743۩rs.last();
smallsql/junit/TestOrderBy.java۞744۩count = 0;
smallsql/junit/TestOrderBy.java۞745۩while(rs.previous()) count++;
smallsql/junit/TestOrderBy.java۞746۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞748۩rs.beforeFirst();
smallsql/junit/TestOrderBy.java۞749۩count = -1;
smallsql/junit/TestOrderBy.java۞750۩while(rs.next()) count++;
smallsql/junit/TestOrderBy.java۞751۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞753۩rs.beforeFirst();
smallsql/junit/TestOrderBy.java۞754۩count = -1;
smallsql/junit/TestOrderBy.java۞755۩while(rs.next()) count++;
smallsql/junit/TestOrderBy.java۞756۩assertEquals( valueCount, count );
smallsql/junit/TestOrderBy.java۞757۩}
smallsql/junit/TestOrderBy.java۞760۩public void testOrderBy_Scollable2() throws Exception{
smallsql/junit/TestOrderBy.java۞761۩init();
smallsql/junit/TestOrderBy.java۞762۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞763۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestOrderBy.java۞764۩ResultSet rs = st.executeQuery("SELECT * FROM " + table1 + " ORDER  by v");
smallsql/junit/TestOrderBy.java۞767۩int colCount = rs.getMetaData().getColumnCount();
smallsql/junit/TestOrderBy.java۞768۩ArrayList result = new ArrayList();
smallsql/junit/TestOrderBy.java۞769۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞770۩Object[] row = new Object[colCount];
smallsql/junit/TestOrderBy.java۞771۩for(int i=0; i<colCount; i++){
smallsql/junit/TestOrderBy.java۞772۩row[i] = rs.getObject(i+1);
smallsql/junit/TestOrderBy.java۞773۩}
smallsql/junit/TestOrderBy.java۞774۩result.add(row);
smallsql/junit/TestOrderBy.java۞775۩}
smallsql/junit/TestOrderBy.java۞777۩int rowCount = result.size();
smallsql/junit/TestOrderBy.java۞778۩while(rs.previous()){
smallsql/junit/TestOrderBy.java۞779۩Object[] row = (Object[])result.get(--rowCount);
smallsql/junit/TestOrderBy.java۞780۩for(int i=0; i<colCount; i++){
smallsql/junit/TestOrderBy.java۞781۩assertEquals( "Difference in row:"+rowCount, row[i], rs.getObject(i+1));
smallsql/junit/TestOrderBy.java۞782۩}
smallsql/junit/TestOrderBy.java۞783۩}
smallsql/junit/TestOrderBy.java۞784۩assertEquals( "RowCount different between next and previous:"+rowCount, 0, rowCount);
smallsql/junit/TestOrderBy.java۞785۩}
smallsql/junit/TestOrderBy.java۞788۩public void testUnion() throws Exception{
smallsql/junit/TestOrderBy.java۞789۩init();
smallsql/junit/TestOrderBy.java۞790۩Connection con = AllTests.getConnection();
smallsql/junit/TestOrderBy.java۞791۩Statement st = con.createStatement();
smallsql/junit/TestOrderBy.java۞792۩ResultSet rs;
smallsql/junit/TestOrderBy.java۞793۩String oldValue;
smallsql/junit/TestOrderBy.java۞795۩rs = st.executeQuery("SELECT v, 5 as Const FROM " + table1 + " Union All Select vc, 6 From " + table3 + " ORDER by v");
smallsql/junit/TestOrderBy.java۞797۩assertRSMetaData(rs, new String[]{"v", "Const"}, new int[]{Types.VARCHAR, Types.INTEGER});
smallsql/junit/TestOrderBy.java۞799۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞800۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞801۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞803۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞804۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞805۩assertNull(oldValue);
smallsql/junit/TestOrderBy.java۞807۩assertTrue( rs.next() );
smallsql/junit/TestOrderBy.java۞808۩oldValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞810۩int count = 3;
smallsql/junit/TestOrderBy.java۞811۩while(rs.next()){
smallsql/junit/TestOrderBy.java۞812۩String newValue = rs.getString("v");
smallsql/junit/TestOrderBy.java۞813۩assertTrue( oldValue.compareTo( newValue ) < 0 );
smallsql/junit/TestOrderBy.java۞814۩oldValue = newValue;
smallsql/junit/TestOrderBy.java۞815۩count++;
smallsql/junit/TestOrderBy.java۞816۩}
smallsql/junit/TestOrderBy.java۞817۩assertEquals( valueCount+4, count );
smallsql/junit/TestOrderBy.java۞818۩}
smallsql/junit/TestOrderBy.java۞821۩}
smallsql/junit/TestOther.java۞34۩package smallsql.junit;
smallsql/junit/TestOther.java۞36۩import java.sql.*;
smallsql/junit/TestOther.java۞41۩public class TestOther extends BasicTestCase {
smallsql/junit/TestOther.java۞43۩public void testInsertSelect() throws Exception{
smallsql/junit/TestOther.java۞44۩Connection con = AllTests.getConnection();
smallsql/junit/TestOther.java۞45۩try{
smallsql/junit/TestOther.java۞46۩con.createStatement().execute("Create Table InsertSelect (i counter, v varchar(20))");
smallsql/junit/TestOther.java۞47۩assertEqualsRsValue( new Integer(0), "Select count(*) from InsertSelect");
smallsql/junit/TestOther.java۞49۩con.createStatement().execute("Insert Into InsertSelect(v) Values('qwert')");
smallsql/junit/TestOther.java۞50۩assertEqualsRsValue( new Integer(1), "Select count(*) from InsertSelect");
smallsql/junit/TestOther.java۞52۩con.createStatement().execute("Insert Into InsertSelect(v) Select v From InsertSelect");
smallsql/junit/TestOther.java۞53۩assertEqualsRsValue( new Integer(2), "Select count(*) from InsertSelect");
smallsql/junit/TestOther.java۞55۩con.createStatement().execute("Insert Into InsertSelect(v) (Select v From InsertSelect)");
smallsql/junit/TestOther.java۞56۩assertEqualsRsValue( new Integer(4), "Select count(*) from InsertSelect");
smallsql/junit/TestOther.java۞57۩}finally{
smallsql/junit/TestOther.java۞58۩dropTable( con, "InsertSelect" );
smallsql/junit/TestOther.java۞59۩}
smallsql/junit/TestOther.java۞60۩}
smallsql/junit/TestOther.java۞63۩public void testDistinct() throws Exception{
smallsql/junit/TestOther.java۞64۩Connection con = AllTests.getConnection();
smallsql/junit/TestOther.java۞65۩try{
smallsql/junit/TestOther.java۞66۩con.createStatement().execute("Create Table TestDistinct (i counter, v varchar(20), n bigint, b boolean)");
smallsql/junit/TestOther.java۞67۩assertRowCount( 0, "Select * From TestDistinct" );
smallsql/junit/TestOther.java۞69۩con.createStatement().execute("Insert Into TestDistinct(v,b) Values('qwert1',true)");
smallsql/junit/TestOther.java۞70۩con.createStatement().execute("Insert Into TestDistinct(v,b) Values('qwert2',true)");
smallsql/junit/TestOther.java۞71۩con.createStatement().execute("Insert Into TestDistinct(v,b) Values('qwert1',true)");
smallsql/junit/TestOther.java۞72۩con.createStatement().execute("Insert Into TestDistinct(v,b) Values('qwert2',true)");
smallsql/junit/TestOther.java۞73۩con.createStatement().execute("Insert Into TestDistinct(v,b) Values('qwert1',false)");
smallsql/junit/TestOther.java۞74۩assertRowCount( 5, "Select b,n,v From TestDistinct" );
smallsql/junit/TestOther.java۞75۩assertRowCount( 2, "Select Distinct v From TestDistinct t1" );
smallsql/junit/TestOther.java۞76۩assertRowCount( 3, "Select Distinct b,n,v From TestDistinct" );
smallsql/junit/TestOther.java۞77۩assertRowCount( 3, "Select Distinct b,n,v,i+null,23+i-i,'asdf'+v From TestDistinct" );
smallsql/junit/TestOther.java۞78۩assertRowCount( 5, "Select All b,n,v From TestDistinct" );
smallsql/junit/TestOther.java۞79۩}finally{
smallsql/junit/TestOther.java۞80۩dropTable( con, "TestDistinct" );
smallsql/junit/TestOther.java۞81۩}
smallsql/junit/TestOther.java۞82۩}
smallsql/junit/TestOther.java۞85۩public void testConstantAndRowPos() throws Exception{
smallsql/junit/TestOther.java۞86۩assertRowCount( 1, "Select 12, 'qwert'" );
smallsql/junit/TestOther.java۞87۩}
smallsql/junit/TestOther.java۞90۩public void testNoFromResult() throws Exception{
smallsql/junit/TestOther.java۞91۩Connection con = AllTests.getConnection();
smallsql/junit/TestOther.java۞93۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY );
smallsql/junit/TestOther.java۞94۩ResultSet rs = st.executeQuery("Select 12, 'qwert' alias");
smallsql/junit/TestOther.java۞96۩assertRSMetaData( rs, new String[]{"col1", "alias"}, new int[]{Types.INTEGER, Types.VARCHAR });
smallsql/junit/TestOther.java۞98۩assertTrue( rs.isBeforeFirst() );
smallsql/junit/TestOther.java۞99۩assertFalse( rs.isFirst() );
smallsql/junit/TestOther.java۞100۩assertFalse( rs.isLast() );
smallsql/junit/TestOther.java۞101۩assertFalse( rs.isAfterLast() );
smallsql/junit/TestOther.java۞103۩assertTrue( rs.next() );
smallsql/junit/TestOther.java۞104۩assertFalse( rs.isBeforeFirst() );
smallsql/junit/TestOther.java۞105۩assertTrue( rs.isFirst() );
smallsql/junit/TestOther.java۞106۩assertTrue( rs.isLast() );
smallsql/junit/TestOther.java۞107۩assertFalse( rs.isAfterLast() );
smallsql/junit/TestOther.java۞109۩assertFalse( rs.next() );
smallsql/junit/TestOther.java۞110۩assertFalse( rs.isBeforeFirst() );
smallsql/junit/TestOther.java۞111۩assertFalse( rs.isFirst() );
smallsql/junit/TestOther.java۞112۩assertFalse( rs.isLast() );
smallsql/junit/TestOther.java۞113۩assertTrue( rs.isAfterLast() );
smallsql/junit/TestOther.java۞115۩assertTrue( rs.previous() );
smallsql/junit/TestOther.java۞116۩assertFalse( rs.isBeforeFirst() );
smallsql/junit/TestOther.java۞117۩assertTrue( rs.isFirst() );
smallsql/junit/TestOther.java۞118۩assertTrue( rs.isLast() );
smallsql/junit/TestOther.java۞119۩assertFalse( rs.isAfterLast() );
smallsql/junit/TestOther.java۞121۩assertFalse( rs.previous() );
smallsql/junit/TestOther.java۞122۩assertTrue( rs.isBeforeFirst() );
smallsql/junit/TestOther.java۞123۩assertFalse( rs.isFirst() );
smallsql/junit/TestOther.java۞124۩assertFalse( rs.isLast() );
smallsql/junit/TestOther.java۞125۩assertFalse( rs.isAfterLast() );
smallsql/junit/TestOther.java۞127۩assertTrue( rs.first() );
smallsql/junit/TestOther.java۞128۩assertFalse( rs.isBeforeFirst() );
smallsql/junit/TestOther.java۞129۩assertTrue( rs.isFirst() );
smallsql/junit/TestOther.java۞130۩assertTrue( rs.isLast() );
smallsql/junit/TestOther.java۞131۩assertFalse( rs.isAfterLast() );
smallsql/junit/TestOther.java۞133۩assertTrue( rs.last() );
smallsql/junit/TestOther.java۞134۩assertFalse( rs.isBeforeFirst() );
smallsql/junit/TestOther.java۞135۩assertTrue( rs.isFirst() );
smallsql/junit/TestOther.java۞136۩assertTrue( rs.isLast() );
smallsql/junit/TestOther.java۞137۩assertFalse( rs.isAfterLast() );
smallsql/junit/TestOther.java۞138۩}
smallsql/junit/TestOther.java۞141۩public void testInSelect() throws Exception{
smallsql/junit/TestOther.java۞142۩Connection con = AllTests.getConnection();
smallsql/junit/TestOther.java۞143۩try{
smallsql/junit/TestOther.java۞144۩con.createStatement().execute("Create Table TestInSelect (i counter, v varchar(20), n bigint, b boolean)");
smallsql/junit/TestOther.java۞145۩assertRowCount( 0, "Select * From TestInSelect WHere i In (Select i from TestInSelect)" );
smallsql/junit/TestOther.java۞147۩con.createStatement().execute("Insert Into TestInSelect(v,b) Values('qwert1',true)");
smallsql/junit/TestOther.java۞148۩assertRowCount( 1, "Select * From TestInSelect WHere i In (Select i from TestInSelect)" );
smallsql/junit/TestOther.java۞150۩con.createStatement().execute("Insert Into TestInSelect(v,b) Values('qwert1',true)");
smallsql/junit/TestOther.java۞151۩assertRowCount( 2, "Select * From TestInSelect WHere i In (Select i from TestInSelect)" );
smallsql/junit/TestOther.java۞152۩assertRowCount( 1, "Select * From TestInSelect WHere i In (Select i from TestInSelect Where i>1)" );
smallsql/junit/TestOther.java۞153۩assertRowCount( 1, "Select * From TestInSelect Where i IN ( 1, 1, 12345, 987654321)" );
smallsql/junit/TestOther.java۞154۩assertRowCount( 2, "Select * From TestInSelect Where v IN ( null, '', 'qwert1', 'qwert1')" );
smallsql/junit/TestOther.java۞155۩assertRowCount( 2, "Select * From TestInSelect Where v IN ( 'qwert1')" );
smallsql/junit/TestOther.java۞156۩assertRowCount( 0, "Select * From TestInSelect Where '' IN ( 'qwert1')" );
smallsql/junit/TestOther.java۞157۩assertRowCount( 2, "Select * From TestInSelect Where 'qwert1' IN ( 'qwert1', 'qwert2')" );
smallsql/junit/TestOther.java۞158۩}finally{
smallsql/junit/TestOther.java۞159۩dropTable( con, "TestInSelect" );
smallsql/junit/TestOther.java۞160۩}
smallsql/junit/TestOther.java۞161۩}
smallsql/junit/TestOther.java۞164۩public void testSetTransaction() throws Exception{
smallsql/junit/TestOther.java۞165۩Connection con = AllTests.getConnection();
smallsql/junit/TestOther.java۞166۩try{
smallsql/junit/TestOther.java۞167۩con.createStatement().execute("Set Transaction Isolation Level Read Uncommitted");
smallsql/junit/TestOther.java۞168۩assertEquals( Connection.TRANSACTION_READ_UNCOMMITTED, con.getTransactionIsolation() );
smallsql/junit/TestOther.java۞170۩con.createStatement().execute("Set Transaction Isolation Level Read Committed");
smallsql/junit/TestOther.java۞171۩assertEquals( Connection.TRANSACTION_READ_COMMITTED, con.getTransactionIsolation() );
smallsql/junit/TestOther.java۞173۩con.createStatement().execute("Set Transaction Isolation Level Repeatable Read");
smallsql/junit/TestOther.java۞174۩assertEquals( Connection.TRANSACTION_REPEATABLE_READ, con.getTransactionIsolation() );
smallsql/junit/TestOther.java۞176۩con.createStatement().execute("Set Transaction Isolation Level Serializable");
smallsql/junit/TestOther.java۞177۩assertEquals( Connection.TRANSACTION_SERIALIZABLE, con.getTransactionIsolation() );
smallsql/junit/TestOther.java۞179۩}finally{
smallsql/junit/TestOther.java۞180۩con.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );
smallsql/junit/TestOther.java۞181۩}
smallsql/junit/TestOther.java۞182۩}
smallsql/junit/TestOther.java۞185۩public void testCreateDropDatabases() throws Exception{
smallsql/junit/TestOther.java۞186۩Connection con = DriverManager.getConnection("jdbc:smallsql");
smallsql/junit/TestOther.java۞188۩Statement st = con.createStatement();
smallsql/junit/TestOther.java۞189۩try{
smallsql/junit/TestOther.java۞190۩st.execute("Create Database anyTestDatabase");
smallsql/junit/TestOther.java۞191۩}catch(SQLException ex){
smallsql/junit/TestOther.java۞192۩st.execute("Drop Database anyTestDatabase");
smallsql/junit/TestOther.java۞193۩throw ex;
smallsql/junit/TestOther.java۞194۩}
smallsql/junit/TestOther.java۞195۩st.execute("Drop Database anyTestDatabase");
smallsql/junit/TestOther.java۞196۩}
smallsql/junit/TestOther.java۞199۩public void testManyColumns() throws Exception{
smallsql/junit/TestOther.java۞200۩Connection con = AllTests.getConnection();
smallsql/junit/TestOther.java۞201۩Statement st = con.createStatement();
smallsql/junit/TestOther.java۞202۩dropTable( con, "ManyCols" );
smallsql/junit/TestOther.java۞203۩StringBuffer buf = new StringBuffer("Create Table ManyCols(");
smallsql/junit/TestOther.java۞204۩for(int i=1; i<300; i++){
smallsql/junit/TestOther.java۞205۩if(i!=1)buf.append(',');
smallsql/junit/TestOther.java۞206۩buf.append("column").append(i).append(" int");
smallsql/junit/TestOther.java۞207۩}
smallsql/junit/TestOther.java۞208۩buf.append(')');
smallsql/junit/TestOther.java۞210۩st.execute(buf.toString());
smallsql/junit/TestOther.java۞211۩con.close();
smallsql/junit/TestOther.java۞212۩con = AllTests.getConnection();
smallsql/junit/TestOther.java۞213۩st = con.createStatement();
smallsql/junit/TestOther.java۞214۩assertEquals(1,st.executeUpdate("Insert Into ManyCols(column260) Values(123456)"));
smallsql/junit/TestOther.java۞215۩st.execute("Drop Table ManyCols");
smallsql/junit/TestOther.java۞216۩}
smallsql/junit/TestOther.java۞224۩public void testCharEqualsVarchar() throws Exception{
smallsql/junit/TestOther.java۞225۩Connection con = AllTests.getConnection();
smallsql/junit/TestOther.java۞226۩try{
smallsql/junit/TestOther.java۞227۩con.createStatement().execute("Create Table CharEqualsVarchar (c char(10))");
smallsql/junit/TestOther.java۞228۩assertRowCount( 0, "Select * From CharEqualsVarchar" );
smallsql/junit/TestOther.java۞230۩con.createStatement().execute("Insert Into CharEqualsVarchar(c) Values('qwert1')");
smallsql/junit/TestOther.java۞231۩assertRowCount( 1, "Select * From CharEqualsVarchar" );
smallsql/junit/TestOther.java۞233۩assertRowCount( 1, "Select * From CharEqualsVarchar Where c = 'qwert1'" );
smallsql/junit/TestOther.java۞234۩assertRowCount( 0, "Select * From CharEqualsVarchar Where c = 'qwert1        xxxx'" );
smallsql/junit/TestOther.java۞235۩assertRowCount( 1, "Select * From CharEqualsVarchar Where c = cast('qwert1' as char(8))" );
smallsql/junit/TestOther.java۞236۩assertRowCount( 1, "Select * From CharEqualsVarchar Where c = cast('qwert1' as char(12))" );
smallsql/junit/TestOther.java۞237۩assertRowCount( 1, "Select * From CharEqualsVarchar Where c In('qwert1')" );
smallsql/junit/TestOther.java۞238۩assertRowCount( 0, "Select * From CharEqualsVarchar Where c In('qwert1        xxxx')" );
smallsql/junit/TestOther.java۞240۩PreparedStatement pr;
smallsql/junit/TestOther.java۞241۩pr = con.prepareStatement( "Select * From CharEqualsVarchar Where c = ?" );
smallsql/junit/TestOther.java۞242۩pr.setString( 1, "qwert1" );
smallsql/junit/TestOther.java۞243۩assertRowCount( 1, pr.executeQuery() );
smallsql/junit/TestOther.java۞244۩pr.setString( 1, "qwert1        xxxx" );
smallsql/junit/TestOther.java۞245۩assertRowCount( 0, pr.executeQuery() );
smallsql/junit/TestOther.java۞246۩}finally{
smallsql/junit/TestOther.java۞247۩dropTable( con, "CharEqualsVarchar" );
smallsql/junit/TestOther.java۞248۩}
smallsql/junit/TestOther.java۞249۩}
smallsql/junit/TestOther.java۞252۩public void testLike() throws Exception{
smallsql/junit/TestOther.java۞253۩Connection con = AllTests.getConnection();
smallsql/junit/TestOther.java۞254۩try{
smallsql/junit/TestOther.java۞255۩con.createStatement().execute("Create Table Like (c varchar(20))");
smallsql/junit/TestOther.java۞257۩con.createStatement().execute("Insert Into Like(c) Values('qwert1')");
smallsql/junit/TestOther.java۞258۩con.createStatement().execute("Insert Into Like(c) Values('qwert2')");
smallsql/junit/TestOther.java۞259۩con.createStatement().execute("Insert Into Like(c) Values('qwert2.5')");
smallsql/junit/TestOther.java۞260۩con.createStatement().execute("Insert Into Like(c) Values('awert1')");
smallsql/junit/TestOther.java۞261۩con.createStatement().execute("Insert Into Like(c) Values('awert2')");
smallsql/junit/TestOther.java۞262۩con.createStatement().execute("Insert Into Like(c) Values('awert3')");
smallsql/junit/TestOther.java۞263۩con.createStatement().execute("Insert Into Like(c) Values('qweSGSGSrt1')");
smallsql/junit/TestOther.java۞265۩assertRowCount( 2, "Select * From Like Where c like 'qwert_'" );
smallsql/junit/TestOther.java۞266۩assertRowCount( 3, "Select * From Like Where c like 'qwert%'" );
smallsql/junit/TestOther.java۞267۩assertRowCount( 2, "Select * From Like Where c like 'qwert2%'" );
smallsql/junit/TestOther.java۞269۩assertRowCount( 6, "Select * From Like Where c like '_wert%'" );
smallsql/junit/TestOther.java۞270۩assertRowCount( 2, "Select * From Like Where c like 'qwe%rt1'" );
smallsql/junit/TestOther.java۞271۩assertRowCount( 3, "Select * From Like Where c like 'qwe%rt_'" );
smallsql/junit/TestOther.java۞272۩assertRowCount( 7, "Select * From Like Where c like '%_'" );
smallsql/junit/TestOther.java۞274۩}finally{
smallsql/junit/TestOther.java۞275۩dropTable( con, "Like" );
smallsql/junit/TestOther.java۞276۩}
smallsql/junit/TestOther.java۞277۩}
smallsql/junit/TestOther.java۞280۩public void testBinaryStore() throws Exception{
smallsql/junit/TestOther.java۞281۩Connection con = AllTests.getConnection();
smallsql/junit/TestOther.java۞282۩try{
smallsql/junit/TestOther.java۞283۩Statement st = con.createStatement();
smallsql/junit/TestOther.java۞284۩st.execute("Create Table Binary (b varbinary(20))");
smallsql/junit/TestOther.java۞286۩st.execute("Truncate Table Binary");
smallsql/junit/TestOther.java۞287۩st.execute("Insert Into Binary(b) Values(12345)");
smallsql/junit/TestOther.java۞288۩ResultSet rs = st.executeQuery("Select * From Binary");
smallsql/junit/TestOther.java۞289۩rs.next();
smallsql/junit/TestOther.java۞290۩assertEquals(rs.getInt(1), 12345);
smallsql/junit/TestOther.java۞292۩st.execute("Truncate Table Binary");
smallsql/junit/TestOther.java۞293۩st.execute("Insert Into Binary(b) Values(1.2345)");
smallsql/junit/TestOther.java۞294۩rs = st.executeQuery("Select * From Binary");
smallsql/junit/TestOther.java۞295۩rs.next();
smallsql/junit/TestOther.java۞296۩assertEquals( 1.2345, rs.getDouble(1), 0.0);
smallsql/junit/TestOther.java۞298۩st.execute("Truncate Table Binary");
smallsql/junit/TestOther.java۞299۩st.execute("Insert Into Binary(b) Values(cast(1.2345 as real))");
smallsql/junit/TestOther.java۞300۩rs = st.executeQuery("Select * From Binary");
smallsql/junit/TestOther.java۞301۩rs.next();
smallsql/junit/TestOther.java۞302۩assertEquals( 1.2345F, rs.getFloat(1), 0.0);
smallsql/junit/TestOther.java۞304۩}finally{
smallsql/junit/TestOther.java۞305۩dropTable( con, "Binary" );
smallsql/junit/TestOther.java۞306۩}
smallsql/junit/TestOther.java۞307۩}
smallsql/junit/TestOther.java۞310۩public void testCatalog() throws Exception{
smallsql/junit/TestOther.java۞311۩Connection con = DriverManager.getConnection("jdbc:smallsql");
smallsql/junit/TestOther.java۞312۩assertEquals( "", con.getCatalog() );
smallsql/junit/TestOther.java۞313۩con.setCatalog( AllTests.CATALOG );
smallsql/junit/TestOther.java۞314۩assertEquals( AllTests.CATALOG, con.getCatalog() );
smallsql/junit/TestOther.java۞315۩con.close();
smallsql/junit/TestOther.java۞317۩con = DriverManager.getConnection("jdbc:smallsql");
smallsql/junit/TestOther.java۞318۩assertEquals( "", con.getCatalog() );
smallsql/junit/TestOther.java۞319۩con.createStatement().execute( "Use " + AllTests.CATALOG );
smallsql/junit/TestOther.java۞320۩assertEquals( AllTests.CATALOG, con.getCatalog() );
smallsql/junit/TestOther.java۞321۩con.close();
smallsql/junit/TestOther.java۞323۩con = DriverManager.getConnection("jdbc:smallsql?dbpath=" + AllTests.CATALOG);
smallsql/junit/TestOther.java۞324۩assertEquals( AllTests.CATALOG, con.getCatalog() );
smallsql/junit/TestOther.java۞325۩con.close();
smallsql/junit/TestOther.java۞326۩}
smallsql/junit/TestOther.java۞327۩}
smallsql/junit/TestResultSet.java۞34۩package smallsql.junit;
smallsql/junit/TestResultSet.java۞36۩import java.sql.*;
smallsql/junit/TestResultSet.java۞43۩public class TestResultSet extends BasicTestCase {
smallsql/junit/TestResultSet.java۞45۩private static boolean init;
smallsql/junit/TestResultSet.java۞48۩protected void setUp() throws Exception{
smallsql/junit/TestResultSet.java۞49۩if(init) return;
smallsql/junit/TestResultSet.java۞50۩Connection con = AllTests.getConnection();
smallsql/junit/TestResultSet.java۞51۩Statement st = con.createStatement();
smallsql/junit/TestResultSet.java۞52۩dropTable( con, "ResultSet");
smallsql/junit/TestResultSet.java۞53۩st.execute("Create Table ResultSet (i int identity, c varchar(30))");
smallsql/junit/TestResultSet.java۞55۩st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestResultSet.java۞56۩ResultSet rs = st.executeQuery("Select * From ResultSet");
smallsql/junit/TestResultSet.java۞58۩rs.moveToInsertRow();
smallsql/junit/TestResultSet.java۞59۩rs.insertRow();
smallsql/junit/TestResultSet.java۞60۩rs.moveToInsertRow();
smallsql/junit/TestResultSet.java۞61۩rs.insertRow();
smallsql/junit/TestResultSet.java۞62۩init = true;
smallsql/junit/TestResultSet.java۞63۩}
smallsql/junit/TestResultSet.java۞66۩public void testScrollStates() throws Exception{
smallsql/junit/TestResultSet.java۞67۩Connection con = AllTests.getConnection();
smallsql/junit/TestResultSet.java۞68۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestResultSet.java۞69۩ResultSet rs = st.executeQuery("Select * From ResultSet Where 1=0");
smallsql/junit/TestResultSet.java۞71۩assertTrue("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞72۩assertTrue("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞73۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞75۩rs.moveToInsertRow();
smallsql/junit/TestResultSet.java۞76۩rs.insertRow();
smallsql/junit/TestResultSet.java۞78۩rs.beforeFirst();
smallsql/junit/TestResultSet.java۞79۩assertTrue("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞80۩assertFalse("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞81۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞82۩assertTrue("next", rs.next() );
smallsql/junit/TestResultSet.java۞83۩assertTrue("isFirst", rs.isFirst() );
smallsql/junit/TestResultSet.java۞84۩assertTrue("rowInserted", rs.rowInserted() );
smallsql/junit/TestResultSet.java۞85۩assertEquals("getRow", 1, rs.getRow() );
smallsql/junit/TestResultSet.java۞86۩assertTrue("isLast", rs.isLast() );
smallsql/junit/TestResultSet.java۞87۩assertFalse("next", rs.next() );
smallsql/junit/TestResultSet.java۞88۩assertFalse("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞89۩assertTrue("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞90۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞92۩assertTrue("first", rs.first() );
smallsql/junit/TestResultSet.java۞93۩assertEquals("getRow", 1, rs.getRow() );
smallsql/junit/TestResultSet.java۞95۩assertFalse("previous", rs.previous() );
smallsql/junit/TestResultSet.java۞96۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞97۩assertTrue("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞98۩assertFalse("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞100۩assertTrue("last", rs.last() );
smallsql/junit/TestResultSet.java۞101۩assertEquals("getRow", 1, rs.getRow() );
smallsql/junit/TestResultSet.java۞102۩assertTrue("isLast", rs.isLast() );
smallsql/junit/TestResultSet.java۞104۩rs.afterLast();
smallsql/junit/TestResultSet.java۞105۩assertFalse("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞106۩assertTrue("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞107۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞108۩}
smallsql/junit/TestResultSet.java۞111۩public void testScrollStatesGroupBy() throws Exception{
smallsql/junit/TestResultSet.java۞112۩Connection con = AllTests.getConnection();
smallsql/junit/TestResultSet.java۞113۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestResultSet.java۞114۩ResultSet rs = st.executeQuery("Select i,max(c) From ResultSet Group By i HAVING i=1");
smallsql/junit/TestResultSet.java۞116۩assertEquals("getConcurrency",ResultSet.CONCUR_READ_ONLY, rs.getConcurrency());
smallsql/junit/TestResultSet.java۞117۩assertTrue("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞118۩assertFalse("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞119۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞121۩rs.beforeFirst();
smallsql/junit/TestResultSet.java۞122۩assertTrue("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞123۩assertFalse("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞124۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞125۩assertTrue("next", rs.next() );
smallsql/junit/TestResultSet.java۞126۩assertTrue("isFirst", rs.isFirst() );
smallsql/junit/TestResultSet.java۞127۩assertFalse("rowInserted", rs.rowInserted() );
smallsql/junit/TestResultSet.java۞128۩assertEquals("getRow", 1, rs.getRow() );
smallsql/junit/TestResultSet.java۞129۩assertTrue("isLast", rs.isLast() );
smallsql/junit/TestResultSet.java۞130۩assertFalse("next", rs.next() );
smallsql/junit/TestResultSet.java۞131۩assertFalse("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞132۩assertTrue("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞133۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞135۩assertTrue("first", rs.first() );
smallsql/junit/TestResultSet.java۞136۩assertEquals("getRow", 1, rs.getRow() );
smallsql/junit/TestResultSet.java۞138۩assertFalse("previous", rs.previous() );
smallsql/junit/TestResultSet.java۞139۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞140۩assertTrue("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞141۩assertFalse("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞143۩assertTrue("last", rs.last() );
smallsql/junit/TestResultSet.java۞144۩assertEquals("getRow", 1, rs.getRow() );
smallsql/junit/TestResultSet.java۞145۩assertTrue("isLast", rs.isLast() );
smallsql/junit/TestResultSet.java۞147۩rs.afterLast();
smallsql/junit/TestResultSet.java۞148۩assertFalse("isBeforeFirst", rs.isBeforeFirst() );
smallsql/junit/TestResultSet.java۞149۩assertTrue("isAfterLast", rs.isAfterLast() );
smallsql/junit/TestResultSet.java۞150۩assertEquals("getRow", 0, rs.getRow() );
smallsql/junit/TestResultSet.java۞151۩}
smallsql/junit/TestResultSet.java۞154۩public void testUpdate() throws Exception{
smallsql/junit/TestResultSet.java۞155۩Connection con = AllTests.getConnection();
smallsql/junit/TestResultSet.java۞156۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestResultSet.java۞157۩ResultSet rs;
smallsql/junit/TestResultSet.java۞161۩rs = st.executeQuery("Select * From ResultSet");
smallsql/junit/TestResultSet.java۞162۩assertTrue("next", rs.next());
smallsql/junit/TestResultSet.java۞163۩assertEquals("getRow", 1, rs.getRow() );
smallsql/junit/TestResultSet.java۞164۩int id = rs.getInt("i");
smallsql/junit/TestResultSet.java۞165۩rs.updateShort("c", (short)123 );
smallsql/junit/TestResultSet.java۞166۩assertEquals( (short)123, rs.getShort("c") );
smallsql/junit/TestResultSet.java۞167۩assertEquals( id, rs.getInt("i") );
smallsql/junit/TestResultSet.java۞168۩rs.updateRow();
smallsql/junit/TestResultSet.java۞169۩assertEquals( (short)123, rs.getShort("c") );
smallsql/junit/TestResultSet.java۞170۩assertFalse( rs.rowUpdated() );
smallsql/junit/TestResultSet.java۞171۩assertFalse( rs.rowInserted() );
smallsql/junit/TestResultSet.java۞172۩assertFalse( rs.rowDeleted() );
smallsql/junit/TestResultSet.java۞173۩assertEquals("getRow", 1, rs.getRow() );
smallsql/junit/TestResultSet.java۞176۩rs = st.executeQuery("Select * From ResultSet");
smallsql/junit/TestResultSet.java۞177۩assertTrue("next", rs.next());
smallsql/junit/TestResultSet.java۞178۩rs.updateByte("c", (byte)66 );
smallsql/junit/TestResultSet.java۞179۩assertEquals( (byte)66, rs.getByte("c") );
smallsql/junit/TestResultSet.java۞180۩rs.updateRow();
smallsql/junit/TestResultSet.java۞181۩assertEquals( (short)66, rs.getShort("c") );
smallsql/junit/TestResultSet.java۞182۩}
smallsql/junit/TestResultSet.java۞188۩public void testUpdateAndScroll() throws Exception{
smallsql/junit/TestResultSet.java۞189۩final Object value = "UpdateAndScroll";
smallsql/junit/TestResultSet.java۞190۩Object value1;
smallsql/junit/TestResultSet.java۞191۩Object value2;
smallsql/junit/TestResultSet.java۞192۩Connection con = AllTests.getConnection();
smallsql/junit/TestResultSet.java۞193۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestResultSet.java۞194۩ResultSet rs = st.executeQuery("Select * From ResultSet");
smallsql/junit/TestResultSet.java۞197۩assertTrue("start", rs.last());
smallsql/junit/TestResultSet.java۞198۩value1 = rs.getObject("i");
smallsql/junit/TestResultSet.java۞199۩rs.updateObject("c", value, Types.VARCHAR );
smallsql/junit/TestResultSet.java۞200۩assertEquals("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞201۩assertEquals("getObject", value1, rs.getObject("i"));
smallsql/junit/TestResultSet.java۞202۩assertTrue("first", rs.first());
smallsql/junit/TestResultSet.java۞203۩assertNotSame("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞206۩assertTrue("start", rs.first());
smallsql/junit/TestResultSet.java۞207۩rs.updateObject("c", value, Types.VARCHAR );
smallsql/junit/TestResultSet.java۞208۩assertEquals("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞209۩assertTrue("next", rs.next());
smallsql/junit/TestResultSet.java۞210۩assertNotSame("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞213۩assertTrue("start", rs.last());
smallsql/junit/TestResultSet.java۞214۩rs.updateObject("c", value );
smallsql/junit/TestResultSet.java۞215۩assertEquals("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞216۩assertTrue("previous", rs.previous());
smallsql/junit/TestResultSet.java۞217۩assertNotSame("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞220۩assertTrue("start", rs.first());
smallsql/junit/TestResultSet.java۞221۩rs.updateObject("c", value, Types.VARCHAR );
smallsql/junit/TestResultSet.java۞222۩assertEquals("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞223۩assertTrue("last", rs.last());
smallsql/junit/TestResultSet.java۞224۩assertNotSame("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞227۩assertTrue("start", rs.first());
smallsql/junit/TestResultSet.java۞228۩rs.updateObject("c", value, Types.VARCHAR );
smallsql/junit/TestResultSet.java۞229۩assertEquals("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞230۩rs.refreshRow();
smallsql/junit/TestResultSet.java۞231۩assertNotSame("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞234۩assertTrue("start", rs.first());
smallsql/junit/TestResultSet.java۞235۩value1 = rs.getObject("i");
smallsql/junit/TestResultSet.java۞236۩value2 = rs.getObject("c");
smallsql/junit/TestResultSet.java۞237۩rs.updateObject("c", value);
smallsql/junit/TestResultSet.java۞238۩assertEquals("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞239۩rs.moveToInsertRow();
smallsql/junit/TestResultSet.java۞240۩assertNull("new row", rs.getObject("i"));
smallsql/junit/TestResultSet.java۞241۩assertNull("new row", rs.getObject("c"));
smallsql/junit/TestResultSet.java۞242۩rs.updateObject("c", value);
smallsql/junit/TestResultSet.java۞243۩assertEquals("getObject", value, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞244۩rs.moveToCurrentRow();
smallsql/junit/TestResultSet.java۞245۩assertEquals("getObject", value1, rs.getObject("i"));
smallsql/junit/TestResultSet.java۞246۩assertEquals("getObject", value2, rs.getObject("c"));
smallsql/junit/TestResultSet.java۞247۩}
smallsql/junit/TestResultSet.java۞250۩public void testDelete() throws Exception{
smallsql/junit/TestResultSet.java۞251۩Connection con = AllTests.getConnection();
smallsql/junit/TestResultSet.java۞252۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestResultSet.java۞253۩ResultSet rs = st.executeQuery("Select * From ResultSet Where i>1");
smallsql/junit/TestResultSet.java۞255۩assertTrue("next", rs.next());
smallsql/junit/TestResultSet.java۞256۩assertFalse( rs.rowDeleted() );
smallsql/junit/TestResultSet.java۞257۩rs.deleteRow();
smallsql/junit/TestResultSet.java۞258۩assertTrue( rs.rowDeleted() );
smallsql/junit/TestResultSet.java۞259۩}
smallsql/junit/TestResultSet.java۞262۩public void testOther() throws Exception{
smallsql/junit/TestResultSet.java۞263۩Connection con = AllTests.getConnection();
smallsql/junit/TestResultSet.java۞264۩Statement st = con.createStatement();
smallsql/junit/TestResultSet.java۞265۩ResultSet rs = st.executeQuery("Select * From ResultSet");
smallsql/junit/TestResultSet.java۞267۩assertEquals(st, rs.getStatement());
smallsql/junit/TestResultSet.java۞270۩rs.clearWarnings();
smallsql/junit/TestResultSet.java۞271۩assertNull(rs.getWarnings());
smallsql/junit/TestResultSet.java۞273۩rs.setFetchDirection(ResultSet.FETCH_FORWARD);
smallsql/junit/TestResultSet.java۞274۩assertEquals( rs.getFetchDirection(), ResultSet.FETCH_FORWARD);
smallsql/junit/TestResultSet.java۞276۩rs.setFetchDirection(ResultSet.FETCH_REVERSE);
smallsql/junit/TestResultSet.java۞277۩assertEquals( rs.getFetchDirection(), ResultSet.FETCH_REVERSE);
smallsql/junit/TestResultSet.java۞279۩rs.setFetchSize(123);
smallsql/junit/TestResultSet.java۞280۩assertEquals( rs.getFetchSize(), 123);
smallsql/junit/TestResultSet.java۞281۩}
smallsql/junit/TestResultSet.java۞282۩}
smallsql/junit/TestScrollable.java۞34۩package smallsql.junit;
smallsql/junit/TestScrollable.java۞36۩import java.sql.*;
smallsql/junit/TestScrollable.java۞41۩public class TestScrollable extends BasicTestCase {
smallsql/junit/TestScrollable.java۞43۩public void testLastWithWhere() throws Exception{
smallsql/junit/TestScrollable.java۞44۩Connection con = AllTests.getConnection();
smallsql/junit/TestScrollable.java۞45۩try{
smallsql/junit/TestScrollable.java۞46۩con.createStatement().execute("Create Table Scrollable (i counter, v varchar(20))");
smallsql/junit/TestScrollable.java۞47۩assertRowCount( 0, "Select * from Scrollable");
smallsql/junit/TestScrollable.java۞49۩con.createStatement().execute("Insert Into Scrollable(v) Values('qwert')");
smallsql/junit/TestScrollable.java۞50۩assertRowCount( 1, "Select * from Scrollable");
smallsql/junit/TestScrollable.java۞51۩assertRowCount( 0, "Select * from Scrollable Where 1=0");
smallsql/junit/TestScrollable.java۞53۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestScrollable.java۞54۩testLastWithWhereAssert( st.executeQuery("Select * from Scrollable Where 1=0") );
smallsql/junit/TestScrollable.java۞55۩testLastWithWhereAssert( st.executeQuery("Select * from Scrollable Where 1=0 Order By v") );
smallsql/junit/TestScrollable.java۞56۩testLastWithWhereAssert( st.executeQuery("Select v from Scrollable Where 1=0 Order By v") );
smallsql/junit/TestScrollable.java۞57۩testLastWithWhereAssert( st.executeQuery("Select v from Scrollable Where 1=0 Group By v Order By v") );
smallsql/junit/TestScrollable.java۞58۩}finally{
smallsql/junit/TestScrollable.java۞59۩dropTable( con, "Scrollable");
smallsql/junit/TestScrollable.java۞60۩}
smallsql/junit/TestScrollable.java۞61۩}
smallsql/junit/TestScrollable.java۞64۩private void testLastWithWhereAssert(ResultSet rs) throws Exception{
smallsql/junit/TestScrollable.java۞65۩assertFalse( "There should be no rows:", rs.last());
smallsql/junit/TestScrollable.java۞66۩assertFalse( "isLast", rs.isLast());
smallsql/junit/TestScrollable.java۞67۩try{
smallsql/junit/TestScrollable.java۞68۩rs.getString("v");
smallsql/junit/TestScrollable.java۞69۩fail("SQLException 'No current row' should be throw");
smallsql/junit/TestScrollable.java۞70۩}catch(SQLException ex){
smallsql/junit/TestScrollable.java۞71۩assertSQLException( "01000", 0, ex );
smallsql/junit/TestScrollable.java۞72۩}
smallsql/junit/TestScrollable.java۞73۩}
smallsql/junit/TestScrollable.java۞76۩public void testNextWithWhere() throws Exception{
smallsql/junit/TestScrollable.java۞77۩Connection con = AllTests.getConnection();
smallsql/junit/TestScrollable.java۞78۩try{
smallsql/junit/TestScrollable.java۞79۩con.createStatement().execute("Create Table Scrollable (i counter, v varchar(20))");
smallsql/junit/TestScrollable.java۞80۩assertRowCount( 0, "Select * from Scrollable");
smallsql/junit/TestScrollable.java۞82۩con.createStatement().execute("Insert Into Scrollable(v) Values('qwert')");
smallsql/junit/TestScrollable.java۞83۩assertRowCount( 1, "Select * from Scrollable");
smallsql/junit/TestScrollable.java۞84۩assertRowCount( 0, "Select * from Scrollable Where 1=0");
smallsql/junit/TestScrollable.java۞86۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestScrollable.java۞87۩testNextWithWhereAssert( st.executeQuery("Select * from Scrollable Where 1=0") );
smallsql/junit/TestScrollable.java۞88۩testNextWithWhereAssert( st.executeQuery("Select * from Scrollable Where 1=0 Order By v") );
smallsql/junit/TestScrollable.java۞89۩testNextWithWhereAssert( st.executeQuery("Select v from Scrollable Where 1=0 Group By v") );
smallsql/junit/TestScrollable.java۞90۩testNextWithWhereAssert( st.executeQuery("Select v from Scrollable Where 1=0 Group By v Order By v") );
smallsql/junit/TestScrollable.java۞91۩}finally{
smallsql/junit/TestScrollable.java۞92۩dropTable( con, "Scrollable");
smallsql/junit/TestScrollable.java۞93۩}
smallsql/junit/TestScrollable.java۞94۩}
smallsql/junit/TestScrollable.java۞97۩private void testNextWithWhereAssert(ResultSet rs) throws Exception{
smallsql/junit/TestScrollable.java۞98۩assertFalse("There should be no rows:", rs.next());
smallsql/junit/TestScrollable.java۞99۩try{
smallsql/junit/TestScrollable.java۞100۩rs.getString("v");
smallsql/junit/TestScrollable.java۞101۩fail("SQLException 'No current row' should be throw");
smallsql/junit/TestScrollable.java۞102۩}catch(SQLException ex){
smallsql/junit/TestScrollable.java۞103۩assertSQLException( "01000", 0, ex);
smallsql/junit/TestScrollable.java۞104۩}
smallsql/junit/TestScrollable.java۞105۩}
smallsql/junit/TestScrollable.java۞108۩public void testFirstWithWhere() throws Exception{
smallsql/junit/TestScrollable.java۞109۩Connection con = AllTests.getConnection();
smallsql/junit/TestScrollable.java۞110۩try{
smallsql/junit/TestScrollable.java۞111۩con.createStatement().execute("Create Table Scrollable (i counter, v varchar(20))");
smallsql/junit/TestScrollable.java۞112۩assertRowCount( 0, "Select * from Scrollable");
smallsql/junit/TestScrollable.java۞114۩con.createStatement().execute("Insert Into Scrollable(v) Values('qwert')");
smallsql/junit/TestScrollable.java۞115۩assertRowCount( 1, "Select * from Scrollable");
smallsql/junit/TestScrollable.java۞116۩assertRowCount( 0, "Select * from Scrollable Where 1=0");
smallsql/junit/TestScrollable.java۞118۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestScrollable.java۞119۩testFirstWithWhereAssert( st.executeQuery("Select * from Scrollable Where 1=0") );
smallsql/junit/TestScrollable.java۞120۩testFirstWithWhereAssert( st.executeQuery("Select * from Scrollable Where 1=0 Order By v") );
smallsql/junit/TestScrollable.java۞121۩testFirstWithWhereAssert( st.executeQuery("Select v from Scrollable Where 1=0 Group By v") );
smallsql/junit/TestScrollable.java۞122۩testFirstWithWhereAssert( st.executeQuery("Select v from Scrollable Where 1=0 Group By v Order By v") );
smallsql/junit/TestScrollable.java۞123۩}finally{
smallsql/junit/TestScrollable.java۞124۩dropTable( con, "Scrollable");
smallsql/junit/TestScrollable.java۞125۩}
smallsql/junit/TestScrollable.java۞126۩}
smallsql/junit/TestScrollable.java۞129۩private void testFirstWithWhereAssert(ResultSet rs) throws Exception{
smallsql/junit/TestScrollable.java۞130۩assertFalse( "isFirst", rs.isFirst() );
smallsql/junit/TestScrollable.java۞131۩assertTrue( rs.isBeforeFirst() );
smallsql/junit/TestScrollable.java۞132۩assertFalse( "There should be no rows:", rs.first());
smallsql/junit/TestScrollable.java۞133۩assertFalse( "isFirst", rs.isFirst() );
smallsql/junit/TestScrollable.java۞134۩assertTrue( rs.isBeforeFirst() );
smallsql/junit/TestScrollable.java۞135۩try{
smallsql/junit/TestScrollable.java۞136۩rs.getString("v");
smallsql/junit/TestScrollable.java۞137۩fail("SQLException 'No current row' should be throw");
smallsql/junit/TestScrollable.java۞138۩}catch(SQLException ex){
smallsql/junit/TestScrollable.java۞139۩assertSQLException("01000", 0, ex);
smallsql/junit/TestScrollable.java۞140۩}
smallsql/junit/TestScrollable.java۞141۩}
smallsql/junit/TestScrollable.java۞144۩public void testPreviousWithWhere() throws Exception{
smallsql/junit/TestScrollable.java۞145۩Connection con = AllTests.getConnection();
smallsql/junit/TestScrollable.java۞146۩try{
smallsql/junit/TestScrollable.java۞147۩con.createStatement().execute("Create Table Scrollable (i counter, v varchar(20))");
smallsql/junit/TestScrollable.java۞148۩assertRowCount( 0, "Select * from Scrollable");
smallsql/junit/TestScrollable.java۞150۩con.createStatement().execute("Insert Into Scrollable(v) Values('qwert')");
smallsql/junit/TestScrollable.java۞151۩assertRowCount( 1, "Select * from Scrollable");
smallsql/junit/TestScrollable.java۞152۩assertRowCount( 0, "Select * from Scrollable Where 1=0");
smallsql/junit/TestScrollable.java۞154۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestScrollable.java۞155۩testPreviousWithWhereAssert( st.executeQuery("Select * from Scrollable Where 1=0") );
smallsql/junit/TestScrollable.java۞156۩testPreviousWithWhereAssert( st.executeQuery("Select * from Scrollable Where 1=0 Order By v") );
smallsql/junit/TestScrollable.java۞157۩testPreviousWithWhereAssert( st.executeQuery("Select v from Scrollable Where 1=0 Group By v") );
smallsql/junit/TestScrollable.java۞158۩testPreviousWithWhereAssert( st.executeQuery("Select v from Scrollable Where 1=0 Group By v Order By v") );
smallsql/junit/TestScrollable.java۞159۩testPreviousWithWhereAssert( st.executeQuery("Select v from Scrollable Group By v Having 1=0 Order By v") );
smallsql/junit/TestScrollable.java۞161۩}finally{
smallsql/junit/TestScrollable.java۞162۩dropTable( con, "Scrollable");
smallsql/junit/TestScrollable.java۞163۩}
smallsql/junit/TestScrollable.java۞164۩}
smallsql/junit/TestScrollable.java۞167۩private void testPreviousWithWhereAssert(ResultSet rs) throws Exception{
smallsql/junit/TestScrollable.java۞168۩assertTrue( rs.isBeforeFirst() );
smallsql/junit/TestScrollable.java۞169۩assertTrue( rs.isAfterLast() );
smallsql/junit/TestScrollable.java۞170۩rs.afterLast();
smallsql/junit/TestScrollable.java۞171۩assertTrue( rs.isAfterLast() );
smallsql/junit/TestScrollable.java۞172۩assertFalse("There should be no rows:", rs.previous());
smallsql/junit/TestScrollable.java۞173۩try{
smallsql/junit/TestScrollable.java۞174۩rs.getString("v");
smallsql/junit/TestScrollable.java۞175۩fail("SQLException 'No current row' should be throw");
smallsql/junit/TestScrollable.java۞176۩}catch(SQLException ex){
smallsql/junit/TestScrollable.java۞177۩assertSQLException("01000", 0, ex);
smallsql/junit/TestScrollable.java۞178۩}
smallsql/junit/TestScrollable.java۞179۩}
smallsql/junit/TestScrollable.java۞182۩public void testAbsoluteRelative() throws Exception{
smallsql/junit/TestScrollable.java۞183۩Connection con = AllTests.getConnection();
smallsql/junit/TestScrollable.java۞184۩try{
smallsql/junit/TestScrollable.java۞185۩con.createStatement().execute("Create Table Scrollable (i counter, v varchar(20))");
smallsql/junit/TestScrollable.java۞186۩assertRowCount( 0, "Select * from Scrollable");
smallsql/junit/TestScrollable.java۞188۩con.createStatement().execute("Insert Into Scrollable(v) Values('qwert1')");
smallsql/junit/TestScrollable.java۞189۩con.createStatement().execute("Insert Into Scrollable(v) Values('qwert2')");
smallsql/junit/TestScrollable.java۞190۩con.createStatement().execute("Insert Into Scrollable(v) Values('qwert3')");
smallsql/junit/TestScrollable.java۞192۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestScrollable.java۞193۩testAbsoluteRelativeAssert( st.executeQuery("Select * from Scrollable") );
smallsql/junit/TestScrollable.java۞194۩testAbsoluteRelativeAssert( st.executeQuery("Select * from Scrollable Order By i") );
smallsql/junit/TestScrollable.java۞195۩testAbsoluteRelativeAssert( st.executeQuery("Select v from Scrollable Group By v") );
smallsql/junit/TestScrollable.java۞196۩testAbsoluteRelativeAssert( st.executeQuery("Select v from Scrollable Group By v Order By v") );
smallsql/junit/TestScrollable.java۞197۩}finally{
smallsql/junit/TestScrollable.java۞198۩dropTable( con, "Scrollable");
smallsql/junit/TestScrollable.java۞199۩}
smallsql/junit/TestScrollable.java۞200۩}
smallsql/junit/TestScrollable.java۞202۩private void testAbsoluteRelativeAssert(ResultSet rs) throws SQLException{
smallsql/junit/TestScrollable.java۞203۩assertEquals(0, rs.getRow());
smallsql/junit/TestScrollable.java۞205۩assertTrue(rs.absolute(2));
smallsql/junit/TestScrollable.java۞206۩assertEquals("qwert2", rs.getString("v"));
smallsql/junit/TestScrollable.java۞207۩assertEquals(2, rs.getRow());
smallsql/junit/TestScrollable.java۞209۩assertTrue(rs.relative(-1));
smallsql/junit/TestScrollable.java۞210۩assertEquals("qwert1", rs.getString("v"));
smallsql/junit/TestScrollable.java۞211۩assertEquals(1, rs.getRow());
smallsql/junit/TestScrollable.java۞213۩assertTrue(rs.absolute(1));
smallsql/junit/TestScrollable.java۞214۩assertEquals("qwert1", rs.getString("v"));
smallsql/junit/TestScrollable.java۞215۩assertEquals(1, rs.getRow());
smallsql/junit/TestScrollable.java۞216۩assertTrue(rs.isFirst());
smallsql/junit/TestScrollable.java۞218۩assertTrue(rs.relative(1));
smallsql/junit/TestScrollable.java۞219۩assertEquals("qwert2", rs.getString("v"));
smallsql/junit/TestScrollable.java۞220۩assertEquals(2, rs.getRow());
smallsql/junit/TestScrollable.java۞221۩assertFalse(rs.isLast());
smallsql/junit/TestScrollable.java۞222۩assertFalse(rs.isFirst());
smallsql/junit/TestScrollable.java۞224۩assertTrue(rs.absolute(-1));
smallsql/junit/TestScrollable.java۞225۩assertEquals("qwert3", rs.getString("v"));
smallsql/junit/TestScrollable.java۞226۩assertEquals(3, rs.getRow());
smallsql/junit/TestScrollable.java۞227۩assertTrue(rs.isLast());
smallsql/junit/TestScrollable.java۞228۩assertFalse(rs.isFirst());
smallsql/junit/TestScrollable.java۞230۩assertTrue(rs.relative(0));
smallsql/junit/TestScrollable.java۞231۩assertEquals("qwert3", rs.getString("v"));
smallsql/junit/TestScrollable.java۞232۩assertEquals(3, rs.getRow());
smallsql/junit/TestScrollable.java۞233۩assertTrue(rs.isLast());
smallsql/junit/TestScrollable.java۞234۩assertFalse(rs.isFirst());
smallsql/junit/TestScrollable.java۞236۩assertFalse(rs.absolute(4));
smallsql/junit/TestScrollable.java۞237۩assertEquals(0, rs.getRow());
smallsql/junit/TestScrollable.java۞238۩assertFalse(rs.isLast());
smallsql/junit/TestScrollable.java۞239۩assertFalse(rs.isFirst());
smallsql/junit/TestScrollable.java۞240۩assertFalse(rs.isBeforeFirst());
smallsql/junit/TestScrollable.java۞241۩assertTrue(rs.isAfterLast());
smallsql/junit/TestScrollable.java۞243۩assertTrue(rs.last());
smallsql/junit/TestScrollable.java۞244۩assertEquals(3, rs.getRow());
smallsql/junit/TestScrollable.java۞245۩assertTrue(rs.isLast());
smallsql/junit/TestScrollable.java۞246۩assertFalse(rs.isFirst());
smallsql/junit/TestScrollable.java۞248۩assertFalse(rs.absolute(-4));
smallsql/junit/TestScrollable.java۞249۩assertEquals(0, rs.getRow());
smallsql/junit/TestScrollable.java۞250۩assertFalse(rs.isLast());
smallsql/junit/TestScrollable.java۞251۩assertFalse(rs.isFirst());
smallsql/junit/TestScrollable.java۞252۩assertTrue(rs.isBeforeFirst());
smallsql/junit/TestScrollable.java۞253۩assertFalse(rs.isAfterLast());
smallsql/junit/TestScrollable.java۞255۩assertFalse(rs.relative(4));
smallsql/junit/TestScrollable.java۞256۩assertEquals(0, rs.getRow());
smallsql/junit/TestScrollable.java۞257۩assertFalse(rs.isLast());
smallsql/junit/TestScrollable.java۞258۩assertFalse(rs.isFirst());
smallsql/junit/TestScrollable.java۞259۩assertFalse(rs.isBeforeFirst());
smallsql/junit/TestScrollable.java۞260۩assertTrue(rs.isAfterLast());
smallsql/junit/TestScrollable.java۞262۩assertFalse(rs.relative(-4));
smallsql/junit/TestScrollable.java۞263۩assertEquals(0, rs.getRow());
smallsql/junit/TestScrollable.java۞264۩assertFalse(rs.isLast());
smallsql/junit/TestScrollable.java۞265۩assertFalse(rs.isFirst());
smallsql/junit/TestScrollable.java۞266۩assertTrue(rs.isBeforeFirst());
smallsql/junit/TestScrollable.java۞267۩assertFalse(rs.isAfterLast());
smallsql/junit/TestScrollable.java۞268۩}
smallsql/junit/TestScrollable.java۞271۩public void testUpdatable() throws Exception{
smallsql/junit/TestScrollable.java۞272۩Connection con = AllTests.getConnection();
smallsql/junit/TestScrollable.java۞273۩try{
smallsql/junit/TestScrollable.java۞274۩con.createStatement().execute("Create Table Scrollable (i int Identity primary key, v varchar(20))");
smallsql/junit/TestScrollable.java۞275۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestScrollable.java۞277۩for(int row = 1; row < 4; row++){
smallsql/junit/TestScrollable.java۞278۩testUpdatableAssert( con, st.executeQuery("Select * from Scrollable"), row );
smallsql/junit/TestScrollable.java۞279۩testUpdatableAssert( con, st.executeQuery("Select * from Scrollable Order By i"), row );
smallsql/junit/TestScrollable.java۞280۩testUpdatableAssert( con, st.executeQuery("Select * from Scrollable Where 1 = 1"), row );
smallsql/junit/TestScrollable.java۞281۩testUpdatableAssert( con, st.executeQuery("Select * from Scrollable Where 1 = 1 Order By i"), row );
smallsql/junit/TestScrollable.java۞282۩con.createStatement().execute("Insert Into Scrollable(v) Values('qwert" +row + "')");
smallsql/junit/TestScrollable.java۞283۩}
smallsql/junit/TestScrollable.java۞284۩}finally{
smallsql/junit/TestScrollable.java۞285۩dropTable( con, "Scrollable");
smallsql/junit/TestScrollable.java۞286۩}
smallsql/junit/TestScrollable.java۞287۩}
smallsql/junit/TestScrollable.java۞289۩private void testUpdatableAssert( Connection con, ResultSet rs, int row) throws Exception{
smallsql/junit/TestScrollable.java۞290۩con.setAutoCommit(false);
smallsql/junit/TestScrollable.java۞291۩for(int r=row; r < 4; r++){
smallsql/junit/TestScrollable.java۞292۩rs.moveToInsertRow();
smallsql/junit/TestScrollable.java۞293۩rs.updateString( "v", "qwert" + r);
smallsql/junit/TestScrollable.java۞294۩rs.insertRow();
smallsql/junit/TestScrollable.java۞295۩}
smallsql/junit/TestScrollable.java۞297۩assertTrue( rs.last() );
smallsql/junit/TestScrollable.java۞298۩assertEquals( 3, rs.getRow() );
smallsql/junit/TestScrollable.java۞300۩rs.beforeFirst();
smallsql/junit/TestScrollable.java۞301۩assertRowCount( 3, rs );
smallsql/junit/TestScrollable.java۞303۩rs.beforeFirst();
smallsql/junit/TestScrollable.java۞304۩testAbsoluteRelativeAssert(rs);
smallsql/junit/TestScrollable.java۞306۩con.rollback();
smallsql/junit/TestScrollable.java۞308۩assertRowCount( row - 1, con.createStatement().executeQuery("Select * from Scrollable"));
smallsql/junit/TestScrollable.java۞310۩rs.last();
smallsql/junit/TestScrollable.java۞311۩assertTrue( rs.rowDeleted() );
smallsql/junit/TestScrollable.java۞312۩assertTrue( rs.rowInserted() );
smallsql/junit/TestScrollable.java۞313۩rs.beforeFirst();
smallsql/junit/TestScrollable.java۞314۩assertRowCount( 3, rs );
smallsql/junit/TestScrollable.java۞316۩con.setAutoCommit(true);
smallsql/junit/TestScrollable.java۞317۩}
smallsql/junit/TestScrollable.java۞319۩}
smallsql/junit/TestStatement.java۞34۩package smallsql.junit;
smallsql/junit/TestStatement.java۞36۩import java.sql.*;
smallsql/junit/TestStatement.java۞43۩public class TestStatement extends BasicTestCase {
smallsql/junit/TestStatement.java۞45۩private static boolean init;
smallsql/junit/TestStatement.java۞48۩protected void setUp() throws Exception{
smallsql/junit/TestStatement.java۞49۩if(init) return;
smallsql/junit/TestStatement.java۞50۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞51۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞52۩dropTable( con, "statement");
smallsql/junit/TestStatement.java۞53۩st.execute("Create Table statement (c varchar(30), i counter)");
smallsql/junit/TestStatement.java۞54۩init = true;
smallsql/junit/TestStatement.java۞55۩}
smallsql/junit/TestStatement.java۞58۩public void testBatchUpate() throws Exception{
smallsql/junit/TestStatement.java۞59۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞60۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞62۩assertEquals("Result Length wrong", 0, st.executeBatch().length );
smallsql/junit/TestStatement.java۞63۩st.clearBatch();
smallsql/junit/TestStatement.java۞64۩st.addBatch("Bla Bla");
smallsql/junit/TestStatement.java۞65۩try {
smallsql/junit/TestStatement.java۞66۩st.executeBatch();
smallsql/junit/TestStatement.java۞67۩} catch (BatchUpdateException ex) {
smallsql/junit/TestStatement.java۞68۩assertEquals("Result Length wrong",1,ex.getUpdateCounts().length);
smallsql/junit/TestStatement.java۞69۩}
smallsql/junit/TestStatement.java۞70۩st.clearBatch();
smallsql/junit/TestStatement.java۞71۩int count = 10;
smallsql/junit/TestStatement.java۞72۩for(int i=1; i<=count; i++){
smallsql/junit/TestStatement.java۞73۩st.addBatch("Insert Into statement(c) Values('batch"+i+"')");
smallsql/junit/TestStatement.java۞74۩}
smallsql/junit/TestStatement.java۞75۩int[] result = st.executeBatch();
smallsql/junit/TestStatement.java۞76۩assertEquals("Result Length wrong", count, result.length);
smallsql/junit/TestStatement.java۞77۩for(int i=0; i<count; i++){
smallsql/junit/TestStatement.java۞78۩assertEquals("Update Count", 1, result[i]);
smallsql/junit/TestStatement.java۞79۩}
smallsql/junit/TestStatement.java۞80۩assertRowCount(10, "Select * From statement");
smallsql/junit/TestStatement.java۞81۩}
smallsql/junit/TestStatement.java۞84۩public void testMultiValues() throws Exception{
smallsql/junit/TestStatement.java۞85۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞86۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞87۩assertEquals("Update Count:", 10, st.executeUpdate("Insert Into statement(c) Values('abc1'),('abc2'),('abc3'),('abc4'),('abc5'),('abc6'),('abc7'),('abc8'),('abc9'),('abc10')"));
smallsql/junit/TestStatement.java۞88۩}
smallsql/junit/TestStatement.java۞91۩public void testMaxRows() throws Exception{
smallsql/junit/TestStatement.java۞92۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞93۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞94۩st.setMaxRows(5);
smallsql/junit/TestStatement.java۞95۩ResultSet rs = st.executeQuery("Select * From statement");
smallsql/junit/TestStatement.java۞96۩assertEquals("Statement.getResultSet", rs, st.getResultSet());
smallsql/junit/TestStatement.java۞97۩assertRowCount(5,rs);
smallsql/junit/TestStatement.java۞98۩assertRowCount(4,"Select top 4 * From statement");
smallsql/junit/TestStatement.java۞99۩assertRowCount(3,"Select * From statement Limit 3");
smallsql/junit/TestStatement.java۞100۩assertRowCount(2,"Select * From statement Order By c ASC Limit 2");
smallsql/junit/TestStatement.java۞101۩assertRowCount(0,"Select top 0 * From statement");
smallsql/junit/TestStatement.java۞103۩st = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE );
smallsql/junit/TestStatement.java۞104۩rs = st.executeQuery("Select Top 0 * From statement");
smallsql/junit/TestStatement.java۞105۩assertFalse( "last()", rs.last() );
smallsql/junit/TestStatement.java۞107۩PreparedStatement pr = con.prepareStatement("Select * From statement");
smallsql/junit/TestStatement.java۞108۩pr.setMaxRows(6);
smallsql/junit/TestStatement.java۞109۩rs = pr.executeQuery();
smallsql/junit/TestStatement.java۞110۩assertEquals("PreparedStatement.getResultSet", rs, pr.getResultSet());
smallsql/junit/TestStatement.java۞111۩assertRowCount(6,rs);
smallsql/junit/TestStatement.java۞113۩pr.setMaxRows(3);
smallsql/junit/TestStatement.java۞114۩rs = pr.executeQuery();
smallsql/junit/TestStatement.java۞115۩assertRowCount(3,rs);
smallsql/junit/TestStatement.java۞117۩pr.setMaxRows(4);
smallsql/junit/TestStatement.java۞118۩rs = pr.executeQuery();
smallsql/junit/TestStatement.java۞119۩assertRowCount(4,rs);
smallsql/junit/TestStatement.java۞120۩}
smallsql/junit/TestStatement.java۞123۩public void testMoreResults() throws Exception{
smallsql/junit/TestStatement.java۞124۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞125۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞127۩ResultSet rs = st.executeQuery("Select * From statement");
smallsql/junit/TestStatement.java۞128۩assertEquals( "getResultSet()", rs, st.getResultSet() );
smallsql/junit/TestStatement.java۞129۩assertEquals( "getUpdateCount()", -1, st.getUpdateCount() );
smallsql/junit/TestStatement.java۞130۩assertFalse( st.getMoreResults() );
smallsql/junit/TestStatement.java۞131۩try{
smallsql/junit/TestStatement.java۞132۩rs.next();
smallsql/junit/TestStatement.java۞133۩fail("ResultSet should be closed");
smallsql/junit/TestStatement.java۞134۩}catch(SQLException ex){
smallsql/junit/TestStatement.java۞135۩assertSQLException("01000", 0, ex);
smallsql/junit/TestStatement.java۞136۩}
smallsql/junit/TestStatement.java۞137۩assertNull( "getResultSet()", st.getResultSet() );
smallsql/junit/TestStatement.java۞138۩assertEquals( "getUpdateCount()", -1, st.getUpdateCount() );
smallsql/junit/TestStatement.java۞141۩rs = st.executeQuery("Select * From statement");
smallsql/junit/TestStatement.java۞142۩assertEquals( "getResultSet()", rs, st.getResultSet() );
smallsql/junit/TestStatement.java۞143۩assertEquals( "getUpdateCount()", -1, st.getUpdateCount() );
smallsql/junit/TestStatement.java۞144۩assertFalse( st.getMoreResults(Statement.KEEP_CURRENT_RESULT) );
smallsql/junit/TestStatement.java۞145۩assertTrue(rs.next());
smallsql/junit/TestStatement.java۞146۩assertNull( "getResultSet()", st.getResultSet() );
smallsql/junit/TestStatement.java۞147۩assertEquals( "getUpdateCount()", -1, st.getUpdateCount() );
smallsql/junit/TestStatement.java۞150۩int count = st.executeUpdate("Update statement set c = c");
smallsql/junit/TestStatement.java۞151۩assertTrue( "Update Erfolgreich", count>0 );
smallsql/junit/TestStatement.java۞152۩assertNull( "getResultSet()", st.getResultSet() );
smallsql/junit/TestStatement.java۞153۩assertEquals( "getUpdateCount()", count, st.getUpdateCount() );
smallsql/junit/TestStatement.java۞154۩assertFalse( st.getMoreResults() );
smallsql/junit/TestStatement.java۞155۩assertNull( "getResultSet()", st.getResultSet() );
smallsql/junit/TestStatement.java۞156۩assertEquals( "getUpdateCount()", -1, st.getUpdateCount() );
smallsql/junit/TestStatement.java۞157۩}
smallsql/junit/TestStatement.java۞160۩public void testGetConnection() throws Exception{
smallsql/junit/TestStatement.java۞161۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞162۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞164۩assertEquals(con, st.getConnection() );
smallsql/junit/TestStatement.java۞165۩}
smallsql/junit/TestStatement.java۞168۩public void testFetch() throws Exception{
smallsql/junit/TestStatement.java۞169۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞170۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞172۩st.setFetchDirection(ResultSet.FETCH_FORWARD);
smallsql/junit/TestStatement.java۞173۩assertEquals( st.getFetchDirection(), ResultSet.FETCH_FORWARD);
smallsql/junit/TestStatement.java۞175۩st.setFetchDirection(ResultSet.FETCH_REVERSE);
smallsql/junit/TestStatement.java۞176۩assertEquals( st.getFetchDirection(), ResultSet.FETCH_REVERSE);
smallsql/junit/TestStatement.java۞178۩st.setFetchSize(123);
smallsql/junit/TestStatement.java۞179۩assertEquals( st.getFetchSize(), 123);
smallsql/junit/TestStatement.java۞180۩}
smallsql/junit/TestStatement.java۞183۩public void testGeneratedKeys() throws Exception{
smallsql/junit/TestStatement.java۞184۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞185۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞186۩ResultSet rs;
smallsql/junit/TestStatement.java۞188۩st.execute("Insert Into statement(c) Values('key1')", Statement.NO_GENERATED_KEYS);
smallsql/junit/TestStatement.java۞189۩try{
smallsql/junit/TestStatement.java۞190۩st.getGeneratedKeys();
smallsql/junit/TestStatement.java۞191۩fail("NO_GENERATED_KEYS");
smallsql/junit/TestStatement.java۞192۩}catch(SQLException ex){
smallsql/junit/TestStatement.java۞193۩assertSQLException("01000", 0, ex);
smallsql/junit/TestStatement.java۞194۩}
smallsql/junit/TestStatement.java۞195۩assertEquals("UpdateCount", 1, st.getUpdateCount());
smallsql/junit/TestStatement.java۞196۩assertNull("getResultSet", st.getResultSet());
smallsql/junit/TestStatement.java۞198۩st.execute("Insert Into statement(c) Values('key2')", Statement.RETURN_GENERATED_KEYS);
smallsql/junit/TestStatement.java۞199۩rs = st.getGeneratedKeys();
smallsql/junit/TestStatement.java۞200۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞201۩assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞202۩assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
smallsql/junit/TestStatement.java۞203۩assertTrue(rs.next());
smallsql/junit/TestStatement.java۞204۩assertEqualsRsValue( new Long(rs.getLong(1)), rs, false );
smallsql/junit/TestStatement.java۞205۩assertFalse(rs.next());
smallsql/junit/TestStatement.java۞208۩assertEquals(1,st.executeUpdate("Insert Into statement(c) Values('key3')", Statement.RETURN_GENERATED_KEYS));
smallsql/junit/TestStatement.java۞209۩rs = st.getGeneratedKeys();
smallsql/junit/TestStatement.java۞210۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞211۩assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞212۩assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
smallsql/junit/TestStatement.java۞213۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞215۩st.execute("Insert Into statement(c) Values('key4')", new int[]{2,1});
smallsql/junit/TestStatement.java۞216۩rs = st.getGeneratedKeys();
smallsql/junit/TestStatement.java۞217۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞218۩assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞219۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞221۩assertEquals(1,st.executeUpdate("Insert Into statement(c) Values('key5')", new int[]{2}));
smallsql/junit/TestStatement.java۞222۩rs = st.getGeneratedKeys();
smallsql/junit/TestStatement.java۞223۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞224۩assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞225۩assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
smallsql/junit/TestStatement.java۞226۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞228۩st.execute("Insert Into statement(c) Values('key6')", new String[]{"c","i"});
smallsql/junit/TestStatement.java۞229۩rs = st.getGeneratedKeys();
smallsql/junit/TestStatement.java۞230۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞231۩assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞232۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞234۩assertEquals(1,st.executeUpdate("Insert Into statement(c) Values('key7')", new String[]{"i"}));
smallsql/junit/TestStatement.java۞235۩rs = st.getGeneratedKeys();
smallsql/junit/TestStatement.java۞236۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞237۩assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞238۩assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
smallsql/junit/TestStatement.java۞239۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞240۩}
smallsql/junit/TestStatement.java۞243۩public void testGeneratedKeysWithPrepare() throws Exception{
smallsql/junit/TestStatement.java۞244۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞245۩ResultSet rs;
smallsql/junit/TestStatement.java۞247۩PreparedStatement pr = con.prepareStatement("Insert Into statement(c) Values('key1')", Statement.NO_GENERATED_KEYS);
smallsql/junit/TestStatement.java۞248۩pr.execute();
smallsql/junit/TestStatement.java۞249۩try{
smallsql/junit/TestStatement.java۞250۩pr.getGeneratedKeys();
smallsql/junit/TestStatement.java۞251۩fail("NO_GENERATED_KEYS");
smallsql/junit/TestStatement.java۞252۩}catch(SQLException ex){
smallsql/junit/TestStatement.java۞253۩assertSQLException("01000", 0, ex);
smallsql/junit/TestStatement.java۞254۩}
smallsql/junit/TestStatement.java۞255۩assertEquals("UpdateCount", 1, pr.getUpdateCount());
smallsql/junit/TestStatement.java۞256۩assertNull("getResultSet", pr.getResultSet());
smallsql/junit/TestStatement.java۞257۩pr.close();
smallsql/junit/TestStatement.java۞259۩pr = con.prepareStatement("Insert Into statement(c) Values('key2')", Statement.RETURN_GENERATED_KEYS);
smallsql/junit/TestStatement.java۞260۩pr.execute();
smallsql/junit/TestStatement.java۞261۩rs = pr.getGeneratedKeys();
smallsql/junit/TestStatement.java۞262۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞263۩assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞264۩assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
smallsql/junit/TestStatement.java۞265۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞267۩pr = con.prepareStatement("Insert Into statement(c) Values('key3')", Statement.RETURN_GENERATED_KEYS);
smallsql/junit/TestStatement.java۞268۩assertEquals(1,pr.executeUpdate());
smallsql/junit/TestStatement.java۞269۩rs = pr.getGeneratedKeys();
smallsql/junit/TestStatement.java۞270۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞271۩assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞272۩assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
smallsql/junit/TestStatement.java۞273۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞275۩pr = con.prepareStatement("Insert Into statement(c) Values('key4')", new int[]{2,1});
smallsql/junit/TestStatement.java۞276۩pr.execute();
smallsql/junit/TestStatement.java۞277۩rs = pr.getGeneratedKeys();
smallsql/junit/TestStatement.java۞278۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞279۩assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞280۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞282۩pr = con.prepareStatement("Insert Into statement(c) Values('key5')", new int[]{2});
smallsql/junit/TestStatement.java۞283۩assertEquals(1,pr.executeUpdate());
smallsql/junit/TestStatement.java۞284۩rs = pr.getGeneratedKeys();
smallsql/junit/TestStatement.java۞285۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞286۩assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞287۩assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
smallsql/junit/TestStatement.java۞288۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞290۩pr = con.prepareStatement("Insert Into statement(c) Values('key6')", new String[]{"c","i"});
smallsql/junit/TestStatement.java۞291۩pr.execute();
smallsql/junit/TestStatement.java۞292۩rs = pr.getGeneratedKeys();
smallsql/junit/TestStatement.java۞293۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞294۩assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞295۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞297۩pr = con.prepareStatement("Insert Into statement(c) Values('key7')", new String[]{"i"});
smallsql/junit/TestStatement.java۞298۩assertEquals(1,pr.executeUpdate());
smallsql/junit/TestStatement.java۞299۩rs = pr.getGeneratedKeys();
smallsql/junit/TestStatement.java۞300۩assertNotNull("RETURN_GENERATED_KEYS", rs);
smallsql/junit/TestStatement.java۞301۩assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
smallsql/junit/TestStatement.java۞302۩assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
smallsql/junit/TestStatement.java۞303۩assertRowCount(1,rs);
smallsql/junit/TestStatement.java۞304۩}
smallsql/junit/TestStatement.java۞307۩public void testResultSetType() throws Exception{
smallsql/junit/TestStatement.java۞308۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞309۩Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
smallsql/junit/TestStatement.java۞311۩assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, st.getResultSetType());
smallsql/junit/TestStatement.java۞312۩assertEquals(ResultSet.CONCUR_UPDATABLE, st.getResultSetConcurrency());
smallsql/junit/TestStatement.java۞314۩ResultSet rs = st.executeQuery("Select * From statement");
smallsql/junit/TestStatement.java۞316۩assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, rs.getType());
smallsql/junit/TestStatement.java۞317۩assertEquals(ResultSet.CONCUR_UPDATABLE, rs.getConcurrency());
smallsql/junit/TestStatement.java۞318۩}
smallsql/junit/TestStatement.java۞321۩public void testOther() throws Exception{
smallsql/junit/TestStatement.java۞323۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞324۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞327۩st.clearWarnings();
smallsql/junit/TestStatement.java۞328۩assertNull(st.getWarnings());
smallsql/junit/TestStatement.java۞332۩st.setQueryTimeout(5);
smallsql/junit/TestStatement.java۞333۩assertEquals("QueryTimeout", 5, st.getQueryTimeout() );
smallsql/junit/TestStatement.java۞335۩st.setMaxFieldSize(100);
smallsql/junit/TestStatement.java۞336۩assertEquals("MaxFieldSize", 100, st.getMaxFieldSize() );
smallsql/junit/TestStatement.java۞337۩}
smallsql/junit/TestStatement.java۞340۩public void testTruncate() throws Exception{
smallsql/junit/TestStatement.java۞341۩Connection con = AllTests.getConnection();
smallsql/junit/TestStatement.java۞342۩Statement st = con.createStatement();
smallsql/junit/TestStatement.java۞344۩st.execute("Truncate table statement");
smallsql/junit/TestStatement.java۞345۩assertRowCount(0, "Select * From statement");
smallsql/junit/TestStatement.java۞346۩}
smallsql/junit/TestStatement.java۞347۩}
smallsql/junit/TestThreads.java۞4۩package smallsql.junit;
smallsql/junit/TestThreads.java۞6۩import java.sql.*;
smallsql/junit/TestThreads.java۞7۩import java.util.ArrayList;
smallsql/junit/TestThreads.java۞14۩public class TestThreads extends BasicTestCase{
smallsql/junit/TestThreads.java۞16۩volatile Throwable throwable;
smallsql/junit/TestThreads.java۞25۩public void testConcurrentRead() throws Throwable{
smallsql/junit/TestThreads.java۞26۩ArrayList threadList = new ArrayList();
smallsql/junit/TestThreads.java۞27۩throwable = null;
smallsql/junit/TestThreads.java۞30۩final String sql = "Select * From table_OrderBy1";
smallsql/junit/TestThreads.java۞33۩final Connection con = AllTests.getConnection();
smallsql/junit/TestThreads.java۞34۩Statement st = con.createStatement();
smallsql/junit/TestThreads.java۞35۩ResultSet rs = st.executeQuery("Select * From table_OrderBy1");
smallsql/junit/TestThreads.java۞36۩int count = 0;
smallsql/junit/TestThreads.java۞37۩while(rs.next()){
smallsql/junit/TestThreads.java۞38۩count++;
smallsql/junit/TestThreads.java۞39۩}
smallsql/junit/TestThreads.java۞40۩final int rowCount = count;
smallsql/junit/TestThreads.java۞43۩for(int i = 0; i < 200; i++){
smallsql/junit/TestThreads.java۞44۩Thread thread = new Thread(new Runnable(){
smallsql/junit/TestThreads.java۞46۩public void run(){
smallsql/junit/TestThreads.java۞47۩try{
smallsql/junit/TestThreads.java۞48۩assertRowCount(rowCount, sql);
smallsql/junit/TestThreads.java۞49۩}catch(Throwable ex){
smallsql/junit/TestThreads.java۞50۩throwable = ex;
smallsql/junit/TestThreads.java۞51۩}
smallsql/junit/TestThreads.java۞52۩}
smallsql/junit/TestThreads.java۞54۩});
smallsql/junit/TestThreads.java۞55۩threadList.add(thread);
smallsql/junit/TestThreads.java۞56۩thread.start();
smallsql/junit/TestThreads.java۞57۩}
smallsql/junit/TestThreads.java۞60۩for(int i = 0; i < threadList.size(); i++){
smallsql/junit/TestThreads.java۞61۩Thread thread = (Thread)threadList.get(i);
smallsql/junit/TestThreads.java۞62۩thread.join(5000);
smallsql/junit/TestThreads.java۞63۩}
smallsql/junit/TestThreads.java۞66۩if(throwable != null){
smallsql/junit/TestThreads.java۞67۩throw throwable;
smallsql/junit/TestThreads.java۞68۩}
smallsql/junit/TestThreads.java۞69۩}
smallsql/junit/TestThreads.java۞78۩public void testConcurrentThreadWrite() throws Throwable{
smallsql/junit/TestThreads.java۞79۩ArrayList threadList = new ArrayList();
smallsql/junit/TestThreads.java۞80۩throwable = null;
smallsql/junit/TestThreads.java۞81۩final Connection con = AllTests.getConnection();
smallsql/junit/TestThreads.java۞82۩Statement st = con.createStatement();
smallsql/junit/TestThreads.java۞83۩try{
smallsql/junit/TestThreads.java۞84۩st.execute("CREATE TABLE ConcurrentWrite( value int)");
smallsql/junit/TestThreads.java۞85۩st.execute("INSERT INTO ConcurrentWrite(value) Values(0)");
smallsql/junit/TestThreads.java۞88۩for(int i = 0; i < 200; i++){
smallsql/junit/TestThreads.java۞89۩Thread thread = new Thread(new Runnable(){
smallsql/junit/TestThreads.java۞91۩public void run(){
smallsql/junit/TestThreads.java۞92۩try{
smallsql/junit/TestThreads.java۞93۩Statement st2 = con.createStatement();
smallsql/junit/TestThreads.java۞94۩int count = st2.executeUpdate("UPDATE ConcurrentWrite SET value = value + 1");
smallsql/junit/TestThreads.java۞95۩assertEquals("Update Count", 1, count);
smallsql/junit/TestThreads.java۞96۩}catch(Throwable ex){
smallsql/junit/TestThreads.java۞97۩throwable = ex;
smallsql/junit/TestThreads.java۞98۩}
smallsql/junit/TestThreads.java۞99۩}
smallsql/junit/TestThreads.java۞101۩});
smallsql/junit/TestThreads.java۞102۩threadList.add(thread);
smallsql/junit/TestThreads.java۞103۩thread.start();
smallsql/junit/TestThreads.java۞104۩}
smallsql/junit/TestThreads.java۞107۩for(int i = 0; i < threadList.size(); i++){
smallsql/junit/TestThreads.java۞108۩Thread thread = (Thread)threadList.get(i);
smallsql/junit/TestThreads.java۞109۩thread.join(5000);
smallsql/junit/TestThreads.java۞110۩}
smallsql/junit/TestThreads.java۞113۩if(throwable != null){
smallsql/junit/TestThreads.java۞114۩throw throwable;
smallsql/junit/TestThreads.java۞115۩}
smallsql/junit/TestThreads.java۞117۩assertEqualsRsValue(new Integer(200), "SELECT value FROM ConcurrentWrite");
smallsql/junit/TestThreads.java۞118۩}finally{
smallsql/junit/TestThreads.java۞119۩dropTable(con, "ConcurrentWrite");
smallsql/junit/TestThreads.java۞120۩}
smallsql/junit/TestThreads.java۞121۩}
smallsql/junit/TestThreads.java۞130۩public void testConcurrentConnectionWrite() throws Throwable{
smallsql/junit/TestThreads.java۞131۩ArrayList threadList = new ArrayList();
smallsql/junit/TestThreads.java۞132۩throwable = null;
smallsql/junit/TestThreads.java۞133۩Connection con = AllTests.getConnection();
smallsql/junit/TestThreads.java۞134۩Statement st = con.createStatement();
smallsql/junit/TestThreads.java۞135۩try{
smallsql/junit/TestThreads.java۞136۩st.execute("CREATE TABLE ConcurrentWrite( value int)");
smallsql/junit/TestThreads.java۞137۩st.execute("INSERT INTO ConcurrentWrite(value) Values(0)");
smallsql/junit/TestThreads.java۞140۩for(int i = 0; i < 200; i++){
smallsql/junit/TestThreads.java۞141۩Thread thread = new Thread(new Runnable(){
smallsql/junit/TestThreads.java۞143۩public void run(){
smallsql/junit/TestThreads.java۞144۩try{
smallsql/junit/TestThreads.java۞145۩Connection con2 = AllTests.createConnection();
smallsql/junit/TestThreads.java۞146۩Statement st2 = con2.createStatement();
smallsql/junit/TestThreads.java۞147۩int count = st2.executeUpdate("UPDATE ConcurrentWrite SET value = value + 1");
smallsql/junit/TestThreads.java۞148۩assertEquals("Update Count", 1, count);
smallsql/junit/TestThreads.java۞149۩con2.close();
smallsql/junit/TestThreads.java۞150۩}catch(Throwable ex){
smallsql/junit/TestThreads.java۞151۩throwable = ex;
smallsql/junit/TestThreads.java۞152۩}
smallsql/junit/TestThreads.java۞153۩}
smallsql/junit/TestThreads.java۞155۩});
smallsql/junit/TestThreads.java۞156۩threadList.add(thread);
smallsql/junit/TestThreads.java۞157۩thread.start();
smallsql/junit/TestThreads.java۞158۩}
smallsql/junit/TestThreads.java۞161۩for(int i = 0; i < threadList.size(); i++){
smallsql/junit/TestThreads.java۞162۩Thread thread = (Thread)threadList.get(i);
smallsql/junit/TestThreads.java۞163۩thread.join(5000);
smallsql/junit/TestThreads.java۞164۩}
smallsql/junit/TestThreads.java۞167۩if(throwable != null){
smallsql/junit/TestThreads.java۞168۩throw throwable;
smallsql/junit/TestThreads.java۞169۩}
smallsql/junit/TestThreads.java۞171۩assertEqualsRsValue(new Integer(200), "SELECT value FROM ConcurrentWrite");
smallsql/junit/TestThreads.java۞172۩}finally{
smallsql/junit/TestThreads.java۞173۩dropTable(con, "ConcurrentWrite");
smallsql/junit/TestThreads.java۞174۩}
smallsql/junit/TestThreads.java۞175۩}
smallsql/junit/TestThreads.java۞177۩}
smallsql/junit/TestTokenizer.java۞33۩package smallsql.junit;
smallsql/junit/TestTokenizer.java۞35۩import java.io.PrintStream;
smallsql/junit/TestTokenizer.java۞36۩import java.sql.Connection;
smallsql/junit/TestTokenizer.java۞37۩import java.sql.ResultSet;
smallsql/junit/TestTokenizer.java۞38۩import java.sql.SQLException;
smallsql/junit/TestTokenizer.java۞39۩import java.sql.Statement;
smallsql/junit/TestTokenizer.java۞40۩import java.text.MessageFormat;
smallsql/junit/TestTokenizer.java۞47۩public class TestTokenizer extends BasicTestCase {
smallsql/junit/TestTokenizer.java۞48۩private static final String TABLE_NAME = "table_comments";
smallsql/junit/TestTokenizer.java۞49۩private static final PrintStream out = System.out;
smallsql/junit/TestTokenizer.java۞51۩private boolean init;
smallsql/junit/TestTokenizer.java۞52۩private Connection conn;
smallsql/junit/TestTokenizer.java۞53۩private Statement stat;
smallsql/junit/TestTokenizer.java۞55۩public void setUp() throws SQLException {
smallsql/junit/TestTokenizer.java۞56۩if (! init) {
smallsql/junit/TestTokenizer.java۞57۩conn = AllTests.createConnection("?locale=en", null);
smallsql/junit/TestTokenizer.java۞58۩stat = conn.createStatement();
smallsql/junit/TestTokenizer.java۞59۩init = true;
smallsql/junit/TestTokenizer.java۞60۩}
smallsql/junit/TestTokenizer.java۞61۩dropTable();
smallsql/junit/TestTokenizer.java۞62۩createTable();
smallsql/junit/TestTokenizer.java۞63۩}
smallsql/junit/TestTokenizer.java۞65۩public void tearDown() throws SQLException {
smallsql/junit/TestTokenizer.java۞66۩if (conn != null) {
smallsql/junit/TestTokenizer.java۞67۩dropTable();
smallsql/junit/TestTokenizer.java۞68۩stat.close();
smallsql/junit/TestTokenizer.java۞69۩conn.close();
smallsql/junit/TestTokenizer.java۞70۩}
smallsql/junit/TestTokenizer.java۞71۩}
smallsql/junit/TestTokenizer.java۞73۩private void createTable() throws SQLException {
smallsql/junit/TestTokenizer.java۞74۩stat.execute(
smallsql/junit/TestTokenizer.java۞75۩"CREATE TABLE " + TABLE_NAME +
smallsql/junit/TestTokenizer.java۞76۩" (id INT, myint INT)");
smallsql/junit/TestTokenizer.java۞78۩stat.execute(
smallsql/junit/TestTokenizer.java۞79۩"INSERT INTO " + TABLE_NAME + " VALUES (1, 2)");
smallsql/junit/TestTokenizer.java۞80۩stat.execute(
smallsql/junit/TestTokenizer.java۞81۩"INSERT INTO " + TABLE_NAME + " VALUES (1, 3)");
smallsql/junit/TestTokenizer.java۞82۩}
smallsql/junit/TestTokenizer.java۞84۩private void dropTable() throws SQLException {
smallsql/junit/TestTokenizer.java۞85۩try {
smallsql/junit/TestTokenizer.java۞86۩stat.execute("DROP TABLE " + TABLE_NAME);
smallsql/junit/TestTokenizer.java۞87۩} catch (SQLException e) {
smallsql/junit/TestTokenizer.java۞89۩out.println("REGULAR: " + e.getMessage() + '\n');
smallsql/junit/TestTokenizer.java۞90۩}
smallsql/junit/TestTokenizer.java۞91۩}
smallsql/junit/TestTokenizer.java۞93۩public void testSingleLine() throws SQLException {
smallsql/junit/TestTokenizer.java۞94۩final String SQL_1 =
smallsql/junit/TestTokenizer.java۞95۩"SELECT 10/2--mycomment\n" +
smallsql/junit/TestTokenizer.java۞96۩" , -- mycomment    \r\n" +
smallsql/junit/TestTokenizer.java۞97۩"id, SUM(myint)--my comment  \n\n" +
smallsql/junit/TestTokenizer.java۞98۩"FROM " + TABLE_NAME + " -- my other comment \r \r" +
smallsql/junit/TestTokenizer.java۞99۩"GROUP BY id --mycommentC\n" +
smallsql/junit/TestTokenizer.java۞100۩"--   myC    omment  E    \n" +
smallsql/junit/TestTokenizer.java۞101۩"ORDER BY id \r" +
smallsql/junit/TestTokenizer.java۞102۩"--myCommentD   \r\r\r";
smallsql/junit/TestTokenizer.java۞104۩successTest(SQL_1);
smallsql/junit/TestTokenizer.java۞106۩final String SQL_2 =
smallsql/junit/TestTokenizer.java۞107۩"SELECT 10/2 - - this must fail ";
smallsql/junit/TestTokenizer.java۞109۩failureTest(SQL_2, "Tokenized not-comment as a line-comment.");
smallsql/junit/TestTokenizer.java۞110۩}
smallsql/junit/TestTokenizer.java۞112۩public void testMultiLine() throws SQLException {
smallsql/junit/TestTokenizer.java۞113۩final String SQL_1 =
smallsql/junit/TestTokenizer.java۞114۩"SELECT 10/2, id, SUM(myint)
smallsql/junit/TestTokenizer.java۞117۩" -- somment\r\n";
smallsql/junit/TestTokenizer.java۞119۩successTest(SQL_1);
smallsql/junit/TestTokenizer.java۞121۩final String SQL_2 =
smallsql/junit/TestTokenizer.java۞122۩"SELECT 10/2 / * this must fail */";
smallsql/junit/TestTokenizer.java۞124۩failureTest(SQL_2, "Tokenized not-comment as a multiline-comment.");
smallsql/junit/TestTokenizer.java۞126۩final String SQL_3 =
smallsql/junit/TestTokenizer.java۞127۩"SELECT 10/2 /* this must fail ";
smallsql/junit/TestTokenizer.java۞129۩failureTest(SQL_3,
smallsql/junit/TestTokenizer.java۞130۩"Uncomplete end multiline comment not recognized.",
smallsql/junit/TestTokenizer.java۞131۩"Missing end comment mark");
smallsql/junit/TestTokenizer.java۞132۩}
smallsql/junit/TestTokenizer.java۞134۩private void successTest(String sql) throws SQLException {
smallsql/junit/TestTokenizer.java۞137۩ResultSet rs_1 = stat.executeQuery(sql);
smallsql/junit/TestTokenizer.java۞138۩rs_1.next();
smallsql/junit/TestTokenizer.java۞139۩rs_1.close();
smallsql/junit/TestTokenizer.java۞140۩}
smallsql/junit/TestTokenizer.java۞142۩private void failureTest(String sql, String failureMessage) {
smallsql/junit/TestTokenizer.java۞143۩try {
smallsql/junit/TestTokenizer.java۞144۩stat.executeQuery(sql);
smallsql/junit/TestTokenizer.java۞145۩fail(failureMessage);
smallsql/junit/TestTokenizer.java۞146۩}
smallsql/junit/TestTokenizer.java۞147۩catch (SQLException e) {
smallsql/junit/TestTokenizer.java۞149۩out.println("REGULAR: " + e.getMessage() + '\n');
smallsql/junit/TestTokenizer.java۞150۩}
smallsql/junit/TestTokenizer.java۞151۩}
smallsql/junit/TestTokenizer.java۞153۩private void failureTest(String sql, String failureMessage, String expected) {
smallsql/junit/TestTokenizer.java۞154۩try {
smallsql/junit/TestTokenizer.java۞155۩stat.executeQuery(sql);
smallsql/junit/TestTokenizer.java۞156۩fail(failureMessage);
smallsql/junit/TestTokenizer.java۞157۩}
smallsql/junit/TestTokenizer.java۞158۩catch (SQLException e) {
smallsql/junit/TestTokenizer.java۞159۩String foundMsg = e.getMessage();
smallsql/junit/TestTokenizer.java۞160۩String assertMsg = MessageFormat.format(
smallsql/junit/TestTokenizer.java۞161۩"Unexpected error: [{0}], expected: [{1}]",
smallsql/junit/TestTokenizer.java۞162۩new Object[] { foundMsg, expected });
smallsql/junit/TestTokenizer.java۞164۩assertTrue(assertMsg, foundMsg.indexOf(expected) > -1);
smallsql/junit/TestTokenizer.java۞167۩out.println("REGULAR: " + e.getMessage() + '\n');
smallsql/junit/TestTokenizer.java۞168۩}
smallsql/junit/TestTokenizer.java۞169۩}
smallsql/junit/TestTokenizer.java۞236۩}
smallsql/junit/TestTransactions.java۞34۩package smallsql.junit;
smallsql/junit/TestTransactions.java۞35۩import java.sql.*;
smallsql/junit/TestTransactions.java۞40۩public class TestTransactions extends BasicTestCase {
smallsql/junit/TestTransactions.java۞43۩public void testCreateTable() throws Exception{
smallsql/junit/TestTransactions.java۞44۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞45۩Connection con2 = AllTests.createConnection();
smallsql/junit/TestTransactions.java۞46۩try{
smallsql/junit/TestTransactions.java۞47۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞48۩con.createStatement().execute("create table transactions (ID  INTEGER NOT NULL, Name VARCHAR(100), FirstName VARCHAR(100), Points INTEGER, LicenseID INTEGER, PRIMARY KEY(ID))");
smallsql/junit/TestTransactions.java۞49۩con.commit();
smallsql/junit/TestTransactions.java۞51۩con2.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞54۩PreparedStatement pr = con2.prepareStatement("insert into transactions (id,Name,FirstName,Points,LicenseID) values (?,?,?,?,?)");
smallsql/junit/TestTransactions.java۞55۩pr.setInt( 		1, 0 );
smallsql/junit/TestTransactions.java۞56۩pr.setString( 	2, "Pilot_1" );
smallsql/junit/TestTransactions.java۞57۩pr.setString( 	3, "Herkules" );
smallsql/junit/TestTransactions.java۞58۩pr.setInt( 		4, 1 );
smallsql/junit/TestTransactions.java۞59۩pr.setInt( 		5, 1 );
smallsql/junit/TestTransactions.java۞60۩pr.addBatch();
smallsql/junit/TestTransactions.java۞61۩pr.executeBatch();
smallsql/junit/TestTransactions.java۞63۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞64۩con2.commit();
smallsql/junit/TestTransactions.java۞65۩assertRowCount( 1, "Select * from transactions");
smallsql/junit/TestTransactions.java۞67۩}finally{
smallsql/junit/TestTransactions.java۞68۩con2.close();
smallsql/junit/TestTransactions.java۞69۩try{
smallsql/junit/TestTransactions.java۞70۩con.createStatement().execute("Drop Table transactions");
smallsql/junit/TestTransactions.java۞71۩}catch(Throwable e){e.printStackTrace();}
smallsql/junit/TestTransactions.java۞72۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞73۩}
smallsql/junit/TestTransactions.java۞74۩}
smallsql/junit/TestTransactions.java۞79۩public void testCommit() throws Exception{
smallsql/junit/TestTransactions.java۞80۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞81۩try{
smallsql/junit/TestTransactions.java۞82۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞83۩con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞84۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞86۩con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
smallsql/junit/TestTransactions.java۞87۩assertRowCount( 1, "Select * from transactions");
smallsql/junit/TestTransactions.java۞89۩con.createStatement().execute("Insert Into transactions(v) Select v From transactions");
smallsql/junit/TestTransactions.java۞90۩assertRowCount( 2, "Select * from transactions");
smallsql/junit/TestTransactions.java۞92۩con.createStatement().execute("Insert Into transactions Select * From transactions");
smallsql/junit/TestTransactions.java۞93۩assertRowCount( 4, "Select * from transactions");
smallsql/junit/TestTransactions.java۞95۩con.commit();
smallsql/junit/TestTransactions.java۞96۩assertRowCount( 4, "Select * from transactions");
smallsql/junit/TestTransactions.java۞98۩}finally{
smallsql/junit/TestTransactions.java۞99۩try{
smallsql/junit/TestTransactions.java۞100۩con.createStatement().execute("Drop Table transactions");
smallsql/junit/TestTransactions.java۞101۩}catch(Throwable e){e.printStackTrace();}
smallsql/junit/TestTransactions.java۞102۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞103۩}
smallsql/junit/TestTransactions.java۞104۩}
smallsql/junit/TestTransactions.java۞110۩public void testCommitWithOneCommitRow() throws Exception{
smallsql/junit/TestTransactions.java۞111۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞112۩try{
smallsql/junit/TestTransactions.java۞113۩con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞114۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞116۩con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
smallsql/junit/TestTransactions.java۞117۩assertRowCount( 1, "Select * from transactions");
smallsql/junit/TestTransactions.java۞119۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞120۩con.createStatement().execute("Insert Into transactions(v) Select v From transactions");
smallsql/junit/TestTransactions.java۞121۩assertRowCount( 2, "Select * from transactions");
smallsql/junit/TestTransactions.java۞123۩con.createStatement().execute("Insert Into transactions (Select * From transactions)");
smallsql/junit/TestTransactions.java۞124۩assertRowCount( 4, "Select * from transactions");
smallsql/junit/TestTransactions.java۞126۩con.commit();
smallsql/junit/TestTransactions.java۞127۩assertRowCount( 4, "Select * from transactions");
smallsql/junit/TestTransactions.java۞129۩}finally{
smallsql/junit/TestTransactions.java۞130۩try{
smallsql/junit/TestTransactions.java۞131۩con.createStatement().execute("Drop Table transactions");
smallsql/junit/TestTransactions.java۞132۩}catch(Throwable e){e.printStackTrace();}
smallsql/junit/TestTransactions.java۞133۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞134۩}
smallsql/junit/TestTransactions.java۞135۩}
smallsql/junit/TestTransactions.java۞138۩public void testRollback() throws Exception{
smallsql/junit/TestTransactions.java۞139۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞140۩try{
smallsql/junit/TestTransactions.java۞141۩con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞142۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞143۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞145۩con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
smallsql/junit/TestTransactions.java۞146۩assertRowCount( 1, "Select * from transactions");
smallsql/junit/TestTransactions.java۞148۩con.createStatement().execute("Insert Into transactions(v) Select v From transactions");
smallsql/junit/TestTransactions.java۞149۩assertRowCount( 2, "Select * from transactions");
smallsql/junit/TestTransactions.java۞151۩con.createStatement().execute("Insert Into transactions(v) (Select v From transactions)");
smallsql/junit/TestTransactions.java۞152۩assertRowCount( 4, "Select * from transactions");
smallsql/junit/TestTransactions.java۞154۩con.rollback();
smallsql/junit/TestTransactions.java۞155۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞157۩}finally{
smallsql/junit/TestTransactions.java۞158۩try{
smallsql/junit/TestTransactions.java۞159۩con.createStatement().execute("Drop Table transactions");
smallsql/junit/TestTransactions.java۞160۩}catch(Throwable e){e.printStackTrace();}
smallsql/junit/TestTransactions.java۞161۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞162۩}
smallsql/junit/TestTransactions.java۞163۩}
smallsql/junit/TestTransactions.java۞169۩public void testRollbackWithOneCommitRow() throws Exception{
smallsql/junit/TestTransactions.java۞170۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞171۩try{
smallsql/junit/TestTransactions.java۞172۩con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞173۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞175۩con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
smallsql/junit/TestTransactions.java۞176۩assertRowCount( 1, "Select * from transactions");
smallsql/junit/TestTransactions.java۞178۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞179۩con.createStatement().execute("Insert Into transactions(v) Select v From transactions");
smallsql/junit/TestTransactions.java۞180۩assertRowCount( 2, "Select * from transactions");
smallsql/junit/TestTransactions.java۞182۩con.createStatement().execute("Insert Into transactions(v) (Select v From transactions)");
smallsql/junit/TestTransactions.java۞183۩assertRowCount( 4, "Select * from transactions");
smallsql/junit/TestTransactions.java۞185۩con.rollback();
smallsql/junit/TestTransactions.java۞186۩assertRowCount( 1, "Select * from transactions");
smallsql/junit/TestTransactions.java۞188۩}finally{
smallsql/junit/TestTransactions.java۞189۩try{
smallsql/junit/TestTransactions.java۞190۩con.createStatement().execute("Drop Table transactions");
smallsql/junit/TestTransactions.java۞191۩}catch(Throwable e){e.printStackTrace();}
smallsql/junit/TestTransactions.java۞192۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞193۩}
smallsql/junit/TestTransactions.java۞194۩}
smallsql/junit/TestTransactions.java۞197۩private void testInsertRow_Last(Connection con, boolean callLastBefore) throws Exception{
smallsql/junit/TestTransactions.java۞198۩try{
smallsql/junit/TestTransactions.java۞199۩con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞200۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞202۩con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
smallsql/junit/TestTransactions.java۞204۩ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)
smallsql/junit/TestTransactions.java۞205۩.executeQuery("Select * from transactions Where 1=0");
smallsql/junit/TestTransactions.java۞207۩if(callLastBefore) rs.last();
smallsql/junit/TestTransactions.java۞208۩rs.moveToInsertRow();
smallsql/junit/TestTransactions.java۞209۩rs.updateString("v", "qwert2");
smallsql/junit/TestTransactions.java۞210۩rs.insertRow();
smallsql/junit/TestTransactions.java۞212۩rs.last();
smallsql/junit/TestTransactions.java۞213۩assertEquals("qwert2", rs.getString("v"));
smallsql/junit/TestTransactions.java۞214۩assertFalse( rs.next() );
smallsql/junit/TestTransactions.java۞215۩assertTrue( rs.previous() );
smallsql/junit/TestTransactions.java۞216۩assertEquals("qwert2", rs.getString("v"));
smallsql/junit/TestTransactions.java۞218۩rs.beforeFirst();
smallsql/junit/TestTransactions.java۞219۩assertTrue( rs.next() );
smallsql/junit/TestTransactions.java۞220۩assertEquals("qwert2", rs.getString("v"));
smallsql/junit/TestTransactions.java۞221۩assertFalse( rs.next() );
smallsql/junit/TestTransactions.java۞223۩}finally{
smallsql/junit/TestTransactions.java۞224۩try{
smallsql/junit/TestTransactions.java۞225۩con.createStatement().execute("Drop Table transactions");
smallsql/junit/TestTransactions.java۞226۩}catch(Throwable e){e.printStackTrace();}
smallsql/junit/TestTransactions.java۞227۩}
smallsql/junit/TestTransactions.java۞228۩}
smallsql/junit/TestTransactions.java۞231۩public void testInsertRow_Last() throws Exception{
smallsql/junit/TestTransactions.java۞232۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞233۩testInsertRow_Last(con, false);
smallsql/junit/TestTransactions.java۞234۩testInsertRow_Last(con, true);
smallsql/junit/TestTransactions.java۞235۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞236۩testInsertRow_Last(con, false);
smallsql/junit/TestTransactions.java۞237۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞238۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞239۩testInsertRow_Last(con, true);
smallsql/junit/TestTransactions.java۞240۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞241۩}
smallsql/junit/TestTransactions.java۞251۩public void testInsertAndUpdate() throws Exception{
smallsql/junit/TestTransactions.java۞252۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞253۩try{
smallsql/junit/TestTransactions.java۞254۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞255۩con.createStatement().execute("Create Table transactions ( v varchar(20))");
smallsql/junit/TestTransactions.java۞256۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞258۩assertEquals( 1, con.createStatement().executeUpdate("Insert Into transactions(v) Values('qwert')") );
smallsql/junit/TestTransactions.java۞259۩assertEqualsRsValue("qwert", "Select * from transactions");
smallsql/junit/TestTransactions.java۞260۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞262۩assertEquals( 1, con.createStatement().executeUpdate("Update transactions set v='qwert1'") );
smallsql/junit/TestTransactions.java۞263۩assertEqualsRsValue("qwert1", "Select * from transactions");
smallsql/junit/TestTransactions.java۞264۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞266۩assertEquals( 1, con.createStatement().executeUpdate("Update transactions set v='qwert2'") );
smallsql/junit/TestTransactions.java۞267۩assertEqualsRsValue("qwert2", "Select * from transactions");
smallsql/junit/TestTransactions.java۞268۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞270۩Savepoint savepoint = con.setSavepoint();
smallsql/junit/TestTransactions.java۞272۩assertEquals( 1, con.createStatement().executeUpdate("Update transactions set v='qwert 3'") );
smallsql/junit/TestTransactions.java۞273۩assertEqualsRsValue("qwert 3", "Select * from transactions");
smallsql/junit/TestTransactions.java۞274۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞276۩con.rollback( savepoint );
smallsql/junit/TestTransactions.java۞278۩con.commit();
smallsql/junit/TestTransactions.java۞279۩assertEqualsRsValue("qwert2", "Select * from transactions");
smallsql/junit/TestTransactions.java۞280۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞281۩}finally{
smallsql/junit/TestTransactions.java۞282۩try{
smallsql/junit/TestTransactions.java۞283۩con.createStatement().execute("Drop Table transactions");
smallsql/junit/TestTransactions.java۞284۩}catch(Throwable e){e.printStackTrace();}
smallsql/junit/TestTransactions.java۞285۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞286۩}
smallsql/junit/TestTransactions.java۞287۩}
smallsql/junit/TestTransactions.java۞293۩public void testUpdateAndSavepoint() throws Exception{
smallsql/junit/TestTransactions.java۞294۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞295۩try{
smallsql/junit/TestTransactions.java۞296۩con.createStatement().execute("Create Table transactions ( v varchar(20))");
smallsql/junit/TestTransactions.java۞297۩assertRowCount(0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞299۩assertEquals(1, con.createStatement().executeUpdate("Insert Into transactions(v) Values('qwert')"));
smallsql/junit/TestTransactions.java۞300۩assertEqualsRsValue("qwert", "Select * from transactions");
smallsql/junit/TestTransactions.java۞301۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞304۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞305۩assertEquals(1, con.createStatement().executeUpdate("Update transactions set v='qwert1'"));
smallsql/junit/TestTransactions.java۞306۩assertEqualsRsValue("qwert1", "Select * from transactions");
smallsql/junit/TestTransactions.java۞307۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞309۩assertEquals(1, con.createStatement().executeUpdate("Update transactions set v='qwert2'"));
smallsql/junit/TestTransactions.java۞310۩assertEqualsRsValue("qwert2", "Select * from transactions");
smallsql/junit/TestTransactions.java۞311۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞313۩Savepoint savepoint = con.setSavepoint();
smallsql/junit/TestTransactions.java۞315۩assertEquals(1, con.createStatement().executeUpdate("Update transactions set v='qwert 3'"));
smallsql/junit/TestTransactions.java۞316۩assertEqualsRsValue("qwert 3", "Select * from transactions");
smallsql/junit/TestTransactions.java۞317۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞319۩assertEquals(1, con.createStatement().executeUpdate("Update transactions set v='qwert 4'"));
smallsql/junit/TestTransactions.java۞320۩assertEqualsRsValue("qwert 4", "Select * from transactions");
smallsql/junit/TestTransactions.java۞321۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞323۩assertEquals(1, con.createStatement().executeUpdate("Update transactions set v='qwert 5'"));
smallsql/junit/TestTransactions.java۞324۩assertEqualsRsValue("qwert 5", "Select * from transactions");
smallsql/junit/TestTransactions.java۞325۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞327۩con.rollback(savepoint);
smallsql/junit/TestTransactions.java۞329۩con.commit();
smallsql/junit/TestTransactions.java۞330۩assertEqualsRsValue("qwert2", "Select * from transactions");
smallsql/junit/TestTransactions.java۞331۩assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞332۩}finally{
smallsql/junit/TestTransactions.java۞333۩dropTable(con, "transactions");
smallsql/junit/TestTransactions.java۞334۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞335۩}
smallsql/junit/TestTransactions.java۞336۩}
smallsql/junit/TestTransactions.java۞345۩public void testInsertRow_withWrongWhere() throws Exception{
smallsql/junit/TestTransactions.java۞346۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞347۩try{
smallsql/junit/TestTransactions.java۞348۩con.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞349۩con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞350۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞352۩con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
smallsql/junit/TestTransactions.java۞354۩ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)
smallsql/junit/TestTransactions.java۞355۩.executeQuery("Select * from transactions Where 1=0");
smallsql/junit/TestTransactions.java۞357۩rs.moveToInsertRow();
smallsql/junit/TestTransactions.java۞358۩rs.updateString("v", "qwert2");
smallsql/junit/TestTransactions.java۞359۩rs.insertRow();
smallsql/junit/TestTransactions.java۞361۩rs.beforeFirst();
smallsql/junit/TestTransactions.java۞362۩assertTrue( rs.next() );
smallsql/junit/TestTransactions.java۞363۩assertEquals("qwert2", rs.getString("v"));
smallsql/junit/TestTransactions.java۞364۩assertFalse( rs.next() );
smallsql/junit/TestTransactions.java۞365۩}finally{
smallsql/junit/TestTransactions.java۞366۩try{
smallsql/junit/TestTransactions.java۞367۩con.createStatement().execute("Drop Table transactions");
smallsql/junit/TestTransactions.java۞368۩}catch(Throwable e){e.printStackTrace();}
smallsql/junit/TestTransactions.java۞369۩con.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞370۩}
smallsql/junit/TestTransactions.java۞371۩}
smallsql/junit/TestTransactions.java۞378۩public void testInsertRow_withRightWhere() throws Exception{
smallsql/junit/TestTransactions.java۞379۩Connection con = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞380۩try{
smallsql/junit/TestTransactions.java۞381۩con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞382۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞384۩con.createStatement().execute("Insert Into transactions(v) Values('qwert2')");
smallsql/junit/TestTransactions.java۞386۩ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)
smallsql/junit/TestTransactions.java۞387۩.executeQuery("Select * from transactions Where v = 'qwert'");
smallsql/junit/TestTransactions.java۞389۩rs.moveToInsertRow();
smallsql/junit/TestTransactions.java۞390۩rs.updateString("v", "qwert");
smallsql/junit/TestTransactions.java۞391۩rs.insertRow();
smallsql/junit/TestTransactions.java۞393۩rs.beforeFirst();
smallsql/junit/TestTransactions.java۞394۩assertTrue( rs.next() );
smallsql/junit/TestTransactions.java۞395۩assertEquals("qwert", rs.getString("v"));
smallsql/junit/TestTransactions.java۞396۩assertFalse( rs.next() );
smallsql/junit/TestTransactions.java۞397۩}finally{
smallsql/junit/TestTransactions.java۞398۩try{
smallsql/junit/TestTransactions.java۞399۩con.createStatement().execute("Drop Table transactions");
smallsql/junit/TestTransactions.java۞400۩}catch(Throwable e){e.printStackTrace();}
smallsql/junit/TestTransactions.java۞401۩}
smallsql/junit/TestTransactions.java۞402۩}
smallsql/junit/TestTransactions.java۞405۩public void testReadUncommited() throws Exception{
smallsql/junit/TestTransactions.java۞406۩Connection con1 = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞407۩Connection con2 = AllTests.createConnection();
smallsql/junit/TestTransactions.java۞408۩try{
smallsql/junit/TestTransactions.java۞409۩con2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );
smallsql/junit/TestTransactions.java۞410۩con1.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞411۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞413۩con1.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞414۩con1.createStatement().execute("Insert Into transactions(v) Values('qwert2')");
smallsql/junit/TestTransactions.java۞416۩ResultSet rs2 = con2.createStatement().executeQuery("Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞417۩assertTrue( rs2.next() );
smallsql/junit/TestTransactions.java۞418۩assertEquals( 1, rs2.getInt(1) );
smallsql/junit/TestTransactions.java۞419۩}finally{
smallsql/junit/TestTransactions.java۞420۩dropTable(con1, "transactions");
smallsql/junit/TestTransactions.java۞421۩con1.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞422۩con2.close();
smallsql/junit/TestTransactions.java۞423۩}
smallsql/junit/TestTransactions.java۞424۩}
smallsql/junit/TestTransactions.java۞427۩public void testReadCommited() throws Exception{
smallsql/junit/TestTransactions.java۞428۩Connection con1 = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞429۩Connection con2 = AllTests.createConnection();
smallsql/junit/TestTransactions.java۞430۩try{
smallsql/junit/TestTransactions.java۞431۩con2.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );
smallsql/junit/TestTransactions.java۞432۩con1.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞433۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞435۩con1.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞436۩con1.createStatement().execute("Insert Into transactions(v) Values('qwert2')");
smallsql/junit/TestTransactions.java۞438۩ResultSet rs2 = con2.createStatement().executeQuery("Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞439۩assertTrue( rs2.next() );
smallsql/junit/TestTransactions.java۞440۩assertEquals( 0, rs2.getInt(1) );
smallsql/junit/TestTransactions.java۞441۩}finally{
smallsql/junit/TestTransactions.java۞442۩dropTable(con1, "transactions");
smallsql/junit/TestTransactions.java۞443۩con1.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞444۩con2.close();
smallsql/junit/TestTransactions.java۞445۩}
smallsql/junit/TestTransactions.java۞446۩}
smallsql/junit/TestTransactions.java۞449۩public void testReadSerialized() throws Exception{
smallsql/junit/TestTransactions.java۞450۩Connection con1 = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞451۩Connection con2 = AllTests.createConnection();
smallsql/junit/TestTransactions.java۞452۩try{
smallsql/junit/TestTransactions.java۞453۩con1.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞454۩assertRowCount( 0, "Select * from transactions");
smallsql/junit/TestTransactions.java۞455۩con1.createStatement().execute("Insert Into transactions(v) Values('qwert2')");
smallsql/junit/TestTransactions.java۞456۩assertRowCount( 1, "Select * from transactions");
smallsql/junit/TestTransactions.java۞458۩con1.setTransactionIsolation( Connection.TRANSACTION_SERIALIZABLE );
smallsql/junit/TestTransactions.java۞459۩con1.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞462۩ResultSet rs1 = con1.createStatement().executeQuery("Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞463۩assertTrue( rs1.next() );
smallsql/junit/TestTransactions.java۞464۩assertEquals( "Count(*)", 1, rs1.getInt(1) );
smallsql/junit/TestTransactions.java۞467۩ResultSet rs2 = con2.createStatement().executeQuery("Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞468۩assertTrue( rs2.next() );
smallsql/junit/TestTransactions.java۞469۩assertEquals( "Count(*)", 1, rs2.getInt(1) );
smallsql/junit/TestTransactions.java۞470۩try{
smallsql/junit/TestTransactions.java۞471۩con2.createStatement().execute("Insert Into transactions(v) Values('qwert3')");
smallsql/junit/TestTransactions.java۞472۩fail("TRANSACTION_SERIALIZABLE does not lock the table");
smallsql/junit/TestTransactions.java۞473۩}catch(SQLException ex){
smallsql/junit/TestTransactions.java۞474۩assertSQLException("01000", 0, ex);
smallsql/junit/TestTransactions.java۞475۩}
smallsql/junit/TestTransactions.java۞476۩}finally{
smallsql/junit/TestTransactions.java۞477۩con2.close();
smallsql/junit/TestTransactions.java۞478۩dropTable(con1, "transactions");
smallsql/junit/TestTransactions.java۞479۩con1.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞480۩}
smallsql/junit/TestTransactions.java۞481۩}
smallsql/junit/TestTransactions.java۞484۩public void testReadWriteLock() throws Exception{
smallsql/junit/TestTransactions.java۞485۩Connection con1 = AllTests.getConnection();
smallsql/junit/TestTransactions.java۞486۩Connection con2 = AllTests.createConnection();
smallsql/junit/TestTransactions.java۞487۩try{
smallsql/junit/TestTransactions.java۞488۩con1.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
smallsql/junit/TestTransactions.java۞489۩con1.createStatement().execute("Insert Into transactions(v) Values('qwert1')");
smallsql/junit/TestTransactions.java۞491۩con1.setAutoCommit(false);
smallsql/junit/TestTransactions.java۞492۩con1.createStatement().execute("Update transactions Set v = 'qwert'");
smallsql/junit/TestTransactions.java۞494۩long time = System.currentTimeMillis();
smallsql/junit/TestTransactions.java۞495۩try{
smallsql/junit/TestTransactions.java۞496۩con2.createStatement().executeQuery("Select count(*) from transactions");
smallsql/junit/TestTransactions.java۞497۩}catch(SQLException ex){
smallsql/junit/TestTransactions.java۞498۩assertSQLException("01000", 0, ex);
smallsql/junit/TestTransactions.java۞499۩}
smallsql/junit/TestTransactions.java۞500۩assertTrue("Wait time to small", System.currentTimeMillis()-time>=5000);
smallsql/junit/TestTransactions.java۞501۩}finally{
smallsql/junit/TestTransactions.java۞502۩con2.close();
smallsql/junit/TestTransactions.java۞503۩con1.setAutoCommit(true);
smallsql/junit/TestTransactions.java۞504۩dropTable(con1, "transactions");
smallsql/junit/TestTransactions.java۞505۩}
smallsql/junit/TestTransactions.java۞506۩}
smallsql/junit/TestTransactions.java۞509۩}
smallsql/tools/CommandLine.java۞4۩package smallsql.tools;
smallsql/tools/CommandLine.java۞6۩import java.io.*;
smallsql/tools/CommandLine.java۞7۩import java.sql.*;
smallsql/tools/CommandLine.java۞8۩import java.util.Properties;
smallsql/tools/CommandLine.java۞10۩import javax.swing.JOptionPane;
smallsql/tools/CommandLine.java۞12۩import smallsql.database.*;
smallsql/tools/CommandLine.java۞18۩public class CommandLine {
smallsql/tools/CommandLine.java۞21۩public static void main(String[] args) throws Exception {
smallsql/tools/CommandLine.java۞22۩System.out.println("SmallSQL Database command line tool\n");
smallsql/tools/CommandLine.java۞23۩Connection con = new SSDriver().connect("jdbc:smallsql", new Properties());
smallsql/tools/CommandLine.java۞24۩Statement st = con.createStatement();
smallsql/tools/CommandLine.java۞25۩if(args.length>0){
smallsql/tools/CommandLine.java۞26۩con.setCatalog(args[0]);
smallsql/tools/CommandLine.java۞27۩}
smallsql/tools/CommandLine.java۞28۩System.out.println("\tVersion: "+con.getMetaData().getDatabaseProductVersion());
smallsql/tools/CommandLine.java۞29۩System.out.println("\tCurrent database: "+con.getCatalog());
smallsql/tools/CommandLine.java۞30۩System.out.println();
smallsql/tools/CommandLine.java۞31۩System.out.println("\tUse the USE command to change the database context.");
smallsql/tools/CommandLine.java۞32۩System.out.println("\tType 2 times ENTER to execute any SQL command.");
smallsql/tools/CommandLine.java۞34۩StringBuffer command = new StringBuffer();
smallsql/tools/CommandLine.java۞35۩BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
smallsql/tools/CommandLine.java۞36۩while(true){
smallsql/tools/CommandLine.java۞37۩try {
smallsql/tools/CommandLine.java۞38۩String line;
smallsql/tools/CommandLine.java۞39۩try{
smallsql/tools/CommandLine.java۞40۩line = input.readLine();
smallsql/tools/CommandLine.java۞41۩}catch(IOException ex){
smallsql/tools/CommandLine.java۞42۩ex.printStackTrace();
smallsql/tools/CommandLine.java۞43۩JOptionPane.showMessageDialog( null, "You need to start the command line of the \nSmallSQL Database with a console window:\n\n       java -jar smallsql.jar\n\n" + ex, "Fatal Error", JOptionPane.OK_OPTION);
smallsql/tools/CommandLine.java۞44۩return;
smallsql/tools/CommandLine.java۞45۩}
smallsql/tools/CommandLine.java۞46۩if(line == null){
smallsql/tools/CommandLine.java۞47۩return;
smallsql/tools/CommandLine.java۞48۩}
smallsql/tools/CommandLine.java۞49۩if(line.length() == 0 && command.length() > 0){
smallsql/tools/CommandLine.java۞50۩boolean isRS = st.execute(command.toString());
smallsql/tools/CommandLine.java۞51۩if(isRS){
smallsql/tools/CommandLine.java۞52۩printRS(st.getResultSet());
smallsql/tools/CommandLine.java۞53۩}
smallsql/tools/CommandLine.java۞54۩command.setLength(0);
smallsql/tools/CommandLine.java۞55۩}
smallsql/tools/CommandLine.java۞56۩command.append(line).append('\n');
smallsql/tools/CommandLine.java۞57۩} catch (Exception e) {
smallsql/tools/CommandLine.java۞58۩command.setLength(0);
smallsql/tools/CommandLine.java۞59۩e.printStackTrace();
smallsql/tools/CommandLine.java۞60۩}
smallsql/tools/CommandLine.java۞61۩}
smallsql/tools/CommandLine.java۞63۩}
smallsql/tools/CommandLine.java۞66۩private static void printRS(ResultSet rs) throws SQLException {
smallsql/tools/CommandLine.java۞67۩ResultSetMetaData md = rs.getMetaData();
smallsql/tools/CommandLine.java۞68۩int count = md.getColumnCount();
smallsql/tools/CommandLine.java۞69۩for(int i=1; i<=count; i++){
smallsql/tools/CommandLine.java۞70۩System.out.print(md.getColumnLabel(i));
smallsql/tools/CommandLine.java۞71۩System.out.print('\t');
smallsql/tools/CommandLine.java۞72۩}
smallsql/tools/CommandLine.java۞73۩System.out.println();
smallsql/tools/CommandLine.java۞74۩while(rs.next()){
smallsql/tools/CommandLine.java۞75۩for(int i=1; i<=count; i++){
smallsql/tools/CommandLine.java۞76۩System.out.print(rs.getObject(i));
smallsql/tools/CommandLine.java۞77۩System.out.print('\t');
smallsql/tools/CommandLine.java۞78۩}
smallsql/tools/CommandLine.java۞79۩System.out.println();
smallsql/tools/CommandLine.java۞80۩}
smallsql/tools/CommandLine.java۞81۩}
smallsql/tools/CommandLine.java۞82۩}